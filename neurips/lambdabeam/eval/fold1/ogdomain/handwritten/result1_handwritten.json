{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 101.28883367800154,
            "num_unique_values": 1176,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.51775887943972,
                "explored_percent_lambda": 22.661330665332667,
                "explored_percent_none": 41.82091045522761,
                "kept_percent_concrete": 55.5746140651801,
                "kept_percent_lambda": 44.4253859348199,
                "num_examples": 3,
                "num_explored_concrete": 2130,
                "num_explored_lambda": 1359,
                "num_explored_none": 2508,
                "num_inputs": 2,
                "num_kept_concrete": 648,
                "num_kept_lambda": 518,
                "num_values_explored": 5997,
                "num_values_kept": 1166,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61664
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.996525481110439,
            "num_unique_values": 943,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 59.64043294808292,
                "explored_percent_lambda": 13.208585580627409,
                "explored_percent_none": 27.150981471289672,
                "kept_percent_concrete": 76.87366167023555,
                "kept_percent_lambda": 23.126338329764454,
                "num_examples": 5,
                "num_explored_concrete": 3251,
                "num_explored_lambda": 720,
                "num_explored_none": 1480,
                "num_inputs": 1,
                "num_kept_concrete": 718,
                "num_kept_lambda": 216,
                "num_values_explored": 5451,
                "num_values_kept": 934,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6851
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65423035388812,
            "num_unique_values": 1314,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.03151674326986,
                "explored_percent_lambda": 9.573210768220617,
                "explored_percent_none": 26.39527248850952,
                "kept_percent_concrete": 82.66871165644172,
                "kept_percent_lambda": 17.33128834355828,
                "num_examples": 5,
                "num_explored_concrete": 4876,
                "num_explored_lambda": 729,
                "num_explored_none": 2010,
                "num_inputs": 2,
                "num_kept_concrete": 1078,
                "num_kept_lambda": 226,
                "num_values_explored": 7615,
                "num_values_kept": 1304,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77903
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.37293329485692084,
            "num_unique_values": 288,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.44356955380577,
                "explored_percent_lambda": 34.90813648293963,
                "explored_percent_none": 13.648293963254593,
                "kept_percent_concrete": 51.971326164874554,
                "kept_percent_lambda": 48.028673835125446,
                "num_examples": 3,
                "num_explored_concrete": 392,
                "num_explored_lambda": 266,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 134,
                "num_values_explored": 762,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.620776111027226,
            "num_unique_values": 435,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1: Max(0, v1)))(u2)), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 32.923832923832926,
                "explored_percent_lambda": 27.616707616707618,
                "explored_percent_none": 39.45945945945946,
                "kept_percent_concrete": 64.78873239436619,
                "kept_percent_lambda": 35.2112676056338,
                "num_examples": 5,
                "num_explored_concrete": 670,
                "num_explored_lambda": 562,
                "num_explored_none": 803,
                "num_inputs": 1,
                "num_kept_concrete": 276,
                "num_kept_lambda": 150,
                "num_values_explored": 2035,
                "num_values_kept": 426,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3715
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68256858899258,
            "num_unique_values": 1226,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.39711417816813,
                "explored_percent_lambda": 20.48306148055207,
                "explored_percent_none": 36.1198243412798,
                "kept_percent_concrete": 58.7171052631579,
                "kept_percent_lambda": 41.2828947368421,
                "num_examples": 3,
                "num_explored_concrete": 2767,
                "num_explored_lambda": 1306,
                "num_explored_none": 2303,
                "num_inputs": 2,
                "num_kept_concrete": 714,
                "num_kept_lambda": 502,
                "num_values_explored": 6376,
                "num_values_kept": 1216,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64073
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76786902197637,
            "num_unique_values": 1105,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.82889733840304,
                "explored_percent_lambda": 19.543726235741445,
                "explored_percent_none": 33.627376425855516,
                "kept_percent_concrete": 55.85009140767824,
                "kept_percent_lambda": 44.14990859232176,
                "num_examples": 3,
                "num_explored_concrete": 3079,
                "num_explored_lambda": 1285,
                "num_explored_none": 2211,
                "num_inputs": 3,
                "num_kept_concrete": 611,
                "num_kept_lambda": 483,
                "num_values_explored": 6575,
                "num_values_kept": 1094,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66533
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67828583787195,
            "num_unique_values": 1194,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.50415512465374,
                "explored_percent_lambda": 9.45983379501385,
                "explored_percent_none": 27.03601108033241,
                "kept_percent_concrete": 79.57805907172995,
                "kept_percent_lambda": 20.421940928270043,
                "num_examples": 5,
                "num_explored_concrete": 4585,
                "num_explored_lambda": 683,
                "num_explored_none": 1952,
                "num_inputs": 1,
                "num_kept_concrete": 943,
                "num_kept_lambda": 242,
                "num_values_explored": 7220,
                "num_values_kept": 1185,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73130
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 88.88121051201597,
            "num_unique_values": 995,
            "solution": "IntDivide(Add(Last(x), Head(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.88953277797899,
                "explored_percent_lambda": 14.378848243390076,
                "explored_percent_none": 30.73161897863093,
                "kept_percent_concrete": 75.9634888438134,
                "kept_percent_lambda": 24.036511156186613,
                "num_examples": 5,
                "num_explored_concrete": 3031,
                "num_explored_lambda": 794,
                "num_explored_none": 1697,
                "num_inputs": 1,
                "num_kept_concrete": 749,
                "num_kept_lambda": 237,
                "num_values_explored": 5522,
                "num_values_kept": 986,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 64189
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6258593951352,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.00853177129759,
                "explored_percent_lambda": 8.149751687253278,
                "explored_percent_none": 30.841716541449127,
                "kept_percent_concrete": 86.45383951682484,
                "kept_percent_lambda": 13.546160483175152,
                "num_examples": 5,
                "num_explored_concrete": 4791,
                "num_explored_lambda": 640,
                "num_explored_none": 2422,
                "num_inputs": 2,
                "num_kept_concrete": 1002,
                "num_kept_lambda": 157,
                "num_values_explored": 7853,
                "num_values_kept": 1159,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77652
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78074996103533,
            "num_unique_values": 711,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 28.230616302186878,
                "explored_percent_lambda": 33.03038909400738,
                "explored_percent_none": 38.738994603805736,
                "kept_percent_concrete": 48.148148148148145,
                "kept_percent_lambda": 51.851851851851855,
                "num_examples": 3,
                "num_explored_concrete": 994,
                "num_explored_lambda": 1163,
                "num_explored_none": 1364,
                "num_inputs": 1,
                "num_kept_concrete": 338,
                "num_kept_lambda": 364,
                "num_values_explored": 3521,
                "num_values_kept": 702,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46902
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 36.09322096593678,
            "num_unique_values": 453,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 26.516634050880626,
                "explored_percent_lambda": 32.240704500978474,
                "explored_percent_none": 41.2426614481409,
                "kept_percent_concrete": 48.648648648648646,
                "kept_percent_lambda": 51.351351351351354,
                "num_examples": 3,
                "num_explored_concrete": 542,
                "num_explored_lambda": 659,
                "num_explored_none": 843,
                "num_inputs": 1,
                "num_kept_concrete": 216,
                "num_kept_lambda": 228,
                "num_values_explored": 2044,
                "num_values_kept": 444,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14185
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.68199929594994,
            "num_unique_values": 763,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.24556616643929,
                "explored_percent_lambda": 27.7762619372442,
                "explored_percent_none": 31.978171896316507,
                "kept_percent_concrete": 63.745019920318725,
                "kept_percent_lambda": 36.254980079681275,
                "num_examples": 3,
                "num_explored_concrete": 1475,
                "num_explored_lambda": 1018,
                "num_explored_none": 1172,
                "num_inputs": 2,
                "num_kept_concrete": 480,
                "num_kept_lambda": 273,
                "num_values_explored": 3665,
                "num_values_kept": 753,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42180
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.38645789003931,
            "num_unique_values": 661,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.904705417160933,
                "explored_percent_lambda": 36.5361803084223,
                "explored_percent_none": 34.559114274416764,
                "kept_percent_concrete": 45.0920245398773,
                "kept_percent_lambda": 54.9079754601227,
                "num_examples": 3,
                "num_explored_concrete": 731,
                "num_explored_lambda": 924,
                "num_explored_none": 874,
                "num_inputs": 1,
                "num_kept_concrete": 294,
                "num_kept_lambda": 358,
                "num_values_explored": 2529,
                "num_values_kept": 652,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14099
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81235009501688,
            "num_unique_values": 819,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.491530289979906,
                "explored_percent_lambda": 31.782945736434108,
                "explored_percent_none": 31.72552397358599,
                "kept_percent_concrete": 48.641975308641975,
                "kept_percent_lambda": 51.358024691358025,
                "num_examples": 3,
                "num_explored_concrete": 1271,
                "num_explored_lambda": 1107,
                "num_explored_none": 1105,
                "num_inputs": 1,
                "num_kept_concrete": 394,
                "num_kept_lambda": 416,
                "num_values_explored": 3483,
                "num_values_kept": 810,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 36543
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.26762261800468,
            "num_unique_values": 466,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 39.0990990990991,
                "explored_percent_lambda": 26.726726726726728,
                "explored_percent_none": 34.174174174174176,
                "kept_percent_concrete": 53.28947368421053,
                "kept_percent_lambda": 46.71052631578947,
                "num_examples": 3,
                "num_explored_concrete": 651,
                "num_explored_lambda": 445,
                "num_explored_none": 569,
                "num_inputs": 2,
                "num_kept_concrete": 243,
                "num_kept_lambda": 213,
                "num_values_explored": 1665,
                "num_values_kept": 456,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3065
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.62403884902596,
            "num_unique_values": 828,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.17599392251203,
                "explored_percent_lambda": 18.23246391491517,
                "explored_percent_none": 36.5915421625728,
                "kept_percent_concrete": 72.03907203907204,
                "kept_percent_lambda": 27.96092796092796,
                "num_examples": 5,
                "num_explored_concrete": 1784,
                "num_explored_lambda": 720,
                "num_explored_none": 1445,
                "num_inputs": 1,
                "num_kept_concrete": 590,
                "num_kept_lambda": 229,
                "num_values_explored": 3949,
                "num_values_kept": 819,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43009
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.60827386379242,
            "num_unique_values": 769,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.03019538188277,
                "explored_percent_lambda": 24.917533620908397,
                "explored_percent_none": 34.05227099720883,
                "kept_percent_concrete": 54.281949934123844,
                "kept_percent_lambda": 45.718050065876156,
                "num_examples": 3,
                "num_explored_concrete": 1617,
                "num_explored_lambda": 982,
                "num_explored_none": 1342,
                "num_inputs": 2,
                "num_kept_concrete": 412,
                "num_kept_lambda": 347,
                "num_values_explored": 3941,
                "num_values_kept": 759,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41401
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.853319701971486,
            "num_unique_values": 251,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.270440251572328,
                "explored_percent_lambda": 31.097134870719778,
                "explored_percent_none": 45.6324248777079,
                "kept_percent_concrete": 52.06611570247934,
                "kept_percent_lambda": 47.93388429752066,
                "num_examples": 5,
                "num_explored_concrete": 333,
                "num_explored_lambda": 445,
                "num_explored_none": 653,
                "num_inputs": 1,
                "num_kept_concrete": 126,
                "num_kept_lambda": 116,
                "num_values_explored": 1431,
                "num_values_kept": 242,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 19622
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69233628897928,
            "num_unique_values": 788,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.477054967221385,
                "explored_percent_lambda": 21.936459909228443,
                "explored_percent_none": 39.586485123550176,
                "kept_percent_concrete": 55.98455598455598,
                "kept_percent_lambda": 44.01544401544402,
                "num_examples": 3,
                "num_explored_concrete": 1526,
                "num_explored_lambda": 870,
                "num_explored_none": 1570,
                "num_inputs": 3,
                "num_kept_concrete": 435,
                "num_kept_lambda": 342,
                "num_values_explored": 3966,
                "num_values_kept": 777,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 40104
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26246533496305,
            "num_unique_values": 854,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.614403600900225,
                "explored_percent_lambda": 15.95398849712428,
                "explored_percent_none": 26.431607901975493,
                "kept_percent_concrete": 75.62130177514793,
                "kept_percent_lambda": 24.37869822485207,
                "num_examples": 5,
                "num_explored_concrete": 2304,
                "num_explored_lambda": 638,
                "num_explored_none": 1057,
                "num_inputs": 1,
                "num_kept_concrete": 639,
                "num_kept_lambda": 206,
                "num_values_explored": 3999,
                "num_values_kept": 845,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42462
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80084039713256,
            "num_unique_values": 781,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.62978968596946,
                "explored_percent_lambda": 30.048977239988474,
                "explored_percent_none": 35.32123307404206,
                "kept_percent_concrete": 53.75647668393783,
                "kept_percent_lambda": 46.24352331606217,
                "num_examples": 3,
                "num_explored_concrete": 1202,
                "num_explored_lambda": 1043,
                "num_explored_none": 1226,
                "num_inputs": 1,
                "num_kept_concrete": 415,
                "num_kept_lambda": 357,
                "num_values_explored": 3471,
                "num_values_kept": 772,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 36860
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8606044370681,
            "num_unique_values": 1234,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.37291280148423,
                "explored_percent_lambda": 25.53550345758138,
                "explored_percent_none": 33.09158374093439,
                "kept_percent_concrete": 53.18627450980392,
                "kept_percent_lambda": 46.81372549019608,
                "num_examples": 3,
                "num_explored_concrete": 2453,
                "num_explored_lambda": 1514,
                "num_explored_none": 1962,
                "num_inputs": 2,
                "num_kept_concrete": 651,
                "num_kept_lambda": 573,
                "num_values_explored": 5929,
                "num_values_kept": 1224,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60061
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24335732404142618,
            "num_unique_values": 201,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.80467091295117,
                "explored_percent_lambda": 30.573248407643312,
                "explored_percent_none": 17.62208067940552,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 144,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 80,
                "num_values_explored": 471,
                "num_values_kept": 192,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80751208192669,
            "num_unique_values": 1271,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.29599456890699,
                "explored_percent_lambda": 25.93346911065852,
                "explored_percent_none": 30.770536320434488,
                "kept_percent_concrete": 53.961965134706816,
                "kept_percent_lambda": 46.038034865293184,
                "num_examples": 3,
                "num_explored_concrete": 2551,
                "num_explored_lambda": 1528,
                "num_explored_none": 1813,
                "num_inputs": 1,
                "num_kept_concrete": 681,
                "num_kept_lambda": 581,
                "num_values_explored": 5892,
                "num_values_kept": 1262,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60024
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96623008092865,
            "num_unique_values": 1203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.696979486351154,
                "explored_percent_lambda": 28.153771603941205,
                "explored_percent_none": 36.14924890970764,
                "kept_percent_concrete": 52.345058626465665,
                "kept_percent_lambda": 47.654941373534335,
                "num_examples": 3,
                "num_explored_concrete": 2210,
                "num_explored_lambda": 1743,
                "num_explored_none": 2238,
                "num_inputs": 1,
                "num_kept_concrete": 625,
                "num_kept_lambda": 569,
                "num_values_explored": 6191,
                "num_values_kept": 1194,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62348
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18362067686393857,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.1219512195122,
                "explored_percent_lambda": 40.24390243902439,
                "explored_percent_none": 14.634146341463415,
                "kept_percent_concrete": 47.61904761904762,
                "kept_percent_lambda": 52.38095238095238,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 99,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 77,
                "num_values_explored": 246,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 246
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74844277114607,
            "num_unique_values": 1220,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.33464502377439,
                "explored_percent_lambda": 25.61075586161666,
                "explored_percent_none": 33.054599114608955,
                "kept_percent_concrete": 53.509496284062756,
                "kept_percent_lambda": 46.490503715937244,
                "num_examples": 3,
                "num_explored_concrete": 2521,
                "num_explored_lambda": 1562,
                "num_explored_none": 2016,
                "num_inputs": 1,
                "num_kept_concrete": 648,
                "num_kept_lambda": 563,
                "num_values_explored": 6099,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61171
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.879065806977451,
            "num_unique_values": 733,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.23529411764706,
                "explored_percent_lambda": 8.352941176470589,
                "explored_percent_none": 39.411764705882355,
                "kept_percent_concrete": 86.99861687413555,
                "kept_percent_lambda": 13.001383125864454,
                "num_examples": 5,
                "num_explored_concrete": 2220,
                "num_explored_lambda": 355,
                "num_explored_none": 1675,
                "num_inputs": 2,
                "num_kept_concrete": 629,
                "num_kept_lambda": 94,
                "num_values_explored": 4250,
                "num_values_kept": 723,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5930
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71143434988335,
            "num_unique_values": 1231,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.28309440785225,
                "explored_percent_lambda": 10.693529639674544,
                "explored_percent_none": 33.0233759524732,
                "kept_percent_concrete": 81.24488124488124,
                "kept_percent_lambda": 18.755118755118755,
                "num_examples": 5,
                "num_explored_concrete": 4358,
                "num_explored_lambda": 828,
                "num_explored_none": 2557,
                "num_inputs": 2,
                "num_kept_concrete": 992,
                "num_kept_lambda": 229,
                "num_values_explored": 7743,
                "num_values_kept": 1221,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79028
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24104961194097996,
            "num_unique_values": 222,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 49.010989010989015,
                "explored_percent_lambda": 30.10989010989011,
                "explored_percent_none": 20.87912087912088,
                "kept_percent_concrete": 57.27699530516432,
                "kept_percent_lambda": 42.72300469483568,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 137,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 91,
                "num_values_explored": 455,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 455
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67537663714029,
            "num_unique_values": 1391,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.22666250390259,
                "explored_percent_lambda": 19.91882610053075,
                "explored_percent_none": 21.854511395566657,
                "kept_percent_concrete": 59.30485155684287,
                "kept_percent_lambda": 40.69514844315713,
                "num_examples": 3,
                "num_explored_concrete": 3730,
                "num_explored_lambda": 1276,
                "num_explored_none": 1400,
                "num_inputs": 2,
                "num_kept_concrete": 819,
                "num_kept_lambda": 562,
                "num_values_explored": 6406,
                "num_values_kept": 1381,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64528
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79088856093585,
            "num_unique_values": 1188,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.35657089024965,
                "explored_percent_lambda": 22.248390642173025,
                "explored_percent_none": 36.39503846757733,
                "kept_percent_concrete": 56.7062818336163,
                "kept_percent_lambda": 43.2937181663837,
                "num_examples": 3,
                "num_explored_concrete": 2634,
                "num_explored_lambda": 1417,
                "num_explored_none": 2318,
                "num_inputs": 2,
                "num_kept_concrete": 668,
                "num_kept_lambda": 510,
                "num_values_explored": 6369,
                "num_values_kept": 1178,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64843
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8978544110432267,
            "num_unique_values": 262,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 26.448362720403022,
                "explored_percent_lambda": 35.13853904282116,
                "explored_percent_none": 38.41309823677582,
                "kept_percent_concrete": 44.44444444444444,
                "kept_percent_lambda": 55.55555555555556,
                "num_examples": 3,
                "num_explored_concrete": 210,
                "num_explored_lambda": 279,
                "num_explored_none": 305,
                "num_inputs": 2,
                "num_kept_concrete": 112,
                "num_kept_lambda": 140,
                "num_values_explored": 794,
                "num_values_kept": 252,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2474
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.63024602900259,
            "num_unique_values": 1225,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.699396739828,
                "explored_percent_lambda": 11.230907457322552,
                "explored_percent_none": 27.06969580284944,
                "kept_percent_concrete": 77.36625514403292,
                "kept_percent_lambda": 22.633744855967077,
                "num_examples": 5,
                "num_explored_concrete": 4807,
                "num_explored_lambda": 875,
                "num_explored_none": 2109,
                "num_inputs": 2,
                "num_kept_concrete": 940,
                "num_kept_lambda": 275,
                "num_values_explored": 7791,
                "num_values_kept": 1215,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78871
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4237894599791616,
            "num_unique_values": 274,
            "solution": "Reverse(Sort(Drop(Sum(Map((lambda u1: -1), Sort(Take(n, x)))), x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.691275167785236,
                "explored_percent_lambda": 36.241610738255034,
                "explored_percent_none": 10.06711409395973,
                "kept_percent_concrete": 51.89393939393939,
                "kept_percent_lambda": 48.10606060606061,
                "num_examples": 3,
                "num_explored_concrete": 560,
                "num_explored_lambda": 378,
                "num_explored_none": 105,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 127,
                "num_values_explored": 1043,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1043
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7554249339737,
            "num_unique_values": 1401,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.221899506244554,
                "explored_percent_lambda": 22.03020621550973,
                "explored_percent_none": 25.747894278245717,
                "kept_percent_concrete": 58.59094176851186,
                "kept_percent_lambda": 41.40905823148814,
                "num_examples": 3,
                "num_explored_concrete": 3596,
                "num_explored_lambda": 1517,
                "num_explored_none": 1773,
                "num_inputs": 2,
                "num_kept_concrete": 815,
                "num_kept_lambda": 576,
                "num_values_explored": 6886,
                "num_values_kept": 1391,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69777
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88518225587904,
            "num_unique_values": 1303,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.00826019617966,
                "explored_percent_lambda": 9.86060918946825,
                "explored_percent_none": 33.13113061435209,
                "kept_percent_concrete": 81.59319412219644,
                "kept_percent_lambda": 18.406805877803556,
                "num_examples": 5,
                "num_explored_concrete": 4417,
                "num_explored_lambda": 764,
                "num_explored_none": 2567,
                "num_inputs": 2,
                "num_kept_concrete": 1055,
                "num_kept_lambda": 238,
                "num_values_explored": 7748,
                "num_values_kept": 1293,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 81113
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24317928520031273,
            "num_unique_values": 225,
            "solution": "Sum(Map((lambda u1: 1), x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 54.69061876247505,
                "explored_percent_lambda": 25.548902195608783,
                "explored_percent_none": 19.760479041916167,
                "kept_percent_concrete": 65.74074074074075,
                "kept_percent_lambda": 34.25925925925926,
                "num_examples": 5,
                "num_explored_concrete": 274,
                "num_explored_lambda": 128,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 142,
                "num_kept_lambda": 74,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.378407826879993,
            "num_unique_values": 995,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Max(((lambda v1: Subtract(0, v1)))(v1), v1)))(u2)), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 38.82555388255539,
                "explored_percent_lambda": 25.833512583351258,
                "explored_percent_none": 35.34093353409335,
                "kept_percent_concrete": 53.75253549695741,
                "kept_percent_lambda": 46.24746450304259,
                "num_examples": 3,
                "num_explored_concrete": 1805,
                "num_explored_lambda": 1201,
                "num_explored_none": 1643,
                "num_inputs": 1,
                "num_kept_concrete": 530,
                "num_kept_lambda": 456,
                "num_values_explored": 4649,
                "num_values_kept": 986,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18080
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8603323190473,
            "num_unique_values": 1276,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.584640792733275,
                "explored_percent_lambda": 24.508670520231213,
                "explored_percent_none": 22.90668868703551,
                "kept_percent_concrete": 54.538279400157855,
                "kept_percent_lambda": 45.461720599842145,
                "num_examples": 3,
                "num_explored_concrete": 3184,
                "num_explored_lambda": 1484,
                "num_explored_none": 1387,
                "num_inputs": 1,
                "num_kept_concrete": 691,
                "num_kept_lambda": 576,
                "num_values_explored": 6055,
                "num_values_kept": 1267,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62470
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13966156099922955,
            "num_unique_values": 90,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.416666666666664,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 24.166666666666668,
                "kept_percent_concrete": 32.098765432098766,
                "kept_percent_lambda": 67.90123456790124,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 85,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 55,
                "num_values_explored": 240,
                "num_values_kept": 81,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6359920881222934,
            "num_unique_values": 406,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.10911808669656,
                "explored_percent_lambda": 35.72496263079223,
                "explored_percent_none": 31.16591928251121,
                "kept_percent_concrete": 47.848101265822784,
                "kept_percent_lambda": 52.151898734177216,
                "num_examples": 3,
                "num_explored_concrete": 443,
                "num_explored_lambda": 478,
                "num_explored_none": 417,
                "num_inputs": 3,
                "num_kept_concrete": 189,
                "num_kept_lambda": 206,
                "num_values_explored": 1338,
                "num_values_kept": 395,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2458
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87184857903048,
            "num_unique_values": 1392,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.66133518776078,
                "explored_percent_lambda": 26.495132127955493,
                "explored_percent_none": 24.843532684283726,
                "kept_percent_concrete": 57.41142443962401,
                "kept_percent_lambda": 42.58857556037599,
                "num_examples": 3,
                "num_explored_concrete": 2799,
                "num_explored_lambda": 1524,
                "num_explored_none": 1429,
                "num_inputs": 1,
                "num_kept_concrete": 794,
                "num_kept_lambda": 589,
                "num_values_explored": 5752,
                "num_values_kept": 1383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59853
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79952228697948,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.30990415335463,
                "explored_percent_lambda": 25.830670926517573,
                "explored_percent_none": 32.85942492012779,
                "kept_percent_concrete": 53.78514780100937,
                "kept_percent_lambda": 46.21485219899063,
                "num_examples": 3,
                "num_explored_concrete": 2586,
                "num_explored_lambda": 1617,
                "num_explored_none": 2057,
                "num_inputs": 2,
                "num_kept_concrete": 746,
                "num_kept_lambda": 641,
                "num_values_explored": 6260,
                "num_values_kept": 1387,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63073
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79280274594203,
            "num_unique_values": 1278,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.11751395383919,
                "explored_percent_lambda": 19.595715794237442,
                "explored_percent_none": 31.286770251923368,
                "kept_percent_concrete": 62.50986582478295,
                "kept_percent_lambda": 37.49013417521705,
                "num_examples": 3,
                "num_explored_concrete": 3256,
                "num_explored_lambda": 1299,
                "num_explored_none": 2074,
                "num_inputs": 3,
                "num_kept_concrete": 792,
                "num_kept_lambda": 475,
                "num_values_explored": 6629,
                "num_values_kept": 1267,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66753
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.69012115499936,
            "num_unique_values": 222,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 12.24818694601128,
                "explored_percent_lambda": 39.00080580177276,
                "explored_percent_none": 48.751007252215956,
                "kept_percent_concrete": 36.61971830985915,
                "kept_percent_lambda": 63.38028169014085,
                "num_examples": 3,
                "num_explored_concrete": 152,
                "num_explored_lambda": 484,
                "num_explored_none": 605,
                "num_inputs": 1,
                "num_kept_concrete": 78,
                "num_kept_lambda": 135,
                "num_values_explored": 1241,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8656
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.662249780027196,
            "num_unique_values": 460,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 22.341799397331037,
                "explored_percent_lambda": 36.030994403788206,
                "explored_percent_none": 41.62720619888076,
                "kept_percent_concrete": 47.671840354767184,
                "kept_percent_lambda": 52.328159645232816,
                "num_examples": 3,
                "num_explored_concrete": 519,
                "num_explored_lambda": 837,
                "num_explored_none": 967,
                "num_inputs": 1,
                "num_kept_concrete": 215,
                "num_kept_lambda": 236,
                "num_values_explored": 2323,
                "num_values_kept": 451,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15827
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7668989810627,
            "num_unique_values": 1288,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.89504887037334,
                "explored_percent_lambda": 22.36821022272072,
                "explored_percent_none": 22.736740906905943,
                "kept_percent_concrete": 54.96481626270524,
                "kept_percent_lambda": 45.03518373729476,
                "num_examples": 3,
                "num_explored_concrete": 3426,
                "num_explored_lambda": 1396,
                "num_explored_none": 1419,
                "num_inputs": 1,
                "num_kept_concrete": 703,
                "num_kept_lambda": 576,
                "num_values_explored": 6241,
                "num_values_kept": 1279,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64039
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70668017305434,
            "num_unique_values": 1335,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.692628650904034,
                "explored_percent_lambda": 10.228853205209255,
                "explored_percent_none": 31.07851814388671,
                "kept_percent_concrete": 80.75471698113208,
                "kept_percent_lambda": 19.245283018867923,
                "num_examples": 5,
                "num_explored_concrete": 4642,
                "num_explored_lambda": 809,
                "num_explored_none": 2458,
                "num_inputs": 2,
                "num_kept_concrete": 1070,
                "num_kept_lambda": 255,
                "num_values_explored": 7909,
                "num_values_kept": 1325,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 81803
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}