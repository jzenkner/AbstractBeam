{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 101.18285563006066,
            "num_unique_values": 1150,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.80055210489993,
                "explored_percent_lambda": 24.17184265010352,
                "explored_percent_none": 40.02760524499655,
                "kept_percent_concrete": 53.68421052631579,
                "kept_percent_lambda": 46.31578947368421,
                "num_examples": 3,
                "num_explored_concrete": 2075,
                "num_explored_lambda": 1401,
                "num_explored_none": 2320,
                "num_inputs": 2,
                "num_kept_concrete": 612,
                "num_kept_lambda": 528,
                "num_values_explored": 5796,
                "num_values_kept": 1140,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61568
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.188017930136994,
            "num_unique_values": 713,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 52.57276507276507,
                "explored_percent_lambda": 16.528066528066528,
                "explored_percent_none": 30.8991683991684,
                "kept_percent_concrete": 72.72727272727273,
                "kept_percent_lambda": 27.272727272727273,
                "num_examples": 5,
                "num_explored_concrete": 2023,
                "num_explored_lambda": 636,
                "num_explored_none": 1189,
                "num_inputs": 1,
                "num_kept_concrete": 512,
                "num_kept_lambda": 192,
                "num_values_explored": 3848,
                "num_values_kept": 704,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 12389
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71418242482468,
            "num_unique_values": 1191,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.7831541218638,
                "explored_percent_lambda": 9.602747909199522,
                "explored_percent_none": 28.61409796893668,
                "kept_percent_concrete": 82.30313293818797,
                "kept_percent_lambda": 17.696867061812025,
                "num_examples": 5,
                "num_explored_concrete": 4137,
                "num_explored_lambda": 643,
                "num_explored_none": 1916,
                "num_inputs": 2,
                "num_kept_concrete": 972,
                "num_kept_lambda": 209,
                "num_values_explored": 6696,
                "num_values_kept": 1181,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70686
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.37866116501390934,
            "num_unique_values": 288,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.44356955380577,
                "explored_percent_lambda": 34.90813648293963,
                "explored_percent_none": 13.648293963254593,
                "kept_percent_concrete": 51.971326164874554,
                "kept_percent_lambda": 48.028673835125446,
                "num_examples": 3,
                "num_explored_concrete": 392,
                "num_explored_lambda": 266,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 134,
                "num_values_explored": 762,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.070030688075349,
            "num_unique_values": 688,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Less(((lambda v1: Subtract(4, v1)))(v1), 4)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 46.93269803454437,
                "explored_percent_lambda": 19.23764145324598,
                "explored_percent_none": 33.82966051220965,
                "kept_percent_concrete": 71.42857142857143,
                "kept_percent_lambda": 28.571428571428573,
                "num_examples": 5,
                "num_explored_concrete": 1576,
                "num_explored_lambda": 646,
                "num_explored_none": 1136,
                "num_inputs": 1,
                "num_kept_concrete": 485,
                "num_kept_lambda": 194,
                "num_values_explored": 3358,
                "num_values_kept": 679,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5038
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68525425414555,
            "num_unique_values": 1112,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.67986552110572,
                "explored_percent_lambda": 24.26223384385506,
                "explored_percent_none": 35.057900635039225,
                "kept_percent_concrete": 52.994555353901994,
                "kept_percent_lambda": 47.005444646098006,
                "num_examples": 3,
                "num_explored_concrete": 2178,
                "num_explored_lambda": 1299,
                "num_explored_none": 1877,
                "num_inputs": 2,
                "num_kept_concrete": 584,
                "num_kept_lambda": 518,
                "num_values_explored": 5354,
                "num_values_kept": 1102,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55667
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82250471715815,
            "num_unique_values": 987,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.80193738107594,
                "explored_percent_lambda": 18.733783082511675,
                "explored_percent_none": 36.464279536412384,
                "kept_percent_concrete": 59.118852459016395,
                "kept_percent_lambda": 40.881147540983605,
                "num_examples": 3,
                "num_explored_concrete": 2590,
                "num_explored_lambda": 1083,
                "num_explored_none": 2108,
                "num_inputs": 3,
                "num_kept_concrete": 577,
                "num_kept_lambda": 399,
                "num_values_explored": 5781,
                "num_values_kept": 976,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59631
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7647149648983,
            "num_unique_values": 1089,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.22623723487824,
                "explored_percent_lambda": 11.516103692065986,
                "explored_percent_none": 24.257659073055773,
                "kept_percent_concrete": 77.4074074074074,
                "kept_percent_lambda": 22.59259259259259,
                "num_examples": 5,
                "num_explored_concrete": 4088,
                "num_explored_lambda": 733,
                "num_explored_none": 1544,
                "num_inputs": 1,
                "num_kept_concrete": 836,
                "num_kept_lambda": 244,
                "num_values_explored": 6365,
                "num_values_kept": 1080,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63123
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.029630097793415,
            "num_unique_values": 994,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 55.559471365638764,
                "explored_percent_lambda": 13.90308370044053,
                "explored_percent_none": 30.537444933920703,
                "kept_percent_concrete": 77.66497461928934,
                "kept_percent_lambda": 22.33502538071066,
                "num_examples": 5,
                "num_explored_concrete": 3153,
                "num_explored_lambda": 789,
                "num_explored_none": 1733,
                "num_inputs": 1,
                "num_kept_concrete": 765,
                "num_kept_lambda": 220,
                "num_values_explored": 5675,
                "num_values_kept": 985,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 38055
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71835272805765,
            "num_unique_values": 1082,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.577080491132335,
                "explored_percent_lambda": 7.939972714870396,
                "explored_percent_none": 32.48294679399727,
                "kept_percent_concrete": 85.07462686567165,
                "kept_percent_lambda": 14.925373134328359,
                "num_examples": 5,
                "num_explored_concrete": 4367,
                "num_explored_lambda": 582,
                "num_explored_none": 2381,
                "num_inputs": 2,
                "num_kept_concrete": 912,
                "num_kept_lambda": 160,
                "num_values_explored": 7330,
                "num_values_kept": 1072,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69979
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10887893708423,
            "num_unique_values": 884,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.208906217935564,
                "explored_percent_lambda": 32.136261030166224,
                "explored_percent_none": 33.65483275189821,
                "kept_percent_concrete": 46.4,
                "kept_percent_lambda": 53.6,
                "num_examples": 3,
                "num_explored_concrete": 1667,
                "num_explored_lambda": 1566,
                "num_explored_none": 1640,
                "num_inputs": 1,
                "num_kept_concrete": 406,
                "num_kept_lambda": 469,
                "num_values_explored": 4873,
                "num_values_kept": 875,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52128
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.354269609088078,
            "num_unique_values": 445,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.729571984435797,
                "explored_percent_lambda": 32.44163424124513,
                "explored_percent_none": 41.82879377431907,
                "kept_percent_concrete": 49.31192660550459,
                "kept_percent_lambda": 50.68807339449541,
                "num_examples": 3,
                "num_explored_concrete": 529,
                "num_explored_lambda": 667,
                "num_explored_none": 860,
                "num_inputs": 1,
                "num_kept_concrete": 215,
                "num_kept_lambda": 221,
                "num_values_explored": 2056,
                "num_values_kept": 436,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3456
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02709536789916,
            "num_unique_values": 1161,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.87376725838264,
                "explored_percent_lambda": 20.299145299145298,
                "explored_percent_none": 27.82708744247206,
                "kept_percent_concrete": 65.24761077324067,
                "kept_percent_lambda": 34.75238922675934,
                "num_examples": 3,
                "num_explored_concrete": 3156,
                "num_explored_lambda": 1235,
                "num_explored_none": 1693,
                "num_inputs": 2,
                "num_kept_concrete": 751,
                "num_kept_lambda": 400,
                "num_values_explored": 6084,
                "num_values_kept": 1151,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64981
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.702607674058527,
            "num_unique_values": 761,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(Last(x), v1)))(u1)), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 34.55978975032851,
                "explored_percent_lambda": 30.321944809461236,
                "explored_percent_none": 35.11826544021025,
                "kept_percent_concrete": 51.994680851063826,
                "kept_percent_lambda": 48.005319148936174,
                "num_examples": 3,
                "num_explored_concrete": 1052,
                "num_explored_lambda": 923,
                "num_explored_none": 1069,
                "num_inputs": 1,
                "num_kept_concrete": 391,
                "num_kept_lambda": 361,
                "num_values_explored": 3044,
                "num_values_kept": 752,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4444
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9633733050432,
            "num_unique_values": 1141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.80165289256198,
                "explored_percent_lambda": 27.362558390226376,
                "explored_percent_none": 28.835788717211642,
                "kept_percent_concrete": 49.381625441696116,
                "kept_percent_lambda": 50.618374558303884,
                "num_examples": 3,
                "num_explored_concrete": 2438,
                "num_explored_lambda": 1523,
                "num_explored_none": 1605,
                "num_inputs": 1,
                "num_kept_concrete": 559,
                "num_kept_lambda": 573,
                "num_values_explored": 5566,
                "num_values_kept": 1132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53522
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.295106806093827,
            "num_unique_values": 440,
            "solution": "Take(Subtract(1, n), Take(-1, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 39.14670658682635,
                "explored_percent_lambda": 32.55988023952096,
                "explored_percent_none": 28.293413173652695,
                "kept_percent_concrete": 48.372093023255815,
                "kept_percent_lambda": 51.627906976744185,
                "num_examples": 3,
                "num_explored_concrete": 523,
                "num_explored_lambda": 435,
                "num_explored_none": 378,
                "num_inputs": 2,
                "num_kept_concrete": 208,
                "num_kept_lambda": 222,
                "num_values_explored": 1336,
                "num_values_kept": 430,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2736
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02293639909476,
            "num_unique_values": 1098,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.77686989314896,
                "explored_percent_lambda": 14.016341923318668,
                "explored_percent_none": 31.20678818353237,
                "kept_percent_concrete": 75.02295684113867,
                "kept_percent_lambda": 24.977043158861342,
                "num_examples": 5,
                "num_explored_concrete": 3486,
                "num_explored_lambda": 892,
                "num_explored_none": 1986,
                "num_inputs": 1,
                "num_kept_concrete": 817,
                "num_kept_lambda": 272,
                "num_values_explored": 6364,
                "num_values_kept": 1089,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64634
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90589744108729,
            "num_unique_values": 955,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.13170205109752,
                "explored_percent_lambda": 23.461676862180642,
                "explored_percent_none": 30.40662108672184,
                "kept_percent_concrete": 54.4973544973545,
                "kept_percent_lambda": 45.5026455026455,
                "num_examples": 3,
                "num_explored_concrete": 2564,
                "num_explored_lambda": 1304,
                "num_explored_none": 1690,
                "num_inputs": 2,
                "num_kept_concrete": 515,
                "num_kept_lambda": 430,
                "num_values_explored": 5558,
                "num_values_kept": 945,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58721
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.2323721840512,
            "num_unique_values": 525,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 38.13354786806114,
                "explored_percent_lambda": 22.888173773129527,
                "explored_percent_none": 38.978278358809334,
                "kept_percent_concrete": 72.67441860465117,
                "kept_percent_lambda": 27.325581395348838,
                "num_examples": 5,
                "num_explored_concrete": 948,
                "num_explored_lambda": 569,
                "num_explored_none": 969,
                "num_inputs": 1,
                "num_kept_concrete": 375,
                "num_kept_lambda": 141,
                "num_values_explored": 2486,
                "num_values_kept": 516,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10795
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77682827599347,
            "num_unique_values": 1058,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.547020818377604,
                "explored_percent_lambda": 21.7516152189519,
                "explored_percent_none": 36.7013639626705,
                "kept_percent_concrete": 54.72779369627507,
                "kept_percent_lambda": 45.27220630372493,
                "num_examples": 3,
                "num_explored_concrete": 2315,
                "num_explored_lambda": 1212,
                "num_explored_none": 2045,
                "num_inputs": 3,
                "num_kept_concrete": 573,
                "num_kept_lambda": 474,
                "num_values_explored": 5572,
                "num_values_kept": 1047,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57422
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 63.80641491012648,
            "num_unique_values": 489,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, Last(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.666169895678095,
                "explored_percent_lambda": 25.981122702434178,
                "explored_percent_none": 30.35270740188773,
                "kept_percent_concrete": 67.91666666666667,
                "kept_percent_lambda": 32.083333333333336,
                "num_examples": 5,
                "num_explored_concrete": 879,
                "num_explored_lambda": 523,
                "num_explored_none": 611,
                "num_inputs": 1,
                "num_kept_concrete": 326,
                "num_kept_lambda": 154,
                "num_values_explored": 2013,
                "num_values_kept": 480,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 41057
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26682181400247,
            "num_unique_values": 1112,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.22038567493113,
                "explored_percent_lambda": 27.469500196772923,
                "explored_percent_none": 32.31011412829594,
                "kept_percent_concrete": 51.58658204895739,
                "kept_percent_lambda": 48.41341795104261,
                "num_examples": 3,
                "num_explored_concrete": 2044,
                "num_explored_lambda": 1396,
                "num_explored_none": 1642,
                "num_inputs": 1,
                "num_kept_concrete": 569,
                "num_kept_lambda": 534,
                "num_values_explored": 5082,
                "num_values_kept": 1103,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54178
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84924517106265,
            "num_unique_values": 1238,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.844807271503115,
                "explored_percent_lambda": 25.938394209729,
                "explored_percent_none": 32.21679851876788,
                "kept_percent_concrete": 52.76872964169381,
                "kept_percent_lambda": 47.23127035830619,
                "num_examples": 3,
                "num_explored_concrete": 2486,
                "num_explored_lambda": 1541,
                "num_explored_none": 1914,
                "num_inputs": 2,
                "num_kept_concrete": 648,
                "num_kept_lambda": 580,
                "num_values_explored": 5941,
                "num_values_kept": 1228,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55175
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2355500611010939,
            "num_unique_values": 201,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.80467091295117,
                "explored_percent_lambda": 30.573248407643312,
                "explored_percent_none": 17.62208067940552,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 144,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 80,
                "num_values_explored": 471,
                "num_values_kept": 192,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83605708787218,
            "num_unique_values": 1273,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.88329194749911,
                "explored_percent_lambda": 27.4210713018801,
                "explored_percent_none": 31.69563675062079,
                "kept_percent_concrete": 53.87658227848101,
                "kept_percent_lambda": 46.12341772151899,
                "num_examples": 3,
                "num_explored_concrete": 2305,
                "num_explored_lambda": 1546,
                "num_explored_none": 1787,
                "num_inputs": 1,
                "num_kept_concrete": 681,
                "num_kept_lambda": 583,
                "num_values_explored": 5638,
                "num_values_kept": 1264,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57064
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03299835789949,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 31.796740994854204,
                "explored_percent_lambda": 30.360205831903944,
                "explored_percent_none": 37.843053173241856,
                "kept_percent_concrete": 51.34854771784232,
                "kept_percent_lambda": 48.65145228215768,
                "num_examples": 3,
                "num_explored_concrete": 1483,
                "num_explored_lambda": 1416,
                "num_explored_none": 1765,
                "num_inputs": 1,
                "num_kept_concrete": 495,
                "num_kept_lambda": 469,
                "num_values_explored": 4664,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57276
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2025123741477728,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.1219512195122,
                "explored_percent_lambda": 40.24390243902439,
                "explored_percent_none": 14.634146341463415,
                "kept_percent_concrete": 47.61904761904762,
                "kept_percent_lambda": 52.38095238095238,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 99,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 77,
                "num_values_explored": 246,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 246
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23823614185676,
            "num_unique_values": 1091,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.60578883000408,
                "explored_percent_lambda": 27.537708927843457,
                "explored_percent_none": 33.856502242152466,
                "kept_percent_concrete": 53.97412199630314,
                "kept_percent_lambda": 46.02587800369686,
                "num_examples": 3,
                "num_explored_concrete": 1894,
                "num_explored_lambda": 1351,
                "num_explored_none": 1661,
                "num_inputs": 1,
                "num_kept_concrete": 584,
                "num_kept_lambda": 498,
                "num_values_explored": 4906,
                "num_values_kept": 1082,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50498
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.088901852024719,
            "num_unique_values": 365,
            "solution": "Access(Subtract(-1, k), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 35.09384548232213,
                "explored_percent_lambda": 12.61457878655609,
                "explored_percent_none": 52.29157573112178,
                "kept_percent_concrete": 78.87323943661971,
                "kept_percent_lambda": 21.12676056338028,
                "num_examples": 5,
                "num_explored_concrete": 804,
                "num_explored_lambda": 289,
                "num_explored_none": 1198,
                "num_inputs": 2,
                "num_kept_concrete": 280,
                "num_kept_lambda": 75,
                "num_values_explored": 2291,
                "num_values_kept": 355,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3971
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89530904311687,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.00082850041425,
                "explored_percent_lambda": 10.011046672190004,
                "explored_percent_none": 32.988124827395744,
                "kept_percent_concrete": 80.58510638297872,
                "kept_percent_lambda": 19.414893617021278,
                "num_examples": 5,
                "num_explored_concrete": 4128,
                "num_explored_lambda": 725,
                "num_explored_none": 2389,
                "num_inputs": 2,
                "num_kept_concrete": 909,
                "num_kept_lambda": 219,
                "num_values_explored": 7242,
                "num_values_kept": 1128,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67127
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3529846908058971,
            "num_unique_values": 222,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 49.010989010989015,
                "explored_percent_lambda": 30.10989010989011,
                "explored_percent_none": 20.87912087912088,
                "kept_percent_concrete": 57.27699530516432,
                "kept_percent_lambda": 42.72300469483568,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 137,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 91,
                "num_values_explored": 455,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 455
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76774027594365,
            "num_unique_values": 1312,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.982538616521154,
                "explored_percent_lambda": 19.190732034922767,
                "explored_percent_none": 21.82672934855608,
                "kept_percent_concrete": 60.59907834101382,
                "kept_percent_lambda": 39.40092165898618,
                "num_examples": 3,
                "num_explored_concrete": 3513,
                "num_explored_lambda": 1143,
                "num_explored_none": 1300,
                "num_inputs": 2,
                "num_kept_concrete": 789,
                "num_kept_lambda": 513,
                "num_values_explored": 5956,
                "num_values_kept": 1302,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55626
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97822319692932,
            "num_unique_values": 926,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.15461493239271,
                "explored_percent_lambda": 25.004899078973153,
                "explored_percent_none": 37.840485988634136,
                "kept_percent_concrete": 56.4410480349345,
                "kept_percent_lambda": 43.5589519650655,
                "num_examples": 3,
                "num_explored_concrete": 1896,
                "num_explored_lambda": 1276,
                "num_explored_none": 1931,
                "num_inputs": 2,
                "num_kept_concrete": 517,
                "num_kept_lambda": 399,
                "num_values_explored": 5103,
                "num_values_kept": 916,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54257
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0811073421500623,
            "num_unique_values": 255,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 24.761904761904763,
                "explored_percent_lambda": 39.04761904761905,
                "explored_percent_none": 36.19047619047619,
                "kept_percent_concrete": 46.53061224489796,
                "kept_percent_lambda": 53.46938775510204,
                "num_examples": 3,
                "num_explored_concrete": 208,
                "num_explored_lambda": 328,
                "num_explored_none": 304,
                "num_inputs": 2,
                "num_kept_concrete": 114,
                "num_kept_lambda": 131,
                "num_values_explored": 840,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2520
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72119871107861,
            "num_unique_values": 1036,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.10768281394631,
                "explored_percent_lambda": 12.665843875347115,
                "explored_percent_none": 26.226473310706574,
                "kept_percent_concrete": 76.21832358674465,
                "kept_percent_lambda": 23.78167641325536,
                "num_examples": 5,
                "num_explored_concrete": 3961,
                "num_explored_lambda": 821,
                "num_explored_none": 1700,
                "num_inputs": 2,
                "num_kept_concrete": 782,
                "num_kept_lambda": 244,
                "num_values_explored": 6482,
                "num_values_kept": 1026,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68648
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.45388095709495246,
            "num_unique_values": 274,
            "solution": "Reverse(Sort(Drop(Sum(Map((lambda u1: -1), Sort(Take(n, x)))), x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.691275167785236,
                "explored_percent_lambda": 36.241610738255034,
                "explored_percent_none": 10.06711409395973,
                "kept_percent_concrete": 51.89393939393939,
                "kept_percent_lambda": 48.10606060606061,
                "num_examples": 3,
                "num_explored_concrete": 560,
                "num_explored_lambda": 378,
                "num_explored_none": 105,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 127,
                "num_values_explored": 1043,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1043
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10380228981376,
            "num_unique_values": 1344,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.190661478599225,
                "explored_percent_lambda": 22.023346303501945,
                "explored_percent_none": 26.785992217898833,
                "kept_percent_concrete": 61.91904047976012,
                "kept_percent_lambda": 38.08095952023988,
                "num_examples": 3,
                "num_explored_concrete": 3289,
                "num_explored_lambda": 1415,
                "num_explored_none": 1721,
                "num_inputs": 2,
                "num_kept_concrete": 826,
                "num_kept_lambda": 508,
                "num_values_explored": 6425,
                "num_values_kept": 1334,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61382
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2430663718842,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.567195450463934,
                "explored_percent_lambda": 10.805148159233763,
                "explored_percent_none": 33.627656390302306,
                "kept_percent_concrete": 81.66953528399311,
                "kept_percent_lambda": 18.330464716006883,
                "num_examples": 5,
                "num_explored_concrete": 3713,
                "num_explored_lambda": 722,
                "num_explored_none": 2247,
                "num_inputs": 2,
                "num_kept_concrete": 949,
                "num_kept_lambda": 213,
                "num_values_explored": 6682,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68879
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2622521601151675,
            "num_unique_values": 225,
            "solution": "Sum(Map((lambda u1: 1), x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 54.69061876247505,
                "explored_percent_lambda": 25.548902195608783,
                "explored_percent_none": 19.760479041916167,
                "kept_percent_concrete": 65.74074074074075,
                "kept_percent_lambda": 34.25925925925926,
                "num_examples": 5,
                "num_explored_concrete": 274,
                "num_explored_lambda": 128,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 142,
                "num_kept_lambda": 74,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7849767759908,
            "num_unique_values": 1094,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.653266331658294,
                "explored_percent_lambda": 28.040201005025125,
                "explored_percent_none": 33.30653266331658,
                "kept_percent_concrete": 49.76958525345622,
                "kept_percent_lambda": 50.23041474654378,
                "num_examples": 3,
                "num_explored_concrete": 1923,
                "num_explored_lambda": 1395,
                "num_explored_none": 1657,
                "num_inputs": 1,
                "num_kept_concrete": 540,
                "num_kept_lambda": 545,
                "num_values_explored": 4975,
                "num_values_kept": 1085,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51192
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16828347998671,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.36081474296799,
                "explored_percent_lambda": 28.01163918525703,
                "explored_percent_none": 23.627546071774976,
                "kept_percent_concrete": 52.0814880425155,
                "kept_percent_lambda": 47.9185119574845,
                "num_examples": 3,
                "num_explored_concrete": 2493,
                "num_explored_lambda": 1444,
                "num_explored_none": 1218,
                "num_inputs": 1,
                "num_kept_concrete": 588,
                "num_kept_lambda": 541,
                "num_values_explored": 5155,
                "num_values_kept": 1129,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53510
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14275909587740898,
            "num_unique_values": 90,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.416666666666664,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 24.166666666666668,
                "kept_percent_concrete": 32.098765432098766,
                "kept_percent_lambda": 67.90123456790124,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 85,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 55,
                "num_values_explored": 240,
                "num_values_kept": 81,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.943347204010934,
            "num_unique_values": 412,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 34.4,
                "explored_percent_lambda": 33.67272727272727,
                "explored_percent_none": 31.927272727272726,
                "kept_percent_concrete": 48.87780548628429,
                "kept_percent_lambda": 51.12219451371571,
                "num_examples": 3,
                "num_explored_concrete": 473,
                "num_explored_lambda": 463,
                "num_explored_none": 439,
                "num_inputs": 3,
                "num_kept_concrete": 196,
                "num_kept_lambda": 205,
                "num_values_explored": 1375,
                "num_values_kept": 401,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7996
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01619547489099,
            "num_unique_values": 1300,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.96813902968863,
                "explored_percent_lambda": 25.905141202027515,
                "explored_percent_none": 25.126719768283852,
                "kept_percent_concrete": 57.24244771494965,
                "kept_percent_lambda": 42.75755228505035,
                "num_examples": 3,
                "num_explored_concrete": 2705,
                "num_explored_lambda": 1431,
                "num_explored_none": 1388,
                "num_inputs": 1,
                "num_kept_concrete": 739,
                "num_kept_lambda": 552,
                "num_values_explored": 5524,
                "num_values_kept": 1291,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52648
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83768752287142,
            "num_unique_values": 1220,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.08635097493036,
                "explored_percent_lambda": 24.251392757660167,
                "explored_percent_none": 34.66225626740947,
                "kept_percent_concrete": 57.02479338842975,
                "kept_percent_lambda": 42.97520661157025,
                "num_examples": 3,
                "num_explored_concrete": 2360,
                "num_explored_lambda": 1393,
                "num_explored_none": 1991,
                "num_inputs": 2,
                "num_kept_concrete": 690,
                "num_kept_lambda": 520,
                "num_values_explored": 5744,
                "num_values_kept": 1210,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56318
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83195187104866,
            "num_unique_values": 1188,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.259289843104874,
                "explored_percent_lambda": 21.3047068538398,
                "explored_percent_none": 32.43600330305533,
                "kept_percent_concrete": 59.983007646559045,
                "kept_percent_lambda": 40.016992353440955,
                "num_examples": 3,
                "num_explored_concrete": 2801,
                "num_explored_lambda": 1290,
                "num_explored_none": 1964,
                "num_inputs": 3,
                "num_kept_concrete": 706,
                "num_kept_lambda": 471,
                "num_values_explored": 6055,
                "num_values_kept": 1177,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57450
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08644450409338,
            "num_unique_values": 1161,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.74800290486565,
                "explored_percent_lambda": 28.92156862745098,
                "explored_percent_none": 35.33042846768337,
                "kept_percent_concrete": 50.954861111111114,
                "kept_percent_lambda": 49.045138888888886,
                "num_examples": 3,
                "num_explored_concrete": 1969,
                "num_explored_lambda": 1593,
                "num_explored_none": 1946,
                "num_inputs": 1,
                "num_kept_concrete": 587,
                "num_kept_lambda": 565,
                "num_values_explored": 5508,
                "num_values_kept": 1152,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52187
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.753313690191135,
            "num_unique_values": 442,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 18.836978131212724,
                "explored_percent_lambda": 39.512922465208746,
                "explored_percent_none": 41.65009940357853,
                "kept_percent_concrete": 41.108545034642034,
                "kept_percent_lambda": 58.891454965357966,
                "num_examples": 3,
                "num_explored_concrete": 379,
                "num_explored_lambda": 795,
                "num_explored_none": 838,
                "num_inputs": 1,
                "num_kept_concrete": 178,
                "num_kept_lambda": 255,
                "num_values_explored": 2012,
                "num_values_kept": 433,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8536
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83432347304188,
            "num_unique_values": 1153,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.3996901626646,
                "explored_percent_lambda": 24.709527498063515,
                "explored_percent_none": 25.890782339271883,
                "kept_percent_concrete": 51.92307692307692,
                "kept_percent_lambda": 48.07692307692308,
                "num_examples": 3,
                "num_explored_concrete": 2551,
                "num_explored_lambda": 1276,
                "num_explored_none": 1337,
                "num_inputs": 1,
                "num_kept_concrete": 594,
                "num_kept_lambda": 550,
                "num_values_explored": 5164,
                "num_values_kept": 1144,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54427
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83688626508228,
            "num_unique_values": 1146,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.08550239930202,
                "explored_percent_lambda": 10.891377053947942,
                "explored_percent_none": 33.023120546750036,
                "kept_percent_concrete": 81.25,
                "kept_percent_lambda": 18.75,
                "num_examples": 5,
                "num_explored_concrete": 3857,
                "num_explored_lambda": 749,
                "num_explored_none": 2271,
                "num_inputs": 2,
                "num_kept_concrete": 923,
                "num_kept_lambda": 213,
                "num_values_explored": 6877,
                "num_values_kept": 1136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71593
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}