{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 101.26798240700737,
            "num_unique_values": 1106,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.25635439360929,
                "explored_percent_lambda": 24.473493100944083,
                "explored_percent_none": 39.270152505446625,
                "kept_percent_concrete": 53.193430656934304,
                "kept_percent_lambda": 46.806569343065696,
                "num_examples": 3,
                "num_explored_concrete": 1997,
                "num_explored_lambda": 1348,
                "num_explored_none": 2163,
                "num_inputs": 2,
                "num_kept_concrete": 583,
                "num_kept_lambda": 513,
                "num_values_explored": 5508,
                "num_values_kept": 1096,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54904
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.8413176669273525,
            "num_unique_values": 477,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 39.04761904761905,
                "explored_percent_lambda": 23.229813664596275,
                "explored_percent_none": 37.72256728778468,
                "kept_percent_concrete": 65.17094017094017,
                "kept_percent_lambda": 34.82905982905983,
                "num_examples": 5,
                "num_explored_concrete": 943,
                "num_explored_lambda": 561,
                "num_explored_none": 911,
                "num_inputs": 1,
                "num_kept_concrete": 305,
                "num_kept_lambda": 163,
                "num_values_explored": 2415,
                "num_values_kept": 468,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3815
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91563572292216,
            "num_unique_values": 1103,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.75312652265714,
                "explored_percent_lambda": 10.216014292675004,
                "explored_percent_none": 30.030859184667857,
                "kept_percent_concrete": 81.70173833485819,
                "kept_percent_lambda": 18.298261665141812,
                "num_examples": 5,
                "num_explored_concrete": 3679,
                "num_explored_lambda": 629,
                "num_explored_none": 1849,
                "num_inputs": 2,
                "num_kept_concrete": 893,
                "num_kept_lambda": 200,
                "num_values_explored": 6157,
                "num_values_kept": 1093,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68335
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.36710064206272364,
            "num_unique_values": 288,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.44356955380577,
                "explored_percent_lambda": 34.90813648293963,
                "explored_percent_none": 13.648293963254593,
                "kept_percent_concrete": 51.971326164874554,
                "kept_percent_lambda": 48.028673835125446,
                "num_examples": 3,
                "num_explored_concrete": 392,
                "num_explored_lambda": 266,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 134,
                "num_values_explored": 762,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.145159577950835,
            "num_unique_values": 895,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.813633645604945,
                "explored_percent_lambda": 14.769782738688459,
                "explored_percent_none": 30.416583615706596,
                "kept_percent_concrete": 76.63656884875847,
                "kept_percent_lambda": 23.363431151241535,
                "num_examples": 5,
                "num_explored_concrete": 2750,
                "num_explored_lambda": 741,
                "num_explored_none": 1526,
                "num_inputs": 1,
                "num_kept_concrete": 679,
                "num_kept_lambda": 207,
                "num_values_explored": 5017,
                "num_values_kept": 886,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6697
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7631784749683,
            "num_unique_values": 1106,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.02129263237234,
                "explored_percent_lambda": 23.308837384586397,
                "explored_percent_none": 35.669869983041266,
                "kept_percent_concrete": 54.653284671532845,
                "kept_percent_lambda": 45.346715328467155,
                "num_examples": 3,
                "num_explored_concrete": 2177,
                "num_explored_lambda": 1237,
                "num_explored_none": 1893,
                "num_inputs": 2,
                "num_kept_concrete": 599,
                "num_kept_lambda": 497,
                "num_values_explored": 5307,
                "num_values_kept": 1096,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56010
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80092391581275,
            "num_unique_values": 931,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.27888730385164,
                "explored_percent_lambda": 20.14978601997147,
                "explored_percent_none": 37.57132667617689,
                "kept_percent_concrete": 56.630434782608695,
                "kept_percent_lambda": 43.369565217391305,
                "num_examples": 3,
                "num_explored_concrete": 2371,
                "num_explored_lambda": 1130,
                "num_explored_none": 2107,
                "num_inputs": 3,
                "num_kept_concrete": 521,
                "num_kept_lambda": 399,
                "num_values_explored": 5608,
                "num_values_kept": 920,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59559
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70723175187595,
            "num_unique_values": 1103,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.58435008947454,
                "explored_percent_lambda": 11.696762648446397,
                "explored_percent_none": 23.718887262079065,
                "kept_percent_concrete": 77.23948811700183,
                "kept_percent_lambda": 22.760511882998173,
                "num_examples": 5,
                "num_explored_concrete": 3970,
                "num_explored_lambda": 719,
                "num_explored_none": 1458,
                "num_inputs": 1,
                "num_kept_concrete": 845,
                "num_kept_lambda": 249,
                "num_values_explored": 6147,
                "num_values_kept": 1094,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64544
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 95.41085169301368,
            "num_unique_values": 537,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.24733824733825,
                "explored_percent_lambda": 22.03112203112203,
                "explored_percent_none": 39.72153972153972,
                "kept_percent_concrete": 69.31818181818181,
                "kept_percent_lambda": 30.681818181818183,
                "num_examples": 5,
                "num_explored_concrete": 934,
                "num_explored_lambda": 538,
                "num_explored_none": 970,
                "num_inputs": 1,
                "num_kept_concrete": 366,
                "num_kept_lambda": 162,
                "num_values_explored": 2442,
                "num_values_kept": 528,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60468
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65914751915261,
            "num_unique_values": 1005,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.56034089179729,
                "explored_percent_lambda": 9.313650890275452,
                "explored_percent_none": 32.12600821792726,
                "kept_percent_concrete": 84.22110552763819,
                "kept_percent_lambda": 15.77889447236181,
                "num_examples": 5,
                "num_explored_concrete": 3848,
                "num_explored_lambda": 612,
                "num_explored_none": 2111,
                "num_inputs": 2,
                "num_kept_concrete": 838,
                "num_kept_lambda": 157,
                "num_values_explored": 6571,
                "num_values_kept": 995,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69900
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8395478259772,
            "num_unique_values": 867,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 32.14066653036189,
                "explored_percent_lambda": 34.57370680842364,
                "explored_percent_none": 33.28562666121447,
                "kept_percent_concrete": 44.05594405594405,
                "kept_percent_lambda": 55.94405594405595,
                "num_examples": 3,
                "num_explored_concrete": 1572,
                "num_explored_lambda": 1691,
                "num_explored_none": 1628,
                "num_inputs": 1,
                "num_kept_concrete": 378,
                "num_kept_lambda": 480,
                "num_values_explored": 4891,
                "num_values_kept": 858,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53239
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.671434442978352,
            "num_unique_values": 186,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 11.853088480801336,
                "explored_percent_lambda": 36.89482470784641,
                "explored_percent_none": 51.25208681135226,
                "kept_percent_concrete": 27.11864406779661,
                "kept_percent_lambda": 72.88135593220339,
                "num_examples": 3,
                "num_explored_concrete": 142,
                "num_explored_lambda": 442,
                "num_explored_none": 614,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 129,
                "num_values_explored": 1198,
                "num_values_kept": 177,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13845
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05667978595011,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.60541085048208,
                "explored_percent_lambda": 18.621384371852066,
                "explored_percent_none": 23.77320477766585,
                "kept_percent_concrete": 67.4090571640683,
                "kept_percent_lambda": 32.5909428359317,
                "num_examples": 3,
                "num_explored_concrete": 4003,
                "num_explored_lambda": 1294,
                "num_explored_none": 1652,
                "num_inputs": 2,
                "num_kept_concrete": 908,
                "num_kept_lambda": 439,
                "num_values_explored": 6949,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69820
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.067763034021482,
            "num_unique_values": 653,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.66640594446617,
                "explored_percent_lambda": 34.96284708642941,
                "explored_percent_none": 36.37074696910442,
                "kept_percent_concrete": 47.20496894409938,
                "kept_percent_lambda": 52.79503105590062,
                "num_examples": 3,
                "num_explored_concrete": 733,
                "num_explored_lambda": 894,
                "num_explored_none": 930,
                "num_inputs": 1,
                "num_kept_concrete": 304,
                "num_kept_lambda": 340,
                "num_values_explored": 2557,
                "num_values_kept": 644,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3957
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7971542479936,
            "num_unique_values": 1168,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.933399274645566,
                "explored_percent_lambda": 26.475436861193536,
                "explored_percent_none": 29.591163864160897,
                "kept_percent_concrete": 49.43917169974116,
                "kept_percent_lambda": 50.56082830025884,
                "num_examples": 3,
                "num_explored_concrete": 2665,
                "num_explored_lambda": 1606,
                "num_explored_none": 1795,
                "num_inputs": 1,
                "num_kept_concrete": 573,
                "num_kept_lambda": 586,
                "num_values_explored": 6066,
                "num_values_kept": 1159,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62571
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.97533988300711,
            "num_unique_values": 1217,
            "solution": "Take(Subtract(1, n), Take(-1, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.26997555931566,
                "explored_percent_lambda": 21.470201165632638,
                "explored_percent_none": 22.2598232750517,
                "kept_percent_concrete": 55.17812758906379,
                "kept_percent_lambda": 44.82187241093621,
                "num_examples": 3,
                "num_explored_concrete": 2993,
                "num_explored_lambda": 1142,
                "num_explored_none": 1184,
                "num_inputs": 2,
                "num_kept_concrete": 666,
                "num_kept_lambda": 541,
                "num_values_explored": 5319,
                "num_values_kept": 1207,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6719
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98211512994021,
            "num_unique_values": 1153,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.17571448106112,
                "explored_percent_lambda": 11.746205387665801,
                "explored_percent_none": 33.078080131273076,
                "kept_percent_concrete": 76.22377622377623,
                "kept_percent_lambda": 23.776223776223777,
                "num_examples": 5,
                "num_explored_concrete": 4035,
                "num_explored_lambda": 859,
                "num_explored_none": 2419,
                "num_inputs": 1,
                "num_kept_concrete": 872,
                "num_kept_lambda": 272,
                "num_values_explored": 7313,
                "num_values_kept": 1144,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73670
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84180961502716,
            "num_unique_values": 1135,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.492463857274686,
                "explored_percent_lambda": 20.88588126730237,
                "explored_percent_none": 29.621654875422948,
                "kept_percent_concrete": 56.08888888888889,
                "kept_percent_lambda": 43.91111111111111,
                "num_examples": 3,
                "num_explored_concrete": 3218,
                "num_explored_lambda": 1358,
                "num_explored_none": 1926,
                "num_inputs": 2,
                "num_kept_concrete": 631,
                "num_kept_lambda": 494,
                "num_values_explored": 6502,
                "num_values_kept": 1125,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66588
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.039666068041697,
            "num_unique_values": 246,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 25.13477088948787,
                "explored_percent_lambda": 29.110512129380055,
                "explored_percent_none": 45.75471698113208,
                "kept_percent_concrete": 51.89873417721519,
                "kept_percent_lambda": 48.10126582278481,
                "num_examples": 5,
                "num_explored_concrete": 373,
                "num_explored_lambda": 432,
                "num_explored_none": 679,
                "num_inputs": 1,
                "num_kept_concrete": 123,
                "num_kept_lambda": 114,
                "num_values_explored": 1484,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17541
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.64726973185316,
            "num_unique_values": 1212,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.98221251365268,
                "explored_percent_lambda": 20.75206740521142,
                "explored_percent_none": 33.2657200811359,
                "kept_percent_concrete": 56.03663613655287,
                "kept_percent_lambda": 43.96336386344713,
                "num_examples": 3,
                "num_explored_concrete": 2947,
                "num_explored_lambda": 1330,
                "num_explored_none": 2132,
                "num_inputs": 3,
                "num_kept_concrete": 673,
                "num_kept_lambda": 528,
                "num_values_explored": 6409,
                "num_values_kept": 1201,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66119
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.198302883887663,
            "num_unique_values": 960,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, Last(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 59.30339138405133,
                "explored_percent_lambda": 13.547204399633364,
                "explored_percent_none": 27.149404216315308,
                "kept_percent_concrete": 76.65615141955836,
                "kept_percent_lambda": 23.34384858044164,
                "num_examples": 5,
                "num_explored_concrete": 3235,
                "num_explored_lambda": 739,
                "num_explored_none": 1481,
                "num_inputs": 1,
                "num_kept_concrete": 729,
                "num_kept_lambda": 222,
                "num_values_explored": 5455,
                "num_values_kept": 951,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 14088
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85926269297488,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.04340650272322,
                "explored_percent_lambda": 24.112889915827694,
                "explored_percent_none": 32.843703581449084,
                "kept_percent_concrete": 54.93775933609958,
                "kept_percent_lambda": 45.06224066390042,
                "num_examples": 3,
                "num_explored_concrete": 2608,
                "num_explored_lambda": 1461,
                "num_explored_none": 1990,
                "num_inputs": 1,
                "num_kept_concrete": 662,
                "num_kept_lambda": 543,
                "num_values_explored": 6059,
                "num_values_kept": 1205,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60286
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75640937918797,
            "num_unique_values": 1242,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.345582361399586,
                "explored_percent_lambda": 25.403419076529797,
                "explored_percent_none": 31.250998562070617,
                "kept_percent_concrete": 52.353896103896105,
                "kept_percent_lambda": 47.646103896103895,
                "num_examples": 3,
                "num_explored_concrete": 2713,
                "num_explored_lambda": 1590,
                "num_explored_none": 1956,
                "num_inputs": 2,
                "num_kept_concrete": 645,
                "num_kept_lambda": 587,
                "num_values_explored": 6259,
                "num_values_kept": 1232,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61627
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23766719899140298,
            "num_unique_values": 201,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.80467091295117,
                "explored_percent_lambda": 30.573248407643312,
                "explored_percent_none": 17.62208067940552,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 144,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 80,
                "num_values_explored": 471,
                "num_values_kept": 192,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87417376600206,
            "num_unique_values": 1267,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.70326615705351,
                "explored_percent_lambda": 25.555941626129258,
                "explored_percent_none": 31.740792216817233,
                "kept_percent_concrete": 53.10015898251192,
                "kept_percent_lambda": 46.89984101748808,
                "num_examples": 3,
                "num_explored_concrete": 2458,
                "num_explored_lambda": 1471,
                "num_explored_none": 1827,
                "num_inputs": 1,
                "num_kept_concrete": 668,
                "num_kept_lambda": 590,
                "num_values_explored": 5756,
                "num_values_kept": 1258,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59025
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.914021874777973,
            "num_unique_values": 679,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 23.37456390738979,
                "explored_percent_lambda": 35.10941960038059,
                "explored_percent_none": 41.516016492229625,
                "kept_percent_concrete": 48.656716417910445,
                "kept_percent_lambda": 51.343283582089555,
                "num_examples": 3,
                "num_explored_concrete": 737,
                "num_explored_lambda": 1107,
                "num_explored_none": 1309,
                "num_inputs": 1,
                "num_kept_concrete": 326,
                "num_kept_lambda": 344,
                "num_values_explored": 3153,
                "num_values_kept": 670,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5113
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23452927405014634,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.1219512195122,
                "explored_percent_lambda": 40.24390243902439,
                "explored_percent_none": 14.634146341463415,
                "kept_percent_concrete": 47.61904761904762,
                "kept_percent_lambda": 52.38095238095238,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 99,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 77,
                "num_values_explored": 246,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 246
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71506835101172,
            "num_unique_values": 1152,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.4054054054054,
                "explored_percent_lambda": 28.18018018018018,
                "explored_percent_none": 34.414414414414416,
                "kept_percent_concrete": 50.91863517060367,
                "kept_percent_lambda": 49.08136482939633,
                "num_examples": 3,
                "num_explored_concrete": 2076,
                "num_explored_lambda": 1564,
                "num_explored_none": 1910,
                "num_inputs": 1,
                "num_kept_concrete": 582,
                "num_kept_lambda": 561,
                "num_values_explored": 5550,
                "num_values_kept": 1143,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56735
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.382462752982974,
            "num_unique_values": 601,
            "solution": "Maximum(Scanl1((lambda u1, u2: Access(Subtract(1, k), x)), Drop(k, x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.55600539811066,
                "explored_percent_lambda": 9.851551956815115,
                "explored_percent_none": 41.59244264507422,
                "kept_percent_concrete": 82.74111675126903,
                "kept_percent_lambda": 17.258883248730964,
                "num_examples": 5,
                "num_explored_concrete": 1799,
                "num_explored_lambda": 365,
                "num_explored_none": 1541,
                "num_inputs": 2,
                "num_kept_concrete": 489,
                "num_kept_lambda": 102,
                "num_values_explored": 3705,
                "num_values_kept": 591,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5385
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74652311508544,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.6781778104335,
                "explored_percent_lambda": 10.68332108743571,
                "explored_percent_none": 31.638501102130785,
                "kept_percent_concrete": 81.64893617021276,
                "kept_percent_lambda": 18.351063829787233,
                "num_examples": 5,
                "num_explored_concrete": 3925,
                "num_explored_lambda": 727,
                "num_explored_none": 2153,
                "num_inputs": 2,
                "num_kept_concrete": 921,
                "num_kept_lambda": 207,
                "num_values_explored": 6805,
                "num_values_kept": 1128,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71502
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4497018049005419,
            "num_unique_values": 222,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 49.010989010989015,
                "explored_percent_lambda": 30.10989010989011,
                "explored_percent_none": 20.87912087912088,
                "kept_percent_concrete": 57.27699530516432,
                "kept_percent_lambda": 42.72300469483568,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 137,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 91,
                "num_values_explored": 455,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 455
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6819166908972,
            "num_unique_values": 1284,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.63437179048271,
                "explored_percent_lambda": 19.85621362547073,
                "explored_percent_none": 22.50941458404656,
                "kept_percent_concrete": 61.14599686028257,
                "kept_percent_lambda": 38.85400313971743,
                "num_examples": 3,
                "num_explored_concrete": 3367,
                "num_explored_lambda": 1160,
                "num_explored_none": 1315,
                "num_inputs": 2,
                "num_kept_concrete": 779,
                "num_kept_lambda": 495,
                "num_values_explored": 5842,
                "num_values_kept": 1274,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58945
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86320071620867,
            "num_unique_values": 1037,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.3963133640553,
                "explored_percent_lambda": 24.88479262672811,
                "explored_percent_none": 36.71889400921659,
                "kept_percent_concrete": 54.33300876338851,
                "kept_percent_lambda": 45.66699123661149,
                "num_examples": 3,
                "num_explored_concrete": 2083,
                "num_explored_lambda": 1350,
                "num_explored_none": 1992,
                "num_inputs": 2,
                "num_kept_concrete": 558,
                "num_kept_lambda": 469,
                "num_values_explored": 5425,
                "num_values_kept": 1027,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54781
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3052054040599614,
            "num_unique_values": 231,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 20.97334878331402,
                "explored_percent_lambda": 41.59907300115875,
                "explored_percent_none": 37.427578215527234,
                "kept_percent_concrete": 41.1764705882353,
                "kept_percent_lambda": 58.8235294117647,
                "num_examples": 3,
                "num_explored_concrete": 181,
                "num_explored_lambda": 359,
                "num_explored_none": 323,
                "num_inputs": 2,
                "num_kept_concrete": 91,
                "num_kept_lambda": 130,
                "num_values_explored": 863,
                "num_values_kept": 221,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2543
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66189632099122,
            "num_unique_values": 1056,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.1701122268163,
                "explored_percent_lambda": 11.887182516243355,
                "explored_percent_none": 28.942705256940343,
                "kept_percent_concrete": 75.33460803059273,
                "kept_percent_lambda": 24.665391969407267,
                "num_examples": 5,
                "num_explored_concrete": 4007,
                "num_explored_lambda": 805,
                "num_explored_none": 1960,
                "num_inputs": 2,
                "num_kept_concrete": 788,
                "num_kept_lambda": 258,
                "num_values_explored": 6772,
                "num_values_kept": 1046,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70275
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6063388020265847,
            "num_unique_values": 274,
            "solution": "Reverse(Sort(Drop(Sum(Map((lambda u1: -1), Sort(Take(n, x)))), x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.691275167785236,
                "explored_percent_lambda": 36.241610738255034,
                "explored_percent_none": 10.06711409395973,
                "kept_percent_concrete": 51.89393939393939,
                "kept_percent_lambda": 48.10606060606061,
                "num_examples": 3,
                "num_explored_concrete": 560,
                "num_explored_lambda": 378,
                "num_explored_none": 105,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 127,
                "num_values_explored": 1043,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1043
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89239286701195,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.55112044817927,
                "explored_percent_lambda": 22.67156862745098,
                "explored_percent_none": 30.777310924369747,
                "kept_percent_concrete": 59.72461273666093,
                "kept_percent_lambda": 40.27538726333907,
                "num_examples": 3,
                "num_explored_concrete": 2659,
                "num_explored_lambda": 1295,
                "num_explored_none": 1758,
                "num_inputs": 2,
                "num_kept_concrete": 694,
                "num_kept_lambda": 468,
                "num_values_explored": 5712,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60904
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93031023698859,
            "num_unique_values": 1173,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.2019440011606,
                "explored_percent_lambda": 9.995647758595677,
                "explored_percent_none": 33.80240824024373,
                "kept_percent_concrete": 82.11521926053311,
                "kept_percent_lambda": 17.884780739466898,
                "num_examples": 5,
                "num_explored_concrete": 3874,
                "num_explored_lambda": 689,
                "num_explored_none": 2330,
                "num_inputs": 2,
                "num_kept_concrete": 955,
                "num_kept_lambda": 208,
                "num_values_explored": 6893,
                "num_values_kept": 1163,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70243
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.336838535964489,
            "num_unique_values": 225,
            "solution": "Sum(Map((lambda u1: 1), x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 54.69061876247505,
                "explored_percent_lambda": 25.548902195608783,
                "explored_percent_none": 19.760479041916167,
                "kept_percent_concrete": 65.74074074074075,
                "kept_percent_lambda": 34.25925925925926,
                "num_examples": 5,
                "num_explored_concrete": 274,
                "num_explored_lambda": 128,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 142,
                "num_kept_lambda": 74,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8266716778744,
            "num_unique_values": 1110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.36361817090254,
                "explored_percent_lambda": 28.457074244546728,
                "explored_percent_none": 32.17930758455073,
                "kept_percent_concrete": 51.58946412352407,
                "kept_percent_lambda": 48.41053587647593,
                "num_examples": 3,
                "num_explored_concrete": 1967,
                "num_explored_lambda": 1422,
                "num_explored_none": 1608,
                "num_inputs": 1,
                "num_kept_concrete": 568,
                "num_kept_lambda": 533,
                "num_values_explored": 4997,
                "num_values_kept": 1101,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51319
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08681983803399,
            "num_unique_values": 1143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.46543870073282,
                "explored_percent_lambda": 28.362051891463658,
                "explored_percent_none": 21.172509407803524,
                "kept_percent_concrete": 50.44091710758377,
                "kept_percent_lambda": 49.55908289241623,
                "num_examples": 3,
                "num_explored_concrete": 2548,
                "num_explored_lambda": 1432,
                "num_explored_none": 1069,
                "num_inputs": 1,
                "num_kept_concrete": 572,
                "num_kept_lambda": 562,
                "num_values_explored": 5049,
                "num_values_kept": 1134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52729
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1455857518594712,
            "num_unique_values": 90,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.416666666666664,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 24.166666666666668,
                "kept_percent_concrete": 32.098765432098766,
                "kept_percent_lambda": 67.90123456790124,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 85,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 55,
                "num_values_explored": 240,
                "num_values_kept": 81,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.4551252850797027,
            "num_unique_values": 401,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 32.31534090909091,
                "explored_percent_lambda": 37.00284090909091,
                "explored_percent_none": 30.681818181818183,
                "kept_percent_concrete": 48.717948717948715,
                "kept_percent_lambda": 51.282051282051285,
                "num_examples": 3,
                "num_explored_concrete": 455,
                "num_explored_lambda": 521,
                "num_explored_none": 432,
                "num_inputs": 3,
                "num_kept_concrete": 190,
                "num_kept_lambda": 200,
                "num_values_explored": 1408,
                "num_values_kept": 390,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2528
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96570145711303,
            "num_unique_values": 1307,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.93416336540275,
                "explored_percent_lambda": 25.97623089983022,
                "explored_percent_none": 25.089605734767026,
                "kept_percent_concrete": 56.47149460708783,
                "kept_percent_lambda": 43.52850539291217,
                "num_examples": 3,
                "num_explored_concrete": 2594,
                "num_explored_lambda": 1377,
                "num_explored_none": 1330,
                "num_inputs": 1,
                "num_kept_concrete": 733,
                "num_kept_lambda": 565,
                "num_values_explored": 5301,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53856
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9987050590571,
            "num_unique_values": 1136,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.52025167125442,
                "explored_percent_lambda": 26.81871804954778,
                "explored_percent_none": 33.661030279197796,
                "kept_percent_concrete": 52.66429840142096,
                "kept_percent_lambda": 47.33570159857904,
                "num_examples": 3,
                "num_explored_concrete": 2010,
                "num_explored_lambda": 1364,
                "num_explored_none": 1712,
                "num_inputs": 2,
                "num_kept_concrete": 593,
                "num_kept_lambda": 533,
                "num_values_explored": 5086,
                "num_values_kept": 1126,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55246
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77710510790348,
            "num_unique_values": 1116,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.86154678204435,
                "explored_percent_lambda": 23.90481341265549,
                "explored_percent_none": 32.233639805300164,
                "kept_percent_concrete": 57.737556561085974,
                "kept_percent_lambda": 42.262443438914026,
                "num_examples": 3,
                "num_explored_concrete": 2433,
                "num_explored_lambda": 1326,
                "num_explored_none": 1788,
                "num_inputs": 3,
                "num_kept_concrete": 638,
                "num_kept_lambda": 467,
                "num_values_explored": 5547,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58451
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82563416194171,
            "num_unique_values": 1076,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.18645770544505,
                "explored_percent_lambda": 29.355033152501505,
                "explored_percent_none": 34.458509142053444,
                "kept_percent_concrete": 51.82755388940956,
                "kept_percent_lambda": 48.17244611059044,
                "num_examples": 3,
                "num_explored_concrete": 1801,
                "num_explored_lambda": 1461,
                "num_explored_none": 1715,
                "num_inputs": 1,
                "num_kept_concrete": 553,
                "num_kept_lambda": 514,
                "num_values_explored": 4977,
                "num_values_kept": 1067,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51604
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.318598308134824,
            "num_unique_values": 450,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 20.96997690531178,
                "explored_percent_lambda": 37.736720554272516,
                "explored_percent_none": 41.2933025404157,
                "kept_percent_concrete": 48.07256235827664,
                "kept_percent_lambda": 51.92743764172336,
                "num_examples": 3,
                "num_explored_concrete": 454,
                "num_explored_lambda": 817,
                "num_explored_none": 894,
                "num_inputs": 1,
                "num_kept_concrete": 212,
                "num_kept_lambda": 229,
                "num_values_explored": 2165,
                "num_values_kept": 441,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9022
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07828350597993,
            "num_unique_values": 1129,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.622166246851386,
                "explored_percent_lambda": 25.886456113156363,
                "explored_percent_none": 24.49137763999225,
                "kept_percent_concrete": 50.625,
                "kept_percent_lambda": 49.375,
                "num_examples": 3,
                "num_explored_concrete": 2561,
                "num_explored_lambda": 1336,
                "num_explored_none": 1264,
                "num_inputs": 1,
                "num_kept_concrete": 567,
                "num_kept_lambda": 553,
                "num_values_explored": 5161,
                "num_values_kept": 1120,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55006
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71614474686794,
            "num_unique_values": 1078,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.967502321262764,
                "explored_percent_lambda": 11.436087898483441,
                "explored_percent_none": 33.59640978025379,
                "kept_percent_concrete": 79.8689138576779,
                "kept_percent_lambda": 20.131086142322097,
                "num_examples": 5,
                "num_explored_concrete": 3552,
                "num_explored_lambda": 739,
                "num_explored_none": 2171,
                "num_inputs": 2,
                "num_kept_concrete": 853,
                "num_kept_lambda": 215,
                "num_values_explored": 6462,
                "num_values_kept": 1068,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71333
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}