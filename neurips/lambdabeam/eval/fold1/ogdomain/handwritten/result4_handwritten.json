{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 101.44421158591285,
            "num_unique_values": 1039,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 33.28853906699943,
                "explored_percent_lambda": 25.26396621232482,
                "explored_percent_none": 41.447494720675756,
                "kept_percent_concrete": 52.672497570456756,
                "kept_percent_lambda": 47.327502429543244,
                "num_examples": 3,
                "num_explored_concrete": 1734,
                "num_explored_lambda": 1316,
                "num_explored_none": 2159,
                "num_inputs": 2,
                "num_kept_concrete": 542,
                "num_kept_lambda": 487,
                "num_values_explored": 5209,
                "num_values_kept": 1029,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53824
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.882047183113173,
            "num_unique_values": 481,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 39.0547263681592,
                "explored_percent_lambda": 22.263681592039802,
                "explored_percent_none": 38.681592039801,
                "kept_percent_concrete": 65.46610169491525,
                "kept_percent_lambda": 34.53389830508475,
                "num_examples": 5,
                "num_explored_concrete": 942,
                "num_explored_lambda": 537,
                "num_explored_none": 933,
                "num_inputs": 1,
                "num_kept_concrete": 309,
                "num_kept_lambda": 163,
                "num_values_explored": 2412,
                "num_values_kept": 472,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3812
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67097521014512,
            "num_unique_values": 1177,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.57345186078047,
                "explored_percent_lambda": 9.642910953744162,
                "explored_percent_none": 27.783637185475364,
                "kept_percent_concrete": 82.26221079691517,
                "kept_percent_lambda": 17.737789203084834,
                "num_examples": 5,
                "num_explored_concrete": 4153,
                "num_explored_lambda": 640,
                "num_explored_none": 1844,
                "num_inputs": 2,
                "num_kept_concrete": 960,
                "num_kept_lambda": 207,
                "num_values_explored": 6637,
                "num_values_kept": 1167,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68379
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3802008389029652,
            "num_unique_values": 288,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.44356955380577,
                "explored_percent_lambda": 34.90813648293963,
                "explored_percent_none": 13.648293963254593,
                "kept_percent_concrete": 51.971326164874554,
                "kept_percent_lambda": 48.028673835125446,
                "num_examples": 3,
                "num_explored_concrete": 392,
                "num_explored_lambda": 266,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 134,
                "num_values_explored": 762,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.164804423926398,
            "num_unique_values": 681,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(((lambda v1: Multiply(4, v1)))(v1), v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 45.02202643171806,
                "explored_percent_lambda": 20.088105726872246,
                "explored_percent_none": 34.88986784140969,
                "kept_percent_concrete": 72.4702380952381,
                "kept_percent_lambda": 27.529761904761905,
                "num_examples": 5,
                "num_explored_concrete": 1533,
                "num_explored_lambda": 684,
                "num_explored_none": 1188,
                "num_inputs": 1,
                "num_kept_concrete": 487,
                "num_kept_lambda": 185,
                "num_values_explored": 3405,
                "num_values_kept": 672,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5085
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67017828999087,
            "num_unique_values": 1064,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.64612094108497,
                "explored_percent_lambda": 22.010499708341435,
                "explored_percent_none": 38.34337935057359,
                "kept_percent_concrete": 55.313092979127134,
                "kept_percent_lambda": 44.686907020872866,
                "num_examples": 3,
                "num_explored_concrete": 2039,
                "num_explored_lambda": 1132,
                "num_explored_none": 1972,
                "num_inputs": 2,
                "num_kept_concrete": 583,
                "num_kept_lambda": 471,
                "num_values_explored": 5143,
                "num_values_kept": 1054,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53890
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06800039182417,
            "num_unique_values": 858,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.23746701846966,
                "explored_percent_lambda": 20.9008669430833,
                "explored_percent_none": 38.86166603844704,
                "kept_percent_concrete": 54.781582054309325,
                "kept_percent_lambda": 45.218417945690675,
                "num_examples": 3,
                "num_explored_concrete": 2135,
                "num_explored_lambda": 1109,
                "num_explored_none": 2062,
                "num_inputs": 3,
                "num_kept_concrete": 464,
                "num_kept_lambda": 383,
                "num_values_explored": 5306,
                "num_values_kept": 847,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58727
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79674243484624,
            "num_unique_values": 1079,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.58893280632411,
                "explored_percent_lambda": 11.367588932806324,
                "explored_percent_none": 25.043478260869566,
                "kept_percent_concrete": 76.91588785046729,
                "kept_percent_lambda": 23.08411214953271,
                "num_examples": 5,
                "num_explored_concrete": 4022,
                "num_explored_lambda": 719,
                "num_explored_none": 1584,
                "num_inputs": 1,
                "num_kept_concrete": 823,
                "num_kept_lambda": 247,
                "num_values_explored": 6325,
                "num_values_kept": 1070,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61916
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.28337294701487,
            "num_unique_values": 554,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 40.65889915628767,
                "explored_percent_lambda": 23.90518280433909,
                "explored_percent_none": 35.43591803937324,
                "kept_percent_concrete": 69.35779816513761,
                "kept_percent_lambda": 30.642201834862384,
                "num_examples": 5,
                "num_explored_concrete": 1012,
                "num_explored_lambda": 595,
                "num_explored_none": 882,
                "num_inputs": 1,
                "num_kept_concrete": 378,
                "num_kept_lambda": 167,
                "num_values_explored": 2489,
                "num_values_kept": 545,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 47192
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6143053509295,
            "num_unique_values": 1212,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.05723905723906,
                "explored_percent_lambda": 7.758136924803591,
                "explored_percent_none": 28.18462401795735,
                "kept_percent_concrete": 85.85690515806988,
                "kept_percent_lambda": 14.143094841930116,
                "num_examples": 5,
                "num_explored_concrete": 4566,
                "num_explored_lambda": 553,
                "num_explored_none": 2009,
                "num_inputs": 2,
                "num_kept_concrete": 1032,
                "num_kept_lambda": 170,
                "num_values_explored": 7128,
                "num_values_kept": 1202,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71451
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78006404591724,
            "num_unique_values": 971,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.20132141469102,
                "explored_percent_lambda": 31.344733773804897,
                "explored_percent_none": 34.45394481150408,
                "kept_percent_concrete": 47.71309771309771,
                "kept_percent_lambda": 52.28690228690229,
                "num_examples": 3,
                "num_explored_concrete": 1760,
                "num_explored_lambda": 1613,
                "num_explored_none": 1773,
                "num_inputs": 1,
                "num_kept_concrete": 459,
                "num_kept_lambda": 503,
                "num_values_explored": 5146,
                "num_values_kept": 962,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53288
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.868789204861969,
            "num_unique_values": 698,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.17332513829133,
                "explored_percent_lambda": 28.4880147510756,
                "explored_percent_none": 37.338660110633064,
                "kept_percent_concrete": 50.36284470246734,
                "kept_percent_lambda": 49.63715529753266,
                "num_examples": 3,
                "num_explored_concrete": 1112,
                "num_explored_lambda": 927,
                "num_explored_none": 1215,
                "num_inputs": 1,
                "num_kept_concrete": 347,
                "num_kept_lambda": 342,
                "num_values_explored": 3254,
                "num_values_kept": 689,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4654
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92894191597588,
            "num_unique_values": 1220,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.75253549695741,
                "explored_percent_lambda": 21.001716336401934,
                "explored_percent_none": 25.245748166640663,
                "kept_percent_concrete": 66.52892561983471,
                "kept_percent_lambda": 33.47107438016529,
                "num_examples": 3,
                "num_explored_concrete": 3445,
                "num_explored_lambda": 1346,
                "num_explored_none": 1618,
                "num_inputs": 2,
                "num_kept_concrete": 805,
                "num_kept_lambda": 405,
                "num_values_explored": 6409,
                "num_values_kept": 1210,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63787
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.063745009945706,
            "num_unique_values": 1193,
            "solution": "Take(-1, ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u2)), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 41.12527828374823,
                "explored_percent_lambda": 29.02246508803886,
                "explored_percent_none": 29.852256628212913,
                "kept_percent_concrete": 50.4222972972973,
                "kept_percent_lambda": 49.5777027027027,
                "num_examples": 3,
                "num_explored_concrete": 2032,
                "num_explored_lambda": 1434,
                "num_explored_none": 1475,
                "num_inputs": 1,
                "num_kept_concrete": 597,
                "num_kept_lambda": 587,
                "num_values_explored": 4941,
                "num_values_kept": 1184,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11205
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86150268698111,
            "num_unique_values": 1096,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.66185684450351,
                "explored_percent_lambda": 26.561610024681983,
                "explored_percent_none": 30.776533130814506,
                "kept_percent_concrete": 50.229990800367986,
                "kept_percent_lambda": 49.770009199632014,
                "num_examples": 3,
                "num_explored_concrete": 2247,
                "num_explored_lambda": 1399,
                "num_explored_none": 1621,
                "num_inputs": 1,
                "num_kept_concrete": 546,
                "num_kept_lambda": 541,
                "num_values_explored": 5267,
                "num_values_kept": 1087,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52813
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.740705592092127,
            "num_unique_values": 484,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.05607476635514,
                "explored_percent_lambda": 31.90921228304406,
                "explored_percent_none": 26.034712950600802,
                "kept_percent_concrete": 50.21097046413502,
                "kept_percent_lambda": 49.78902953586498,
                "num_examples": 3,
                "num_explored_concrete": 630,
                "num_explored_lambda": 478,
                "num_explored_none": 390,
                "num_inputs": 2,
                "num_kept_concrete": 238,
                "num_kept_lambda": 236,
                "num_values_explored": 1498,
                "num_values_kept": 474,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7962
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9989544369746,
            "num_unique_values": 1059,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.47923322683706,
                "explored_percent_lambda": 13.642172523961662,
                "explored_percent_none": 30.878594249201278,
                "kept_percent_concrete": 75.33333333333333,
                "kept_percent_lambda": 24.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 3473,
                "num_explored_lambda": 854,
                "num_explored_none": 1933,
                "num_inputs": 1,
                "num_kept_concrete": 791,
                "num_kept_lambda": 259,
                "num_values_explored": 6260,
                "num_values_kept": 1050,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64261
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87182932393625,
            "num_unique_values": 995,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.84754126254892,
                "explored_percent_lambda": 21.337417049515057,
                "explored_percent_none": 30.81504168793602,
                "kept_percent_concrete": 57.055837563451774,
                "kept_percent_lambda": 42.944162436548226,
                "num_examples": 3,
                "num_explored_concrete": 2812,
                "num_explored_lambda": 1254,
                "num_explored_none": 1811,
                "num_inputs": 2,
                "num_kept_concrete": 562,
                "num_kept_lambda": 423,
                "num_values_explored": 5877,
                "num_values_kept": 985,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58770
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.999553517904133,
            "num_unique_values": 531,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 39.686998394863565,
                "explored_percent_lambda": 20.224719101123597,
                "explored_percent_none": 40.08828250401284,
                "kept_percent_concrete": 72.41379310344827,
                "kept_percent_lambda": 27.586206896551722,
                "num_examples": 5,
                "num_explored_concrete": 989,
                "num_explored_lambda": 504,
                "num_explored_none": 999,
                "num_inputs": 1,
                "num_kept_concrete": 378,
                "num_kept_lambda": 144,
                "num_values_explored": 2492,
                "num_values_kept": 522,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10280
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66113682603464,
            "num_unique_values": 922,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.58202716823406,
                "explored_percent_lambda": 22.361546499477534,
                "explored_percent_none": 38.0564263322884,
                "kept_percent_concrete": 54.88474204171241,
                "kept_percent_lambda": 45.11525795828759,
                "num_examples": 3,
                "num_explored_concrete": 1894,
                "num_explored_lambda": 1070,
                "num_explored_none": 1821,
                "num_inputs": 3,
                "num_kept_concrete": 500,
                "num_kept_lambda": 411,
                "num_values_explored": 4785,
                "num_values_kept": 911,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54650
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78193104104139,
            "num_unique_values": 975,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.87012987012987,
                "explored_percent_lambda": 12.949907235621522,
                "explored_percent_none": 27.179962894248607,
                "kept_percent_concrete": 76.08695652173913,
                "kept_percent_lambda": 23.91304347826087,
                "num_examples": 5,
                "num_explored_concrete": 3227,
                "num_explored_lambda": 698,
                "num_explored_none": 1465,
                "num_inputs": 1,
                "num_kept_concrete": 735,
                "num_kept_lambda": 231,
                "num_values_explored": 5390,
                "num_values_kept": 966,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56275
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80513361818157,
            "num_unique_values": 1027,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.84055160525749,
                "explored_percent_lambda": 26.244343891402714,
                "explored_percent_none": 33.9151045033398,
                "kept_percent_concrete": 56.385068762278976,
                "kept_percent_lambda": 43.614931237721024,
                "num_examples": 3,
                "num_explored_concrete": 1849,
                "num_explored_lambda": 1218,
                "num_explored_none": 1574,
                "num_inputs": 1,
                "num_kept_concrete": 574,
                "num_kept_lambda": 444,
                "num_values_explored": 4641,
                "num_values_kept": 1018,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48135
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92542116809636,
            "num_unique_values": 1046,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.244647021411915,
                "explored_percent_lambda": 26.584693661225355,
                "explored_percent_none": 35.170659317362734,
                "kept_percent_concrete": 52.99227799227799,
                "kept_percent_lambda": 47.00772200772201,
                "num_examples": 3,
                "num_explored_concrete": 1804,
                "num_explored_lambda": 1254,
                "num_explored_none": 1659,
                "num_inputs": 2,
                "num_kept_concrete": 549,
                "num_kept_lambda": 487,
                "num_values_explored": 4717,
                "num_values_kept": 1036,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48622
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25216528004966676,
            "num_unique_values": 201,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.80467091295117,
                "explored_percent_lambda": 30.573248407643312,
                "explored_percent_none": 17.62208067940552,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 144,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 80,
                "num_values_explored": 471,
                "num_values_kept": 192,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95209266105667,
            "num_unique_values": 1094,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.846737481031866,
                "explored_percent_lambda": 28.11619336657273,
                "explored_percent_none": 33.037069152395404,
                "kept_percent_concrete": 52.07373271889401,
                "kept_percent_lambda": 47.92626728110599,
                "num_examples": 3,
                "num_explored_concrete": 1792,
                "num_explored_lambda": 1297,
                "num_explored_none": 1524,
                "num_inputs": 1,
                "num_kept_concrete": 565,
                "num_kept_lambda": 520,
                "num_values_explored": 4613,
                "num_values_kept": 1085,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48050
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01503999205306,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.21324778260049,
                "explored_percent_lambda": 31.76070956784299,
                "explored_percent_none": 38.02604264955652,
                "kept_percent_concrete": 47.74136403897254,
                "kept_percent_lambda": 52.25863596102746,
                "num_examples": 3,
                "num_explored_concrete": 1601,
                "num_explored_lambda": 1683,
                "num_explored_none": 2015,
                "num_inputs": 1,
                "num_kept_concrete": 539,
                "num_kept_lambda": 590,
                "num_values_explored": 5299,
                "num_values_kept": 1129,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51634
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17897043889388442,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.1219512195122,
                "explored_percent_lambda": 40.24390243902439,
                "explored_percent_none": 14.634146341463415,
                "kept_percent_concrete": 47.61904761904762,
                "kept_percent_lambda": 52.38095238095238,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 99,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 77,
                "num_values_explored": 246,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 246
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07246243697591,
            "num_unique_values": 1071,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.115107913669064,
                "explored_percent_lambda": 29.08530318602261,
                "explored_percent_none": 34.79958890030832,
                "kept_percent_concrete": 51.88323917137476,
                "kept_percent_lambda": 48.11676082862524,
                "num_examples": 3,
                "num_explored_concrete": 1757,
                "num_explored_lambda": 1415,
                "num_explored_none": 1693,
                "num_inputs": 1,
                "num_kept_concrete": 551,
                "num_kept_lambda": 511,
                "num_values_explored": 4865,
                "num_values_kept": 1062,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48634
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.452308209147304,
            "num_unique_values": 770,
            "solution": "If(Greater(4, k), Subtract(Maximum(x), k), Access(2, Sort(x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 54.528301886792455,
                "explored_percent_lambda": 8.19706498951782,
                "explored_percent_none": 37.274633123689725,
                "kept_percent_concrete": 85.0,
                "kept_percent_lambda": 15.0,
                "num_examples": 5,
                "num_explored_concrete": 2601,
                "num_explored_lambda": 391,
                "num_explored_none": 1778,
                "num_inputs": 2,
                "num_kept_concrete": 646,
                "num_kept_lambda": 114,
                "num_values_explored": 4770,
                "num_values_kept": 760,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6450
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01263132598251,
            "num_unique_values": 1067,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.825910931174086,
                "explored_percent_lambda": 11.854251012145749,
                "explored_percent_none": 31.31983805668016,
                "kept_percent_concrete": 78.80794701986756,
                "kept_percent_lambda": 21.192052980132452,
                "num_examples": 5,
                "num_explored_concrete": 3509,
                "num_explored_lambda": 732,
                "num_explored_none": 1934,
                "num_inputs": 2,
                "num_kept_concrete": 833,
                "num_kept_lambda": 224,
                "num_values_explored": 6175,
                "num_values_kept": 1057,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65358
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25725727109238505,
            "num_unique_values": 222,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 49.010989010989015,
                "explored_percent_lambda": 30.10989010989011,
                "explored_percent_none": 20.87912087912088,
                "kept_percent_concrete": 57.27699530516432,
                "kept_percent_lambda": 42.72300469483568,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 137,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 91,
                "num_values_explored": 455,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 455
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8957355809398,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.27049637479085,
                "explored_percent_lambda": 20.98903141847927,
                "explored_percent_none": 23.740472206729876,
                "kept_percent_concrete": 58.55481727574751,
                "kept_percent_lambda": 41.44518272425249,
                "num_examples": 3,
                "num_explored_concrete": 2973,
                "num_explored_lambda": 1129,
                "num_explored_none": 1277,
                "num_inputs": 2,
                "num_kept_concrete": 705,
                "num_kept_lambda": 499,
                "num_values_explored": 5379,
                "num_values_kept": 1204,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52284
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83435997110792,
            "num_unique_values": 1042,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.652527600232425,
                "explored_percent_lambda": 25.062947898508618,
                "explored_percent_none": 37.28452450125896,
                "kept_percent_concrete": 54.748062015503876,
                "kept_percent_lambda": 45.251937984496124,
                "num_examples": 3,
                "num_explored_concrete": 1944,
                "num_explored_lambda": 1294,
                "num_explored_none": 1925,
                "num_inputs": 2,
                "num_kept_concrete": 565,
                "num_kept_lambda": 467,
                "num_values_explored": 5163,
                "num_values_kept": 1032,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53181
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3301033440511674,
            "num_unique_values": 262,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 25.336597307221542,
                "explored_percent_lambda": 38.555691554467565,
                "explored_percent_none": 36.10771113831089,
                "kept_percent_concrete": 46.82539682539682,
                "kept_percent_lambda": 53.17460317460318,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 315,
                "num_explored_none": 295,
                "num_inputs": 2,
                "num_kept_concrete": 118,
                "num_kept_lambda": 134,
                "num_values_explored": 817,
                "num_values_kept": 252,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2497
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.62922657700256,
            "num_unique_values": 1024,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.93874425727412,
                "explored_percent_lambda": 12.725880551301685,
                "explored_percent_none": 27.335375191424195,
                "kept_percent_concrete": 75.44378698224853,
                "kept_percent_lambda": 24.556213017751478,
                "num_examples": 5,
                "num_explored_concrete": 3914,
                "num_explored_lambda": 831,
                "num_explored_none": 1785,
                "num_inputs": 2,
                "num_kept_concrete": 765,
                "num_kept_lambda": 249,
                "num_values_explored": 6530,
                "num_values_kept": 1014,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65553
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.44036851497367024,
            "num_unique_values": 274,
            "solution": "Reverse(Sort(Drop(Sum(Map((lambda u1: -1), Sort(Take(n, x)))), x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.691275167785236,
                "explored_percent_lambda": 36.241610738255034,
                "explored_percent_none": 10.06711409395973,
                "kept_percent_concrete": 51.89393939393939,
                "kept_percent_lambda": 48.10606060606061,
                "num_examples": 3,
                "num_explored_concrete": 560,
                "num_explored_lambda": 378,
                "num_explored_none": 105,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 127,
                "num_values_explored": 1043,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1043
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00683736102656,
            "num_unique_values": 1195,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.192985644194074,
                "explored_percent_lambda": 23.82336907141559,
                "explored_percent_none": 29.98364528439033,
                "kept_percent_concrete": 57.29957805907173,
                "kept_percent_lambda": 42.70042194092827,
                "num_examples": 3,
                "num_explored_concrete": 2542,
                "num_explored_lambda": 1311,
                "num_explored_none": 1650,
                "num_inputs": 2,
                "num_kept_concrete": 679,
                "num_kept_lambda": 506,
                "num_values_explored": 5503,
                "num_values_kept": 1185,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57719
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14929994102567,
            "num_unique_values": 1295,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.5727284544391,
                "explored_percent_lambda": 9.723124918757312,
                "explored_percent_none": 31.70414662680359,
                "kept_percent_concrete": 82.17898832684826,
                "kept_percent_lambda": 17.82101167315175,
                "num_examples": 5,
                "num_explored_concrete": 4506,
                "num_explored_lambda": 748,
                "num_explored_none": 2439,
                "num_inputs": 2,
                "num_kept_concrete": 1056,
                "num_kept_lambda": 229,
                "num_values_explored": 7693,
                "num_values_kept": 1285,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77989
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2448196450714022,
            "num_unique_values": 225,
            "solution": "Sum(Map((lambda u1: 1), x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 54.69061876247505,
                "explored_percent_lambda": 25.548902195608783,
                "explored_percent_none": 19.760479041916167,
                "kept_percent_concrete": 65.74074074074075,
                "kept_percent_lambda": 34.25925925925926,
                "num_examples": 5,
                "num_explored_concrete": 274,
                "num_explored_lambda": 128,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 142,
                "num_kept_lambda": 74,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.786377732874826,
            "num_unique_values": 706,
            "solution": "Map((lambda u1: ((lambda v1: Max(((lambda v1: IntDivide(v1, -1)))(v1), v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 30.393128510075982,
                "explored_percent_lambda": 30.88866864882722,
                "explored_percent_none": 38.7182028410968,
                "kept_percent_concrete": 48.92395982783357,
                "kept_percent_lambda": 51.07604017216643,
                "num_examples": 3,
                "num_explored_concrete": 920,
                "num_explored_lambda": 935,
                "num_explored_none": 1172,
                "num_inputs": 1,
                "num_kept_concrete": 341,
                "num_kept_lambda": 356,
                "num_values_explored": 3027,
                "num_values_kept": 697,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22032
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.624929717043415,
            "num_unique_values": 990,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: Equal(v1, ((lambda v1: Access(v1, x)))(v1))))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.41936256889528,
                "explored_percent_lambda": 28.109273903666427,
                "explored_percent_none": 21.471363527438292,
                "kept_percent_concrete": 52.701325178389396,
                "kept_percent_lambda": 47.298674821610604,
                "num_examples": 3,
                "num_explored_concrete": 2104,
                "num_explored_lambda": 1173,
                "num_explored_none": 896,
                "num_inputs": 1,
                "num_kept_concrete": 517,
                "num_kept_lambda": 464,
                "num_values_explored": 4173,
                "num_values_kept": 981,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17645
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13596021384000778,
            "num_unique_values": 90,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.416666666666664,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 24.166666666666668,
                "kept_percent_concrete": 32.098765432098766,
                "kept_percent_lambda": 67.90123456790124,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 85,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 55,
                "num_values_explored": 240,
                "num_values_kept": 81,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5647283068392426,
            "num_unique_values": 411,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 32.591414944356124,
                "explored_percent_lambda": 37.20190779014308,
                "explored_percent_none": 30.206677265500794,
                "kept_percent_concrete": 46.5,
                "kept_percent_lambda": 53.5,
                "num_examples": 3,
                "num_explored_concrete": 410,
                "num_explored_lambda": 468,
                "num_explored_none": 380,
                "num_inputs": 3,
                "num_kept_concrete": 186,
                "num_kept_lambda": 214,
                "num_values_explored": 1258,
                "num_values_kept": 400,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2378
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92380843590945,
            "num_unique_values": 1407,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.11220889202541,
                "explored_percent_lambda": 26.517290049400142,
                "explored_percent_none": 25.370501058574455,
                "kept_percent_concrete": 56.223175965665234,
                "kept_percent_lambda": 43.776824034334766,
                "num_examples": 3,
                "num_explored_concrete": 2727,
                "num_explored_lambda": 1503,
                "num_explored_none": 1438,
                "num_inputs": 1,
                "num_kept_concrete": 786,
                "num_kept_lambda": 612,
                "num_values_explored": 5668,
                "num_values_kept": 1398,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59093
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80619720113464,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.815768302493964,
                "explored_percent_lambda": 24.8592115848753,
                "explored_percent_none": 32.32502011263073,
                "kept_percent_concrete": 55.748865355521936,
                "kept_percent_lambda": 44.251134644478064,
                "num_examples": 3,
                "num_explored_concrete": 2661,
                "num_explored_lambda": 1545,
                "num_explored_none": 2009,
                "num_inputs": 2,
                "num_kept_concrete": 737,
                "num_kept_lambda": 585,
                "num_values_explored": 6215,
                "num_values_kept": 1322,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62369
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78499751305208,
            "num_unique_values": 1264,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.16827072337783,
                "explored_percent_lambda": 20.350822725861534,
                "explored_percent_none": 31.480906550760633,
                "kept_percent_concrete": 61.37270550678372,
                "kept_percent_lambda": 38.62729449321628,
                "num_examples": 3,
                "num_explored_concrete": 3103,
                "num_explored_lambda": 1311,
                "num_explored_none": 2028,
                "num_inputs": 3,
                "num_kept_concrete": 769,
                "num_kept_lambda": 484,
                "num_values_explored": 6442,
                "num_values_kept": 1253,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65280
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.808714897139,
            "num_unique_values": 1232,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.43141289437586,
                "explored_percent_lambda": 27.829218106995885,
                "explored_percent_none": 34.73936899862826,
                "kept_percent_concrete": 53.31152902698283,
                "kept_percent_lambda": 46.68847097301717,
                "num_examples": 3,
                "num_explored_concrete": 2183,
                "num_explored_lambda": 1623,
                "num_explored_none": 2026,
                "num_inputs": 1,
                "num_kept_concrete": 652,
                "num_kept_lambda": 571,
                "num_values_explored": 5832,
                "num_values_kept": 1223,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60338
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.296082159038633,
            "num_unique_values": 441,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 19.900990099009903,
                "explored_percent_lambda": 39.554455445544555,
                "explored_percent_none": 40.54455445544554,
                "kept_percent_concrete": 43.98148148148148,
                "kept_percent_lambda": 56.01851851851852,
                "num_examples": 3,
                "num_explored_concrete": 402,
                "num_explored_lambda": 799,
                "num_explored_none": 819,
                "num_inputs": 1,
                "num_kept_concrete": 190,
                "num_kept_lambda": 242,
                "num_values_explored": 2020,
                "num_values_kept": 432,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15199
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78892391896807,
            "num_unique_values": 1264,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.656,
                "explored_percent_lambda": 22.784,
                "explored_percent_none": 24.56,
                "kept_percent_concrete": 53.78486055776892,
                "kept_percent_lambda": 46.21513944223108,
                "num_examples": 3,
                "num_explored_concrete": 3291,
                "num_explored_lambda": 1424,
                "num_explored_none": 1535,
                "num_inputs": 1,
                "num_kept_concrete": 675,
                "num_kept_lambda": 580,
                "num_values_explored": 6250,
                "num_values_kept": 1255,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63301
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73304071091115,
            "num_unique_values": 1256,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.302400395941596,
                "explored_percent_lambda": 10.269735214055927,
                "explored_percent_none": 31.427864390002476,
                "kept_percent_concrete": 81.38041733547351,
                "kept_percent_lambda": 18.619582664526483,
                "num_examples": 5,
                "num_explored_concrete": 4712,
                "num_explored_lambda": 830,
                "num_explored_none": 2540,
                "num_inputs": 2,
                "num_kept_concrete": 1014,
                "num_kept_lambda": 232,
                "num_values_explored": 8082,
                "num_values_kept": 1246,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80656
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}