{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 103.11718930792995,
            "num_unique_values": 242,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.16216216216216,
                "explored_percent_lambda": 37.729729729729726,
                "explored_percent_none": 40.108108108108105,
                "kept_percent_concrete": 58.05084745762712,
                "kept_percent_lambda": 41.94915254237288,
                "num_examples": 3,
                "num_explored_concrete": 205,
                "num_explored_lambda": 349,
                "num_explored_none": 371,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 99,
                "num_values_explored": 925,
                "num_values_kept": 236,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12512
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.50856904499233,
            "num_unique_values": 524,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.5076660988075,
                "explored_percent_lambda": 30.49403747870528,
                "explored_percent_none": 22.998296422487222,
                "kept_percent_concrete": 65.89595375722543,
                "kept_percent_lambda": 34.104046242774565,
                "num_examples": 5,
                "num_explored_concrete": 819,
                "num_explored_lambda": 537,
                "num_explored_none": 405,
                "num_inputs": 1,
                "num_kept_concrete": 342,
                "num_kept_lambda": 177,
                "num_values_explored": 1761,
                "num_values_kept": 519,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13156
            },
            "success": false,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.03129896207247,
            "num_unique_values": 629,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.79704016913319,
                "explored_percent_lambda": 26.268498942917546,
                "explored_percent_none": 21.93446088794926,
                "kept_percent_concrete": 72.07062600321028,
                "kept_percent_lambda": 27.929373996789728,
                "num_examples": 5,
                "num_explored_concrete": 980,
                "num_explored_lambda": 497,
                "num_explored_none": 415,
                "num_inputs": 2,
                "num_kept_concrete": 449,
                "num_kept_lambda": 174,
                "num_values_explored": 1892,
                "num_values_kept": 623,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12697
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2964526590658352,
            "num_unique_values": 318,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(-1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.57818659658344,
                "explored_percent_lambda": 28.252299605781864,
                "explored_percent_none": 11.169513797634691,
                "kept_percent_concrete": 60.063897763578275,
                "kept_percent_lambda": 39.936102236421725,
                "num_examples": 3,
                "num_explored_concrete": 461,
                "num_explored_lambda": 215,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 125,
                "num_values_explored": 761,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 761
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9071363320108503,
            "num_unique_values": 298,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.678642714570856,
                "explored_percent_lambda": 30.139720558882235,
                "explored_percent_none": 9.181636726546905,
                "kept_percent_concrete": 64.50511945392492,
                "kept_percent_lambda": 35.49488054607509,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 151,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 104,
                "num_values_explored": 501,
                "num_values_kept": 293,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.9842570880428,
            "num_unique_values": 287,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 28.349282296650717,
                "explored_percent_lambda": 41.985645933014354,
                "explored_percent_none": 29.66507177033493,
                "kept_percent_concrete": 54.09252669039146,
                "kept_percent_lambda": 45.90747330960854,
                "num_examples": 3,
                "num_explored_concrete": 237,
                "num_explored_lambda": 351,
                "num_explored_none": 248,
                "num_inputs": 2,
                "num_kept_concrete": 152,
                "num_kept_lambda": 129,
                "num_values_explored": 836,
                "num_values_kept": 281,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12805
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 42.535160274012014,
            "num_unique_values": 497,
            "solution": "Map((lambda u1: ((lambda v1: Max(a, ((lambda v1: Min(b, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.384019081693502,
                "explored_percent_lambda": 42.81454979129398,
                "explored_percent_none": 28.801431127012524,
                "kept_percent_concrete": 42.244897959183675,
                "kept_percent_lambda": 57.755102040816325,
                "num_examples": 3,
                "num_explored_concrete": 476,
                "num_explored_lambda": 718,
                "num_explored_none": 483,
                "num_inputs": 3,
                "num_kept_concrete": 207,
                "num_kept_lambda": 283,
                "num_values_explored": 1677,
                "num_values_kept": 490,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 6462
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.779460296966136,
            "num_unique_values": 463,
            "solution": "Maximum(Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.78783592644979,
                "explored_percent_lambda": 30.55162659123055,
                "explored_percent_none": 19.66053748231966,
                "kept_percent_concrete": 62.88209606986899,
                "kept_percent_lambda": 37.11790393013101,
                "num_examples": 5,
                "num_explored_concrete": 704,
                "num_explored_lambda": 432,
                "num_explored_none": 278,
                "num_inputs": 1,
                "num_kept_concrete": 288,
                "num_kept_lambda": 170,
                "num_values_explored": 1414,
                "num_values_kept": 458,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 4860
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.57513682893477,
            "num_unique_values": 192,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 19.90740740740741,
                "explored_percent_lambda": 54.629629629629626,
                "explored_percent_none": 25.462962962962962,
                "kept_percent_concrete": 28.342245989304814,
                "kept_percent_lambda": 71.65775401069519,
                "num_examples": 5,
                "num_explored_concrete": 129,
                "num_explored_lambda": 354,
                "num_explored_none": 165,
                "num_inputs": 1,
                "num_kept_concrete": 53,
                "num_kept_lambda": 134,
                "num_values_explored": 648,
                "num_values_kept": 187,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12441
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.43556258396711,
            "num_unique_values": 347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.69420035149385,
                "explored_percent_lambda": 24.956063268892795,
                "explored_percent_none": 29.349736379613358,
                "kept_percent_concrete": 73.90029325513197,
                "kept_percent_lambda": 26.099706744868037,
                "num_examples": 5,
                "num_explored_concrete": 520,
                "num_explored_lambda": 284,
                "num_explored_none": 334,
                "num_inputs": 2,
                "num_kept_concrete": 252,
                "num_kept_lambda": 89,
                "num_values_explored": 1138,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13932
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.21850095596164,
            "num_unique_values": 177,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 8.666666666666666,
                "explored_percent_lambda": 63.666666666666664,
                "explored_percent_none": 27.666666666666668,
                "kept_percent_concrete": 17.441860465116278,
                "kept_percent_lambda": 82.55813953488372,
                "num_examples": 3,
                "num_explored_concrete": 52,
                "num_explored_lambda": 382,
                "num_explored_none": 166,
                "num_inputs": 1,
                "num_kept_concrete": 30,
                "num_kept_lambda": 142,
                "num_values_explored": 600,
                "num_values_kept": 172,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12352
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.74825972504914,
            "num_unique_values": 351,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 17.313432835820894,
                "explored_percent_lambda": 54.42786069651741,
                "explored_percent_none": 28.258706467661693,
                "kept_percent_concrete": 30.92485549132948,
                "kept_percent_lambda": 69.07514450867052,
                "num_examples": 3,
                "num_explored_concrete": 174,
                "num_explored_lambda": 547,
                "num_explored_none": 284,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 239,
                "num_values_explored": 1005,
                "num_values_kept": 346,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11287
            },
            "success": false,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.69214035302866,
            "num_unique_values": 212,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.733333333333333,
                "explored_percent_lambda": 68.66666666666667,
                "explored_percent_none": 17.6,
                "kept_percent_concrete": 28.640776699029125,
                "kept_percent_lambda": 71.35922330097087,
                "num_examples": 3,
                "num_explored_concrete": 103,
                "num_explored_lambda": 515,
                "num_explored_none": 132,
                "num_inputs": 2,
                "num_kept_concrete": 59,
                "num_kept_lambda": 147,
                "num_values_explored": 750,
                "num_values_kept": 206,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11522
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8110859050648287,
            "num_unique_values": 312,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.19409282700422,
                "explored_percent_lambda": 43.881856540084385,
                "explored_percent_none": 13.924050632911392,
                "kept_percent_concrete": 41.693811074918564,
                "kept_percent_lambda": 58.306188925081436,
                "num_examples": 3,
                "num_explored_concrete": 300,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 128,
                "num_kept_lambda": 179,
                "num_values_explored": 711,
                "num_values_kept": 307,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.15840537298936,
            "num_unique_values": 203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.461538461538462,
                "explored_percent_lambda": 53.40236686390533,
                "explored_percent_none": 33.13609467455621,
                "kept_percent_concrete": 27.272727272727273,
                "kept_percent_lambda": 72.72727272727273,
                "num_examples": 3,
                "num_explored_concrete": 91,
                "num_explored_lambda": 361,
                "num_explored_none": 224,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 144,
                "num_values_explored": 676,
                "num_values_kept": 198,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11961
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.36286464298609644,
            "num_unique_values": 103,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.30769230769231,
                "explored_percent_lambda": 47.43589743589744,
                "explored_percent_none": 10.256410256410257,
                "kept_percent_concrete": 36.08247422680412,
                "kept_percent_lambda": 63.91752577319588,
                "num_examples": 3,
                "num_explored_concrete": 66,
                "num_explored_lambda": 74,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 62,
                "num_values_explored": 156,
                "num_values_kept": 97,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 156
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.12892646994442,
            "num_unique_values": 523,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.823660714285715,
                "explored_percent_lambda": 23.270089285714285,
                "explored_percent_none": 28.90625,
                "kept_percent_concrete": 67.18146718146718,
                "kept_percent_lambda": 32.818532818532816,
                "num_examples": 5,
                "num_explored_concrete": 857,
                "num_explored_lambda": 417,
                "num_explored_none": 518,
                "num_inputs": 1,
                "num_kept_concrete": 348,
                "num_kept_lambda": 170,
                "num_values_explored": 1792,
                "num_values_kept": 518,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13326
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.52624290296808,
            "num_unique_values": 347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.140969162995596,
                "explored_percent_lambda": 49.669603524229075,
                "explored_percent_none": 16.18942731277533,
                "kept_percent_concrete": 34.89736070381232,
                "kept_percent_lambda": 65.10263929618769,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 451,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 119,
                "num_kept_lambda": 222,
                "num_values_explored": 908,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11935
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6511117219924927,
            "num_unique_values": 175,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.013513513513516,
                "explored_percent_lambda": 34.12162162162162,
                "explored_percent_none": 14.864864864864865,
                "kept_percent_concrete": 49.411764705882355,
                "kept_percent_lambda": 50.588235294117645,
                "num_examples": 5,
                "num_explored_concrete": 151,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 86,
                "num_values_explored": 296,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 296
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.42888553801458,
            "num_unique_values": 506,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.457413249211356,
                "explored_percent_lambda": 37.791798107255524,
                "explored_percent_none": 26.750788643533124,
                "kept_percent_concrete": 51.90380761523046,
                "kept_percent_lambda": 48.09619238476954,
                "num_examples": 3,
                "num_explored_concrete": 562,
                "num_explored_lambda": 599,
                "num_explored_none": 424,
                "num_inputs": 3,
                "num_kept_concrete": 259,
                "num_kept_lambda": 240,
                "num_values_explored": 1585,
                "num_values_kept": 499,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13239
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.23012223199476,
            "num_unique_values": 543,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.95224228305184,
                "explored_percent_lambda": 31.450203843913805,
                "explored_percent_none": 22.59755387303436,
                "kept_percent_concrete": 67.1003717472119,
                "kept_percent_lambda": 32.899628252788105,
                "num_examples": 5,
                "num_explored_concrete": 789,
                "num_explored_lambda": 540,
                "num_explored_none": 388,
                "num_inputs": 1,
                "num_kept_concrete": 361,
                "num_kept_lambda": 177,
                "num_values_explored": 1717,
                "num_values_kept": 538,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12447
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.81042375892866,
            "num_unique_values": 536,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.40410519563823,
                "explored_percent_lambda": 38.742783835792174,
                "explored_percent_none": 30.853110968569595,
                "kept_percent_concrete": 45.38606403013183,
                "kept_percent_lambda": 54.61393596986817,
                "num_examples": 3,
                "num_explored_concrete": 474,
                "num_explored_lambda": 604,
                "num_explored_none": 481,
                "num_inputs": 1,
                "num_kept_concrete": 241,
                "num_kept_lambda": 290,
                "num_values_explored": 1559,
                "num_values_kept": 531,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12204
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9791854729410261,
            "num_unique_values": 261,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.054054054054056,
                "explored_percent_lambda": 33.78378378378378,
                "explored_percent_none": 12.162162162162161,
                "kept_percent_concrete": 52.15686274509804,
                "kept_percent_lambda": 47.84313725490196,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 175,
                "num_explored_none": 63,
                "num_inputs": 2,
                "num_kept_concrete": 133,
                "num_kept_lambda": 122,
                "num_values_explored": 518,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 518
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8018850469961762,
            "num_unique_values": 242,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.72186836518047,
                "explored_percent_lambda": 26.751592356687897,
                "explored_percent_none": 12.526539278131635,
                "kept_percent_concrete": 60.33755274261603,
                "kept_percent_lambda": 39.66244725738397,
                "num_examples": 5,
                "num_explored_concrete": 286,
                "num_explored_lambda": 126,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 143,
                "num_kept_lambda": 94,
                "num_values_explored": 471,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.88637005002238,
            "num_unique_values": 259,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 22.167487684729064,
                "explored_percent_lambda": 50.61576354679803,
                "explored_percent_none": 27.216748768472907,
                "kept_percent_concrete": 39.37007874015748,
                "kept_percent_lambda": 60.62992125984252,
                "num_examples": 3,
                "num_explored_concrete": 180,
                "num_explored_lambda": 411,
                "num_explored_none": 221,
                "num_inputs": 1,
                "num_kept_concrete": 100,
                "num_kept_lambda": 154,
                "num_values_explored": 812,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 2863
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09973277896643,
            "num_unique_values": 176,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 7.604017216642755,
                "explored_percent_lambda": 65.27977044476327,
                "explored_percent_none": 27.116212338593975,
                "kept_percent_concrete": 16.374269005847953,
                "kept_percent_lambda": 83.62573099415205,
                "num_examples": 3,
                "num_explored_concrete": 53,
                "num_explored_lambda": 455,
                "num_explored_none": 189,
                "num_inputs": 1,
                "num_kept_concrete": 28,
                "num_kept_lambda": 143,
                "num_values_explored": 697,
                "num_values_kept": 171,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11501
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.487994357012212,
            "num_unique_values": 237,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 24.84700122399021,
                "explored_percent_lambda": 44.30844553243574,
                "explored_percent_none": 30.84455324357405,
                "kept_percent_concrete": 55.41125541125541,
                "kept_percent_lambda": 44.58874458874459,
                "num_examples": 3,
                "num_explored_concrete": 203,
                "num_explored_lambda": 362,
                "num_explored_none": 252,
                "num_inputs": 2,
                "num_kept_concrete": 128,
                "num_kept_lambda": 103,
                "num_values_explored": 817,
                "num_values_kept": 231,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 4603
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28988334001042,
            "num_unique_values": 352,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 27.886497064579256,
                "explored_percent_lambda": 46.477495107632095,
                "explored_percent_none": 25.63600782778865,
                "kept_percent_concrete": 42.65129682997118,
                "kept_percent_lambda": 57.34870317002882,
                "num_examples": 3,
                "num_explored_concrete": 285,
                "num_explored_lambda": 475,
                "num_explored_none": 262,
                "num_inputs": 1,
                "num_kept_concrete": 148,
                "num_kept_lambda": 199,
                "num_values_explored": 1022,
                "num_values_kept": 347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11834
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.0869087669998407,
            "num_unique_values": 272,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 81.16531165311653,
                "explored_percent_lambda": 8.536585365853659,
                "explored_percent_none": 10.29810298102981,
                "kept_percent_concrete": 87.59398496240601,
                "kept_percent_lambda": 12.406015037593985,
                "num_examples": 5,
                "num_explored_concrete": 599,
                "num_explored_lambda": 63,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 233,
                "num_kept_lambda": 33,
                "num_values_explored": 738,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 738
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.43031683098525,
            "num_unique_values": 365,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.965391621129324,
                "explored_percent_lambda": 42.076502732240435,
                "explored_percent_none": 26.958105646630237,
                "kept_percent_concrete": 60.16713091922006,
                "kept_percent_lambda": 39.83286908077994,
                "num_examples": 5,
                "num_explored_concrete": 340,
                "num_explored_lambda": 462,
                "num_explored_none": 296,
                "num_inputs": 2,
                "num_kept_concrete": 216,
                "num_kept_lambda": 143,
                "num_values_explored": 1098,
                "num_values_kept": 359,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 14113
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8453750689513981,
            "num_unique_values": 246,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 55.432372505543235,
                "explored_percent_lambda": 32.37250554323725,
                "explored_percent_none": 12.195121951219512,
                "kept_percent_concrete": 56.43153526970954,
                "kept_percent_lambda": 43.56846473029046,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 146,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 105,
                "num_values_explored": 451,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 451
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.03886109392624,
            "num_unique_values": 310,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.18628454452406,
                "explored_percent_lambda": 37.87103377686796,
                "explored_percent_none": 27.942681678607983,
                "kept_percent_concrete": 56.578947368421055,
                "kept_percent_lambda": 43.421052631578945,
                "num_examples": 3,
                "num_explored_concrete": 334,
                "num_explored_lambda": 370,
                "num_explored_none": 273,
                "num_inputs": 2,
                "num_kept_concrete": 172,
                "num_kept_lambda": 132,
                "num_values_explored": 977,
                "num_values_kept": 304,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12336
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.87978341302369,
            "num_unique_values": 258,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 26.023391812865498,
                "explored_percent_lambda": 53.07017543859649,
                "explored_percent_none": 20.906432748538013,
                "kept_percent_concrete": 45.63492063492063,
                "kept_percent_lambda": 54.36507936507937,
                "num_examples": 3,
                "num_explored_concrete": 178,
                "num_explored_lambda": 363,
                "num_explored_none": 143,
                "num_inputs": 2,
                "num_kept_concrete": 115,
                "num_kept_lambda": 137,
                "num_values_explored": 684,
                "num_values_kept": 252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12888
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5819795599672943,
            "num_unique_values": 182,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 38.46153846153846,
                "explored_percent_lambda": 52.136752136752136,
                "explored_percent_none": 9.401709401709402,
                "kept_percent_concrete": 39.20454545454545,
                "kept_percent_lambda": 60.79545454545455,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 122,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 107,
                "num_values_explored": 234,
                "num_values_kept": 176,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.60708458907902,
            "num_unique_values": 352,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.67377398720682,
                "explored_percent_lambda": 46.26865671641791,
                "explored_percent_none": 17.057569296375267,
                "kept_percent_concrete": 53.179190751445084,
                "kept_percent_lambda": 46.820809248554916,
                "num_examples": 5,
                "num_explored_concrete": 344,
                "num_explored_lambda": 434,
                "num_explored_none": 160,
                "num_inputs": 2,
                "num_kept_concrete": 184,
                "num_kept_lambda": 162,
                "num_values_explored": 938,
                "num_values_kept": 346,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 14041
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30807287502102554,
            "num_unique_values": 232,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 70.89397089397089,
                "explored_percent_lambda": 20.374220374220375,
                "explored_percent_none": 8.731808731808732,
                "kept_percent_concrete": 72.56637168141593,
                "kept_percent_lambda": 27.43362831858407,
                "num_examples": 3,
                "num_explored_concrete": 341,
                "num_explored_lambda": 98,
                "num_explored_none": 42,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 62,
                "num_values_explored": 481,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97920921607874,
            "num_unique_values": 446,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.31699346405229,
                "explored_percent_lambda": 38.72549019607843,
                "explored_percent_none": 22.95751633986928,
                "kept_percent_concrete": 47.27272727272727,
                "kept_percent_lambda": 52.72727272727273,
                "num_examples": 3,
                "num_explored_concrete": 469,
                "num_explored_lambda": 474,
                "num_explored_none": 281,
                "num_inputs": 2,
                "num_kept_concrete": 208,
                "num_kept_lambda": 232,
                "num_values_explored": 1224,
                "num_values_kept": 440,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11662
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.96392829611432,
            "num_unique_values": 258,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.17751479289941,
                "explored_percent_lambda": 43.49112426035503,
                "explored_percent_none": 26.331360946745562,
                "kept_percent_concrete": 53.57142857142857,
                "kept_percent_lambda": 46.42857142857143,
                "num_examples": 5,
                "num_explored_concrete": 204,
                "num_explored_lambda": 294,
                "num_explored_none": 178,
                "num_inputs": 2,
                "num_kept_concrete": 135,
                "num_kept_lambda": 117,
                "num_values_explored": 676,
                "num_values_kept": 252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13756
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.48753974202554673,
            "num_unique_values": 153,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: -1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.431372549019606,
                "explored_percent_lambda": 40.78431372549019,
                "explored_percent_none": 20.784313725490197,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 5,
                "num_explored_concrete": 98,
                "num_explored_lambda": 104,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 255,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 255
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.04161051695701,
            "num_unique_values": 190,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 7.16374269005848,
                "explored_percent_lambda": 71.6374269005848,
                "explored_percent_none": 21.198830409356724,
                "kept_percent_concrete": 15.675675675675675,
                "kept_percent_lambda": 84.32432432432432,
                "num_examples": 3,
                "num_explored_concrete": 49,
                "num_explored_lambda": 490,
                "num_explored_none": 145,
                "num_inputs": 1,
                "num_kept_concrete": 29,
                "num_kept_lambda": 156,
                "num_values_explored": 684,
                "num_values_kept": 185,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11985
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.44328447605949,
            "num_unique_values": 244,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 25.092707045735477,
                "explored_percent_lambda": 42.398022249690975,
                "explored_percent_none": 32.509270704573545,
                "kept_percent_concrete": 41.42259414225941,
                "kept_percent_lambda": 58.57740585774059,
                "num_examples": 3,
                "num_explored_concrete": 203,
                "num_explored_lambda": 343,
                "num_explored_none": 263,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 140,
                "num_values_explored": 809,
                "num_values_kept": 239,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12867
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5872132639633492,
            "num_unique_values": 160,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 9.583333333333334,
                "kept_percent_concrete": 34.83870967741935,
                "kept_percent_lambda": 65.16129032258064,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 121,
                "num_explored_none": 23,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 101,
                "num_values_explored": 240,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6815546759171411,
            "num_unique_values": 212,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 77.54629629629629,
                "explored_percent_lambda": 15.972222222222221,
                "explored_percent_none": 6.481481481481482,
                "kept_percent_concrete": 80.97560975609755,
                "kept_percent_lambda": 19.024390243902438,
                "num_examples": 3,
                "num_explored_concrete": 335,
                "num_explored_lambda": 69,
                "num_explored_none": 28,
                "num_inputs": 3,
                "num_kept_concrete": 166,
                "num_kept_lambda": 39,
                "num_values_explored": 432,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 432
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.5514220809564,
            "num_unique_values": 474,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.656213704994194,
                "explored_percent_lambda": 39.663182346109174,
                "explored_percent_none": 24.680603948896632,
                "kept_percent_concrete": 50.10660980810235,
                "kept_percent_lambda": 49.89339019189765,
                "num_examples": 3,
                "num_explored_concrete": 614,
                "num_explored_lambda": 683,
                "num_explored_none": 425,
                "num_inputs": 1,
                "num_kept_concrete": 235,
                "num_kept_lambda": 234,
                "num_values_explored": 1722,
                "num_values_kept": 469,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13028
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.20245041290764,
            "num_unique_values": 155,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 16.08695652173913,
                "explored_percent_lambda": 52.17391304347826,
                "explored_percent_none": 31.73913043478261,
                "kept_percent_concrete": 28.187919463087248,
                "kept_percent_lambda": 71.81208053691275,
                "num_examples": 3,
                "num_explored_concrete": 74,
                "num_explored_lambda": 240,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 107,
                "num_values_explored": 460,
                "num_values_kept": 149,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 11875
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.75197514006868,
            "num_unique_values": 201,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.305764411027567,
                "explored_percent_lambda": 39.473684210526315,
                "explored_percent_none": 38.22055137844612,
                "kept_percent_concrete": 52.577319587628864,
                "kept_percent_lambda": 47.422680412371136,
                "num_examples": 3,
                "num_explored_concrete": 178,
                "num_explored_lambda": 315,
                "num_explored_none": 305,
                "num_inputs": 3,
                "num_kept_concrete": 102,
                "num_kept_lambda": 92,
                "num_values_explored": 798,
                "num_values_kept": 194,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 14181
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.472435966017656,
            "num_unique_values": 258,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 18.56763925729443,
                "explored_percent_lambda": 40.318302387267906,
                "explored_percent_none": 41.11405835543766,
                "kept_percent_concrete": 39.92094861660079,
                "kept_percent_lambda": 60.07905138339921,
                "num_examples": 3,
                "num_explored_concrete": 210,
                "num_explored_lambda": 456,
                "num_explored_none": 465,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 152,
                "num_values_explored": 1131,
                "num_values_kept": 253,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 4343
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.20978609204758,
            "num_unique_values": 469,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 28.39821314613912,
                "explored_percent_lambda": 45.118059987236755,
                "explored_percent_none": 26.48372686662412,
                "kept_percent_concrete": 41.37931034482759,
                "kept_percent_lambda": 58.62068965517241,
                "num_examples": 3,
                "num_explored_concrete": 445,
                "num_explored_lambda": 707,
                "num_explored_none": 415,
                "num_inputs": 1,
                "num_kept_concrete": 192,
                "num_kept_lambda": 272,
                "num_values_explored": 1567,
                "num_values_kept": 464,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12255
            },
            "success": false,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.78739378589671,
            "num_unique_values": 493,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 29.306930693069308,
                "explored_percent_lambda": 43.4983498349835,
                "explored_percent_none": 27.194719471947195,
                "kept_percent_concrete": 39.75409836065574,
                "kept_percent_lambda": 60.24590163934426,
                "num_examples": 3,
                "num_explored_concrete": 444,
                "num_explored_lambda": 659,
                "num_explored_none": 412,
                "num_inputs": 1,
                "num_kept_concrete": 194,
                "num_kept_lambda": 294,
                "num_values_explored": 1515,
                "num_values_kept": 488,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12384
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.46619631396607,
            "num_unique_values": 604,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.44297082228117,
                "explored_percent_lambda": 24.137931034482758,
                "explored_percent_none": 26.419098143236074,
                "kept_percent_concrete": 74.58193979933111,
                "kept_percent_lambda": 25.418060200668897,
                "num_examples": 5,
                "num_explored_concrete": 932,
                "num_explored_lambda": 455,
                "num_explored_none": 498,
                "num_inputs": 2,
                "num_kept_concrete": 446,
                "num_kept_lambda": 152,
                "num_values_explored": 1885,
                "num_values_kept": 598,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 14110
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}