{
    "num_tasks": 50,
    "num_tasks_solved": 14,
    "results": [
        {
            "elapsed_time": 104.69809972296935,
            "num_unique_values": 142,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 15.954415954415955,
                "explored_percent_lambda": 60.11396011396011,
                "explored_percent_none": 23.931623931623932,
                "kept_percent_concrete": 17.647058823529413,
                "kept_percent_lambda": 82.3529411764706,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 211,
                "num_explored_none": 84,
                "num_inputs": 2,
                "num_kept_concrete": 24,
                "num_kept_lambda": 112,
                "num_values_explored": 351,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4772
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.85736088303383,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.675767918088738,
                "explored_percent_lambda": 68.60068259385666,
                "explored_percent_none": 16.72354948805461,
                "kept_percent_concrete": 7.575757575757576,
                "kept_percent_lambda": 92.42424242424242,
                "num_examples": 5,
                "num_explored_concrete": 43,
                "num_explored_lambda": 201,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 122,
                "num_values_explored": 293,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4598
            },
            "success": false,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.23080115800258,
            "num_unique_values": 145,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 19.764011799410028,
                "explored_percent_lambda": 58.4070796460177,
                "explored_percent_none": 21.828908554572273,
                "kept_percent_concrete": 17.985611510791365,
                "kept_percent_lambda": 82.01438848920863,
                "num_examples": 5,
                "num_explored_concrete": 67,
                "num_explored_lambda": 198,
                "num_explored_none": 74,
                "num_inputs": 2,
                "num_kept_concrete": 25,
                "num_kept_lambda": 114,
                "num_values_explored": 339,
                "num_values_kept": 139,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4570
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8447787309996784,
            "num_unique_values": 318,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(-1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.57818659658344,
                "explored_percent_lambda": 28.252299605781864,
                "explored_percent_none": 11.169513797634691,
                "kept_percent_concrete": 60.063897763578275,
                "kept_percent_lambda": 39.936102236421725,
                "num_examples": 3,
                "num_explored_concrete": 461,
                "num_explored_lambda": 215,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 125,
                "num_values_explored": 761,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 761
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3233539109351113,
            "num_unique_values": 298,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.678642714570856,
                "explored_percent_lambda": 30.139720558882235,
                "explored_percent_none": 9.181636726546905,
                "kept_percent_concrete": 64.50511945392492,
                "kept_percent_lambda": 35.49488054607509,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 151,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 104,
                "num_values_explored": 501,
                "num_values_kept": 293,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.51280338701326,
            "num_unique_values": 140,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 17.63005780346821,
                "explored_percent_lambda": 58.959537572254334,
                "explored_percent_none": 23.410404624277458,
                "kept_percent_concrete": 20.895522388059703,
                "kept_percent_lambda": 79.1044776119403,
                "num_examples": 3,
                "num_explored_concrete": 61,
                "num_explored_lambda": 204,
                "num_explored_none": 81,
                "num_inputs": 2,
                "num_kept_concrete": 28,
                "num_kept_lambda": 106,
                "num_values_explored": 346,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5583
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.88665429095272,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.061224489795919,
                "explored_percent_lambda": 68.9795918367347,
                "explored_percent_none": 17.959183673469386,
                "kept_percent_concrete": 15.267175572519085,
                "kept_percent_lambda": 84.73282442748092,
                "num_examples": 3,
                "num_explored_concrete": 32,
                "num_explored_lambda": 169,
                "num_explored_none": 44,
                "num_inputs": 3,
                "num_kept_concrete": 20,
                "num_kept_lambda": 111,
                "num_values_explored": 245,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4309
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.44722300802823,
            "num_unique_values": 139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.866894197952217,
                "explored_percent_lambda": 62.45733788395904,
                "explored_percent_none": 14.675767918088738,
                "kept_percent_concrete": 8.208955223880597,
                "kept_percent_lambda": 91.7910447761194,
                "num_examples": 5,
                "num_explored_concrete": 67,
                "num_explored_lambda": 183,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 123,
                "num_values_explored": 293,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4296
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.51631852495484,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.352313167259787,
                "explored_percent_lambda": 60.1423487544484,
                "explored_percent_none": 18.505338078291814,
                "kept_percent_concrete": 8.333333333333334,
                "kept_percent_lambda": 91.66666666666667,
                "num_examples": 5,
                "num_explored_concrete": 60,
                "num_explored_lambda": 169,
                "num_explored_none": 52,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 121,
                "num_values_explored": 281,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4027
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.4138307600515,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.73913043478261,
                "explored_percent_lambda": 40.869565217391305,
                "explored_percent_none": 17.391304347826086,
                "kept_percent_concrete": 32.06106870229008,
                "kept_percent_lambda": 67.93893129770993,
                "num_examples": 5,
                "num_explored_concrete": 144,
                "num_explored_lambda": 141,
                "num_explored_none": 60,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 89,
                "num_values_explored": 345,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4938
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.413242770941,
            "num_unique_values": 136,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.96168582375479,
                "explored_percent_lambda": 67.816091954023,
                "explored_percent_none": 22.22222222222222,
                "kept_percent_concrete": 6.870229007633588,
                "kept_percent_lambda": 93.12977099236642,
                "num_examples": 3,
                "num_explored_concrete": 26,
                "num_explored_lambda": 177,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 122,
                "num_values_explored": 261,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4200
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.06887367693707,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 7.024793388429752,
                "explored_percent_lambda": 69.00826446280992,
                "explored_percent_none": 23.96694214876033,
                "kept_percent_concrete": 5.303030303030303,
                "kept_percent_lambda": 94.6969696969697,
                "num_examples": 3,
                "num_explored_concrete": 17,
                "num_explored_lambda": 167,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 7,
                "num_kept_lambda": 125,
                "num_values_explored": 242,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3948
            },
            "success": false,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.4101077929372,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.23841059602649,
                "explored_percent_lambda": 63.57615894039735,
                "explored_percent_none": 22.185430463576157,
                "kept_percent_concrete": 14.393939393939394,
                "kept_percent_lambda": 85.60606060606061,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 192,
                "num_explored_none": 67,
                "num_inputs": 2,
                "num_kept_concrete": 19,
                "num_kept_lambda": 113,
                "num_values_explored": 302,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4622
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.1619239400606602,
            "num_unique_values": 312,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.19409282700422,
                "explored_percent_lambda": 43.881856540084385,
                "explored_percent_none": 13.924050632911392,
                "kept_percent_concrete": 41.693811074918564,
                "kept_percent_lambda": 58.306188925081436,
                "num_examples": 3,
                "num_explored_concrete": 300,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 128,
                "num_kept_lambda": 179,
                "num_values_explored": 711,
                "num_values_kept": 307,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.4154066760093,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.486891385767791,
                "explored_percent_lambda": 59.9250936329588,
                "explored_percent_none": 29.588014981273407,
                "kept_percent_concrete": 7.518796992481203,
                "kept_percent_lambda": 92.4812030075188,
                "num_examples": 3,
                "num_explored_concrete": 28,
                "num_explored_lambda": 160,
                "num_explored_none": 79,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 123,
                "num_values_explored": 267,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3681
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5139248799532652,
            "num_unique_values": 103,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.30769230769231,
                "explored_percent_lambda": 47.43589743589744,
                "explored_percent_none": 10.256410256410257,
                "kept_percent_concrete": 36.08247422680412,
                "kept_percent_lambda": 63.91752577319588,
                "num_examples": 3,
                "num_explored_concrete": 66,
                "num_explored_lambda": 74,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 62,
                "num_values_explored": 156,
                "num_values_kept": 97,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 156
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.21731940703467,
            "num_unique_values": 124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.875,
                "explored_percent_lambda": 54.6875,
                "explored_percent_none": 23.4375,
                "kept_percent_concrete": 7.563025210084033,
                "kept_percent_lambda": 92.43697478991596,
                "num_examples": 5,
                "num_explored_concrete": 56,
                "num_explored_lambda": 140,
                "num_explored_none": 60,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 110,
                "num_values_explored": 256,
                "num_values_kept": 119,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4098
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.64406887209043,
            "num_unique_values": 143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 7.560137457044673,
                "explored_percent_lambda": 69.7594501718213,
                "explored_percent_none": 22.68041237113402,
                "kept_percent_concrete": 6.569343065693431,
                "kept_percent_lambda": 93.43065693430657,
                "num_examples": 3,
                "num_explored_concrete": 22,
                "num_explored_lambda": 203,
                "num_explored_none": 66,
                "num_inputs": 2,
                "num_kept_concrete": 9,
                "num_kept_lambda": 128,
                "num_values_explored": 291,
                "num_values_kept": 137,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5344
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8638525820570067,
            "num_unique_values": 175,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.013513513513516,
                "explored_percent_lambda": 34.12162162162162,
                "explored_percent_none": 14.864864864864865,
                "kept_percent_concrete": 49.411764705882355,
                "kept_percent_lambda": 50.588235294117645,
                "num_examples": 5,
                "num_explored_concrete": 151,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 86,
                "num_values_explored": 296,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 296
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.35046047903597,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.333333333333332,
                "explored_percent_lambda": 54.333333333333336,
                "explored_percent_none": 22.333333333333332,
                "kept_percent_concrete": 22.137404580152673,
                "kept_percent_lambda": 77.86259541984732,
                "num_examples": 3,
                "num_explored_concrete": 70,
                "num_explored_lambda": 163,
                "num_explored_none": 67,
                "num_inputs": 3,
                "num_kept_concrete": 29,
                "num_kept_lambda": 102,
                "num_values_explored": 300,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4920
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.65851289499551,
            "num_unique_values": 148,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.964912280701755,
                "explored_percent_lambda": 67.10526315789474,
                "explored_percent_none": 21.92982456140351,
                "kept_percent_concrete": 13.986013986013987,
                "kept_percent_lambda": 86.01398601398601,
                "num_examples": 5,
                "num_explored_concrete": 50,
                "num_explored_lambda": 306,
                "num_explored_none": 100,
                "num_inputs": 1,
                "num_kept_concrete": 20,
                "num_kept_lambda": 123,
                "num_values_explored": 456,
                "num_values_kept": 143,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4186
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.18530032399576,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.92436974789916,
                "explored_percent_lambda": 72.26890756302521,
                "explored_percent_none": 16.80672268907563,
                "kept_percent_concrete": 7.575757575757576,
                "kept_percent_lambda": 92.42424242424242,
                "num_examples": 3,
                "num_explored_concrete": 26,
                "num_explored_lambda": 172,
                "num_explored_none": 40,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 122,
                "num_values_explored": 238,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4607
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5731786190299317,
            "num_unique_values": 261,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.054054054054056,
                "explored_percent_lambda": 33.78378378378378,
                "explored_percent_none": 12.162162162162161,
                "kept_percent_concrete": 52.15686274509804,
                "kept_percent_lambda": 47.84313725490196,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 175,
                "num_explored_none": 63,
                "num_inputs": 2,
                "num_kept_concrete": 133,
                "num_kept_lambda": 122,
                "num_values_explored": 518,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 518
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3265795219922438,
            "num_unique_values": 242,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.72186836518047,
                "explored_percent_lambda": 26.751592356687897,
                "explored_percent_none": 12.526539278131635,
                "kept_percent_concrete": 60.33755274261603,
                "kept_percent_lambda": 39.66244725738397,
                "num_examples": 5,
                "num_explored_concrete": 286,
                "num_explored_lambda": 126,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 143,
                "num_kept_lambda": 94,
                "num_values_explored": 471,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.04153579904232,
            "num_unique_values": 139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.307875894988067,
                "explored_percent_lambda": 66.10978520286396,
                "explored_percent_none": 24.58233890214797,
                "kept_percent_concrete": 7.462686567164179,
                "kept_percent_lambda": 92.53731343283582,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 277,
                "num_explored_none": 103,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 124,
                "num_values_explored": 419,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4182
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.57980217097793,
            "num_unique_values": 136,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 7.829181494661921,
                "explored_percent_lambda": 72.59786476868328,
                "explored_percent_none": 19.572953736654803,
                "kept_percent_concrete": 6.106870229007634,
                "kept_percent_lambda": 93.89312977099236,
                "num_examples": 3,
                "num_explored_concrete": 22,
                "num_explored_lambda": 204,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 8,
                "num_kept_lambda": 123,
                "num_values_explored": 281,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4769
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.21265854104422,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 18.58407079646018,
                "explored_percent_lambda": 55.1622418879056,
                "explored_percent_none": 26.253687315634217,
                "kept_percent_concrete": 25.0,
                "kept_percent_lambda": 75.0,
                "num_examples": 3,
                "num_explored_concrete": 63,
                "num_explored_lambda": 187,
                "num_explored_none": 89,
                "num_inputs": 2,
                "num_kept_concrete": 33,
                "num_kept_lambda": 99,
                "num_values_explored": 339,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5231
            },
            "success": false,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.21221464697737,
            "num_unique_values": 139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 8.206686930091186,
                "explored_percent_lambda": 67.78115501519757,
                "explored_percent_none": 24.012158054711247,
                "kept_percent_concrete": 8.955223880597014,
                "kept_percent_lambda": 91.04477611940298,
                "num_examples": 3,
                "num_explored_concrete": 27,
                "num_explored_lambda": 223,
                "num_explored_none": 79,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 122,
                "num_values_explored": 329,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3856
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6151770759606734,
            "num_unique_values": 272,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 81.16531165311653,
                "explored_percent_lambda": 8.536585365853659,
                "explored_percent_none": 10.29810298102981,
                "kept_percent_concrete": 87.59398496240601,
                "kept_percent_lambda": 12.406015037593985,
                "num_examples": 5,
                "num_explored_concrete": 599,
                "num_explored_lambda": 63,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 233,
                "num_kept_lambda": 33,
                "num_values_explored": 738,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 738
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.69600647396874,
            "num_unique_values": 142,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.48997134670487,
                "explored_percent_lambda": 57.306590257879655,
                "explored_percent_none": 21.20343839541547,
                "kept_percent_concrete": 21.323529411764707,
                "kept_percent_lambda": 78.67647058823529,
                "num_examples": 5,
                "num_explored_concrete": 75,
                "num_explored_lambda": 200,
                "num_explored_none": 74,
                "num_inputs": 2,
                "num_kept_concrete": 29,
                "num_kept_lambda": 107,
                "num_values_explored": 349,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5150
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3695919370511547,
            "num_unique_values": 246,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 55.432372505543235,
                "explored_percent_lambda": 32.37250554323725,
                "explored_percent_none": 12.195121951219512,
                "kept_percent_concrete": 56.43153526970954,
                "kept_percent_lambda": 43.56846473029046,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 146,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 105,
                "num_values_explored": 451,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 451
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.97886244195979,
            "num_unique_values": 140,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.30971128608924,
                "explored_percent_lambda": 53.54330708661417,
                "explored_percent_none": 24.146981627296586,
                "kept_percent_concrete": 23.880597014925375,
                "kept_percent_lambda": 76.11940298507463,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 204,
                "num_explored_none": 92,
                "num_inputs": 2,
                "num_kept_concrete": 32,
                "num_kept_lambda": 102,
                "num_values_explored": 381,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5089
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.80978651996702,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 24.124513618677042,
                "explored_percent_lambda": 59.92217898832685,
                "explored_percent_none": 15.95330739299611,
                "kept_percent_concrete": 18.3206106870229,
                "kept_percent_lambda": 81.6793893129771,
                "num_examples": 3,
                "num_explored_concrete": 62,
                "num_explored_lambda": 154,
                "num_explored_none": 41,
                "num_inputs": 2,
                "num_kept_concrete": 24,
                "num_kept_lambda": 107,
                "num_values_explored": 257,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 5167
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.7775761199882254,
            "num_unique_values": 182,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 38.46153846153846,
                "explored_percent_lambda": 52.136752136752136,
                "explored_percent_none": 9.401709401709402,
                "kept_percent_concrete": 39.20454545454545,
                "kept_percent_lambda": 60.79545454545455,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 122,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 107,
                "num_values_explored": 234,
                "num_values_kept": 176,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.51351842994336,
            "num_unique_values": 111,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.504424778761061,
                "explored_percent_lambda": 63.716814159292035,
                "explored_percent_none": 24.778761061946902,
                "kept_percent_concrete": 7.619047619047619,
                "kept_percent_lambda": 92.38095238095238,
                "num_examples": 5,
                "num_explored_concrete": 26,
                "num_explored_lambda": 144,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 8,
                "num_kept_lambda": 97,
                "num_values_explored": 226,
                "num_values_kept": 105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4749
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.322371445945464,
            "num_unique_values": 232,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 70.89397089397089,
                "explored_percent_lambda": 20.374220374220375,
                "explored_percent_none": 8.731808731808732,
                "kept_percent_concrete": 72.56637168141593,
                "kept_percent_lambda": 27.43362831858407,
                "num_examples": 3,
                "num_explored_concrete": 341,
                "num_explored_lambda": 98,
                "num_explored_none": 42,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 62,
                "num_values_explored": 481,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.708767300006,
            "num_unique_values": 141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.50877192982456,
                "explored_percent_lambda": 54.73684210526316,
                "explored_percent_none": 21.75438596491228,
                "kept_percent_concrete": 14.814814814814815,
                "kept_percent_lambda": 85.18518518518519,
                "num_examples": 3,
                "num_explored_concrete": 67,
                "num_explored_lambda": 156,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 20,
                "num_kept_lambda": 115,
                "num_values_explored": 285,
                "num_values_kept": 135,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4442
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.35172972001601,
            "num_unique_values": 140,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 28.96551724137931,
                "explored_percent_lambda": 55.172413793103445,
                "explored_percent_none": 15.862068965517242,
                "kept_percent_concrete": 18.65671641791045,
                "kept_percent_lambda": 81.34328358208955,
                "num_examples": 5,
                "num_explored_concrete": 84,
                "num_explored_lambda": 160,
                "num_explored_none": 46,
                "num_inputs": 2,
                "num_kept_concrete": 25,
                "num_kept_lambda": 109,
                "num_values_explored": 290,
                "num_values_kept": 134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4309
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8329912240151316,
            "num_unique_values": 153,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: -1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.431372549019606,
                "explored_percent_lambda": 40.78431372549019,
                "explored_percent_none": 20.784313725490197,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 5,
                "num_explored_concrete": 98,
                "num_explored_lambda": 104,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 255,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 255
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.26998476299923,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 3.8062283737024223,
                "explored_percent_lambda": 71.280276816609,
                "explored_percent_none": 24.913494809688583,
                "kept_percent_concrete": 6.015037593984962,
                "kept_percent_lambda": 93.98496240601504,
                "num_examples": 3,
                "num_explored_concrete": 11,
                "num_explored_lambda": 206,
                "num_explored_none": 72,
                "num_inputs": 1,
                "num_kept_concrete": 8,
                "num_kept_lambda": 125,
                "num_values_explored": 289,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3927
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.26344990893267,
            "num_unique_values": 136,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.810699588477366,
                "explored_percent_lambda": 61.31687242798354,
                "explored_percent_none": 16.872427983539094,
                "kept_percent_concrete": 7.633587786259542,
                "kept_percent_lambda": 92.36641221374046,
                "num_examples": 3,
                "num_explored_concrete": 53,
                "num_explored_lambda": 149,
                "num_explored_none": 41,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 121,
                "num_values_explored": 243,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4594
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.7956537120044231,
            "num_unique_values": 160,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 9.583333333333334,
                "kept_percent_concrete": 34.83870967741935,
                "kept_percent_lambda": 65.16129032258064,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 121,
                "num_explored_none": 23,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 101,
                "num_values_explored": 240,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1748142129508778,
            "num_unique_values": 212,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 77.54629629629629,
                "explored_percent_lambda": 15.972222222222221,
                "explored_percent_none": 6.481481481481482,
                "kept_percent_concrete": 80.97560975609755,
                "kept_percent_lambda": 19.024390243902438,
                "num_examples": 3,
                "num_explored_concrete": 335,
                "num_explored_lambda": 69,
                "num_explored_none": 28,
                "num_inputs": 3,
                "num_kept_concrete": 166,
                "num_kept_lambda": 39,
                "num_values_explored": 432,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 432
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.43055808101781,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.011627906976743,
                "explored_percent_lambda": 72.38372093023256,
                "explored_percent_none": 18.6046511627907,
                "kept_percent_concrete": 7.575757575757576,
                "kept_percent_lambda": 92.42424242424242,
                "num_examples": 3,
                "num_explored_concrete": 31,
                "num_explored_lambda": 249,
                "num_explored_none": 64,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 122,
                "num_values_explored": 344,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4811
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.60964045999572,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 19.426751592356688,
                "explored_percent_lambda": 57.00636942675159,
                "explored_percent_none": 23.56687898089172,
                "kept_percent_concrete": 14.50381679389313,
                "kept_percent_lambda": 85.49618320610686,
                "num_examples": 3,
                "num_explored_concrete": 61,
                "num_explored_lambda": 179,
                "num_explored_none": 74,
                "num_inputs": 2,
                "num_kept_concrete": 19,
                "num_kept_lambda": 112,
                "num_values_explored": 314,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4366
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.4125498700887,
            "num_unique_values": 138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.67953667953668,
                "explored_percent_lambda": 43.24324324324324,
                "explored_percent_none": 20.077220077220076,
                "kept_percent_concrete": 35.87786259541985,
                "kept_percent_lambda": 64.12213740458016,
                "num_examples": 3,
                "num_explored_concrete": 95,
                "num_explored_lambda": 112,
                "num_explored_none": 52,
                "num_inputs": 3,
                "num_kept_concrete": 47,
                "num_kept_lambda": 84,
                "num_values_explored": 259,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4482
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.17437298607547,
            "num_unique_values": 137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.224137931034482,
                "explored_percent_lambda": 65.51724137931035,
                "explored_percent_none": 20.25862068965517,
                "kept_percent_concrete": 7.575757575757576,
                "kept_percent_lambda": 92.42424242424242,
                "num_examples": 3,
                "num_explored_concrete": 33,
                "num_explored_lambda": 152,
                "num_explored_none": 47,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 122,
                "num_values_explored": 232,
                "num_values_kept": 132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4667
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.85404688294511,
            "num_unique_values": 110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.818181818181818,
                "explored_percent_lambda": 62.72727272727273,
                "explored_percent_none": 25.454545454545453,
                "kept_percent_concrete": 6.666666666666667,
                "kept_percent_lambda": 93.33333333333333,
                "num_examples": 3,
                "num_explored_concrete": 26,
                "num_explored_lambda": 138,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 7,
                "num_kept_lambda": 98,
                "num_values_explored": 220,
                "num_values_kept": 105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4234
            },
            "success": false,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.15602251305245,
            "num_unique_values": 136,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 4.745762711864407,
                "explored_percent_lambda": 71.86440677966101,
                "explored_percent_none": 23.389830508474578,
                "kept_percent_concrete": 6.106870229007634,
                "kept_percent_lambda": 93.89312977099236,
                "num_examples": 3,
                "num_explored_concrete": 14,
                "num_explored_lambda": 212,
                "num_explored_none": 69,
                "num_inputs": 1,
                "num_kept_concrete": 8,
                "num_kept_lambda": 123,
                "num_values_explored": 295,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4175
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.8754224529257,
            "num_unique_values": 142,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.19020172910663,
                "explored_percent_lambda": 58.21325648414986,
                "explored_percent_none": 19.596541786743515,
                "kept_percent_concrete": 19.852941176470587,
                "kept_percent_lambda": 80.1470588235294,
                "num_examples": 5,
                "num_explored_concrete": 77,
                "num_explored_lambda": 202,
                "num_explored_none": 68,
                "num_inputs": 2,
                "num_kept_concrete": 27,
                "num_kept_lambda": 109,
                "num_values_explored": 347,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4805
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.28
}