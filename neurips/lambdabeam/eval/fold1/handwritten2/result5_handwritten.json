{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 101.24037575093098,
            "num_unique_values": 1200,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.05179081890029,
                "explored_percent_lambda": 23.658987724903312,
                "explored_percent_none": 40.2892214561964,
                "kept_percent_concrete": 55.12605042016807,
                "kept_percent_lambda": 44.87394957983193,
                "num_examples": 3,
                "num_explored_concrete": 2144,
                "num_explored_lambda": 1407,
                "num_explored_none": 2396,
                "num_inputs": 2,
                "num_kept_concrete": 656,
                "num_kept_lambda": 534,
                "num_values_explored": 5947,
                "num_values_kept": 1190,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62613
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.224769296124578,
            "num_unique_values": 947,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 59.49570815450644,
                "explored_percent_lambda": 13.590844062947067,
                "explored_percent_none": 26.913447782546495,
                "kept_percent_concrete": 74.4136460554371,
                "kept_percent_lambda": 25.586353944562898,
                "num_examples": 5,
                "num_explored_concrete": 3327,
                "num_explored_lambda": 760,
                "num_explored_none": 1505,
                "num_inputs": 1,
                "num_kept_concrete": 698,
                "num_kept_lambda": 240,
                "num_values_explored": 5592,
                "num_values_kept": 938,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6992
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68983544502407,
            "num_unique_values": 1305,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.476768743400214,
                "explored_percent_lambda": 10.190073917634635,
                "explored_percent_none": 26.333157338965155,
                "kept_percent_concrete": 81.54440154440154,
                "kept_percent_lambda": 18.455598455598455,
                "num_examples": 5,
                "num_explored_concrete": 4809,
                "num_explored_lambda": 772,
                "num_explored_none": 1995,
                "num_inputs": 2,
                "num_kept_concrete": 1056,
                "num_kept_lambda": 239,
                "num_values_explored": 7576,
                "num_values_kept": 1295,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78305
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.38193667004816234,
            "num_unique_values": 288,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.44356955380577,
                "explored_percent_lambda": 34.90813648293963,
                "explored_percent_none": 13.648293963254593,
                "kept_percent_concrete": 51.971326164874554,
                "kept_percent_lambda": 48.028673835125446,
                "num_examples": 3,
                "num_explored_concrete": 392,
                "num_explored_lambda": 266,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 134,
                "num_values_explored": 762,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.740050989901647,
            "num_unique_values": 448,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Equal(((lambda v1: Max(1, v1)))(v1), v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 33.895921237693386,
                "explored_percent_lambda": 24.753867791842474,
                "explored_percent_none": 41.35021097046413,
                "kept_percent_concrete": 64.00911161731207,
                "kept_percent_lambda": 35.99088838268793,
                "num_examples": 5,
                "num_explored_concrete": 723,
                "num_explored_lambda": 528,
                "num_explored_none": 882,
                "num_inputs": 1,
                "num_kept_concrete": 281,
                "num_kept_lambda": 158,
                "num_values_explored": 2133,
                "num_values_kept": 439,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3813
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70530978310853,
            "num_unique_values": 1252,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.54223652453741,
                "explored_percent_lambda": 21.287208366854383,
                "explored_percent_none": 36.170555108608205,
                "kept_percent_concrete": 57.890499194847024,
                "kept_percent_lambda": 42.109500805152976,
                "num_examples": 3,
                "num_explored_concrete": 2644,
                "num_explored_lambda": 1323,
                "num_explored_none": 2248,
                "num_inputs": 2,
                "num_kept_concrete": 719,
                "num_kept_lambda": 523,
                "num_values_explored": 6215,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64152
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.46955053601414,
            "num_unique_values": 944,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 45.05615908672436,
                "explored_percent_lambda": 20.309335297366967,
                "explored_percent_none": 34.63450561590867,
                "kept_percent_concrete": 56.055734190782424,
                "kept_percent_lambda": 43.944265809217576,
                "num_examples": 3,
                "num_explored_concrete": 2447,
                "num_explored_lambda": 1103,
                "num_explored_none": 1881,
                "num_inputs": 3,
                "num_kept_concrete": 523,
                "num_kept_lambda": 410,
                "num_values_explored": 5431,
                "num_values_kept": 933,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7391
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66632782202214,
            "num_unique_values": 1185,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.81587345636187,
                "explored_percent_lambda": 10.212293603441099,
                "explored_percent_none": 28.971832940197032,
                "kept_percent_concrete": 78.48639455782313,
                "kept_percent_lambda": 21.51360544217687,
                "num_examples": 5,
                "num_explored_concrete": 4383,
                "num_explored_lambda": 736,
                "num_explored_none": 2088,
                "num_inputs": 1,
                "num_kept_concrete": 923,
                "num_kept_lambda": 253,
                "num_values_explored": 7207,
                "num_values_kept": 1176,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73220
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76848241291009,
            "num_unique_values": 1190,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.55674760022586,
                "explored_percent_lambda": 12.605872388481083,
                "explored_percent_none": 27.837380011293053,
                "kept_percent_concrete": 76.79932260795935,
                "kept_percent_lambda": 23.200677392040642,
                "num_examples": 5,
                "num_explored_concrete": 4219,
                "num_explored_lambda": 893,
                "num_explored_none": 1972,
                "num_inputs": 1,
                "num_kept_concrete": 907,
                "num_kept_lambda": 274,
                "num_values_explored": 7084,
                "num_values_kept": 1181,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73440
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.63259080192074,
            "num_unique_values": 1157,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.38830681671194,
                "explored_percent_lambda": 8.25248997542362,
                "explored_percent_none": 33.35920320786444,
                "kept_percent_concrete": 85.26591107236268,
                "kept_percent_lambda": 14.734088927637314,
                "num_examples": 5,
                "num_explored_concrete": 4514,
                "num_explored_lambda": 638,
                "num_explored_none": 2579,
                "num_inputs": 2,
                "num_kept_concrete": 978,
                "num_kept_lambda": 169,
                "num_values_explored": 7731,
                "num_values_kept": 1147,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78194
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77445584791712,
            "num_unique_values": 1039,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.83171292204349,
                "explored_percent_lambda": 31.978080254551884,
                "explored_percent_none": 32.19020682340463,
                "kept_percent_concrete": 45.728155339805824,
                "kept_percent_lambda": 54.271844660194176,
                "num_examples": 3,
                "num_explored_concrete": 2027,
                "num_explored_lambda": 1809,
                "num_explored_none": 1821,
                "num_inputs": 1,
                "num_kept_concrete": 471,
                "num_kept_lambda": 559,
                "num_values_explored": 5657,
                "num_values_kept": 1030,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58541
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.901100447168574,
            "num_unique_values": 457,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 26.513256628314156,
                "explored_percent_lambda": 30.915457728864432,
                "explored_percent_none": 42.57128564282141,
                "kept_percent_concrete": 50.0,
                "kept_percent_lambda": 50.0,
                "num_examples": 3,
                "num_explored_concrete": 530,
                "num_explored_lambda": 618,
                "num_explored_none": 851,
                "num_inputs": 1,
                "num_kept_concrete": 224,
                "num_kept_lambda": 224,
                "num_values_explored": 1999,
                "num_values_kept": 448,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22264
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90171984909102,
            "num_unique_values": 1335,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.57575757575758,
                "explored_percent_lambda": 18.409446578460663,
                "explored_percent_none": 24.014795845781762,
                "kept_percent_concrete": 66.94339622641509,
                "kept_percent_lambda": 33.056603773584904,
                "num_examples": 3,
                "num_explored_concrete": 4047,
                "num_explored_lambda": 1294,
                "num_explored_none": 1688,
                "num_inputs": 2,
                "num_kept_concrete": 887,
                "num_kept_lambda": 438,
                "num_values_explored": 7029,
                "num_values_kept": 1325,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71311
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.003775504184887,
            "num_unique_values": 931,
            "solution": "Take(-1, ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u2)), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 35.28628495339547,
                "explored_percent_lambda": 30.91877496671105,
                "explored_percent_none": 33.79494007989347,
                "kept_percent_concrete": 48.915401301518436,
                "kept_percent_lambda": 51.084598698481564,
                "num_examples": 3,
                "num_explored_concrete": 1325,
                "num_explored_lambda": 1161,
                "num_explored_none": 1269,
                "num_inputs": 1,
                "num_kept_concrete": 451,
                "num_kept_lambda": 471,
                "num_values_explored": 3755,
                "num_values_kept": 922,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5155
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75055776606314,
            "num_unique_values": 1165,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.51499088951466,
                "explored_percent_lambda": 27.5136657280106,
                "explored_percent_none": 28.97134338247474,
                "kept_percent_concrete": 48.96193771626297,
                "kept_percent_lambda": 51.03806228373703,
                "num_examples": 3,
                "num_explored_concrete": 2627,
                "num_explored_lambda": 1661,
                "num_explored_none": 1749,
                "num_inputs": 1,
                "num_kept_concrete": 566,
                "num_kept_lambda": 590,
                "num_values_explored": 6037,
                "num_values_kept": 1156,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61996
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0694184580352157,
            "num_unique_values": 422,
            "solution": "Take(-1, Take(Subtract(1, n), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 36.14374568071873,
                "explored_percent_lambda": 32.066344160331724,
                "explored_percent_none": 31.78991015894955,
                "kept_percent_concrete": 46.84466019417476,
                "kept_percent_lambda": 53.15533980582524,
                "num_examples": 3,
                "num_explored_concrete": 523,
                "num_explored_lambda": 464,
                "num_explored_none": 460,
                "num_inputs": 2,
                "num_kept_concrete": 193,
                "num_kept_lambda": 219,
                "num_values_explored": 1447,
                "num_values_kept": 412,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2847
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9898813420441,
            "num_unique_values": 1151,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.19233478934761,
                "explored_percent_lambda": 12.780047907566578,
                "explored_percent_none": 32.02761730308581,
                "kept_percent_concrete": 76.26970227670753,
                "kept_percent_lambda": 23.73029772329247,
                "num_examples": 5,
                "num_explored_concrete": 3917,
                "num_explored_lambda": 907,
                "num_explored_none": 2273,
                "num_inputs": 1,
                "num_kept_concrete": 871,
                "num_kept_lambda": 271,
                "num_values_explored": 7097,
                "num_values_kept": 1142,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73566
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96957865799777,
            "num_unique_values": 1131,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.9116974226018,
                "explored_percent_lambda": 22.235778557267043,
                "explored_percent_none": 30.852524020131156,
                "kept_percent_concrete": 53.70205173951829,
                "kept_percent_lambda": 46.29794826048171,
                "num_examples": 3,
                "num_explored_concrete": 3076,
                "num_explored_lambda": 1458,
                "num_explored_none": 2023,
                "num_inputs": 2,
                "num_kept_concrete": 602,
                "num_kept_lambda": 519,
                "num_values_explored": 6557,
                "num_values_kept": 1121,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68142
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.209013737970963,
            "num_unique_values": 770,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 50.75414781297134,
                "explored_percent_lambda": 15.284062342885873,
                "explored_percent_none": 33.961789844142785,
                "kept_percent_concrete": 75.42706964520367,
                "kept_percent_lambda": 24.57293035479632,
                "num_examples": 5,
                "num_explored_concrete": 2019,
                "num_explored_lambda": 608,
                "num_explored_none": 1351,
                "num_inputs": 1,
                "num_kept_concrete": 574,
                "num_kept_lambda": 187,
                "num_values_explored": 3978,
                "num_values_kept": 761,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 13022
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66568640293553,
            "num_unique_values": 1164,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.184255122477275,
                "explored_percent_lambda": 20.4282853181328,
                "explored_percent_none": 35.387459559389924,
                "kept_percent_concrete": 54.293148308759754,
                "kept_percent_lambda": 45.706851691240246,
                "num_examples": 3,
                "num_explored_concrete": 2868,
                "num_explored_lambda": 1326,
                "num_explored_none": 2297,
                "num_inputs": 3,
                "num_kept_concrete": 626,
                "num_kept_lambda": 527,
                "num_values_explored": 6491,
                "num_values_kept": 1153,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67644
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 94.25671640597284,
            "num_unique_values": 494,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, Last(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.969616908850725,
                "explored_percent_lambda": 23.20563628357552,
                "explored_percent_none": 37.82474680757375,
                "kept_percent_concrete": 68.65979381443299,
                "kept_percent_lambda": 31.34020618556701,
                "num_examples": 5,
                "num_explored_concrete": 885,
                "num_explored_lambda": 527,
                "num_explored_none": 859,
                "num_inputs": 1,
                "num_kept_concrete": 333,
                "num_kept_lambda": 152,
                "num_values_explored": 2271,
                "num_values_kept": 485,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68283
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77665372099727,
            "num_unique_values": 1257,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.679282868525895,
                "explored_percent_lambda": 24.833997343957503,
                "explored_percent_none": 32.4867197875166,
                "kept_percent_concrete": 54.88782051282051,
                "kept_percent_lambda": 45.11217948717949,
                "num_examples": 3,
                "num_explored_concrete": 2571,
                "num_explored_lambda": 1496,
                "num_explored_none": 1957,
                "num_inputs": 1,
                "num_kept_concrete": 685,
                "num_kept_lambda": 563,
                "num_values_explored": 6024,
                "num_values_kept": 1248,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62484
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7528764619492,
            "num_unique_values": 1256,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.64167219641672,
                "explored_percent_lambda": 24.75116124751161,
                "explored_percent_none": 30.607166556071665,
                "kept_percent_concrete": 54.012841091492774,
                "kept_percent_lambda": 45.987158908507226,
                "num_examples": 3,
                "num_explored_concrete": 2691,
                "num_explored_lambda": 1492,
                "num_explored_none": 1845,
                "num_inputs": 2,
                "num_kept_concrete": 673,
                "num_kept_lambda": 573,
                "num_values_explored": 6028,
                "num_values_kept": 1246,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61444
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23776402603834867,
            "num_unique_values": 201,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.80467091295117,
                "explored_percent_lambda": 30.573248407643312,
                "explored_percent_none": 17.62208067940552,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 144,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 80,
                "num_values_explored": 471,
                "num_values_kept": 192,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88741287100129,
            "num_unique_values": 1281,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.18207088255733,
                "explored_percent_lambda": 26.89367616400278,
                "explored_percent_none": 30.92425295343989,
                "kept_percent_concrete": 54.009433962264154,
                "kept_percent_lambda": 45.990566037735846,
                "num_examples": 3,
                "num_explored_concrete": 2428,
                "num_explored_lambda": 1548,
                "num_explored_none": 1780,
                "num_inputs": 1,
                "num_kept_concrete": 687,
                "num_kept_lambda": 585,
                "num_values_explored": 5756,
                "num_values_kept": 1272,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58533
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.914714752929285,
            "num_unique_values": 679,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.473104749921358,
                "explored_percent_lambda": 34.53916325888644,
                "explored_percent_none": 40.9877319911922,
                "kept_percent_concrete": 48.059701492537314,
                "kept_percent_lambda": 51.940298507462686,
                "num_examples": 3,
                "num_explored_concrete": 778,
                "num_explored_lambda": 1098,
                "num_explored_none": 1303,
                "num_inputs": 1,
                "num_kept_concrete": 322,
                "num_kept_lambda": 348,
                "num_values_explored": 3179,
                "num_values_kept": 670,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11143
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16290220897644758,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.1219512195122,
                "explored_percent_lambda": 40.24390243902439,
                "explored_percent_none": 14.634146341463415,
                "kept_percent_concrete": 47.61904761904762,
                "kept_percent_lambda": 52.38095238095238,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 99,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 77,
                "num_values_explored": 246,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 246
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74112130515277,
            "num_unique_values": 1206,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.048400602914086,
                "explored_percent_lambda": 25.84156757662033,
                "explored_percent_none": 33.110031820465586,
                "kept_percent_concrete": 54.72013366750209,
                "kept_percent_lambda": 45.27986633249791,
                "num_examples": 3,
                "num_explored_concrete": 2451,
                "num_explored_lambda": 1543,
                "num_explored_none": 1977,
                "num_inputs": 1,
                "num_kept_concrete": 655,
                "num_kept_lambda": 542,
                "num_values_explored": 5971,
                "num_values_kept": 1197,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60404
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.344111914979294,
            "num_unique_values": 599,
            "solution": "Maximum(Drop(k, Reverse(Sort(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 46.98826597131682,
                "explored_percent_lambda": 9.830508474576272,
                "explored_percent_none": 43.18122555410691,
                "kept_percent_concrete": 82.51273344651952,
                "kept_percent_lambda": 17.487266553480474,
                "num_examples": 5,
                "num_explored_concrete": 1802,
                "num_explored_lambda": 377,
                "num_explored_none": 1656,
                "num_inputs": 2,
                "num_kept_concrete": 486,
                "num_kept_lambda": 103,
                "num_values_explored": 3835,
                "num_values_kept": 589,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 21257
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71801036805846,
            "num_unique_values": 1255,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.75173021265886,
                "explored_percent_lambda": 10.016358374229268,
                "explored_percent_none": 31.231911413111867,
                "kept_percent_concrete": 81.44578313253012,
                "kept_percent_lambda": 18.55421686746988,
                "num_examples": 5,
                "num_explored_concrete": 4669,
                "num_explored_lambda": 796,
                "num_explored_none": 2482,
                "num_inputs": 2,
                "num_kept_concrete": 1014,
                "num_kept_lambda": 231,
                "num_values_explored": 7947,
                "num_values_kept": 1245,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79774
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24115806119516492,
            "num_unique_values": 222,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 49.010989010989015,
                "explored_percent_lambda": 30.10989010989011,
                "explored_percent_none": 20.87912087912088,
                "kept_percent_concrete": 57.27699530516432,
                "kept_percent_lambda": 42.72300469483568,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 137,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 91,
                "num_values_explored": 455,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 455
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6778413138818,
            "num_unique_values": 1379,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.34327411167513,
                "explored_percent_lambda": 19.384517766497463,
                "explored_percent_none": 21.27220812182741,
                "kept_percent_concrete": 61.21256391526662,
                "kept_percent_lambda": 38.78743608473338,
                "num_examples": 3,
                "num_explored_concrete": 3741,
                "num_explored_lambda": 1222,
                "num_explored_none": 1341,
                "num_inputs": 2,
                "num_kept_concrete": 838,
                "num_kept_lambda": 531,
                "num_values_explored": 6304,
                "num_values_kept": 1369,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64942
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83022945909761,
            "num_unique_values": 1176,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.487154938567095,
                "explored_percent_lambda": 22.16371469602681,
                "explored_percent_none": 36.3491303654061,
                "kept_percent_concrete": 57.54716981132076,
                "kept_percent_lambda": 42.45283018867924,
                "num_examples": 3,
                "num_explored_concrete": 2600,
                "num_explored_lambda": 1389,
                "num_explored_none": 2278,
                "num_inputs": 2,
                "num_kept_concrete": 671,
                "num_kept_lambda": 495,
                "num_values_explored": 6267,
                "num_values_kept": 1166,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64732
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.76823174697347,
            "num_unique_values": 979,
            "solution": "Map((lambda u1: ((lambda v1: Access(((lambda v1: Multiply(1, v1)))(v1), x)))(u1)), i)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 56.55328798185941,
                "explored_percent_lambda": 20.861678004535147,
                "explored_percent_none": 22.58503401360544,
                "kept_percent_concrete": 60.9907120743034,
                "kept_percent_lambda": 39.0092879256966,
                "num_examples": 3,
                "num_explored_concrete": 2494,
                "num_explored_lambda": 920,
                "num_explored_none": 996,
                "num_inputs": 2,
                "num_kept_concrete": 591,
                "num_kept_lambda": 378,
                "num_values_explored": 4410,
                "num_values_kept": 969,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6090
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.64817963796668,
            "num_unique_values": 1153,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.41979343705059,
                "explored_percent_lambda": 11.282520590926918,
                "explored_percent_none": 27.297685972022485,
                "kept_percent_concrete": 76.46544181977252,
                "kept_percent_lambda": 23.53455818022747,
                "num_examples": 5,
                "num_explored_concrete": 4698,
                "num_explored_lambda": 863,
                "num_explored_none": 2088,
                "num_inputs": 2,
                "num_kept_concrete": 874,
                "num_kept_lambda": 269,
                "num_values_explored": 7649,
                "num_values_kept": 1143,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78135
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.42799872485920787,
            "num_unique_values": 274,
            "solution": "Reverse(Sort(Drop(Sum(Map((lambda u1: -1), Sort(Take(n, x)))), x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.691275167785236,
                "explored_percent_lambda": 36.241610738255034,
                "explored_percent_none": 10.06711409395973,
                "kept_percent_concrete": 51.89393939393939,
                "kept_percent_lambda": 48.10606060606061,
                "num_examples": 3,
                "num_explored_concrete": 560,
                "num_explored_lambda": 378,
                "num_explored_none": 105,
                "num_inputs": 2,
                "num_kept_concrete": 137,
                "num_kept_lambda": 127,
                "num_values_explored": 1043,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1043
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74454006995074,
            "num_unique_values": 1376,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.87683284457478,
                "explored_percent_lambda": 21.730205278592376,
                "explored_percent_none": 26.392961876832846,
                "kept_percent_concrete": 60.17569546120058,
                "kept_percent_lambda": 39.82430453879942,
                "num_examples": 3,
                "num_explored_concrete": 3538,
                "num_explored_lambda": 1482,
                "num_explored_none": 1800,
                "num_inputs": 2,
                "num_kept_concrete": 822,
                "num_kept_lambda": 544,
                "num_values_explored": 6820,
                "num_values_kept": 1366,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68849
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87003511795774,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.30320626104519,
                "explored_percent_lambda": 9.30320626104519,
                "explored_percent_none": 31.39358747790962,
                "kept_percent_concrete": 83.29621380846325,
                "kept_percent_lambda": 16.70378619153675,
                "num_examples": 5,
                "num_explored_concrete": 4698,
                "num_explored_lambda": 737,
                "num_explored_none": 2487,
                "num_inputs": 2,
                "num_kept_concrete": 1122,
                "num_kept_lambda": 225,
                "num_values_explored": 7922,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80352
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3369860709644854,
            "num_unique_values": 225,
            "solution": "Sum(Map((lambda u1: 1), x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 54.69061876247505,
                "explored_percent_lambda": 25.548902195608783,
                "explored_percent_none": 19.760479041916167,
                "kept_percent_concrete": 65.74074074074075,
                "kept_percent_lambda": 34.25925925925926,
                "num_examples": 5,
                "num_explored_concrete": 274,
                "num_explored_lambda": 128,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 142,
                "num_kept_lambda": 74,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73021232802421,
            "num_unique_values": 1257,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.17881798282539,
                "explored_percent_lambda": 24.58326317561879,
                "explored_percent_none": 33.23791884155582,
                "kept_percent_concrete": 53.76602564102564,
                "kept_percent_lambda": 46.23397435897436,
                "num_examples": 3,
                "num_explored_concrete": 2505,
                "num_explored_lambda": 1460,
                "num_explored_none": 1974,
                "num_inputs": 1,
                "num_kept_concrete": 671,
                "num_kept_lambda": 577,
                "num_values_explored": 5939,
                "num_values_kept": 1248,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60823
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78767257602885,
            "num_unique_values": 1343,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.129937969311136,
                "explored_percent_lambda": 25.51420176297747,
                "explored_percent_none": 20.355860267711392,
                "kept_percent_concrete": 54.19790104947526,
                "kept_percent_lambda": 45.80209895052474,
                "num_examples": 3,
                "num_explored_concrete": 3316,
                "num_explored_lambda": 1563,
                "num_explored_none": 1247,
                "num_inputs": 1,
                "num_kept_concrete": 723,
                "num_kept_lambda": 611,
                "num_values_explored": 6126,
                "num_values_kept": 1334,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62828
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13843724387697875,
            "num_unique_values": 90,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.416666666666664,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 24.166666666666668,
                "kept_percent_concrete": 32.098765432098766,
                "kept_percent_lambda": 67.90123456790124,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 85,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 55,
                "num_values_explored": 240,
                "num_values_kept": 81,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.085381607990712,
            "num_unique_values": 953,
            "solution": "Take(Subtract(j, i), Take(-1, Drop(i, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.16680294358136,
                "explored_percent_lambda": 24.175524666121557,
                "explored_percent_none": 23.657672390297083,
                "kept_percent_concrete": 58.067940552016985,
                "kept_percent_lambda": 41.932059447983015,
                "num_examples": 3,
                "num_explored_concrete": 1914,
                "num_explored_lambda": 887,
                "num_explored_none": 868,
                "num_inputs": 3,
                "num_kept_concrete": 547,
                "num_kept_lambda": 395,
                "num_values_explored": 3669,
                "num_values_kept": 942,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4789
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87134099006653,
            "num_unique_values": 1428,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.48641210870313,
                "explored_percent_lambda": 27.003783969728243,
                "explored_percent_none": 24.50980392156863,
                "kept_percent_concrete": 56.23678646934461,
                "kept_percent_lambda": 43.76321353065539,
                "num_examples": 3,
                "num_explored_concrete": 2819,
                "num_explored_lambda": 1570,
                "num_explored_none": 1425,
                "num_inputs": 1,
                "num_kept_concrete": 798,
                "num_kept_lambda": 621,
                "num_values_explored": 5814,
                "num_values_kept": 1419,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60136
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78067199396901,
            "num_unique_values": 1401,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.36327185244587,
                "explored_percent_lambda": 26.03047313552526,
                "explored_percent_none": 32.60625501202887,
                "kept_percent_concrete": 53.84615384615385,
                "kept_percent_lambda": 46.15384615384615,
                "num_examples": 3,
                "num_explored_concrete": 2579,
                "num_explored_lambda": 1623,
                "num_explored_none": 2033,
                "num_inputs": 2,
                "num_kept_concrete": 749,
                "num_kept_lambda": 642,
                "num_values_explored": 6235,
                "num_values_kept": 1391,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63566
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76470137992874,
            "num_unique_values": 1249,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.66214177978884,
                "explored_percent_lambda": 21.6289592760181,
                "explored_percent_none": 30.708898944193063,
                "kept_percent_concrete": 62.52019386106623,
                "kept_percent_lambda": 37.47980613893377,
                "num_examples": 3,
                "num_explored_concrete": 3160,
                "num_explored_lambda": 1434,
                "num_explored_none": 2036,
                "num_inputs": 3,
                "num_kept_concrete": 774,
                "num_kept_lambda": 464,
                "num_values_explored": 6630,
                "num_values_kept": 1238,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67129
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77951594209298,
            "num_unique_values": 1224,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.07799074686054,
                "explored_percent_lambda": 26.586252478519498,
                "explored_percent_none": 34.33575677461996,
                "kept_percent_concrete": 53.49794238683128,
                "kept_percent_lambda": 46.50205761316872,
                "num_examples": 3,
                "num_explored_concrete": 2365,
                "num_explored_lambda": 1609,
                "num_explored_none": 2078,
                "num_inputs": 1,
                "num_kept_concrete": 650,
                "num_kept_lambda": 565,
                "num_values_explored": 6052,
                "num_values_kept": 1215,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61873
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.351853054948151,
            "num_unique_values": 430,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 19.68721251149954,
                "explored_percent_lambda": 37.76448942042318,
                "explored_percent_none": 42.54829806807728,
                "kept_percent_concrete": 42.517814726840854,
                "kept_percent_lambda": 57.482185273159146,
                "num_examples": 3,
                "num_explored_concrete": 428,
                "num_explored_lambda": 821,
                "num_explored_none": 925,
                "num_inputs": 1,
                "num_kept_concrete": 179,
                "num_kept_lambda": 242,
                "num_values_explored": 2174,
                "num_values_kept": 421,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3854
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75561996898614,
            "num_unique_values": 1339,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.62342284050469,
                "explored_percent_lambda": 23.131672597864767,
                "explored_percent_none": 23.24490456163054,
                "kept_percent_concrete": 54.3609022556391,
                "kept_percent_lambda": 45.6390977443609,
                "num_examples": 3,
                "num_explored_concrete": 3315,
                "num_explored_lambda": 1430,
                "num_explored_none": 1437,
                "num_inputs": 1,
                "num_kept_concrete": 723,
                "num_kept_lambda": 607,
                "num_values_explored": 6182,
                "num_values_kept": 1330,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63779
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71181329805404,
            "num_unique_values": 1269,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.7110949259529,
                "explored_percent_lambda": 9.796067006554988,
                "explored_percent_none": 30.49283806749211,
                "kept_percent_concrete": 81.49324861000794,
                "kept_percent_lambda": 18.506751389992058,
                "num_examples": 5,
                "num_explored_concrete": 4919,
                "num_explored_lambda": 807,
                "num_explored_none": 2512,
                "num_inputs": 2,
                "num_kept_concrete": 1026,
                "num_kept_lambda": 233,
                "num_values_explored": 8238,
                "num_values_kept": 1259,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82472
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}