{
    "num_tasks": 50,
    "num_tasks_solved": 24,
    "results": [
        {
            "elapsed_time": 101.24494138197042,
            "num_unique_values": 1281,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.06555138272448,
                "explored_percent_lambda": 20.92864458859679,
                "explored_percent_none": 27.005804028678728,
                "kept_percent_concrete": 60.94117647058823,
                "kept_percent_lambda": 39.05882352941177,
                "num_examples": 3,
                "num_explored_concrete": 3050,
                "num_explored_lambda": 1226,
                "num_explored_none": 1582,
                "num_inputs": 2,
                "num_kept_concrete": 777,
                "num_kept_lambda": 498,
                "num_values_explored": 5858,
                "num_values_kept": 1275,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61095
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.63467917300295,
            "num_unique_values": 1260,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), Drop(1, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.1733955283899,
                "explored_percent_lambda": 13.575679588225832,
                "explored_percent_none": 20.25092488338427,
                "kept_percent_concrete": 77.76892430278885,
                "kept_percent_lambda": 22.231075697211157,
                "num_examples": 5,
                "num_explored_concrete": 4114,
                "num_explored_lambda": 844,
                "num_explored_none": 1259,
                "num_inputs": 1,
                "num_kept_concrete": 976,
                "num_kept_lambda": 279,
                "num_values_explored": 6217,
                "num_values_kept": 1255,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7897
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.847993065021,
            "num_unique_values": 1382,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.14691735898558,
                "explored_percent_lambda": 10.843900306077831,
                "explored_percent_none": 17.009182334936597,
                "kept_percent_concrete": 81.68604651162791,
                "kept_percent_lambda": 18.313953488372093,
                "num_examples": 5,
                "num_explored_concrete": 4950,
                "num_explored_lambda": 744,
                "num_explored_none": 1167,
                "num_inputs": 2,
                "num_kept_concrete": 1124,
                "num_kept_lambda": 252,
                "num_values_explored": 6861,
                "num_values_kept": 1376,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69392
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.42150336201302707,
            "num_unique_values": 318,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(-1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.57818659658344,
                "explored_percent_lambda": 28.252299605781864,
                "explored_percent_none": 11.169513797634691,
                "kept_percent_concrete": 60.063897763578275,
                "kept_percent_lambda": 39.936102236421725,
                "num_examples": 3,
                "num_explored_concrete": 461,
                "num_explored_lambda": 215,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 125,
                "num_values_explored": 761,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 761
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.38839454599656165,
            "num_unique_values": 298,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.678642714570856,
                "explored_percent_lambda": 30.139720558882235,
                "explored_percent_none": 9.181636726546905,
                "kept_percent_concrete": 64.50511945392492,
                "kept_percent_lambda": 35.49488054607509,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 151,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 104,
                "num_values_explored": 501,
                "num_values_kept": 293,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92353229108267,
            "num_unique_values": 1342,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.91590678824721,
                "explored_percent_lambda": 19.419115163796015,
                "explored_percent_none": 21.664978047956772,
                "kept_percent_concrete": 60.25449101796407,
                "kept_percent_lambda": 39.74550898203593,
                "num_examples": 3,
                "num_explored_concrete": 3489,
                "num_explored_lambda": 1150,
                "num_explored_none": 1283,
                "num_inputs": 2,
                "num_kept_concrete": 805,
                "num_kept_lambda": 531,
                "num_values_explored": 5922,
                "num_values_kept": 1336,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61271
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.576499209040776,
            "num_unique_values": 768,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 37.99227799227799,
                "explored_percent_lambda": 34.36293436293436,
                "explored_percent_none": 27.644787644787645,
                "kept_percent_concrete": 43.88961892247043,
                "kept_percent_lambda": 56.11038107752957,
                "num_examples": 3,
                "num_explored_concrete": 984,
                "num_explored_lambda": 890,
                "num_explored_none": 716,
                "num_inputs": 3,
                "num_kept_concrete": 334,
                "num_kept_lambda": 427,
                "num_values_explored": 2590,
                "num_values_kept": 761,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3990
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.706047393963672,
            "num_unique_values": 725,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Sum(((lambda v1: Take(v1, x)))(v1))))(u2)), x, Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 63.47504621072089,
                "explored_percent_lambda": 19.704251386321626,
                "explored_percent_none": 16.820702402957487,
                "kept_percent_concrete": 71.94444444444444,
                "kept_percent_lambda": 28.055555555555557,
                "num_examples": 5,
                "num_explored_concrete": 1717,
                "num_explored_lambda": 533,
                "num_explored_none": 455,
                "num_inputs": 1,
                "num_kept_concrete": 518,
                "num_kept_lambda": 202,
                "num_values_explored": 2705,
                "num_values_kept": 720,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11368
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73331892606802,
            "num_unique_values": 1270,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.4223990017158,
                "explored_percent_lambda": 11.027920761191702,
                "explored_percent_none": 16.5496802370925,
                "kept_percent_concrete": 78.97233201581028,
                "kept_percent_lambda": 21.027667984189723,
                "num_examples": 5,
                "num_explored_concrete": 4643,
                "num_explored_lambda": 707,
                "num_explored_none": 1061,
                "num_inputs": 1,
                "num_kept_concrete": 999,
                "num_kept_lambda": 266,
                "num_values_explored": 6411,
                "num_values_kept": 1265,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66322
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81087696598843,
            "num_unique_values": 1288,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.19711328181951,
                "explored_percent_lambda": 7.406327452981484,
                "explored_percent_none": 20.39655926519901,
                "kept_percent_concrete": 84.3213728549142,
                "kept_percent_lambda": 15.678627145085803,
                "num_examples": 5,
                "num_explored_concrete": 4952,
                "num_explored_lambda": 508,
                "num_explored_none": 1399,
                "num_inputs": 2,
                "num_kept_concrete": 1081,
                "num_kept_lambda": 201,
                "num_values_explored": 6859,
                "num_values_kept": 1282,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70468
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92958522506524,
            "num_unique_values": 1170,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.28738950027061,
                "explored_percent_lambda": 27.40393288832762,
                "explored_percent_none": 23.30867761140177,
                "kept_percent_concrete": 46.18025751072961,
                "kept_percent_lambda": 53.81974248927039,
                "num_examples": 3,
                "num_explored_concrete": 2732,
                "num_explored_lambda": 1519,
                "num_explored_none": 1292,
                "num_inputs": 1,
                "num_kept_concrete": 538,
                "num_kept_lambda": 627,
                "num_values_explored": 5543,
                "num_values_kept": 1165,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57365
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.03484146494884,
            "num_unique_values": 499,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, Add(-1, 1))))(u1)), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 21.872909698996654,
                "explored_percent_lambda": 46.08695652173913,
                "explored_percent_none": 32.04013377926422,
                "kept_percent_concrete": 35.62753036437247,
                "kept_percent_lambda": 64.37246963562752,
                "num_examples": 3,
                "num_explored_concrete": 327,
                "num_explored_lambda": 689,
                "num_explored_none": 479,
                "num_inputs": 1,
                "num_kept_concrete": 176,
                "num_kept_lambda": 318,
                "num_values_explored": 1495,
                "num_values_kept": 494,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7552
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90279669209849,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.048034934497814,
                "explored_percent_lambda": 27.12663755458515,
                "explored_percent_none": 23.82532751091703,
                "kept_percent_concrete": 51.37221269296741,
                "kept_percent_lambda": 48.62778730703259,
                "num_examples": 3,
                "num_explored_concrete": 2808,
                "num_explored_lambda": 1553,
                "num_explored_none": 1364,
                "num_inputs": 2,
                "num_kept_concrete": 599,
                "num_kept_lambda": 567,
                "num_values_explored": 5725,
                "num_values_kept": 1166,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56887
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4364524660632014,
            "num_unique_values": 312,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.19409282700422,
                "explored_percent_lambda": 43.881856540084385,
                "explored_percent_none": 13.924050632911392,
                "kept_percent_concrete": 41.693811074918564,
                "kept_percent_lambda": 58.306188925081436,
                "num_examples": 3,
                "num_explored_concrete": 300,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 128,
                "num_kept_lambda": 179,
                "num_values_explored": 711,
                "num_values_kept": 307,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7731901879888,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.53917050691244,
                "explored_percent_lambda": 26.00141793690181,
                "explored_percent_none": 24.45941155618575,
                "kept_percent_concrete": 51.69561621174525,
                "kept_percent_lambda": 48.30438378825475,
                "num_examples": 3,
                "num_explored_concrete": 2795,
                "num_explored_lambda": 1467,
                "num_explored_none": 1380,
                "num_inputs": 1,
                "num_kept_concrete": 625,
                "num_kept_lambda": 584,
                "num_values_explored": 5642,
                "num_values_kept": 1209,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58390
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1318519919877872,
            "num_unique_values": 103,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.30769230769231,
                "explored_percent_lambda": 47.43589743589744,
                "explored_percent_none": 10.256410256410257,
                "kept_percent_concrete": 36.08247422680412,
                "kept_percent_lambda": 63.91752577319588,
                "num_examples": 3,
                "num_explored_concrete": 66,
                "num_explored_lambda": 74,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 62,
                "num_values_explored": 156,
                "num_values_kept": 97,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 156
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75946307298727,
            "num_unique_values": 1270,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.36986500217738,
                "explored_percent_lambda": 10.698214544926694,
                "explored_percent_none": 20.93192045289592,
                "kept_percent_concrete": 79.60474308300395,
                "kept_percent_lambda": 20.395256916996047,
                "num_examples": 5,
                "num_explored_concrete": 4710,
                "num_explored_lambda": 737,
                "num_explored_none": 1442,
                "num_inputs": 1,
                "num_kept_concrete": 1007,
                "num_kept_lambda": 258,
                "num_values_explored": 6889,
                "num_values_kept": 1265,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69947
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19472598202992,
            "num_unique_values": 1327,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.05801057839959,
                "explored_percent_lambda": 26.087698344992322,
                "explored_percent_none": 13.854291076608087,
                "kept_percent_concrete": 48.82664647993944,
                "kept_percent_lambda": 51.17335352006056,
                "num_examples": 3,
                "num_explored_concrete": 3520,
                "num_explored_lambda": 1529,
                "num_explored_none": 812,
                "num_inputs": 2,
                "num_kept_concrete": 645,
                "num_kept_lambda": 676,
                "num_values_explored": 5861,
                "num_values_kept": 1321,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60957
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20203839102759957,
            "num_unique_values": 175,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.013513513513516,
                "explored_percent_lambda": 34.12162162162162,
                "explored_percent_none": 14.864864864864865,
                "kept_percent_concrete": 49.411764705882355,
                "kept_percent_lambda": 50.588235294117645,
                "num_examples": 5,
                "num_explored_concrete": 151,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 86,
                "num_values_explored": 296,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 296
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9661748309154,
            "num_unique_values": 1327,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.96969696969697,
                "explored_percent_lambda": 23.636363636363637,
                "explored_percent_none": 23.393939393939394,
                "kept_percent_concrete": 55.0,
                "kept_percent_lambda": 45.0,
                "num_examples": 3,
                "num_explored_concrete": 3059,
                "num_explored_lambda": 1365,
                "num_explored_none": 1351,
                "num_inputs": 3,
                "num_kept_concrete": 726,
                "num_kept_lambda": 594,
                "num_values_explored": 5775,
                "num_values_kept": 1320,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59124
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81129413098097,
            "num_unique_values": 1327,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.81863277011315,
                "explored_percent_lambda": 11.16106030072857,
                "explored_percent_none": 19.02030692915827,
                "kept_percent_concrete": 79.27382753403933,
                "kept_percent_lambda": 20.726172465960666,
                "num_examples": 5,
                "num_explored_concrete": 4504,
                "num_explored_lambda": 720,
                "num_explored_none": 1227,
                "num_inputs": 1,
                "num_kept_concrete": 1048,
                "num_kept_lambda": 274,
                "num_values_explored": 6451,
                "num_values_kept": 1322,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64179
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06169326393865,
            "num_unique_values": 1337,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.21802935010482,
                "explored_percent_lambda": 27.615780445969126,
                "explored_percent_none": 24.166190203926053,
                "kept_percent_concrete": 47.8978978978979,
                "kept_percent_lambda": 52.1021021021021,
                "num_examples": 3,
                "num_explored_concrete": 2530,
                "num_explored_lambda": 1449,
                "num_explored_none": 1268,
                "num_inputs": 1,
                "num_kept_concrete": 638,
                "num_kept_lambda": 694,
                "num_values_explored": 5247,
                "num_values_kept": 1332,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54798
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3258892990415916,
            "num_unique_values": 261,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.054054054054056,
                "explored_percent_lambda": 33.78378378378378,
                "explored_percent_none": 12.162162162162161,
                "kept_percent_concrete": 52.15686274509804,
                "kept_percent_lambda": 47.84313725490196,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 175,
                "num_explored_none": 63,
                "num_inputs": 2,
                "num_kept_concrete": 133,
                "num_kept_lambda": 122,
                "num_values_explored": 518,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 518
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25221371406223625,
            "num_unique_values": 242,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.72186836518047,
                "explored_percent_lambda": 26.751592356687897,
                "explored_percent_none": 12.526539278131635,
                "kept_percent_concrete": 60.33755274261603,
                "kept_percent_lambda": 39.66244725738397,
                "num_examples": 5,
                "num_explored_concrete": 286,
                "num_explored_lambda": 126,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 143,
                "num_kept_lambda": 94,
                "num_values_explored": 471,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.410349387093447,
            "num_unique_values": 254,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 24.497041420118343,
                "explored_percent_lambda": 48.875739644970416,
                "explored_percent_none": 26.62721893491124,
                "kept_percent_concrete": 40.963855421686745,
                "kept_percent_lambda": 59.036144578313255,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 413,
                "num_explored_none": 225,
                "num_inputs": 1,
                "num_kept_concrete": 102,
                "num_kept_lambda": 147,
                "num_values_explored": 845,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7891
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91080099705141,
            "num_unique_values": 1116,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.66557852738484,
                "explored_percent_lambda": 27.511788175553136,
                "explored_percent_none": 26.822633297062023,
                "kept_percent_concrete": 50.405040504050405,
                "kept_percent_lambda": 49.594959495949595,
                "num_examples": 3,
                "num_explored_concrete": 2518,
                "num_explored_lambda": 1517,
                "num_explored_none": 1479,
                "num_inputs": 1,
                "num_kept_concrete": 560,
                "num_kept_lambda": 551,
                "num_values_explored": 5514,
                "num_values_kept": 1111,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58547
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.8226083379704505,
            "num_unique_values": 499,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 35.41547277936963,
                "explored_percent_lambda": 29.97134670487106,
                "explored_percent_none": 34.61318051575931,
                "kept_percent_concrete": 60.24340770791075,
                "kept_percent_lambda": 39.75659229208925,
                "num_examples": 3,
                "num_explored_concrete": 618,
                "num_explored_lambda": 523,
                "num_explored_none": 604,
                "num_inputs": 2,
                "num_kept_concrete": 297,
                "num_kept_lambda": 196,
                "num_values_explored": 1745,
                "num_values_kept": 493,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3425
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77347092598211,
            "num_unique_values": 1209,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.00918403391028,
                "explored_percent_lambda": 24.549629106322854,
                "explored_percent_none": 21.441186859766866,
                "kept_percent_concrete": 57.22591362126246,
                "kept_percent_lambda": 42.77408637873754,
                "num_examples": 3,
                "num_explored_concrete": 3058,
                "num_explored_lambda": 1390,
                "num_explored_none": 1214,
                "num_inputs": 1,
                "num_kept_concrete": 689,
                "num_kept_lambda": 515,
                "num_values_explored": 5662,
                "num_values_kept": 1204,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58258
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3079834849340841,
            "num_unique_values": 272,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 81.16531165311653,
                "explored_percent_lambda": 8.536585365853659,
                "explored_percent_none": 10.29810298102981,
                "kept_percent_concrete": 87.59398496240601,
                "kept_percent_lambda": 12.406015037593985,
                "num_examples": 5,
                "num_explored_concrete": 599,
                "num_explored_lambda": 63,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 233,
                "num_kept_lambda": 33,
                "num_values_explored": 738,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 738
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74490813096054,
            "num_unique_values": 1372,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.98995695839311,
                "explored_percent_lambda": 11.248206599713056,
                "explored_percent_none": 17.76183644189383,
                "kept_percent_concrete": 80.52708638360176,
                "kept_percent_lambda": 19.472913616398245,
                "num_examples": 5,
                "num_explored_concrete": 4948,
                "num_explored_lambda": 784,
                "num_explored_none": 1238,
                "num_inputs": 2,
                "num_kept_concrete": 1100,
                "num_kept_lambda": 266,
                "num_values_explored": 6970,
                "num_values_kept": 1366,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71312
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2682532339822501,
            "num_unique_values": 246,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 55.432372505543235,
                "explored_percent_lambda": 32.37250554323725,
                "explored_percent_none": 12.195121951219512,
                "kept_percent_concrete": 56.43153526970954,
                "kept_percent_lambda": 43.56846473029046,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 146,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 105,
                "num_values_explored": 451,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 451
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67205970000941,
            "num_unique_values": 1149,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.94345025053686,
                "explored_percent_lambda": 16.445955619183966,
                "explored_percent_none": 26.61059413027917,
                "kept_percent_concrete": 68.59142607174103,
                "kept_percent_lambda": 31.408573928258967,
                "num_examples": 3,
                "num_explored_concrete": 3182,
                "num_explored_lambda": 919,
                "num_explored_none": 1487,
                "num_inputs": 2,
                "num_kept_concrete": 784,
                "num_kept_lambda": 359,
                "num_values_explored": 5588,
                "num_values_kept": 1143,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58109
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98764704400674,
            "num_unique_values": 1432,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.60383915273871,
                "explored_percent_lambda": 24.160185338408077,
                "explored_percent_none": 18.23597550885322,
                "kept_percent_concrete": 55.96072931276297,
                "kept_percent_lambda": 44.03927068723703,
                "num_examples": 3,
                "num_explored_concrete": 3481,
                "num_explored_lambda": 1460,
                "num_explored_none": 1102,
                "num_inputs": 2,
                "num_kept_concrete": 798,
                "num_kept_lambda": 628,
                "num_values_explored": 6043,
                "num_values_kept": 1426,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62471
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2057681119767949,
            "num_unique_values": 182,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 38.46153846153846,
                "explored_percent_lambda": 52.136752136752136,
                "explored_percent_none": 9.401709401709402,
                "kept_percent_concrete": 39.20454545454545,
                "kept_percent_lambda": 60.79545454545455,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 122,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 107,
                "num_values_explored": 234,
                "num_values_kept": 176,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05103341303766,
            "num_unique_values": 1481,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.75700153267383,
                "explored_percent_lambda": 10.603316148808695,
                "explored_percent_none": 17.639682318517487,
                "kept_percent_concrete": 77.01694915254237,
                "kept_percent_lambda": 22.983050847457626,
                "num_examples": 5,
                "num_explored_concrete": 5150,
                "num_explored_lambda": 761,
                "num_explored_none": 1266,
                "num_inputs": 2,
                "num_kept_concrete": 1136,
                "num_kept_lambda": 339,
                "num_values_explored": 7177,
                "num_values_kept": 1475,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73404
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2861496639670804,
            "num_unique_values": 232,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 70.89397089397089,
                "explored_percent_lambda": 20.374220374220375,
                "explored_percent_none": 8.731808731808732,
                "kept_percent_concrete": 72.56637168141593,
                "kept_percent_lambda": 27.43362831858407,
                "num_examples": 3,
                "num_explored_concrete": 341,
                "num_explored_lambda": 98,
                "num_explored_none": 42,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 62,
                "num_values_explored": 481,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84415070596151,
            "num_unique_values": 1194,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.79355687047995,
                "explored_percent_lambda": 18.359631821170282,
                "explored_percent_none": 22.84681130834977,
                "kept_percent_concrete": 60.774410774410775,
                "kept_percent_lambda": 39.225589225589225,
                "num_examples": 3,
                "num_explored_concrete": 3577,
                "num_explored_lambda": 1117,
                "num_explored_none": 1390,
                "num_inputs": 2,
                "num_kept_concrete": 722,
                "num_kept_lambda": 466,
                "num_values_explored": 6084,
                "num_values_kept": 1188,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63589
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73436199210119,
            "num_unique_values": 1429,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.25030741904632,
                "explored_percent_lambda": 8.962973083754612,
                "explored_percent_none": 18.78671949719907,
                "kept_percent_concrete": 82.78285312719606,
                "kept_percent_lambda": 17.217146872803934,
                "num_examples": 5,
                "num_explored_concrete": 5288,
                "num_explored_lambda": 656,
                "num_explored_none": 1375,
                "num_inputs": 2,
                "num_kept_concrete": 1178,
                "num_kept_lambda": 245,
                "num_values_explored": 7319,
                "num_values_kept": 1423,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74135
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18281347199808806,
            "num_unique_values": 153,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: -1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.431372549019606,
                "explored_percent_lambda": 40.78431372549019,
                "explored_percent_none": 20.784313725490197,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 5,
                "num_explored_concrete": 98,
                "num_explored_lambda": 104,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 255,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 255
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 94.28399016405456,
            "num_unique_values": 499,
            "solution": "Map((lambda u1: ((lambda v1: Max(v1, ((lambda v1: Multiply(v1, -1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 23.634131368938,
                "explored_percent_lambda": 44.07612031921424,
                "explored_percent_none": 32.28974831184776,
                "kept_percent_concrete": 42.71255060728745,
                "kept_percent_lambda": 57.28744939271255,
                "num_examples": 3,
                "num_explored_concrete": 385,
                "num_explored_lambda": 718,
                "num_explored_none": 526,
                "num_inputs": 1,
                "num_kept_concrete": 211,
                "num_kept_lambda": 283,
                "num_values_explored": 1629,
                "num_values_kept": 494,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49041
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77871228801087,
            "num_unique_values": 953,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.649427282193685,
                "explored_percent_lambda": 17.303019784796945,
                "explored_percent_none": 23.04755293300937,
                "kept_percent_concrete": 64.13502109704642,
                "kept_percent_lambda": 35.86497890295359,
                "num_examples": 3,
                "num_explored_concrete": 3437,
                "num_explored_lambda": 997,
                "num_explored_none": 1328,
                "num_inputs": 1,
                "num_kept_concrete": 608,
                "num_kept_lambda": 340,
                "num_values_explored": 5762,
                "num_values_kept": 948,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59821
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2750914709176868,
            "num_unique_values": 160,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 9.583333333333334,
                "kept_percent_concrete": 34.83870967741935,
                "kept_percent_lambda": 65.16129032258064,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 121,
                "num_explored_none": 23,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 101,
                "num_values_explored": 240,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19952996796928346,
            "num_unique_values": 212,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 77.54629629629629,
                "explored_percent_lambda": 15.972222222222221,
                "explored_percent_none": 6.481481481481482,
                "kept_percent_concrete": 80.97560975609755,
                "kept_percent_lambda": 19.024390243902438,
                "num_examples": 3,
                "num_explored_concrete": 335,
                "num_explored_lambda": 69,
                "num_explored_none": 28,
                "num_inputs": 3,
                "num_kept_concrete": 166,
                "num_kept_lambda": 39,
                "num_values_explored": 432,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 432
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.844745663926,
            "num_unique_values": 1137,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.854655563966695,
                "explored_percent_lambda": 24.697199091597273,
                "explored_percent_none": 23.448145344436032,
                "kept_percent_concrete": 59.89399293286219,
                "kept_percent_lambda": 40.10600706713781,
                "num_examples": 3,
                "num_explored_concrete": 2740,
                "num_explored_lambda": 1305,
                "num_explored_none": 1239,
                "num_inputs": 1,
                "num_kept_concrete": 678,
                "num_kept_lambda": 454,
                "num_values_explored": 5284,
                "num_values_kept": 1132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55734
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79367883992381,
            "num_unique_values": 1284,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.8342151675485,
                "explored_percent_lambda": 21.922398589065256,
                "explored_percent_none": 26.243386243386244,
                "kept_percent_concrete": 59.389671361502344,
                "kept_percent_lambda": 40.610328638497656,
                "num_examples": 3,
                "num_explored_concrete": 2939,
                "num_explored_lambda": 1243,
                "num_explored_none": 1488,
                "num_inputs": 2,
                "num_kept_concrete": 759,
                "num_kept_lambda": 519,
                "num_values_explored": 5670,
                "num_values_kept": 1278,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58539
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79089385701809,
            "num_unique_values": 1107,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.43103448275862,
                "explored_percent_lambda": 17.46551724137931,
                "explored_percent_none": 30.103448275862068,
                "kept_percent_concrete": 61.09090909090909,
                "kept_percent_lambda": 38.90909090909091,
                "num_examples": 3,
                "num_explored_concrete": 3041,
                "num_explored_lambda": 1013,
                "num_explored_none": 1746,
                "num_inputs": 3,
                "num_kept_concrete": 672,
                "num_kept_lambda": 428,
                "num_values_explored": 5800,
                "num_values_kept": 1100,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59288
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.376206894987263,
            "num_unique_values": 260,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 18.621307072515666,
                "explored_percent_lambda": 38.406445837063565,
                "explored_percent_none": 42.97224709042077,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 208,
                "num_explored_lambda": 429,
                "num_explored_none": 480,
                "num_inputs": 1,
                "num_kept_concrete": 102,
                "num_kept_lambda": 153,
                "num_values_explored": 1117,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13773
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.484712286037393,
            "num_unique_values": 526,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 27.26769911504425,
                "explored_percent_lambda": 41.20575221238938,
                "explored_percent_none": 31.52654867256637,
                "kept_percent_concrete": 42.61036468330134,
                "kept_percent_lambda": 57.38963531669866,
                "num_examples": 3,
                "num_explored_concrete": 493,
                "num_explored_lambda": 745,
                "num_explored_none": 570,
                "num_inputs": 1,
                "num_kept_concrete": 222,
                "num_kept_lambda": 299,
                "num_values_explored": 1808,
                "num_values_kept": 521,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3488
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.652693367097527,
            "num_unique_values": 248,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 19.0,
                "explored_percent_lambda": 54.5,
                "explored_percent_none": 26.5,
                "kept_percent_concrete": 30.45267489711934,
                "kept_percent_lambda": 69.54732510288066,
                "num_examples": 3,
                "num_explored_concrete": 152,
                "num_explored_lambda": 436,
                "num_explored_none": 212,
                "num_inputs": 1,
                "num_kept_concrete": 74,
                "num_kept_lambda": 169,
                "num_values_explored": 800,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7833
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83934711199254,
            "num_unique_values": 1360,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.97222222222223,
                "explored_percent_lambda": 10.38888888888889,
                "explored_percent_none": 21.63888888888889,
                "kept_percent_concrete": 82.34859675036928,
                "kept_percent_lambda": 17.651403249630725,
                "num_examples": 5,
                "num_explored_concrete": 4894,
                "num_explored_lambda": 748,
                "num_explored_none": 1558,
                "num_inputs": 2,
                "num_kept_concrete": 1115,
                "num_kept_lambda": 239,
                "num_values_explored": 7200,
                "num_values_kept": 1354,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73022
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.48
}