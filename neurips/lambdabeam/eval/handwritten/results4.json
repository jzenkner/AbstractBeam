{
    "num_tasks": 50,
    "num_tasks_solved": 25,
    "results": [
        {
            "elapsed_time": 101.24888965801802,
            "num_unique_values": 1370,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.460631854640695,
                "explored_percent_lambda": 20.33065968243575,
                "explored_percent_none": 25.208708462923557,
                "kept_percent_concrete": 61.65689149560117,
                "kept_percent_lambda": 38.34310850439883,
                "num_examples": 3,
                "num_explored_concrete": 3327,
                "num_explored_lambda": 1242,
                "num_explored_none": 1540,
                "num_inputs": 2,
                "num_kept_concrete": 841,
                "num_kept_lambda": 523,
                "num_values_explored": 6109,
                "num_values_kept": 1364,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62900
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.852786454022862,
            "num_unique_values": 514,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 44.505494505494504,
                "explored_percent_lambda": 31.923076923076923,
                "explored_percent_none": 23.571428571428573,
                "kept_percent_concrete": 66.01178781925344,
                "kept_percent_lambda": 33.988212180746565,
                "num_examples": 5,
                "num_explored_concrete": 810,
                "num_explored_lambda": 581,
                "num_explored_none": 429,
                "num_inputs": 1,
                "num_kept_concrete": 336,
                "num_kept_lambda": 173,
                "num_values_explored": 1820,
                "num_values_kept": 509,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3500
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72766932705417,
            "num_unique_values": 1461,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.92726522755396,
                "explored_percent_lambda": 10.009624639076035,
                "explored_percent_none": 17.06311013337,
                "kept_percent_concrete": 82.9553264604811,
                "kept_percent_lambda": 17.0446735395189,
                "num_examples": 5,
                "num_explored_concrete": 5304,
                "num_explored_lambda": 728,
                "num_explored_none": 1241,
                "num_inputs": 2,
                "num_kept_concrete": 1207,
                "num_kept_lambda": 248,
                "num_values_explored": 7273,
                "num_values_kept": 1455,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72988
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.47242175601422787,
            "num_unique_values": 318,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(-1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.57818659658344,
                "explored_percent_lambda": 28.252299605781864,
                "explored_percent_none": 11.169513797634691,
                "kept_percent_concrete": 60.063897763578275,
                "kept_percent_lambda": 39.936102236421725,
                "num_examples": 3,
                "num_explored_concrete": 461,
                "num_explored_lambda": 215,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 125,
                "num_values_explored": 761,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 761
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2748223169473931,
            "num_unique_values": 298,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.678642714570856,
                "explored_percent_lambda": 30.139720558882235,
                "explored_percent_none": 9.181636726546905,
                "kept_percent_concrete": 64.50511945392492,
                "kept_percent_lambda": 35.49488054607509,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 151,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 104,
                "num_values_explored": 501,
                "num_values_kept": 293,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95668723306153,
            "num_unique_values": 1449,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.964458804523424,
                "explored_percent_lambda": 22.148626817447497,
                "explored_percent_none": 19.88691437802908,
                "kept_percent_concrete": 57.24185724185724,
                "kept_percent_lambda": 42.75814275814276,
                "num_examples": 3,
                "num_explored_concrete": 3588,
                "num_explored_lambda": 1371,
                "num_explored_none": 1231,
                "num_inputs": 2,
                "num_kept_concrete": 826,
                "num_kept_lambda": 617,
                "num_values_explored": 6190,
                "num_values_kept": 1443,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62897
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.068339430028573,
            "num_unique_values": 532,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Max(a, v1)))(u2)), Map((lambda u1: ((lambda v1: Min(b, v1)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 32.08685162846803,
                "explored_percent_lambda": 35.6453558504222,
                "explored_percent_none": 32.26779252110977,
                "kept_percent_concrete": 46.857142857142854,
                "kept_percent_lambda": 53.142857142857146,
                "num_examples": 3,
                "num_explored_concrete": 532,
                "num_explored_lambda": 591,
                "num_explored_none": 535,
                "num_inputs": 3,
                "num_kept_concrete": 246,
                "num_kept_lambda": 279,
                "num_values_explored": 1658,
                "num_values_kept": 525,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3058
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.974969480070285,
            "num_unique_values": 464,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Sum(((lambda v1: Take(v1, x)))(v1))))(u2)), x, Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 50.6015037593985,
                "explored_percent_lambda": 28.796992481203006,
                "explored_percent_none": 20.601503759398497,
                "kept_percent_concrete": 63.83442265795207,
                "kept_percent_lambda": 36.16557734204793,
                "num_examples": 5,
                "num_explored_concrete": 673,
                "num_explored_lambda": 383,
                "num_explored_none": 274,
                "num_inputs": 1,
                "num_kept_concrete": 293,
                "num_kept_lambda": 166,
                "num_values_explored": 1330,
                "num_values_kept": 459,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10314
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.805814806954,
            "num_unique_values": 1336,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.27086383601757,
                "explored_percent_lambda": 10.600292825768667,
                "explored_percent_none": 14.128843338213763,
                "kept_percent_concrete": 80.2404207362885,
                "kept_percent_lambda": 19.759579263711494,
                "num_examples": 5,
                "num_explored_concrete": 5141,
                "num_explored_lambda": 724,
                "num_explored_none": 965,
                "num_inputs": 1,
                "num_kept_concrete": 1068,
                "num_kept_lambda": 263,
                "num_values_explored": 6830,
                "num_values_kept": 1331,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68715
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 53.15218959201593,
            "num_unique_values": 478,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 54.57991156032849,
                "explored_percent_lambda": 16.80353758686039,
                "explored_percent_none": 28.61655085281112,
                "kept_percent_concrete": 75.63559322033899,
                "kept_percent_lambda": 24.364406779661017,
                "num_examples": 5,
                "num_explored_concrete": 864,
                "num_explored_lambda": 266,
                "num_explored_none": 453,
                "num_inputs": 2,
                "num_kept_concrete": 357,
                "num_kept_lambda": 115,
                "num_values_explored": 1583,
                "num_values_kept": 472,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 38519
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00307658698875,
            "num_unique_values": 1170,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.79832810867293,
                "explored_percent_lambda": 27.115987460815045,
                "explored_percent_none": 24.085684430512018,
                "kept_percent_concrete": 46.437768240343345,
                "kept_percent_lambda": 53.562231759656655,
                "num_examples": 3,
                "num_explored_concrete": 2802,
                "num_explored_lambda": 1557,
                "num_explored_none": 1383,
                "num_inputs": 1,
                "num_kept_concrete": 541,
                "num_kept_lambda": 624,
                "num_values_explored": 5742,
                "num_values_kept": 1165,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59613
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9668505290756,
            "num_unique_values": 1220,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.73998044965787,
                "explored_percent_lambda": 33.333333333333336,
                "explored_percent_none": 24.926686217008797,
                "kept_percent_concrete": 43.29218106995885,
                "kept_percent_lambda": 56.70781893004115,
                "num_examples": 3,
                "num_explored_concrete": 2135,
                "num_explored_lambda": 1705,
                "num_explored_none": 1275,
                "num_inputs": 1,
                "num_kept_concrete": 526,
                "num_kept_lambda": 689,
                "num_values_explored": 5115,
                "num_values_kept": 1215,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52112
            },
            "success": false,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0172607509885,
            "num_unique_values": 1203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.85470085470085,
                "explored_percent_lambda": 27.931623931623932,
                "explored_percent_none": 25.213675213675213,
                "kept_percent_concrete": 52.046783625730995,
                "kept_percent_lambda": 47.953216374269005,
                "num_examples": 3,
                "num_explored_concrete": 2741,
                "num_explored_lambda": 1634,
                "num_explored_none": 1475,
                "num_inputs": 2,
                "num_kept_concrete": 623,
                "num_kept_lambda": 574,
                "num_values_explored": 5850,
                "num_values_kept": 1197,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59071
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.44490839599166065,
            "num_unique_values": 312,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.19409282700422,
                "explored_percent_lambda": 43.881856540084385,
                "explored_percent_none": 13.924050632911392,
                "kept_percent_concrete": 41.693811074918564,
                "kept_percent_lambda": 58.306188925081436,
                "num_examples": 3,
                "num_explored_concrete": 300,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 128,
                "num_kept_lambda": 179,
                "num_values_explored": 711,
                "num_values_kept": 307,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95633502793498,
            "num_unique_values": 1265,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.77540563620837,
                "explored_percent_lambda": 24.08198121263877,
                "explored_percent_none": 23.14261315115286,
                "kept_percent_concrete": 53.25396825396825,
                "kept_percent_lambda": 46.74603174603175,
                "num_examples": 3,
                "num_explored_concrete": 3090,
                "num_explored_lambda": 1410,
                "num_explored_none": 1355,
                "num_inputs": 1,
                "num_kept_concrete": 671,
                "num_kept_lambda": 589,
                "num_values_explored": 5855,
                "num_values_kept": 1260,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59904
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13657166296616197,
            "num_unique_values": 103,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.30769230769231,
                "explored_percent_lambda": 47.43589743589744,
                "explored_percent_none": 10.256410256410257,
                "kept_percent_concrete": 36.08247422680412,
                "kept_percent_lambda": 63.91752577319588,
                "num_examples": 3,
                "num_explored_concrete": 66,
                "num_explored_lambda": 74,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 62,
                "num_values_explored": 156,
                "num_values_kept": 97,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 156
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7718474100111,
            "num_unique_values": 1306,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.96420901932713,
                "explored_percent_lambda": 9.448818897637794,
                "explored_percent_none": 20.586972083035075,
                "kept_percent_concrete": 80.8608762490392,
                "kept_percent_lambda": 19.1391237509608,
                "num_examples": 5,
                "num_explored_concrete": 4887,
                "num_explored_lambda": 660,
                "num_explored_none": 1438,
                "num_inputs": 1,
                "num_kept_concrete": 1052,
                "num_kept_lambda": 249,
                "num_values_explored": 6985,
                "num_values_kept": 1301,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71162
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17605710006319,
            "num_unique_values": 1402,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.48682894298099,
                "explored_percent_lambda": 26.575525175058353,
                "explored_percent_none": 12.937645881960654,
                "kept_percent_concrete": 48.56733524355301,
                "kept_percent_lambda": 51.43266475644699,
                "num_examples": 3,
                "num_explored_concrete": 3628,
                "num_explored_lambda": 1594,
                "num_explored_none": 776,
                "num_inputs": 2,
                "num_kept_concrete": 678,
                "num_kept_lambda": 718,
                "num_values_explored": 5998,
                "num_values_kept": 1396,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62128
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20611909800209105,
            "num_unique_values": 175,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.013513513513516,
                "explored_percent_lambda": 34.12162162162162,
                "explored_percent_none": 14.864864864864865,
                "kept_percent_concrete": 49.411764705882355,
                "kept_percent_lambda": 50.588235294117645,
                "num_examples": 5,
                "num_explored_concrete": 151,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 86,
                "num_values_explored": 296,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 296
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03961590002291,
            "num_unique_values": 1352,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.420219244823386,
                "explored_percent_lambda": 22.550896119714633,
                "explored_percent_none": 22.02888463546198,
                "kept_percent_concrete": 55.31598513011152,
                "kept_percent_lambda": 44.68401486988848,
                "num_examples": 3,
                "num_explored_concrete": 3185,
                "num_explored_lambda": 1296,
                "num_explored_none": 1266,
                "num_inputs": 3,
                "num_kept_concrete": 744,
                "num_kept_lambda": 601,
                "num_values_explored": 5747,
                "num_values_kept": 1345,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60027
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84284380509052,
            "num_unique_values": 1270,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.54281098546042,
                "explored_percent_lambda": 13.990306946688207,
                "explored_percent_none": 19.466882067851373,
                "kept_percent_concrete": 78.41897233201581,
                "kept_percent_lambda": 21.58102766798419,
                "num_examples": 5,
                "num_explored_concrete": 4119,
                "num_explored_lambda": 866,
                "num_explored_none": 1205,
                "num_inputs": 1,
                "num_kept_concrete": 992,
                "num_kept_lambda": 273,
                "num_values_explored": 6190,
                "num_values_kept": 1265,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65519
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07031734392513,
            "num_unique_values": 1366,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.04599163788402,
                "explored_percent_lambda": 29.12197782221414,
                "explored_percent_none": 23.832030539901837,
                "kept_percent_concrete": 47.759000734753855,
                "kept_percent_lambda": 52.240999265246145,
                "num_examples": 3,
                "num_explored_concrete": 2588,
                "num_explored_lambda": 1602,
                "num_explored_none": 1311,
                "num_inputs": 1,
                "num_kept_concrete": 650,
                "num_kept_lambda": 711,
                "num_values_explored": 5501,
                "num_values_kept": 1361,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56002
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.31381835194770247,
            "num_unique_values": 261,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.054054054054056,
                "explored_percent_lambda": 33.78378378378378,
                "explored_percent_none": 12.162162162162161,
                "kept_percent_concrete": 52.15686274509804,
                "kept_percent_lambda": 47.84313725490196,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 175,
                "num_explored_none": 63,
                "num_inputs": 2,
                "num_kept_concrete": 133,
                "num_kept_lambda": 122,
                "num_values_explored": 518,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 518
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3491007499396801,
            "num_unique_values": 242,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.72186836518047,
                "explored_percent_lambda": 26.751592356687897,
                "explored_percent_none": 12.526539278131635,
                "kept_percent_concrete": 60.33755274261603,
                "kept_percent_lambda": 39.66244725738397,
                "num_examples": 5,
                "num_explored_concrete": 286,
                "num_explored_lambda": 126,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 143,
                "num_kept_lambda": 94,
                "num_values_explored": 471,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.1304927519522607,
            "num_unique_values": 253,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 22.8,
                "explored_percent_lambda": 51.2,
                "explored_percent_none": 26.0,
                "kept_percent_concrete": 38.70967741935484,
                "kept_percent_lambda": 61.29032258064516,
                "num_examples": 3,
                "num_explored_concrete": 171,
                "num_explored_lambda": 384,
                "num_explored_none": 195,
                "num_inputs": 1,
                "num_kept_concrete": 96,
                "num_kept_lambda": 152,
                "num_values_explored": 750,
                "num_values_kept": 248,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2150
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.460781265050173,
            "num_unique_values": 776,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 37.35050597976081,
                "explored_percent_lambda": 32.93468261269549,
                "explored_percent_none": 29.7148114075437,
                "kept_percent_concrete": 49.02723735408561,
                "kept_percent_lambda": 50.97276264591439,
                "num_examples": 3,
                "num_explored_concrete": 1218,
                "num_explored_lambda": 1074,
                "num_explored_none": 969,
                "num_inputs": 1,
                "num_kept_concrete": 378,
                "num_kept_lambda": 393,
                "num_values_explored": 3261,
                "num_values_kept": 771,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17137
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9883528950158507,
            "num_unique_values": 228,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 23.990498812351543,
                "explored_percent_lambda": 45.36817102137767,
                "explored_percent_none": 30.641330166270784,
                "kept_percent_concrete": 54.5045045045045,
                "kept_percent_lambda": 45.4954954954955,
                "num_examples": 3,
                "num_explored_concrete": 202,
                "num_explored_lambda": 382,
                "num_explored_none": 258,
                "num_inputs": 2,
                "num_kept_concrete": 121,
                "num_kept_lambda": 101,
                "num_values_explored": 842,
                "num_values_kept": 222,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2522
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70587286096998,
            "num_unique_values": 1235,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.78414839797639,
                "explored_percent_lambda": 23.45699831365936,
                "explored_percent_none": 20.75885328836425,
                "kept_percent_concrete": 58.45528455284553,
                "kept_percent_lambda": 41.54471544715447,
                "num_examples": 3,
                "num_explored_concrete": 3308,
                "num_explored_lambda": 1391,
                "num_explored_none": 1231,
                "num_inputs": 1,
                "num_kept_concrete": 719,
                "num_kept_lambda": 511,
                "num_values_explored": 5930,
                "num_values_kept": 1230,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60033
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.294363867957145,
            "num_unique_values": 272,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 81.16531165311653,
                "explored_percent_lambda": 8.536585365853659,
                "explored_percent_none": 10.29810298102981,
                "kept_percent_concrete": 87.59398496240601,
                "kept_percent_lambda": 12.406015037593985,
                "num_examples": 5,
                "num_explored_concrete": 599,
                "num_explored_lambda": 63,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 233,
                "num_kept_lambda": 33,
                "num_values_explored": 738,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 738
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7835998981027,
            "num_unique_values": 1379,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.16107016107016,
                "explored_percent_lambda": 10.496860496860497,
                "explored_percent_none": 19.34206934206934,
                "kept_percent_concrete": 80.8448652585579,
                "kept_percent_lambda": 19.155134741442097,
                "num_examples": 5,
                "num_explored_concrete": 5140,
                "num_explored_lambda": 769,
                "num_explored_none": 1417,
                "num_inputs": 2,
                "num_kept_concrete": 1110,
                "num_kept_lambda": 263,
                "num_values_explored": 7326,
                "num_values_kept": 1373,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75111
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.27062690898310393,
            "num_unique_values": 246,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 55.432372505543235,
                "explored_percent_lambda": 32.37250554323725,
                "explored_percent_none": 12.195121951219512,
                "kept_percent_concrete": 56.43153526970954,
                "kept_percent_lambda": 43.56846473029046,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 146,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 105,
                "num_values_explored": 451,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 451
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66566050692927,
            "num_unique_values": 1177,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.992888587876735,
                "explored_percent_lambda": 16.153064679986453,
                "explored_percent_none": 26.85404673213681,
                "kept_percent_concrete": 66.95132365499573,
                "kept_percent_lambda": 33.04867634500427,
                "num_examples": 3,
                "num_explored_concrete": 3366,
                "num_explored_lambda": 954,
                "num_explored_none": 1586,
                "num_inputs": 2,
                "num_kept_concrete": 784,
                "num_kept_lambda": 387,
                "num_values_explored": 5906,
                "num_values_kept": 1171,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60430
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04736845998559,
            "num_unique_values": 1468,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.07645259938838,
                "explored_percent_lambda": 22.04892966360856,
                "explored_percent_none": 17.874617737003057,
                "kept_percent_concrete": 58.00273597811218,
                "kept_percent_lambda": 41.99726402188782,
                "num_examples": 3,
                "num_explored_concrete": 3929,
                "num_explored_lambda": 1442,
                "num_explored_none": 1169,
                "num_inputs": 2,
                "num_kept_concrete": 848,
                "num_kept_lambda": 614,
                "num_values_explored": 6540,
                "num_values_kept": 1462,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65717
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20648906100541353,
            "num_unique_values": 182,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 38.46153846153846,
                "explored_percent_lambda": 52.136752136752136,
                "explored_percent_none": 9.401709401709402,
                "kept_percent_concrete": 39.20454545454545,
                "kept_percent_lambda": 60.79545454545455,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 122,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 107,
                "num_values_explored": 234,
                "num_values_kept": 176,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96968017192557,
            "num_unique_values": 1548,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.02666666666667,
                "explored_percent_lambda": 10.706666666666667,
                "explored_percent_none": 15.266666666666667,
                "kept_percent_concrete": 78.33981841763944,
                "kept_percent_lambda": 21.660181582360572,
                "num_examples": 5,
                "num_explored_concrete": 5552,
                "num_explored_lambda": 803,
                "num_explored_none": 1145,
                "num_inputs": 2,
                "num_kept_concrete": 1208,
                "num_kept_lambda": 334,
                "num_values_explored": 7500,
                "num_values_kept": 1542,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75949
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24172761105000973,
            "num_unique_values": 232,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 70.89397089397089,
                "explored_percent_lambda": 20.374220374220375,
                "explored_percent_none": 8.731808731808732,
                "kept_percent_concrete": 72.56637168141593,
                "kept_percent_lambda": 27.43362831858407,
                "num_examples": 3,
                "num_explored_concrete": 341,
                "num_explored_lambda": 98,
                "num_explored_none": 42,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 62,
                "num_values_explored": 481,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90619094506837,
            "num_unique_values": 1280,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.03976143141153,
                "explored_percent_lambda": 17.296222664015904,
                "explored_percent_none": 22.664015904572565,
                "kept_percent_concrete": 61.85243328100471,
                "kept_percent_lambda": 38.14756671899529,
                "num_examples": 3,
                "num_explored_concrete": 3926,
                "num_explored_lambda": 1131,
                "num_explored_none": 1482,
                "num_inputs": 2,
                "num_kept_concrete": 788,
                "num_kept_lambda": 486,
                "num_values_explored": 6539,
                "num_values_kept": 1274,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65998
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.78174606396351,
            "num_unique_values": 483,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 43.80561259411362,
                "explored_percent_lambda": 28.747433264887064,
                "explored_percent_none": 27.446954140999317,
                "kept_percent_concrete": 68.34381551362684,
                "kept_percent_lambda": 31.656184486373167,
                "num_examples": 5,
                "num_explored_concrete": 640,
                "num_explored_lambda": 420,
                "num_explored_none": 401,
                "num_inputs": 2,
                "num_kept_concrete": 326,
                "num_kept_lambda": 151,
                "num_values_explored": 1461,
                "num_values_kept": 477,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2861
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16396945796441287,
            "num_unique_values": 153,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: -1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.431372549019606,
                "explored_percent_lambda": 40.78431372549019,
                "explored_percent_none": 20.784313725490197,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 5,
                "num_explored_concrete": 98,
                "num_explored_lambda": 104,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 255,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 255
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90629074710887,
            "num_unique_values": 1279,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.63075276489476,
                "explored_percent_lambda": 28.772743489118803,
                "explored_percent_none": 26.596503745986443,
                "kept_percent_concrete": 47.95918367346939,
                "kept_percent_lambda": 52.04081632653061,
                "num_examples": 3,
                "num_explored_concrete": 2502,
                "num_explored_lambda": 1613,
                "num_explored_none": 1491,
                "num_inputs": 1,
                "num_kept_concrete": 611,
                "num_kept_lambda": 663,
                "num_values_explored": 5606,
                "num_values_kept": 1274,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57577
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75850596907549,
            "num_unique_values": 974,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.142287234042556,
                "explored_percent_lambda": 17.819148936170212,
                "explored_percent_none": 23.038563829787233,
                "kept_percent_concrete": 66.15067079463364,
                "kept_percent_lambda": 33.84932920536636,
                "num_examples": 3,
                "num_explored_concrete": 3558,
                "num_explored_lambda": 1072,
                "num_explored_none": 1386,
                "num_inputs": 1,
                "num_kept_concrete": 641,
                "num_kept_lambda": 328,
                "num_values_explored": 6016,
                "num_values_kept": 969,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62324
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26448173308745027,
            "num_unique_values": 160,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 9.583333333333334,
                "kept_percent_concrete": 34.83870967741935,
                "kept_percent_lambda": 65.16129032258064,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 121,
                "num_explored_none": 23,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 101,
                "num_values_explored": 240,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1882055209716782,
            "num_unique_values": 212,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 77.54629629629629,
                "explored_percent_lambda": 15.972222222222221,
                "explored_percent_none": 6.481481481481482,
                "kept_percent_concrete": 80.97560975609755,
                "kept_percent_lambda": 19.024390243902438,
                "num_examples": 3,
                "num_explored_concrete": 335,
                "num_explored_lambda": 69,
                "num_explored_none": 28,
                "num_inputs": 3,
                "num_kept_concrete": 166,
                "num_kept_lambda": 39,
                "num_values_explored": 432,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 432
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88193351705559,
            "num_unique_values": 1150,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.27753303964758,
                "explored_percent_lambda": 22.96035242290749,
                "explored_percent_none": 25.762114537444933,
                "kept_percent_concrete": 58.16593886462882,
                "kept_percent_lambda": 41.83406113537118,
                "num_examples": 3,
                "num_explored_concrete": 2910,
                "num_explored_lambda": 1303,
                "num_explored_none": 1462,
                "num_inputs": 1,
                "num_kept_concrete": 666,
                "num_kept_lambda": 479,
                "num_values_explored": 5675,
                "num_values_kept": 1145,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58435
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77652566810139,
            "num_unique_values": 1320,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.41677943166441,
                "explored_percent_lambda": 21.228010825439785,
                "explored_percent_none": 25.355209742895806,
                "kept_percent_concrete": 59.51293759512937,
                "kept_percent_lambda": 40.48706240487063,
                "num_examples": 3,
                "num_explored_concrete": 3158,
                "num_explored_lambda": 1255,
                "num_explored_none": 1499,
                "num_inputs": 2,
                "num_kept_concrete": 782,
                "num_kept_lambda": 532,
                "num_values_explored": 5912,
                "num_values_kept": 1314,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60713
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65196288505103,
            "num_unique_values": 1228,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.02717304941999,
                "explored_percent_lambda": 17.30494199904656,
                "explored_percent_none": 29.66788495153345,
                "kept_percent_concrete": 61.50696150696151,
                "kept_percent_lambda": 38.49303849303849,
                "num_examples": 3,
                "num_explored_concrete": 3337,
                "num_explored_lambda": 1089,
                "num_explored_none": 1867,
                "num_inputs": 3,
                "num_kept_concrete": 751,
                "num_kept_lambda": 470,
                "num_values_explored": 6293,
                "num_values_kept": 1221,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63197
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 83.36738315795083,
            "num_unique_values": 259,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 18.71657754010695,
                "explored_percent_lambda": 41.97860962566845,
                "explored_percent_none": 39.3048128342246,
                "kept_percent_concrete": 38.976377952755904,
                "kept_percent_lambda": 61.023622047244096,
                "num_examples": 3,
                "num_explored_concrete": 210,
                "num_explored_lambda": 471,
                "num_explored_none": 441,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 155,
                "num_values_explored": 1122,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 47801
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.9812889070017263,
            "num_unique_values": 533,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 28.707564026206075,
                "explored_percent_lambda": 39.189994044073856,
                "explored_percent_none": 32.10244192972007,
                "kept_percent_concrete": 44.31818181818182,
                "kept_percent_lambda": 55.68181818181818,
                "num_examples": 3,
                "num_explored_concrete": 482,
                "num_explored_lambda": 658,
                "num_explored_none": 539,
                "num_inputs": 1,
                "num_kept_concrete": 234,
                "num_kept_lambda": 294,
                "num_values_explored": 1679,
                "num_values_kept": 528,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3359
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 82.7651352530811,
            "num_unique_values": 250,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 14.883720930232558,
                "explored_percent_lambda": 52.906976744186046,
                "explored_percent_none": 32.2093023255814,
                "kept_percent_concrete": 27.346938775510203,
                "kept_percent_lambda": 72.65306122448979,
                "num_examples": 3,
                "num_explored_concrete": 128,
                "num_explored_lambda": 455,
                "num_explored_none": 277,
                "num_inputs": 1,
                "num_kept_concrete": 67,
                "num_kept_lambda": 178,
                "num_values_explored": 860,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 46497
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8118072510697,
            "num_unique_values": 1457,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47136735488897,
                "explored_percent_lambda": 9.466303077522399,
                "explored_percent_none": 20.062329567588623,
                "kept_percent_concrete": 82.8394210889042,
                "kept_percent_lambda": 17.160578911095797,
                "num_examples": 5,
                "num_explored_concrete": 5427,
                "num_explored_lambda": 729,
                "num_explored_none": 1545,
                "num_inputs": 2,
                "num_kept_concrete": 1202,
                "num_kept_lambda": 249,
                "num_values_explored": 7701,
                "num_values_kept": 1451,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77943
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.5
}