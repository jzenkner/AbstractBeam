{
    "num_tasks": 50,
    "num_tasks_solved": 26,
    "results": [
        {
            "elapsed_time": 101.33369181898888,
            "num_unique_values": 1362,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.051939513477976,
                "explored_percent_lambda": 20.956607495069033,
                "explored_percent_none": 27.99145299145299,
                "kept_percent_concrete": 61.283185840707965,
                "kept_percent_lambda": 38.716814159292035,
                "num_examples": 3,
                "num_explored_concrete": 3106,
                "num_explored_lambda": 1275,
                "num_explored_none": 1703,
                "num_inputs": 2,
                "num_kept_concrete": 831,
                "num_kept_lambda": 525,
                "num_values_explored": 6084,
                "num_values_kept": 1356,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63223
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.497229487984441,
            "num_unique_values": 520,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.04105571847507,
                "explored_percent_lambda": 32.551319648093845,
                "explored_percent_none": 21.407624633431084,
                "kept_percent_concrete": 65.04854368932038,
                "kept_percent_lambda": 34.95145631067961,
                "num_examples": 5,
                "num_explored_concrete": 785,
                "num_explored_lambda": 555,
                "num_explored_none": 365,
                "num_inputs": 1,
                "num_kept_concrete": 335,
                "num_kept_lambda": 180,
                "num_values_explored": 1705,
                "num_values_kept": 515,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9988
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.90358235395979,
            "num_unique_values": 478,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), m, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 43.01221166892809,
                "explored_percent_lambda": 31.275440976933513,
                "explored_percent_none": 25.712347354138398,
                "kept_percent_concrete": 67.16101694915254,
                "kept_percent_lambda": 32.83898305084746,
                "num_examples": 5,
                "num_explored_concrete": 634,
                "num_explored_lambda": 461,
                "num_explored_none": 379,
                "num_inputs": 2,
                "num_kept_concrete": 317,
                "num_kept_lambda": 155,
                "num_values_explored": 1474,
                "num_values_kept": 472,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 24719
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4395584249868989,
            "num_unique_values": 318,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(-1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.57818659658344,
                "explored_percent_lambda": 28.252299605781864,
                "explored_percent_none": 11.169513797634691,
                "kept_percent_concrete": 60.063897763578275,
                "kept_percent_lambda": 39.936102236421725,
                "num_examples": 3,
                "num_explored_concrete": 461,
                "num_explored_lambda": 215,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 125,
                "num_values_explored": 761,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 761
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.27197469293605536,
            "num_unique_values": 298,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, -1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.678642714570856,
                "explored_percent_lambda": 30.139720558882235,
                "explored_percent_none": 9.181636726546905,
                "kept_percent_concrete": 64.50511945392492,
                "kept_percent_lambda": 35.49488054607509,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 151,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 104,
                "num_values_explored": 501,
                "num_values_kept": 293,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92414204892702,
            "num_unique_values": 1446,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.18758995682072,
                "explored_percent_lambda": 22.053414361106668,
                "explored_percent_none": 18.758995682072605,
                "kept_percent_concrete": 58.541666666666664,
                "kept_percent_lambda": 41.458333333333336,
                "num_examples": 3,
                "num_explored_concrete": 3701,
                "num_explored_lambda": 1379,
                "num_explored_none": 1173,
                "num_inputs": 2,
                "num_kept_concrete": 843,
                "num_kept_lambda": 597,
                "num_values_explored": 6253,
                "num_values_kept": 1440,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64199
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.447962748003192,
            "num_unique_values": 770,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 38.08420239474701,
                "explored_percent_lambda": 32.75395905755118,
                "explored_percent_none": 29.161838547701816,
                "kept_percent_concrete": 46.788990825688074,
                "kept_percent_lambda": 53.211009174311926,
                "num_examples": 3,
                "num_explored_concrete": 986,
                "num_explored_lambda": 848,
                "num_explored_none": 755,
                "num_inputs": 3,
                "num_kept_concrete": 357,
                "num_kept_lambda": 406,
                "num_values_explored": 2589,
                "num_values_kept": 763,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3989
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.399130441946909,
            "num_unique_values": 720,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Sum(((lambda v1: Take(v1, x)))(v1))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 63.12199036918138,
                "explored_percent_lambda": 21.107544141252006,
                "explored_percent_none": 15.770465489566613,
                "kept_percent_concrete": 71.60839160839161,
                "kept_percent_lambda": 28.39160839160839,
                "num_examples": 5,
                "num_explored_concrete": 1573,
                "num_explored_lambda": 526,
                "num_explored_none": 393,
                "num_inputs": 1,
                "num_kept_concrete": 512,
                "num_kept_lambda": 203,
                "num_values_explored": 2492,
                "num_values_kept": 715,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4172
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72074671892915,
            "num_unique_values": 1375,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.98078312382604,
                "explored_percent_lambda": 11.963589076723016,
                "explored_percent_none": 15.055627799450946,
                "kept_percent_concrete": 78.9051094890511,
                "kept_percent_lambda": 21.094890510948904,
                "num_examples": 5,
                "num_explored_concrete": 5051,
                "num_explored_lambda": 828,
                "num_explored_none": 1042,
                "num_inputs": 1,
                "num_kept_concrete": 1081,
                "num_kept_lambda": 289,
                "num_values_explored": 6921,
                "num_values_kept": 1370,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70427
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.191811436903663,
            "num_unique_values": 472,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 52.37550085861477,
                "explored_percent_lambda": 19.805380652547225,
                "explored_percent_none": 27.819118488838008,
                "kept_percent_concrete": 78.11158798283262,
                "kept_percent_lambda": 21.888412017167383,
                "num_examples": 5,
                "num_explored_concrete": 915,
                "num_explored_lambda": 346,
                "num_explored_none": 486,
                "num_inputs": 2,
                "num_kept_concrete": 364,
                "num_kept_lambda": 102,
                "num_values_explored": 1747,
                "num_values_kept": 466,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10981
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8841825639829,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.640221721808416,
                "explored_percent_lambda": 27.438073791789364,
                "explored_percent_none": 23.921704486402216,
                "kept_percent_concrete": 46.134020618556704,
                "kept_percent_lambda": 53.865979381443296,
                "num_examples": 3,
                "num_explored_concrete": 2808,
                "num_explored_lambda": 1584,
                "num_explored_none": 1381,
                "num_inputs": 1,
                "num_kept_concrete": 537,
                "num_kept_lambda": 627,
                "num_values_explored": 5773,
                "num_values_kept": 1164,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61563
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95696333399974,
            "num_unique_values": 1206,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.863981319322825,
                "explored_percent_lambda": 32.08795485503016,
                "explored_percent_none": 27.048063825647013,
                "kept_percent_concrete": 44.0466278101582,
                "kept_percent_lambda": 55.9533721898418,
                "num_examples": 3,
                "num_explored_concrete": 2100,
                "num_explored_lambda": 1649,
                "num_explored_none": 1390,
                "num_inputs": 1,
                "num_kept_concrete": 529,
                "num_kept_lambda": 672,
                "num_values_explored": 5139,
                "num_values_kept": 1201,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53404
            },
            "success": false,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89793232094962,
            "num_unique_values": 1217,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.47491248541424,
                "explored_percent_lambda": 27.404567427904652,
                "explored_percent_none": 23.120520086681115,
                "kept_percent_concrete": 53.2617671345995,
                "kept_percent_lambda": 46.7382328654005,
                "num_examples": 3,
                "num_explored_concrete": 2968,
                "num_explored_lambda": 1644,
                "num_explored_none": 1387,
                "num_inputs": 2,
                "num_kept_concrete": 645,
                "num_kept_lambda": 566,
                "num_values_explored": 5999,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61159
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.43036737001966685,
            "num_unique_values": 312,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.19409282700422,
                "explored_percent_lambda": 43.881856540084385,
                "explored_percent_none": 13.924050632911392,
                "kept_percent_concrete": 41.693811074918564,
                "kept_percent_lambda": 58.306188925081436,
                "num_examples": 3,
                "num_explored_concrete": 300,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 128,
                "num_kept_lambda": 179,
                "num_values_explored": 711,
                "num_values_kept": 307,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79686205997132,
            "num_unique_values": 1270,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.434652477552376,
                "explored_percent_lambda": 23.977386099102095,
                "explored_percent_none": 26.587961423345526,
                "kept_percent_concrete": 53.280632411067195,
                "kept_percent_lambda": 46.719367588932805,
                "num_examples": 3,
                "num_explored_concrete": 2973,
                "num_explored_lambda": 1442,
                "num_explored_none": 1599,
                "num_inputs": 1,
                "num_kept_concrete": 674,
                "num_kept_lambda": 591,
                "num_values_explored": 6014,
                "num_values_kept": 1265,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60945
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14007710095029324,
            "num_unique_values": 103,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 42.30769230769231,
                "explored_percent_lambda": 47.43589743589744,
                "explored_percent_none": 10.256410256410257,
                "kept_percent_concrete": 36.08247422680412,
                "kept_percent_lambda": 63.91752577319588,
                "num_examples": 3,
                "num_explored_concrete": 66,
                "num_explored_lambda": 74,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 62,
                "num_values_explored": 156,
                "num_values_kept": 97,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 156
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77532773197163,
            "num_unique_values": 1302,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.41731724627395,
                "explored_percent_lambda": 10.106458481192336,
                "explored_percent_none": 21.476224272533713,
                "kept_percent_concrete": 80.80185042405552,
                "kept_percent_lambda": 19.198149575944488,
                "num_examples": 5,
                "num_explored_concrete": 4820,
                "num_explored_lambda": 712,
                "num_explored_none": 1513,
                "num_inputs": 1,
                "num_kept_concrete": 1048,
                "num_kept_lambda": 249,
                "num_values_explored": 7045,
                "num_values_kept": 1297,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73062
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20463981595822,
            "num_unique_values": 1393,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.167788540469545,
                "explored_percent_lambda": 27.598095550812676,
                "explored_percent_none": 14.234115908717781,
                "kept_percent_concrete": 45.421773612112474,
                "kept_percent_lambda": 54.578226387887526,
                "num_examples": 3,
                "num_explored_concrete": 3543,
                "num_explored_lambda": 1681,
                "num_explored_none": 867,
                "num_inputs": 2,
                "num_kept_concrete": 630,
                "num_kept_lambda": 757,
                "num_values_explored": 6091,
                "num_values_kept": 1387,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63216
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2015574451070279,
            "num_unique_values": 175,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.013513513513516,
                "explored_percent_lambda": 34.12162162162162,
                "explored_percent_none": 14.864864864864865,
                "kept_percent_concrete": 49.411764705882355,
                "kept_percent_lambda": 50.588235294117645,
                "num_examples": 5,
                "num_explored_concrete": 151,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 86,
                "num_values_explored": 296,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 296
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98031065799296,
            "num_unique_values": 1326,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.426039536468984,
                "explored_percent_lambda": 23.295841854124063,
                "explored_percent_none": 26.278118609406953,
                "kept_percent_concrete": 54.510993176648974,
                "kept_percent_lambda": 45.489006823351026,
                "num_examples": 3,
                "num_explored_concrete": 2959,
                "num_explored_lambda": 1367,
                "num_explored_none": 1542,
                "num_inputs": 3,
                "num_kept_concrete": 719,
                "num_kept_lambda": 600,
                "num_values_explored": 5868,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60274
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7687111949781,
            "num_unique_values": 1361,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.76201586560896,
                "explored_percent_lambda": 11.85254316378908,
                "explored_percent_none": 18.38544097060196,
                "kept_percent_concrete": 79.64601769911505,
                "kept_percent_lambda": 20.353982300884955,
                "num_examples": 5,
                "num_explored_concrete": 4485,
                "num_explored_lambda": 762,
                "num_explored_none": 1182,
                "num_inputs": 1,
                "num_kept_concrete": 1080,
                "num_kept_lambda": 276,
                "num_values_explored": 6429,
                "num_values_kept": 1356,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66493
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08336839999538,
            "num_unique_values": 1439,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.113594040968344,
                "explored_percent_lambda": 30.614525139664803,
                "explored_percent_none": 22.271880819366853,
                "kept_percent_concrete": 47.28033472803347,
                "kept_percent_lambda": 52.71966527196653,
                "num_examples": 3,
                "num_explored_concrete": 2530,
                "num_explored_lambda": 1644,
                "num_explored_none": 1196,
                "num_inputs": 1,
                "num_kept_concrete": 678,
                "num_kept_lambda": 756,
                "num_values_explored": 5370,
                "num_values_kept": 1434,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55928
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.39904621604364365,
            "num_unique_values": 261,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.054054054054056,
                "explored_percent_lambda": 33.78378378378378,
                "explored_percent_none": 12.162162162162161,
                "kept_percent_concrete": 52.15686274509804,
                "kept_percent_lambda": 47.84313725490196,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 175,
                "num_explored_none": 63,
                "num_inputs": 2,
                "num_kept_concrete": 133,
                "num_kept_lambda": 122,
                "num_values_explored": 518,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 518
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2513290549395606,
            "num_unique_values": 242,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.72186836518047,
                "explored_percent_lambda": 26.751592356687897,
                "explored_percent_none": 12.526539278131635,
                "kept_percent_concrete": 60.33755274261603,
                "kept_percent_lambda": 39.66244725738397,
                "num_examples": 5,
                "num_explored_concrete": 286,
                "num_explored_lambda": 126,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 143,
                "num_kept_lambda": 94,
                "num_values_explored": 471,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.1166910050669685,
            "num_unique_values": 256,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 25.49019607843137,
                "explored_percent_lambda": 50.06535947712418,
                "explored_percent_none": 24.444444444444443,
                "kept_percent_concrete": 41.832669322709165,
                "kept_percent_lambda": 58.167330677290835,
                "num_examples": 3,
                "num_explored_concrete": 195,
                "num_explored_lambda": 383,
                "num_explored_none": 187,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 146,
                "num_values_explored": 765,
                "num_values_kept": 251,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2165
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 76.5525589750614,
            "num_unique_values": 784,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 38.756127450980394,
                "explored_percent_lambda": 31.004901960784313,
                "explored_percent_none": 30.238970588235293,
                "kept_percent_concrete": 50.83440308087292,
                "kept_percent_lambda": 49.16559691912708,
                "num_examples": 3,
                "num_explored_concrete": 1265,
                "num_explored_lambda": 1012,
                "num_explored_none": 987,
                "num_inputs": 1,
                "num_kept_concrete": 396,
                "num_kept_lambda": 383,
                "num_values_explored": 3264,
                "num_values_kept": 779,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 47730
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9590806239284575,
            "num_unique_values": 225,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 22.463768115942027,
                "explored_percent_lambda": 47.22222222222222,
                "explored_percent_none": 30.314009661835748,
                "kept_percent_concrete": 52.054794520547944,
                "kept_percent_lambda": 47.945205479452056,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 391,
                "num_explored_none": 251,
                "num_inputs": 2,
                "num_kept_concrete": 114,
                "num_kept_lambda": 105,
                "num_values_explored": 828,
                "num_values_kept": 219,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2508
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72981913900003,
            "num_unique_values": 1204,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.8968929005381,
                "explored_percent_lambda": 23.86738413469884,
                "explored_percent_none": 22.235722964763063,
                "kept_percent_concrete": 56.46371976647206,
                "kept_percent_lambda": 43.53628023352794,
                "num_examples": 3,
                "num_explored_concrete": 3105,
                "num_explored_lambda": 1375,
                "num_explored_none": 1281,
                "num_inputs": 1,
                "num_kept_concrete": 677,
                "num_kept_lambda": 522,
                "num_values_explored": 5761,
                "num_values_kept": 1199,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60456
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.35757774394005537,
            "num_unique_values": 272,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 81.16531165311653,
                "explored_percent_lambda": 8.536585365853659,
                "explored_percent_none": 10.29810298102981,
                "kept_percent_concrete": 87.59398496240601,
                "kept_percent_lambda": 12.406015037593985,
                "num_examples": 5,
                "num_explored_concrete": 599,
                "num_explored_lambda": 63,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 233,
                "num_kept_lambda": 33,
                "num_values_explored": 738,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 738
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76057125197258,
            "num_unique_values": 1381,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.37745974955277,
                "explored_percent_lambda": 10.086693270950875,
                "explored_percent_none": 18.535846979496352,
                "kept_percent_concrete": 81.81818181818181,
                "kept_percent_lambda": 18.181818181818183,
                "num_examples": 5,
                "num_explored_concrete": 5187,
                "num_explored_lambda": 733,
                "num_explored_none": 1347,
                "num_inputs": 2,
                "num_kept_concrete": 1125,
                "num_kept_lambda": 250,
                "num_values_explored": 7267,
                "num_values_kept": 1375,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74737
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30965377599932253,
            "num_unique_values": 246,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 55.432372505543235,
                "explored_percent_lambda": 32.37250554323725,
                "explored_percent_none": 12.195121951219512,
                "kept_percent_concrete": 56.43153526970954,
                "kept_percent_lambda": 43.56846473029046,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 146,
                "num_explored_none": 55,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 105,
                "num_values_explored": 451,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 451
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.673799709999,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.86129413752323,
                "explored_percent_lambda": 15.72900827842541,
                "explored_percent_none": 25.40969758405136,
                "kept_percent_concrete": 68.02120141342756,
                "kept_percent_lambda": 31.978798586572438,
                "num_examples": 3,
                "num_explored_concrete": 3484,
                "num_explored_lambda": 931,
                "num_explored_none": 1504,
                "num_inputs": 2,
                "num_kept_concrete": 770,
                "num_kept_lambda": 362,
                "num_values_explored": 5919,
                "num_values_kept": 1132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60597
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96458953304682,
            "num_unique_values": 1463,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.53819928715326,
                "explored_percent_lambda": 22.532155586548893,
                "explored_percent_none": 17.929645126297846,
                "kept_percent_concrete": 56.82910089224434,
                "kept_percent_lambda": 43.17089910775566,
                "num_examples": 3,
                "num_explored_concrete": 3842,
                "num_explored_lambda": 1454,
                "num_explored_none": 1157,
                "num_inputs": 2,
                "num_kept_concrete": 828,
                "num_kept_lambda": 629,
                "num_values_explored": 6453,
                "num_values_kept": 1457,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65468
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19938656699378043,
            "num_unique_values": 182,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 38.46153846153846,
                "explored_percent_lambda": 52.136752136752136,
                "explored_percent_none": 9.401709401709402,
                "kept_percent_concrete": 39.20454545454545,
                "kept_percent_lambda": 60.79545454545455,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 122,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 107,
                "num_values_explored": 234,
                "num_values_kept": 176,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96914610895328,
            "num_unique_values": 1586,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.92628851137346,
                "explored_percent_lambda": 11.805355600345523,
                "explored_percent_none": 16.268355888281025,
                "kept_percent_concrete": 77.27848101265823,
                "kept_percent_lambda": 22.72151898734177,
                "num_examples": 5,
                "num_explored_concrete": 4996,
                "num_explored_lambda": 820,
                "num_explored_none": 1130,
                "num_inputs": 2,
                "num_kept_concrete": 1221,
                "num_kept_lambda": 359,
                "num_values_explored": 6946,
                "num_values_kept": 1580,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74193
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2497617400949821,
            "num_unique_values": 232,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 70.89397089397089,
                "explored_percent_lambda": 20.374220374220375,
                "explored_percent_none": 8.731808731808732,
                "kept_percent_concrete": 72.56637168141593,
                "kept_percent_lambda": 27.43362831858407,
                "num_examples": 3,
                "num_explored_concrete": 341,
                "num_explored_lambda": 98,
                "num_explored_none": 42,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 62,
                "num_values_explored": 481,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77867311099544,
            "num_unique_values": 1258,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.054246402024354,
                "explored_percent_lambda": 18.598766408350468,
                "explored_percent_none": 22.346987189625178,
                "kept_percent_concrete": 60.62300319488818,
                "kept_percent_lambda": 39.37699680511182,
                "num_examples": 3,
                "num_explored_concrete": 3734,
                "num_explored_lambda": 1176,
                "num_explored_none": 1413,
                "num_inputs": 2,
                "num_kept_concrete": 759,
                "num_kept_lambda": 493,
                "num_values_explored": 6323,
                "num_values_kept": 1252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65684
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9132233990822,
            "num_unique_values": 1511,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.0334051724138,
                "explored_percent_lambda": 8.59375,
                "explored_percent_none": 18.372844827586206,
                "kept_percent_concrete": 83.98671096345515,
                "kept_percent_lambda": 16.01328903654485,
                "num_examples": 5,
                "num_explored_concrete": 5422,
                "num_explored_lambda": 638,
                "num_explored_none": 1364,
                "num_inputs": 2,
                "num_kept_concrete": 1264,
                "num_kept_lambda": 241,
                "num_values_explored": 7424,
                "num_values_kept": 1505,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75787
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21956588502507657,
            "num_unique_values": 153,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: -1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.431372549019606,
                "explored_percent_lambda": 40.78431372549019,
                "explored_percent_none": 20.784313725490197,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 5,
                "num_explored_concrete": 98,
                "num_explored_lambda": 104,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 255,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 255
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.579621032928117,
            "num_unique_values": 220,
            "solution": "Map((lambda u1: ((lambda v1: Max(v1, ((lambda v1: Multiply(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 8.733624454148472,
                "explored_percent_lambda": 61.353711790393014,
                "explored_percent_none": 29.912663755458514,
                "kept_percent_concrete": 26.511627906976745,
                "kept_percent_lambda": 73.48837209302326,
                "num_examples": 3,
                "num_explored_concrete": 80,
                "num_explored_lambda": 562,
                "num_explored_none": 274,
                "num_inputs": 1,
                "num_kept_concrete": 57,
                "num_kept_lambda": 158,
                "num_values_explored": 916,
                "num_values_kept": 215,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7965
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73389867600054,
            "num_unique_values": 974,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.11865524060646,
                "explored_percent_lambda": 17.946605141727094,
                "explored_percent_none": 21.934739617666448,
                "kept_percent_concrete": 66.35706914344685,
                "kept_percent_lambda": 33.64293085655315,
                "num_examples": 3,
                "num_explored_concrete": 3648,
                "num_explored_lambda": 1089,
                "num_explored_none": 1331,
                "num_inputs": 1,
                "num_kept_concrete": 643,
                "num_kept_lambda": 326,
                "num_values_explored": 6068,
                "num_values_kept": 969,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61679
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.330732628935948,
            "num_unique_values": 160,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 9.583333333333334,
                "kept_percent_concrete": 34.83870967741935,
                "kept_percent_lambda": 65.16129032258064,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 121,
                "num_explored_none": 23,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 101,
                "num_values_explored": 240,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 240
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.193027205998078,
            "num_unique_values": 212,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 77.54629629629629,
                "explored_percent_lambda": 15.972222222222221,
                "explored_percent_none": 6.481481481481482,
                "kept_percent_concrete": 80.97560975609755,
                "kept_percent_lambda": 19.024390243902438,
                "num_examples": 3,
                "num_explored_concrete": 335,
                "num_explored_lambda": 69,
                "num_explored_none": 28,
                "num_inputs": 3,
                "num_kept_concrete": 166,
                "num_kept_lambda": 39,
                "num_values_explored": 432,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 432
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84995012695435,
            "num_unique_values": 1168,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.513551566349875,
                "explored_percent_lambda": 23.372052094332982,
                "explored_percent_none": 25.114396339317143,
                "kept_percent_concrete": 57.867583834909716,
                "kept_percent_lambda": 42.132416165090284,
                "num_examples": 3,
                "num_explored_concrete": 2927,
                "num_explored_lambda": 1328,
                "num_explored_none": 1427,
                "num_inputs": 1,
                "num_kept_concrete": 673,
                "num_kept_lambda": 490,
                "num_values_explored": 5682,
                "num_values_kept": 1163,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59308
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78672560490668,
            "num_unique_values": 1276,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.66474380726162,
                "explored_percent_lambda": 19.290804207668817,
                "explored_percent_none": 27.04445198506956,
                "kept_percent_concrete": 61.181102362204726,
                "kept_percent_lambda": 38.818897637795274,
                "num_examples": 3,
                "num_explored_concrete": 3163,
                "num_explored_lambda": 1137,
                "num_explored_none": 1594,
                "num_inputs": 2,
                "num_kept_concrete": 777,
                "num_kept_lambda": 493,
                "num_values_explored": 5894,
                "num_values_kept": 1270,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60793
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68839509098325,
            "num_unique_values": 1168,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.5794026440346,
                "explored_percent_lambda": 18.214460584299005,
                "explored_percent_none": 31.206136771666394,
                "kept_percent_concrete": 60.12058570198105,
                "kept_percent_lambda": 39.87941429801895,
                "num_examples": 3,
                "num_explored_concrete": 3099,
                "num_explored_lambda": 1116,
                "num_explored_none": 1912,
                "num_inputs": 3,
                "num_kept_concrete": 698,
                "num_kept_lambda": 463,
                "num_values_explored": 6127,
                "num_values_kept": 1161,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63401
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 63.3751116580097,
            "num_unique_values": 256,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 20.41742286751361,
                "explored_percent_lambda": 41.47005444646098,
                "explored_percent_none": 38.11252268602541,
                "kept_percent_concrete": 39.44223107569721,
                "kept_percent_lambda": 60.55776892430279,
                "num_examples": 3,
                "num_explored_concrete": 225,
                "num_explored_lambda": 457,
                "num_explored_none": 420,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 152,
                "num_values_explored": 1102,
                "num_values_kept": 251,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 36812
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.9807552410056815,
            "num_unique_values": 505,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 25.153374233128833,
                "explored_percent_lambda": 42.331288343558285,
                "explored_percent_none": 32.515337423312886,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 410,
                "num_explored_lambda": 690,
                "num_explored_none": 530,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 300,
                "num_values_explored": 1630,
                "num_values_kept": 500,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3310
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.624840482021682,
            "num_unique_values": 248,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 14.917127071823204,
                "explored_percent_lambda": 47.6243093922652,
                "explored_percent_none": 37.4585635359116,
                "kept_percent_concrete": 27.57201646090535,
                "kept_percent_lambda": 72.42798353909465,
                "num_examples": 3,
                "num_explored_concrete": 135,
                "num_explored_lambda": 431,
                "num_explored_none": 339,
                "num_inputs": 1,
                "num_kept_concrete": 67,
                "num_kept_lambda": 176,
                "num_values_explored": 905,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2585
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76811823004391,
            "num_unique_values": 1388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.30012069196728,
                "explored_percent_lambda": 10.51361137186536,
                "explored_percent_none": 23.186267936167358,
                "kept_percent_concrete": 80.53545586107091,
                "kept_percent_lambda": 19.46454413892909,
                "num_examples": 5,
                "num_explored_concrete": 4944,
                "num_explored_lambda": 784,
                "num_explored_none": 1729,
                "num_inputs": 2,
                "num_kept_concrete": 1113,
                "num_kept_lambda": 269,
                "num_values_explored": 7457,
                "num_values_kept": 1382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78033
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.52
}