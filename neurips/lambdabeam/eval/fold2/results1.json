{
    "num_tasks": 50,
    "num_tasks_solved": 18,
    "results": [
        {
            "elapsed_time": 0.7561802000273019,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22150526498444378,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2607154780998826,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1441096290946,
            "num_unique_values": 1216,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.769114593165945,
                "explored_percent_lambda": 27.63828582216349,
                "explored_percent_none": 13.592599584670568,
                "kept_percent_concrete": 49.71098265895954,
                "kept_percent_lambda": 50.28901734104046,
                "num_examples": 3,
                "num_explored_concrete": 3113,
                "num_explored_lambda": 1464,
                "num_explored_none": 720,
                "num_inputs": 1,
                "num_kept_concrete": 602,
                "num_kept_lambda": 609,
                "num_values_explored": 5297,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56252
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3129686221946031,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89057085895911,
            "num_unique_values": 1358,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.7013610888711,
                "explored_percent_lambda": 14.955964771817454,
                "explored_percent_none": 8.342674139311448,
                "kept_percent_concrete": 73.17073170731707,
                "kept_percent_lambda": 26.829268292682926,
                "num_examples": 5,
                "num_explored_concrete": 4790,
                "num_explored_lambda": 934,
                "num_explored_none": 521,
                "num_inputs": 1,
                "num_kept_concrete": 990,
                "num_kept_lambda": 363,
                "num_values_explored": 6245,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64126
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16501392796635628,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90485772513784,
            "num_unique_values": 1200,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.05124878365228,
                "explored_percent_lambda": 16.834252351605578,
                "explored_percent_none": 9.114498864742135,
                "kept_percent_concrete": 67.94979079497908,
                "kept_percent_lambda": 32.05020920502092,
                "num_examples": 5,
                "num_explored_concrete": 4566,
                "num_explored_lambda": 1038,
                "num_explored_none": 562,
                "num_inputs": 1,
                "num_kept_concrete": 812,
                "num_kept_lambda": 383,
                "num_values_explored": 6166,
                "num_values_kept": 1195,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63728
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.739281185902655,
            "num_unique_values": 1210,
            "solution": "Access(Subtract(Sum(Scanl1((lambda u1, u2: ((lambda v1: Subtract(1, v1)))(u1)), x)), Head(x)), Sort(x))",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 73.89018691588785,
                "explored_percent_lambda": 14.719626168224298,
                "explored_percent_none": 11.39018691588785,
                "kept_percent_concrete": 73.11203319502074,
                "kept_percent_lambda": 26.887966804979254,
                "num_examples": 5,
                "num_explored_concrete": 3795,
                "num_explored_lambda": 756,
                "num_explored_none": 585,
                "num_inputs": 1,
                "num_kept_concrete": 881,
                "num_kept_lambda": 324,
                "num_values_explored": 5136,
                "num_values_kept": 1205,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 19288
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10934033314697,
            "num_unique_values": 1395,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.67272727272727,
                "explored_percent_lambda": 31.236363636363638,
                "explored_percent_none": 11.090909090909092,
                "kept_percent_concrete": 42.589928057553955,
                "kept_percent_lambda": 57.410071942446045,
                "num_examples": 3,
                "num_explored_concrete": 3172,
                "num_explored_lambda": 1718,
                "num_explored_none": 610,
                "num_inputs": 1,
                "num_kept_concrete": 592,
                "num_kept_lambda": 798,
                "num_values_explored": 5500,
                "num_values_kept": 1390,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56239
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7678416329436,
            "num_unique_values": 1472,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.20223726817781,
                "explored_percent_lambda": 9.19929349425964,
                "explored_percent_none": 11.598469237562556,
                "kept_percent_concrete": 83.08321964529331,
                "kept_percent_lambda": 16.916780354706685,
                "num_examples": 5,
                "num_explored_concrete": 5381,
                "num_explored_lambda": 625,
                "num_explored_none": 788,
                "num_inputs": 2,
                "num_kept_concrete": 1218,
                "num_kept_lambda": 248,
                "num_values_explored": 6794,
                "num_values_kept": 1466,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69177
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84549311315641,
            "num_unique_values": 1393,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.80909246282687,
                "explored_percent_lambda": 21.99623995898137,
                "explored_percent_none": 11.194667578191762,
                "kept_percent_concrete": 62.36481614996395,
                "kept_percent_lambda": 37.63518385003605,
                "num_examples": 3,
                "num_explored_concrete": 3909,
                "num_explored_lambda": 1287,
                "num_explored_none": 655,
                "num_inputs": 2,
                "num_kept_concrete": 865,
                "num_kept_lambda": 522,
                "num_values_explored": 5851,
                "num_values_kept": 1387,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60711
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.519115142058581,
            "num_unique_values": 1041,
            "solution": "Count((lambda u1: ((lambda v1: Less(1, ((lambda v1: Multiply(v1, Add(-1, -1))))(v1))))(u1)), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 71.2469569921558,
                "explored_percent_lambda": 16.47281579659183,
                "explored_percent_none": 12.280227211252367,
                "kept_percent_concrete": 75.86872586872587,
                "kept_percent_lambda": 24.131274131274132,
                "num_examples": 5,
                "num_explored_concrete": 2634,
                "num_explored_lambda": 609,
                "num_explored_none": 454,
                "num_inputs": 1,
                "num_kept_concrete": 786,
                "num_kept_lambda": 250,
                "num_values_explored": 3697,
                "num_values_kept": 1036,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5377
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.197976503055543,
            "num_unique_values": 782,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 66.73275178429817,
                "explored_percent_lambda": 23.86994448850119,
                "explored_percent_none": 9.397303727200635,
                "kept_percent_concrete": 63.83526383526384,
                "kept_percent_lambda": 36.16473616473616,
                "num_examples": 3,
                "num_explored_concrete": 1683,
                "num_explored_lambda": 602,
                "num_explored_none": 237,
                "num_inputs": 1,
                "num_kept_concrete": 496,
                "num_kept_lambda": 281,
                "num_values_explored": 2522,
                "num_values_kept": 777,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4202
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69854025612585,
            "num_unique_values": 1451,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.94773309233318,
                "explored_percent_lambda": 16.77963548727218,
                "explored_percent_none": 10.272631420394637,
                "kept_percent_concrete": 67.93628808864266,
                "kept_percent_lambda": 32.06371191135734,
                "num_examples": 3,
                "num_explored_concrete": 4843,
                "num_explored_lambda": 1114,
                "num_explored_none": 682,
                "num_inputs": 3,
                "num_kept_concrete": 981,
                "num_kept_lambda": 463,
                "num_values_explored": 6639,
                "num_values_kept": 1444,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67115
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84503174410202,
            "num_unique_values": 1350,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.6192362541594,
                "explored_percent_lambda": 13.991443511329425,
                "explored_percent_none": 13.389320234511171,
                "kept_percent_concrete": 66.93968726731198,
                "kept_percent_lambda": 33.06031273268801,
                "num_examples": 3,
                "num_explored_concrete": 4583,
                "num_explored_lambda": 883,
                "num_explored_none": 845,
                "num_inputs": 3,
                "num_kept_concrete": 899,
                "num_kept_lambda": 444,
                "num_values_explored": 6311,
                "num_values_kept": 1343,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66678
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76133642299101,
            "num_unique_values": 1320,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.95275590551181,
                "explored_percent_lambda": 12.029746281714786,
                "explored_percent_none": 10.017497812773403,
                "kept_percent_concrete": 76.38994668697639,
                "kept_percent_lambda": 23.61005331302361,
                "num_examples": 3,
                "num_explored_concrete": 5346,
                "num_explored_lambda": 825,
                "num_explored_none": 687,
                "num_inputs": 3,
                "num_kept_concrete": 1003,
                "num_kept_lambda": 310,
                "num_values_explored": 6858,
                "num_values_kept": 1313,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68988
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.41525011300109327,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81498385081068,
            "num_unique_values": 1407,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.39501575479805,
                "explored_percent_lambda": 11.185906617015181,
                "explored_percent_none": 7.419077628186766,
                "kept_percent_concrete": 80.37116345467523,
                "kept_percent_lambda": 19.628836545324766,
                "num_examples": 5,
                "num_explored_concrete": 5683,
                "num_explored_lambda": 781,
                "num_explored_none": 518,
                "num_inputs": 2,
                "num_kept_concrete": 1126,
                "num_kept_lambda": 275,
                "num_values_explored": 6982,
                "num_values_kept": 1401,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68199
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07525535207242,
            "num_unique_values": 1434,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.33907569985092,
                "explored_percent_lambda": 19.711777372867317,
                "explored_percent_none": 10.949146927281763,
                "kept_percent_concrete": 64.63585434173669,
                "kept_percent_lambda": 35.364145658263304,
                "num_examples": 3,
                "num_explored_concrete": 4186,
                "num_explored_lambda": 1190,
                "num_explored_none": 661,
                "num_inputs": 2,
                "num_kept_concrete": 923,
                "num_kept_lambda": 505,
                "num_values_explored": 6037,
                "num_values_kept": 1428,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61082
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.62585617392324,
            "num_unique_values": 266,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 23.902439024390244,
                "explored_percent_lambda": 46.707317073170735,
                "explored_percent_none": 29.390243902439025,
                "kept_percent_concrete": 36.39846743295019,
                "kept_percent_lambda": 63.60153256704981,
                "num_examples": 3,
                "num_explored_concrete": 196,
                "num_explored_lambda": 383,
                "num_explored_none": 241,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 166,
                "num_values_explored": 820,
                "num_values_kept": 261,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 12974
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.327897371025756,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98885169601999,
            "num_unique_values": 1728,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.96169193934557,
                "explored_percent_lambda": 14.110135674381484,
                "explored_percent_none": 9.928172386272944,
                "kept_percent_concrete": 78.397212543554,
                "kept_percent_lambda": 21.60278745644599,
                "num_examples": 5,
                "num_explored_concrete": 4759,
                "num_explored_lambda": 884,
                "num_explored_none": 622,
                "num_inputs": 2,
                "num_kept_concrete": 1350,
                "num_kept_lambda": 372,
                "num_values_explored": 6265,
                "num_values_kept": 1722,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64577
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81877762195654,
            "num_unique_values": 1405,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.97607655502392,
                "explored_percent_lambda": 16.331738437001594,
                "explored_percent_none": 8.692185007974482,
                "kept_percent_concrete": 68.90636168691923,
                "kept_percent_lambda": 31.09363831308077,
                "num_examples": 3,
                "num_explored_concrete": 4701,
                "num_explored_lambda": 1024,
                "num_explored_none": 545,
                "num_inputs": 2,
                "num_kept_concrete": 964,
                "num_kept_lambda": 435,
                "num_values_explored": 6270,
                "num_values_kept": 1399,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62226
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91619179793634,
            "num_unique_values": 1535,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.96658259773014,
                "explored_percent_lambda": 17.18158890290038,
                "explored_percent_none": 9.851828499369484,
                "kept_percent_concrete": 69.30628272251309,
                "kept_percent_lambda": 30.69371727748691,
                "num_examples": 3,
                "num_explored_concrete": 4629,
                "num_explored_lambda": 1090,
                "num_explored_none": 625,
                "num_inputs": 3,
                "num_kept_concrete": 1059,
                "num_kept_lambda": 469,
                "num_values_explored": 6344,
                "num_values_kept": 1528,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64973
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92434829799458,
            "num_unique_values": 1326,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.05874038008481,
                "explored_percent_lambda": 12.816082927595414,
                "explored_percent_none": 9.125176692319775,
                "kept_percent_concrete": 77.81983345950037,
                "kept_percent_lambda": 22.18016654049962,
                "num_examples": 5,
                "num_explored_concrete": 4970,
                "num_explored_lambda": 816,
                "num_explored_none": 581,
                "num_inputs": 1,
                "num_kept_concrete": 1028,
                "num_kept_lambda": 293,
                "num_values_explored": 6367,
                "num_values_kept": 1321,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65352
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02294407482259,
            "num_unique_values": 1305,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.48564158487822,
                "explored_percent_lambda": 21.22864412940749,
                "explored_percent_none": 14.285714285714286,
                "kept_percent_concrete": 65.23076923076923,
                "kept_percent_lambda": 34.76923076923077,
                "num_examples": 3,
                "num_explored_concrete": 3548,
                "num_explored_lambda": 1168,
                "num_explored_none": 786,
                "num_inputs": 1,
                "num_kept_concrete": 848,
                "num_kept_lambda": 452,
                "num_values_explored": 5502,
                "num_values_kept": 1300,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55522
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89783960091881,
            "num_unique_values": 1403,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.05789568022943,
                "explored_percent_lambda": 25.82900161319233,
                "explored_percent_none": 11.113102706578239,
                "kept_percent_concrete": 57.76664280601288,
                "kept_percent_lambda": 42.23335719398712,
                "num_examples": 3,
                "num_explored_concrete": 3518,
                "num_explored_lambda": 1441,
                "num_explored_none": 620,
                "num_inputs": 2,
                "num_kept_concrete": 807,
                "num_kept_lambda": 590,
                "num_values_explored": 5579,
                "num_values_kept": 1397,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58167
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0289594240021,
            "num_unique_values": 1211,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.518045935107544,
                "explored_percent_lambda": 29.83959168793292,
                "explored_percent_none": 16.642362376959532,
                "kept_percent_concrete": 46.6832504145937,
                "kept_percent_lambda": 53.3167495854063,
                "num_examples": 3,
                "num_explored_concrete": 2936,
                "num_explored_lambda": 1637,
                "num_explored_none": 913,
                "num_inputs": 1,
                "num_kept_concrete": 563,
                "num_kept_lambda": 643,
                "num_values_explored": 5486,
                "num_values_kept": 1206,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56267
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.0034864188637584,
            "num_unique_values": 974,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, IsEven(Minimum(c)))))(u1)), r), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 67.6360225140713,
                "explored_percent_lambda": 24.671669793621014,
                "explored_percent_none": 7.6923076923076925,
                "kept_percent_concrete": 66.94214876033058,
                "kept_percent_lambda": 33.05785123966942,
                "num_examples": 3,
                "num_explored_concrete": 2163,
                "num_explored_lambda": 789,
                "num_explored_none": 246,
                "num_inputs": 2,
                "num_kept_concrete": 648,
                "num_kept_lambda": 320,
                "num_values_explored": 3198,
                "num_values_kept": 968,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4598
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95293963397853,
            "num_unique_values": 1525,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.41176470588235,
                "explored_percent_lambda": 9.573529411764707,
                "explored_percent_none": 8.014705882352942,
                "kept_percent_concrete": 81.5009874917709,
                "kept_percent_lambda": 18.499012508229097,
                "num_examples": 5,
                "num_explored_concrete": 5604,
                "num_explored_lambda": 651,
                "num_explored_none": 545,
                "num_inputs": 2,
                "num_kept_concrete": 1238,
                "num_kept_lambda": 281,
                "num_values_explored": 6800,
                "num_values_kept": 1519,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69349
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04188241716474,
            "num_unique_values": 1255,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.98431822528208,
                "explored_percent_lambda": 28.800917957544463,
                "explored_percent_none": 13.214763817173456,
                "kept_percent_concrete": 45.52,
                "kept_percent_lambda": 54.48,
                "num_examples": 3,
                "num_explored_concrete": 3032,
                "num_explored_lambda": 1506,
                "num_explored_none": 691,
                "num_inputs": 1,
                "num_kept_concrete": 569,
                "num_kept_lambda": 681,
                "num_values_explored": 5229,
                "num_values_kept": 1250,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55225
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92221903405152,
            "num_unique_values": 1417,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.69560827864715,
                "explored_percent_lambda": 24.162880699983173,
                "explored_percent_none": 13.141511021369679,
                "kept_percent_concrete": 56.27214741318214,
                "kept_percent_lambda": 43.72785258681786,
                "num_examples": 3,
                "num_explored_concrete": 3726,
                "num_explored_lambda": 1436,
                "num_explored_none": 781,
                "num_inputs": 2,
                "num_kept_concrete": 794,
                "num_kept_lambda": 617,
                "num_values_explored": 5943,
                "num_values_kept": 1411,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60555
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86180238495581,
            "num_unique_values": 1629,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.80910276851718,
                "explored_percent_lambda": 10.914625308015655,
                "explored_percent_none": 6.276271923467169,
                "kept_percent_concrete": 83.11768330252619,
                "kept_percent_lambda": 16.882316697473815,
                "num_examples": 5,
                "num_explored_concrete": 5713,
                "num_explored_lambda": 753,
                "num_explored_none": 433,
                "num_inputs": 2,
                "num_kept_concrete": 1349,
                "num_kept_lambda": 274,
                "num_values_explored": 6899,
                "num_values_kept": 1623,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70412
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6540374790784,
            "num_unique_values": 386,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.8429203539823,
                "explored_percent_lambda": 29.86725663716814,
                "explored_percent_none": 47.28982300884956,
                "kept_percent_concrete": 46.194225721784775,
                "kept_percent_lambda": 53.805774278215225,
                "num_examples": 5,
                "num_explored_concrete": 1239,
                "num_explored_lambda": 1620,
                "num_explored_none": 2565,
                "num_inputs": 1,
                "num_kept_concrete": 176,
                "num_kept_lambda": 205,
                "num_values_explored": 5424,
                "num_values_kept": 381,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55869
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1683923238888383,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01720476290211,
            "num_unique_values": 1366,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.62844780962683,
                "explored_percent_lambda": 27.52839372633856,
                "explored_percent_none": 9.843158464034614,
                "kept_percent_concrete": 53.93093313739897,
                "kept_percent_lambda": 46.06906686260103,
                "num_examples": 3,
                "num_explored_concrete": 3474,
                "num_explored_lambda": 1527,
                "num_explored_none": 546,
                "num_inputs": 1,
                "num_kept_concrete": 734,
                "num_kept_lambda": 627,
                "num_values_explored": 5547,
                "num_values_kept": 1361,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57444
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13247069087810814,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84487623209134,
            "num_unique_values": 1315,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.476830087306915,
                "explored_percent_lambda": 23.572867696440564,
                "explored_percent_none": 15.950302216252519,
                "kept_percent_concrete": 56.25954198473283,
                "kept_percent_lambda": 43.74045801526717,
                "num_examples": 3,
                "num_explored_concrete": 3602,
                "num_explored_lambda": 1404,
                "num_explored_none": 950,
                "num_inputs": 1,
                "num_kept_concrete": 737,
                "num_kept_lambda": 573,
                "num_values_explored": 5956,
                "num_values_kept": 1310,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60467
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.777552315965295,
            "num_unique_values": 417,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 39.70873786407767,
                "explored_percent_lambda": 47.0873786407767,
                "explored_percent_none": 13.20388349514563,
                "kept_percent_concrete": 45.63106796116505,
                "kept_percent_lambda": 54.36893203883495,
                "num_examples": 3,
                "num_explored_concrete": 409,
                "num_explored_lambda": 485,
                "num_explored_none": 136,
                "num_inputs": 1,
                "num_kept_concrete": 188,
                "num_kept_lambda": 224,
                "num_values_explored": 1030,
                "num_values_kept": 412,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8329
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05292965704575,
            "num_unique_values": 1512,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.033954727030626,
                "explored_percent_lambda": 28.661784287616513,
                "explored_percent_none": 9.304260985352863,
                "kept_percent_concrete": 50.69674850696749,
                "kept_percent_lambda": 49.30325149303251,
                "num_examples": 3,
                "num_explored_concrete": 3727,
                "num_explored_lambda": 1722,
                "num_explored_none": 559,
                "num_inputs": 1,
                "num_kept_concrete": 764,
                "num_kept_lambda": 743,
                "num_values_explored": 6008,
                "num_values_kept": 1507,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59915
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.35254314006306,
            "num_unique_values": 262,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Sort(y), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 25.515463917525775,
                "explored_percent_lambda": 60.30927835051546,
                "explored_percent_none": 14.175257731958762,
                "kept_percent_concrete": 42.1875,
                "kept_percent_lambda": 57.8125,
                "num_examples": 3,
                "num_explored_concrete": 198,
                "num_explored_lambda": 468,
                "num_explored_none": 110,
                "num_inputs": 2,
                "num_kept_concrete": 108,
                "num_kept_lambda": 148,
                "num_values_explored": 776,
                "num_values_kept": 256,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 21070
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.484906005905941,
            "num_unique_values": 407,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 45.82959641255606,
                "explored_percent_lambda": 37.399103139013455,
                "explored_percent_none": 16.771300448430495,
                "kept_percent_concrete": 58.70646766169154,
                "kept_percent_lambda": 41.29353233830846,
                "num_examples": 5,
                "num_explored_concrete": 511,
                "num_explored_lambda": 417,
                "num_explored_none": 187,
                "num_inputs": 1,
                "num_kept_concrete": 236,
                "num_kept_lambda": 166,
                "num_values_explored": 1115,
                "num_values_kept": 402,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2515
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12102853017859,
            "num_unique_values": 1330,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.71669106881406,
                "explored_percent_lambda": 29.374084919472914,
                "explored_percent_none": 13.90922401171303,
                "kept_percent_concrete": 47.77358490566038,
                "kept_percent_lambda": 52.22641509433962,
                "num_examples": 3,
                "num_explored_concrete": 3099,
                "num_explored_lambda": 1605,
                "num_explored_none": 760,
                "num_inputs": 1,
                "num_kept_concrete": 633,
                "num_kept_lambda": 692,
                "num_values_explored": 5464,
                "num_values_kept": 1325,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57178
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89394297893159,
            "num_unique_values": 1399,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.90295358649789,
                "explored_percent_lambda": 25.924050632911392,
                "explored_percent_none": 11.172995780590718,
                "kept_percent_concrete": 54.08895265423242,
                "kept_percent_lambda": 45.91104734576758,
                "num_examples": 3,
                "num_explored_concrete": 3727,
                "num_explored_lambda": 1536,
                "num_explored_none": 662,
                "num_inputs": 1,
                "num_kept_concrete": 754,
                "num_kept_lambda": 640,
                "num_values_explored": 5925,
                "num_values_kept": 1394,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59953
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86576631711796,
            "num_unique_values": 1599,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.71705426356588,
                "explored_percent_lambda": 11.046511627906977,
                "explored_percent_none": 8.236434108527131,
                "kept_percent_concrete": 81.35593220338983,
                "kept_percent_lambda": 18.64406779661017,
                "num_examples": 5,
                "num_explored_concrete": 5831,
                "num_explored_lambda": 798,
                "num_explored_none": 595,
                "num_inputs": 2,
                "num_kept_concrete": 1296,
                "num_kept_lambda": 297,
                "num_values_explored": 7224,
                "num_values_kept": 1593,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72792
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91451504686847,
            "num_unique_values": 1482,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.17738212990439,
                "explored_percent_lambda": 27.76129244971975,
                "explored_percent_none": 8.061325420375866,
                "kept_percent_concrete": 52.91327913279133,
                "kept_percent_lambda": 47.08672086720867,
                "num_examples": 3,
                "num_explored_concrete": 3893,
                "num_explored_lambda": 1684,
                "num_explored_none": 489,
                "num_inputs": 2,
                "num_kept_concrete": 781,
                "num_kept_lambda": 695,
                "num_values_explored": 6066,
                "num_values_kept": 1476,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60230
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05875017005019,
            "num_unique_values": 1322,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.06999717753317,
                "explored_percent_lambda": 11.5580016934801,
                "explored_percent_none": 24.372001128986735,
                "kept_percent_concrete": 80.31914893617021,
                "kept_percent_lambda": 19.680851063829788,
                "num_examples": 5,
                "num_explored_concrete": 4540,
                "num_explored_lambda": 819,
                "num_explored_none": 1727,
                "num_inputs": 2,
                "num_kept_concrete": 1057,
                "num_kept_lambda": 259,
                "num_values_explored": 7086,
                "num_values_kept": 1316,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73358
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01254860498011,
            "num_unique_values": 1568,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.12338593974175,
                "explored_percent_lambda": 11.520803443328552,
                "explored_percent_none": 6.355810616929698,
                "kept_percent_concrete": 80.85787451984635,
                "kept_percent_lambda": 19.14212548015365,
                "num_examples": 5,
                "num_explored_concrete": 5724,
                "num_explored_lambda": 803,
                "num_explored_none": 443,
                "num_inputs": 2,
                "num_kept_concrete": 1263,
                "num_kept_lambda": 299,
                "num_values_explored": 6970,
                "num_values_kept": 1562,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72777
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.278695167042315,
            "num_unique_values": 235,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 28.43651626442812,
                "explored_percent_lambda": 47.009443861490034,
                "explored_percent_none": 24.554039874081848,
                "kept_percent_concrete": 51.09170305676856,
                "kept_percent_lambda": 48.90829694323144,
                "num_examples": 5,
                "num_explored_concrete": 271,
                "num_explored_lambda": 448,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 117,
                "num_kept_lambda": 112,
                "num_values_explored": 953,
                "num_values_kept": 229,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9608
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.36
}