{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.705466136103496,
            "num_unique_values": 274,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 42.36252545824847,
                "explored_percent_none": 12.627291242362526,
                "kept_percent_concrete": 40.89219330855018,
                "kept_percent_lambda": 59.10780669144982,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 208,
                "num_explored_none": 62,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 159,
                "num_values_explored": 491,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0737308808602393,
            "num_unique_values": 159,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 24.974093264248705,
                "explored_percent_lambda": 7.461139896373057,
                "explored_percent_none": 67.56476683937824,
                "kept_percent_concrete": 79.08496732026144,
                "kept_percent_lambda": 20.915032679738562,
                "num_examples": 5,
                "num_explored_concrete": 482,
                "num_explored_lambda": 144,
                "num_explored_none": 1304,
                "num_inputs": 2,
                "num_kept_concrete": 121,
                "num_kept_lambda": 32,
                "num_values_explored": 1930,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3330
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2756072101183236,
            "num_unique_values": 230,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(v1, -1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 18.303571428571427,
                "explored_percent_lambda": 54.910714285714285,
                "explored_percent_none": 26.785714285714285,
                "kept_percent_concrete": 29.77777777777778,
                "kept_percent_lambda": 70.22222222222223,
                "num_examples": 3,
                "num_explored_concrete": 123,
                "num_explored_lambda": 369,
                "num_explored_none": 180,
                "num_inputs": 1,
                "num_kept_concrete": 67,
                "num_kept_lambda": 158,
                "num_values_explored": 672,
                "num_values_kept": 225,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2352
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8471735259518,
            "num_unique_values": 1212,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.64553314121037,
                "explored_percent_lambda": 23.595100864553313,
                "explored_percent_none": 17.759365994236312,
                "kept_percent_concrete": 57.33222866611433,
                "kept_percent_lambda": 42.66777133388567,
                "num_examples": 3,
                "num_explored_concrete": 3256,
                "num_explored_lambda": 1310,
                "num_explored_none": 986,
                "num_inputs": 1,
                "num_kept_concrete": 692,
                "num_kept_lambda": 515,
                "num_values_explored": 5552,
                "num_values_kept": 1207,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56822
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3618265469558537,
            "num_unique_values": 244,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 59.04365904365904,
                "explored_percent_lambda": 30.145530145530145,
                "explored_percent_none": 10.81081081081081,
                "kept_percent_concrete": 55.46218487394958,
                "kept_percent_lambda": 44.53781512605042,
                "num_examples": 3,
                "num_explored_concrete": 284,
                "num_explored_lambda": 145,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 132,
                "num_kept_lambda": 106,
                "num_values_explored": 481,
                "num_values_kept": 238,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78109556203708,
            "num_unique_values": 1290,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.875,
                "explored_percent_lambda": 12.332317073170731,
                "explored_percent_none": 10.792682926829269,
                "kept_percent_concrete": 77.12062256809338,
                "kept_percent_lambda": 22.879377431906615,
                "num_examples": 5,
                "num_explored_concrete": 5043,
                "num_explored_lambda": 809,
                "num_explored_none": 708,
                "num_inputs": 1,
                "num_kept_concrete": 991,
                "num_kept_lambda": 294,
                "num_values_explored": 6560,
                "num_values_kept": 1285,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67899
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15721536404453218,
            "num_unique_values": 115,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 24.074074074074073,
                "explored_percent_lambda": 62.34567901234568,
                "explored_percent_none": 13.580246913580247,
                "kept_percent_concrete": 14.545454545454545,
                "kept_percent_lambda": 85.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 101,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 16,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 110,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78283720090985,
            "num_unique_values": 1222,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.65465371356942,
                "explored_percent_lambda": 13.804450015669069,
                "explored_percent_none": 14.540896270761516,
                "kept_percent_concrete": 71.24075595727199,
                "kept_percent_lambda": 28.75924404272802,
                "num_examples": 5,
                "num_explored_concrete": 4573,
                "num_explored_lambda": 881,
                "num_explored_none": 928,
                "num_inputs": 1,
                "num_kept_concrete": 867,
                "num_kept_lambda": 350,
                "num_values_explored": 6382,
                "num_values_kept": 1217,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65416
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84307369193994,
            "num_unique_values": 1353,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.70068027210884,
                "explored_percent_lambda": 11.595547309833025,
                "explored_percent_none": 11.703772418058133,
                "kept_percent_concrete": 77.74480712166172,
                "kept_percent_lambda": 22.255192878338278,
                "num_examples": 5,
                "num_explored_concrete": 4961,
                "num_explored_lambda": 750,
                "num_explored_none": 757,
                "num_inputs": 1,
                "num_kept_concrete": 1048,
                "num_kept_lambda": 300,
                "num_values_explored": 6468,
                "num_values_kept": 1348,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66469
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97684601694345,
            "num_unique_values": 1265,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.231369633897046,
                "explored_percent_lambda": 30.347519048503994,
                "explored_percent_none": 14.421111317598958,
                "kept_percent_concrete": 46.42857142857143,
                "kept_percent_lambda": 53.57142857142857,
                "num_examples": 3,
                "num_explored_concrete": 2972,
                "num_explored_lambda": 1633,
                "num_explored_none": 776,
                "num_inputs": 1,
                "num_kept_concrete": 585,
                "num_kept_lambda": 675,
                "num_values_explored": 5381,
                "num_values_kept": 1260,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55980
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78377713891678,
            "num_unique_values": 1366,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.90455212922173,
                "explored_percent_lambda": 9.001468428781203,
                "explored_percent_none": 16.093979441997064,
                "kept_percent_concrete": 83.01470588235294,
                "kept_percent_lambda": 16.985294117647058,
                "num_examples": 5,
                "num_explored_concrete": 5101,
                "num_explored_lambda": 613,
                "num_explored_none": 1096,
                "num_inputs": 2,
                "num_kept_concrete": 1129,
                "num_kept_lambda": 231,
                "num_values_explored": 6810,
                "num_values_kept": 1360,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70468
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96169985993765,
            "num_unique_values": 1497,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.00571610034932,
                "explored_percent_lambda": 22.261035249285488,
                "explored_percent_none": 9.733248650365196,
                "kept_percent_concrete": 64.52045606975184,
                "kept_percent_lambda": 35.479543930248155,
                "num_examples": 3,
                "num_explored_concrete": 4283,
                "num_explored_lambda": 1402,
                "num_explored_none": 613,
                "num_inputs": 2,
                "num_kept_concrete": 962,
                "num_kept_lambda": 529,
                "num_values_explored": 6298,
                "num_values_kept": 1491,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62602
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9622887140139937,
            "num_unique_values": 246,
            "solution": "Count((lambda u1: ((lambda v1: Equal(-1, ((lambda v1: Max(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 30.79136690647482,
                "explored_percent_lambda": 41.15107913669065,
                "explored_percent_none": 28.057553956834532,
                "kept_percent_concrete": 46.88796680497925,
                "kept_percent_lambda": 53.11203319502075,
                "num_examples": 5,
                "num_explored_concrete": 214,
                "num_explored_lambda": 286,
                "num_explored_none": 195,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 128,
                "num_values_explored": 695,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2375
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.3028131290338933,
            "num_unique_values": 504,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(((lambda v1: IntDivide(v1, Sum(x))))(v1))))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 45.99574769666903,
                "explored_percent_lambda": 31.396172927002127,
                "explored_percent_none": 22.608079376328845,
                "kept_percent_concrete": 56.71342685370742,
                "kept_percent_lambda": 43.28657314629258,
                "num_examples": 3,
                "num_explored_concrete": 649,
                "num_explored_lambda": 443,
                "num_explored_none": 319,
                "num_inputs": 1,
                "num_kept_concrete": 283,
                "num_kept_lambda": 216,
                "num_values_explored": 1411,
                "num_values_kept": 499,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3371
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65646827104501,
            "num_unique_values": 1454,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.52504457772734,
                "explored_percent_lambda": 17.831090938563786,
                "explored_percent_none": 12.643864483708867,
                "kept_percent_concrete": 68.48652384243262,
                "kept_percent_lambda": 31.513476157567382,
                "num_examples": 3,
                "num_explored_concrete": 4289,
                "num_explored_lambda": 1100,
                "num_explored_none": 780,
                "num_inputs": 3,
                "num_kept_concrete": 991,
                "num_kept_lambda": 456,
                "num_values_explored": 6169,
                "num_values_kept": 1447,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63500
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88049422902986,
            "num_unique_values": 1487,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.13420373462881,
                "explored_percent_lambda": 17.488993471990284,
                "explored_percent_none": 14.376802793380902,
                "kept_percent_concrete": 63.986486486486484,
                "kept_percent_lambda": 36.013513513513516,
                "num_examples": 3,
                "num_explored_concrete": 4488,
                "num_explored_lambda": 1152,
                "num_explored_none": 947,
                "num_inputs": 3,
                "num_kept_concrete": 947,
                "num_kept_lambda": 533,
                "num_values_explored": 6587,
                "num_values_kept": 1480,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68298
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79714352497831,
            "num_unique_values": 1392,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.21051797877396,
                "explored_percent_lambda": 17.804530334230954,
                "explored_percent_none": 14.984951686995089,
                "kept_percent_concrete": 69.96389891696751,
                "kept_percent_lambda": 30.03610108303249,
                "num_examples": 3,
                "num_explored_concrete": 4243,
                "num_explored_lambda": 1124,
                "num_explored_none": 946,
                "num_inputs": 3,
                "num_kept_concrete": 969,
                "num_kept_lambda": 416,
                "num_values_explored": 6313,
                "num_values_kept": 1385,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64677
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05957779707387,
            "num_unique_values": 1348,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.81544502617801,
                "explored_percent_lambda": 18.455497382198953,
                "explored_percent_none": 12.729057591623036,
                "kept_percent_concrete": 66.69150521609538,
                "kept_percent_lambda": 33.30849478390462,
                "num_examples": 3,
                "num_explored_concrete": 4206,
                "num_explored_lambda": 1128,
                "num_explored_none": 778,
                "num_inputs": 2,
                "num_kept_concrete": 895,
                "num_kept_lambda": 447,
                "num_values_explored": 6112,
                "num_values_kept": 1342,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63709
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80932920286432,
            "num_unique_values": 1471,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.5302022532917,
                "explored_percent_lambda": 9.162481335686168,
                "explored_percent_none": 8.307316411022125,
                "kept_percent_concrete": 83.82252559726962,
                "kept_percent_lambda": 16.177474402730375,
                "num_examples": 5,
                "num_explored_concrete": 6080,
                "num_explored_lambda": 675,
                "num_explored_none": 612,
                "num_inputs": 2,
                "num_kept_concrete": 1228,
                "num_kept_lambda": 237,
                "num_values_explored": 7367,
                "num_values_kept": 1465,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74899
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88126135990024,
            "num_unique_values": 1497,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.61368209255533,
                "explored_percent_lambda": 23.675385647216633,
                "explored_percent_none": 15.710932260228034,
                "kept_percent_concrete": 61.837692823608315,
                "kept_percent_lambda": 38.162307176391685,
                "num_examples": 3,
                "num_explored_concrete": 3615,
                "num_explored_lambda": 1412,
                "num_explored_none": 937,
                "num_inputs": 2,
                "num_kept_concrete": 922,
                "num_kept_lambda": 569,
                "num_values_explored": 5964,
                "num_values_kept": 1491,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62685
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2274746710900217,
            "num_unique_values": 267,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 28.936742934051143,
                "explored_percent_lambda": 44.01076716016151,
                "explored_percent_none": 27.052489905787347,
                "kept_percent_concrete": 41.221374045801525,
                "kept_percent_lambda": 58.778625954198475,
                "num_examples": 3,
                "num_explored_concrete": 215,
                "num_explored_lambda": 327,
                "num_explored_none": 201,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 154,
                "num_values_explored": 743,
                "num_values_kept": 262,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2143
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.27694254904054105,
            "num_unique_values": 242,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.28513238289206,
                "explored_percent_lambda": 30.34623217922607,
                "explored_percent_none": 9.368635437881874,
                "kept_percent_concrete": 54.43037974683544,
                "kept_percent_lambda": 45.56962025316456,
                "num_examples": 3,
                "num_explored_concrete": 296,
                "num_explored_lambda": 149,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 108,
                "num_values_explored": 491,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93281460506842,
            "num_unique_values": 1694,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.30004405933323,
                "explored_percent_lambda": 13.614333969745925,
                "explored_percent_none": 13.08562197092084,
                "kept_percent_concrete": 80.56872037914692,
                "kept_percent_lambda": 19.43127962085308,
                "num_examples": 5,
                "num_explored_concrete": 4991,
                "num_explored_lambda": 927,
                "num_explored_none": 891,
                "num_inputs": 2,
                "num_kept_concrete": 1360,
                "num_kept_lambda": 328,
                "num_values_explored": 6809,
                "num_values_kept": 1688,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70193
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78949085716158,
            "num_unique_values": 1433,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.16969897452861,
                "explored_percent_lambda": 19.76513397287463,
                "explored_percent_none": 11.065167052596758,
                "kept_percent_concrete": 66.29292221443588,
                "kept_percent_lambda": 33.707077785564124,
                "num_examples": 3,
                "num_explored_concrete": 4182,
                "num_explored_lambda": 1195,
                "num_explored_none": 669,
                "num_inputs": 2,
                "num_kept_concrete": 946,
                "num_kept_lambda": 481,
                "num_values_explored": 6046,
                "num_values_kept": 1427,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62902
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93187044910155,
            "num_unique_values": 1725,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.10276679841897,
                "explored_percent_lambda": 19.936758893280633,
                "explored_percent_none": 9.960474308300395,
                "kept_percent_concrete": 65.48311990686845,
                "kept_percent_lambda": 34.51688009313155,
                "num_examples": 3,
                "num_explored_concrete": 4434,
                "num_explored_lambda": 1261,
                "num_explored_none": 630,
                "num_inputs": 3,
                "num_kept_concrete": 1125,
                "num_kept_lambda": 593,
                "num_values_explored": 6325,
                "num_values_kept": 1718,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63943
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.55142660019919,
            "num_unique_values": 792,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(v1, Add(1, 1))))(v1))))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 65.6794998354722,
                "explored_percent_lambda": 17.17670286278381,
                "explored_percent_none": 17.143797301743994,
                "kept_percent_concrete": 71.53748411689962,
                "kept_percent_lambda": 28.46251588310038,
                "num_examples": 5,
                "num_explored_concrete": 1996,
                "num_explored_lambda": 522,
                "num_explored_none": 521,
                "num_inputs": 1,
                "num_kept_concrete": 563,
                "num_kept_lambda": 224,
                "num_values_explored": 3039,
                "num_values_kept": 787,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 49012
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81981786596589,
            "num_unique_values": 1322,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.47747747747748,
                "explored_percent_lambda": 19.117117117117118,
                "explored_percent_none": 23.405405405405407,
                "kept_percent_concrete": 64.38876233864845,
                "kept_percent_lambda": 35.61123766135156,
                "num_examples": 3,
                "num_explored_concrete": 3190,
                "num_explored_lambda": 1061,
                "num_explored_none": 1299,
                "num_inputs": 1,
                "num_kept_concrete": 848,
                "num_kept_lambda": 469,
                "num_values_explored": 5550,
                "num_values_kept": 1317,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58070
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 93.65595550485887,
            "num_unique_values": 496,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: Greater(-1, v1)))(v1), y, v1)))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 36.84931506849315,
                "explored_percent_lambda": 36.71232876712329,
                "explored_percent_none": 26.438356164383563,
                "kept_percent_concrete": 52.857142857142854,
                "kept_percent_lambda": 47.142857142857146,
                "num_examples": 3,
                "num_explored_concrete": 538,
                "num_explored_lambda": 536,
                "num_explored_none": 386,
                "num_inputs": 2,
                "num_kept_concrete": 259,
                "num_kept_lambda": 231,
                "num_values_explored": 1460,
                "num_values_kept": 490,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56985
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11802889104001,
            "num_unique_values": 1171,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.76448457486832,
                "explored_percent_lambda": 27.426636568848757,
                "explored_percent_none": 25.80887885628292,
                "kept_percent_concrete": 46.65523156089194,
                "kept_percent_lambda": 53.34476843910806,
                "num_examples": 3,
                "num_explored_concrete": 2486,
                "num_explored_lambda": 1458,
                "num_explored_none": 1372,
                "num_inputs": 1,
                "num_kept_concrete": 544,
                "num_kept_lambda": 622,
                "num_values_explored": 5316,
                "num_values_kept": 1166,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56471
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.511717158136889,
            "num_unique_values": 699,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, Add(-1, 1))))(u1)), r), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.28061716489874,
                "explored_percent_lambda": 27.868852459016395,
                "explored_percent_none": 14.85053037608486,
                "kept_percent_concrete": 61.32756132756133,
                "kept_percent_lambda": 38.67243867243867,
                "num_examples": 3,
                "num_explored_concrete": 1188,
                "num_explored_lambda": 578,
                "num_explored_none": 308,
                "num_inputs": 2,
                "num_kept_concrete": 425,
                "num_kept_lambda": 268,
                "num_values_explored": 2074,
                "num_values_kept": 693,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4034
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76685145590454,
            "num_unique_values": 1306,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.06123329021129,
                "explored_percent_lambda": 7.431364093718557,
                "explored_percent_none": 10.507402616070145,
                "kept_percent_concrete": 85.46153846153847,
                "kept_percent_lambda": 14.538461538461538,
                "num_examples": 5,
                "num_explored_concrete": 5709,
                "num_explored_lambda": 517,
                "num_explored_none": 731,
                "num_inputs": 2,
                "num_kept_concrete": 1111,
                "num_kept_lambda": 189,
                "num_values_explored": 6957,
                "num_values_kept": 1300,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71416
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83674533595331,
            "num_unique_values": 1323,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.097421203438394,
                "explored_percent_lambda": 22.421203438395416,
                "explored_percent_none": 18.48137535816619,
                "kept_percent_concrete": 54.628224582701066,
                "kept_percent_lambda": 45.371775417298934,
                "num_examples": 3,
                "num_explored_concrete": 3300,
                "num_explored_lambda": 1252,
                "num_explored_none": 1032,
                "num_inputs": 1,
                "num_kept_concrete": 720,
                "num_kept_lambda": 598,
                "num_values_explored": 5584,
                "num_values_kept": 1318,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57752
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09641712089069,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.72244471530559,
                "explored_percent_lambda": 23.019327877415986,
                "explored_percent_none": 19.258227407278426,
                "kept_percent_concrete": 59.38173975557153,
                "kept_percent_lambda": 40.61826024442847,
                "num_examples": 3,
                "num_explored_concrete": 3315,
                "num_explored_lambda": 1322,
                "num_explored_none": 1106,
                "num_inputs": 2,
                "num_kept_concrete": 826,
                "num_kept_lambda": 565,
                "num_values_explored": 5743,
                "num_values_kept": 1391,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61768
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6709596989676356,
            "num_unique_values": 461,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), x, i))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.98275862068966,
                "explored_percent_lambda": 29.051724137931036,
                "explored_percent_none": 18.96551724137931,
                "kept_percent_concrete": 68.35164835164835,
                "kept_percent_lambda": 31.64835164835165,
                "num_examples": 5,
                "num_explored_concrete": 603,
                "num_explored_lambda": 337,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 311,
                "num_kept_lambda": 144,
                "num_values_explored": 1160,
                "num_values_kept": 455,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2840
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.46956166508608,
            "num_unique_values": 377,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 25.110206849779587,
                "explored_percent_lambda": 17.514411664971178,
                "explored_percent_none": 57.375381485249235,
                "kept_percent_concrete": 50.26881720430107,
                "kept_percent_lambda": 49.73118279569893,
                "num_examples": 5,
                "num_explored_concrete": 1481,
                "num_explored_lambda": 1033,
                "num_explored_none": 3384,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 185,
                "num_values_explored": 5898,
                "num_values_kept": 372,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60654
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14979718485847116,
            "num_unique_values": 161,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.698412698412696,
                "explored_percent_lambda": 22.22222222222222,
                "explored_percent_none": 15.079365079365079,
                "kept_percent_concrete": 67.09677419354838,
                "kept_percent_lambda": 32.903225806451616,
                "num_examples": 5,
                "num_explored_concrete": 158,
                "num_explored_lambda": 56,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 104,
                "num_kept_lambda": 51,
                "num_values_explored": 252,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84352583996952,
            "num_unique_values": 1425,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.639391745112235,
                "explored_percent_lambda": 26.864590876176685,
                "explored_percent_none": 15.496017378711079,
                "kept_percent_concrete": 53.87323943661972,
                "kept_percent_lambda": 46.12676056338028,
                "num_examples": 3,
                "num_explored_concrete": 3184,
                "num_explored_lambda": 1484,
                "num_explored_none": 856,
                "num_inputs": 1,
                "num_kept_concrete": 765,
                "num_kept_lambda": 655,
                "num_values_explored": 5524,
                "num_values_kept": 1420,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55974
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1083868951536715,
            "num_unique_values": 68,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.171821305841924,
                "explored_percent_lambda": 4.810996563573883,
                "explored_percent_none": 45.017182130584196,
                "kept_percent_concrete": 91.93548387096774,
                "kept_percent_lambda": 8.064516129032258,
                "num_examples": 5,
                "num_explored_concrete": 146,
                "num_explored_lambda": 14,
                "num_explored_none": 131,
                "num_inputs": 2,
                "num_kept_concrete": 57,
                "num_kept_lambda": 5,
                "num_values_explored": 291,
                "num_values_kept": 62,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90299929492176,
            "num_unique_values": 1324,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.778836674334535,
                "explored_percent_lambda": 20.489648373315806,
                "explored_percent_none": 18.731514952349656,
                "kept_percent_concrete": 59.8180439727066,
                "kept_percent_lambda": 40.1819560272934,
                "num_examples": 3,
                "num_explored_concrete": 3699,
                "num_explored_lambda": 1247,
                "num_explored_none": 1140,
                "num_inputs": 1,
                "num_kept_concrete": 789,
                "num_kept_lambda": 530,
                "num_values_explored": 6086,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61218
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.106286744819954,
            "num_unique_values": 418,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 40.05102040816327,
                "explored_percent_lambda": 37.074829931972786,
                "explored_percent_none": 22.874149659863946,
                "kept_percent_concrete": 46.973365617433416,
                "kept_percent_lambda": 53.026634382566584,
                "num_examples": 3,
                "num_explored_concrete": 471,
                "num_explored_lambda": 436,
                "num_explored_none": 269,
                "num_inputs": 1,
                "num_kept_concrete": 194,
                "num_kept_lambda": 219,
                "num_values_explored": 1176,
                "num_values_kept": 413,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 27426
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00249812402762,
            "num_unique_values": 1450,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.25914886570624,
                "explored_percent_lambda": 23.01705580394105,
                "explored_percent_none": 11.723795330352708,
                "kept_percent_concrete": 58.200692041522494,
                "kept_percent_lambda": 41.799307958477506,
                "num_examples": 3,
                "num_explored_concrete": 3941,
                "num_explored_lambda": 1390,
                "num_explored_none": 708,
                "num_inputs": 1,
                "num_kept_concrete": 841,
                "num_kept_lambda": 604,
                "num_values_explored": 6039,
                "num_values_kept": 1445,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61658
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.436037478968501,
            "num_unique_values": 534,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Sort(y), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 43.39747843397478,
                "explored_percent_lambda": 35.56735235567352,
                "explored_percent_none": 21.035169210351693,
                "kept_percent_concrete": 58.14393939393939,
                "kept_percent_lambda": 41.85606060606061,
                "num_examples": 3,
                "num_explored_concrete": 654,
                "num_explored_lambda": 536,
                "num_explored_none": 317,
                "num_inputs": 2,
                "num_kept_concrete": 307,
                "num_kept_lambda": 221,
                "num_values_explored": 1507,
                "num_values_kept": 528,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9299
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 19.3485631539952,
            "num_unique_values": 1110,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v2, v1)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 69.75225979243388,
                "explored_percent_lambda": 11.16504854368932,
                "explored_percent_none": 19.0826916638768,
                "kept_percent_concrete": 76.19909502262443,
                "kept_percent_lambda": 23.800904977375566,
                "num_examples": 5,
                "num_explored_concrete": 4167,
                "num_explored_lambda": 667,
                "num_explored_none": 1140,
                "num_inputs": 1,
                "num_kept_concrete": 842,
                "num_kept_lambda": 263,
                "num_values_explored": 5974,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 13870
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83511090208776,
            "num_unique_values": 1288,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.68103448275862,
                "explored_percent_lambda": 25.682471264367816,
                "explored_percent_none": 17.636494252873565,
                "kept_percent_concrete": 54.325798908807485,
                "kept_percent_lambda": 45.674201091192515,
                "num_examples": 3,
                "num_explored_concrete": 3156,
                "num_explored_lambda": 1430,
                "num_explored_none": 982,
                "num_inputs": 1,
                "num_kept_concrete": 697,
                "num_kept_lambda": 586,
                "num_values_explored": 5568,
                "num_values_kept": 1283,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56295
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88196571310982,
            "num_unique_values": 1311,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.486929379633246,
                "explored_percent_lambda": 26.160749122122514,
                "explored_percent_none": 19.352321498244244,
                "kept_percent_concrete": 52.986217457886674,
                "kept_percent_lambda": 47.013782542113326,
                "num_examples": 3,
                "num_explored_concrete": 2793,
                "num_explored_lambda": 1341,
                "num_explored_none": 992,
                "num_inputs": 1,
                "num_kept_concrete": 692,
                "num_kept_lambda": 614,
                "num_values_explored": 5126,
                "num_values_kept": 1306,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55198
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89352462999523,
            "num_unique_values": 1544,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.78071886319309,
                "explored_percent_lambda": 9.055447199777097,
                "explored_percent_none": 8.163833937029814,
                "kept_percent_concrete": 84.78543563068921,
                "kept_percent_lambda": 15.214564369310793,
                "num_examples": 5,
                "num_explored_concrete": 5942,
                "num_explored_lambda": 650,
                "num_explored_none": 586,
                "num_inputs": 2,
                "num_kept_concrete": 1304,
                "num_kept_lambda": 234,
                "num_values_explored": 7178,
                "num_values_kept": 1538,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72414
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88832457899116,
            "num_unique_values": 1544,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.51717032967033,
                "explored_percent_lambda": 25.446428571428573,
                "explored_percent_none": 12.036401098901099,
                "kept_percent_concrete": 57.737321196358906,
                "kept_percent_lambda": 42.262678803641094,
                "num_examples": 3,
                "num_explored_concrete": 3641,
                "num_explored_lambda": 1482,
                "num_explored_none": 701,
                "num_inputs": 2,
                "num_kept_concrete": 888,
                "num_kept_lambda": 650,
                "num_values_explored": 5824,
                "num_values_kept": 1538,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60562
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69381196796894,
            "num_unique_values": 1144,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.79137529137529,
                "explored_percent_lambda": 9.30944055944056,
                "explored_percent_none": 27.899184149184148,
                "kept_percent_concrete": 82.86467486818981,
                "kept_percent_lambda": 17.135325131810195,
                "num_examples": 5,
                "num_explored_concrete": 4310,
                "num_explored_lambda": 639,
                "num_explored_none": 1915,
                "num_inputs": 2,
                "num_kept_concrete": 943,
                "num_kept_lambda": 195,
                "num_values_explored": 6864,
                "num_values_kept": 1138,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71115
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88972252001986,
            "num_unique_values": 1404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.18154402895054,
                "explored_percent_lambda": 13.13329312424608,
                "explored_percent_none": 8.685162846803378,
                "kept_percent_concrete": 77.8969957081545,
                "kept_percent_lambda": 22.103004291845494,
                "num_examples": 5,
                "num_explored_concrete": 5185,
                "num_explored_lambda": 871,
                "num_explored_none": 576,
                "num_inputs": 2,
                "num_kept_concrete": 1089,
                "num_kept_lambda": 309,
                "num_values_explored": 6632,
                "num_values_kept": 1398,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69097
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.995262949028984,
            "num_unique_values": 932,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 69.67423133235725,
                "explored_percent_lambda": 11.584919472913617,
                "explored_percent_none": 18.740849194729137,
                "kept_percent_concrete": 74.29805615550755,
                "kept_percent_lambda": 25.70194384449244,
                "num_examples": 5,
                "num_explored_concrete": 3807,
                "num_explored_lambda": 633,
                "num_explored_none": 1024,
                "num_inputs": 2,
                "num_kept_concrete": 688,
                "num_kept_lambda": 238,
                "num_values_explored": 5464,
                "num_values_kept": 926,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 26922
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}