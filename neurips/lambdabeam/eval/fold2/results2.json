{
    "num_tasks": 50,
    "num_tasks_solved": 18,
    "results": [
        {
            "elapsed_time": 0.8645649568643421,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22449191915802658,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2587154330685735,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19935174309649,
            "num_unique_values": 1203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.18410381184104,
                "explored_percent_lambda": 28.710462287104622,
                "explored_percent_none": 15.105433901054338,
                "kept_percent_concrete": 48.74791318864774,
                "kept_percent_lambda": 51.25208681135226,
                "num_examples": 3,
                "num_explored_concrete": 2771,
                "num_explored_lambda": 1416,
                "num_explored_none": 745,
                "num_inputs": 1,
                "num_kept_concrete": 584,
                "num_kept_lambda": 614,
                "num_values_explored": 4932,
                "num_values_kept": 1198,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51515
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30127706099301577,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01539447507821,
            "num_unique_values": 1333,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.27400940228341,
                "explored_percent_lambda": 14.338482202820686,
                "explored_percent_none": 7.387508394895903,
                "kept_percent_concrete": 73.94578313253012,
                "kept_percent_lambda": 26.05421686746988,
                "num_examples": 5,
                "num_explored_concrete": 4662,
                "num_explored_lambda": 854,
                "num_explored_none": 440,
                "num_inputs": 1,
                "num_kept_concrete": 982,
                "num_kept_lambda": 346,
                "num_values_explored": 5956,
                "num_values_kept": 1328,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61728
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21282135299406946,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01520123588853,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.4297108673978,
                "explored_percent_lambda": 17.663675639747424,
                "explored_percent_none": 8.906613492854769,
                "kept_percent_concrete": 68.6426116838488,
                "kept_percent_lambda": 31.3573883161512,
                "num_examples": 5,
                "num_explored_concrete": 4419,
                "num_explored_lambda": 1063,
                "num_explored_none": 536,
                "num_inputs": 1,
                "num_kept_concrete": 799,
                "num_kept_lambda": 365,
                "num_values_explored": 6018,
                "num_values_kept": 1164,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59481
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86339952796698,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.51554828150573,
                "explored_percent_lambda": 13.207855973813421,
                "explored_percent_none": 11.27659574468085,
                "kept_percent_concrete": 76.90014903129658,
                "kept_percent_lambda": 23.09985096870343,
                "num_examples": 5,
                "num_explored_concrete": 4614,
                "num_explored_lambda": 807,
                "num_explored_none": 689,
                "num_inputs": 1,
                "num_kept_concrete": 1032,
                "num_kept_lambda": 310,
                "num_values_explored": 6110,
                "num_values_kept": 1342,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61546
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06322317803279,
            "num_unique_values": 1293,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.6909509202454,
                "explored_percent_lambda": 31.671779141104295,
                "explored_percent_none": 11.637269938650308,
                "kept_percent_concrete": 41.77018633540373,
                "kept_percent_lambda": 58.22981366459627,
                "num_examples": 3,
                "num_explored_concrete": 2957,
                "num_explored_lambda": 1652,
                "num_explored_none": 607,
                "num_inputs": 1,
                "num_kept_concrete": 538,
                "num_kept_lambda": 750,
                "num_values_explored": 5216,
                "num_values_kept": 1288,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53185
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7694104060065,
            "num_unique_values": 1443,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.5330396475771,
                "explored_percent_lambda": 10.192921160565092,
                "explored_percent_none": 12.274039191857815,
                "kept_percent_concrete": 82.88100208768267,
                "kept_percent_lambda": 17.11899791231733,
                "num_examples": 5,
                "num_explored_concrete": 5104,
                "num_explored_lambda": 671,
                "num_explored_none": 808,
                "num_inputs": 2,
                "num_kept_concrete": 1191,
                "num_kept_lambda": 246,
                "num_values_explored": 6583,
                "num_values_kept": 1437,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65715
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86099860095419,
            "num_unique_values": 1356,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.44820680866557,
                "explored_percent_lambda": 22.337520480611687,
                "explored_percent_none": 11.214272710722739,
                "kept_percent_concrete": 64.51851851851852,
                "kept_percent_lambda": 35.48148148148148,
                "num_examples": 3,
                "num_explored_concrete": 3650,
                "num_explored_lambda": 1227,
                "num_explored_none": 616,
                "num_inputs": 2,
                "num_kept_concrete": 871,
                "num_kept_lambda": 479,
                "num_values_explored": 5493,
                "num_values_kept": 1350,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57524
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.194800614845008,
            "num_unique_values": 1032,
            "solution": "Count((lambda u1: ((lambda v1: Greater(IsEven(Sum(x)), v1)))(u1)), Reverse(Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 70.24855636454933,
                "explored_percent_lambda": 15.842329902083856,
                "explored_percent_none": 13.909113733366809,
                "kept_percent_concrete": 78.18889970788705,
                "kept_percent_lambda": 21.81110029211295,
                "num_examples": 5,
                "num_explored_concrete": 2798,
                "num_explored_lambda": 631,
                "num_explored_none": 554,
                "num_inputs": 1,
                "num_kept_concrete": 803,
                "num_kept_lambda": 224,
                "num_values_explored": 3983,
                "num_values_kept": 1027,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5663
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.3205621091183275,
            "num_unique_values": 786,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(Multiply(-1, Last(x)), v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 64.4893111638955,
                "explored_percent_lambda": 25.96991290577989,
                "explored_percent_none": 9.540775930324624,
                "kept_percent_concrete": 65.42893725992317,
                "kept_percent_lambda": 34.571062740076826,
                "num_examples": 3,
                "num_explored_concrete": 1629,
                "num_explored_lambda": 656,
                "num_explored_none": 241,
                "num_inputs": 1,
                "num_kept_concrete": 511,
                "num_kept_lambda": 270,
                "num_values_explored": 2526,
                "num_values_kept": 781,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4206
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69429456908256,
            "num_unique_values": 1360,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.63901117507619,
                "explored_percent_lambda": 16.54249915340332,
                "explored_percent_none": 11.818489671520487,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 3,
                "num_explored_concrete": 4231,
                "num_explored_lambda": 977,
                "num_explored_none": 698,
                "num_inputs": 3,
                "num_kept_concrete": 946,
                "num_kept_lambda": 407,
                "num_values_explored": 5906,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61942
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84388848720118,
            "num_unique_values": 1346,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.43916816767644,
                "explored_percent_lambda": 13.27984280334043,
                "explored_percent_none": 12.280989028983134,
                "kept_percent_concrete": 67.1396564600448,
                "kept_percent_lambda": 32.86034353995519,
                "num_examples": 3,
                "num_explored_concrete": 4546,
                "num_explored_lambda": 811,
                "num_explored_none": 750,
                "num_inputs": 3,
                "num_kept_concrete": 899,
                "num_kept_lambda": 440,
                "num_values_explored": 6107,
                "num_values_kept": 1339,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62551
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.69592901295982,
            "num_unique_values": 496,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), Filter((lambda u1: ((lambda v1: Greater(v1, a)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 54.48717948717949,
                "explored_percent_lambda": 29.428904428904428,
                "explored_percent_none": 16.083916083916083,
                "kept_percent_concrete": 69.93865030674847,
                "kept_percent_lambda": 30.061349693251532,
                "num_examples": 3,
                "num_explored_concrete": 935,
                "num_explored_lambda": 505,
                "num_explored_none": 276,
                "num_inputs": 3,
                "num_kept_concrete": 342,
                "num_kept_lambda": 147,
                "num_values_explored": 1716,
                "num_values_kept": 489,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 48456
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4042434918228537,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82009370601736,
            "num_unique_values": 1361,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.26508932882665,
                "explored_percent_lambda": 11.78174794785128,
                "explored_percent_none": 6.953162723322067,
                "kept_percent_concrete": 80.95940959409594,
                "kept_percent_lambda": 19.04059040590406,
                "num_examples": 5,
                "num_explored_concrete": 5049,
                "num_explored_lambda": 732,
                "num_explored_none": 432,
                "num_inputs": 2,
                "num_kept_concrete": 1097,
                "num_kept_lambda": 258,
                "num_values_explored": 6213,
                "num_values_kept": 1355,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64008
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1221446970012,
            "num_unique_values": 1308,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.1981981981982,
                "explored_percent_lambda": 22.234234234234233,
                "explored_percent_none": 11.567567567567568,
                "kept_percent_concrete": 64.43932411674348,
                "kept_percent_lambda": 35.56067588325653,
                "num_examples": 3,
                "num_explored_concrete": 3674,
                "num_explored_lambda": 1234,
                "num_explored_none": 642,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 463,
                "num_values_explored": 5550,
                "num_values_kept": 1302,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56881
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 83.07485184888355,
            "num_unique_values": 259,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.482435597189696,
                "explored_percent_lambda": 47.89227166276346,
                "explored_percent_none": 29.625292740046838,
                "kept_percent_concrete": 35.039370078740156,
                "kept_percent_lambda": 64.96062992125984,
                "num_examples": 3,
                "num_explored_concrete": 192,
                "num_explored_lambda": 409,
                "num_explored_none": 253,
                "num_inputs": 1,
                "num_kept_concrete": 89,
                "num_kept_lambda": 165,
                "num_values_explored": 854,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 41189
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4836421590298414,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02060202811845,
            "num_unique_values": 1701,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.38983050847457,
                "explored_percent_lambda": 14.94915254237288,
                "explored_percent_none": 8.661016949152541,
                "kept_percent_concrete": 77.99410029498524,
                "kept_percent_lambda": 22.00589970501475,
                "num_examples": 5,
                "num_explored_concrete": 4507,
                "num_explored_lambda": 882,
                "num_explored_none": 511,
                "num_inputs": 2,
                "num_kept_concrete": 1322,
                "num_kept_lambda": 373,
                "num_values_explored": 5900,
                "num_values_kept": 1695,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60101
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93956645322032,
            "num_unique_values": 1320,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.14900720435776,
                "explored_percent_lambda": 18.520470918994903,
                "explored_percent_none": 9.330521876647339,
                "kept_percent_concrete": 66.59056316590564,
                "kept_percent_lambda": 33.40943683409437,
                "num_examples": 3,
                "num_explored_concrete": 4106,
                "num_explored_lambda": 1054,
                "num_explored_none": 531,
                "num_inputs": 2,
                "num_kept_concrete": 875,
                "num_kept_lambda": 439,
                "num_values_explored": 5691,
                "num_values_kept": 1314,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59501
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96554942708462,
            "num_unique_values": 1423,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.44448379670622,
                "explored_percent_lambda": 18.965822560651674,
                "explored_percent_none": 10.58969364264211,
                "kept_percent_concrete": 67.44350282485875,
                "kept_percent_lambda": 32.556497175141246,
                "num_examples": 3,
                "num_explored_concrete": 3978,
                "num_explored_lambda": 1071,
                "num_explored_none": 598,
                "num_inputs": 3,
                "num_kept_concrete": 955,
                "num_kept_lambda": 461,
                "num_values_explored": 5647,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59667
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9714415371418,
            "num_unique_values": 1253,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.94222148431014,
                "explored_percent_lambda": 14.7600863357131,
                "explored_percent_none": 9.297692179976755,
                "kept_percent_concrete": 78.2051282051282,
                "kept_percent_lambda": 21.794871794871796,
                "num_examples": 5,
                "num_explored_concrete": 4574,
                "num_explored_lambda": 889,
                "num_explored_none": 560,
                "num_inputs": 1,
                "num_kept_concrete": 976,
                "num_kept_lambda": 272,
                "num_values_explored": 6023,
                "num_values_kept": 1248,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60975
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02515649609268,
            "num_unique_values": 1325,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.81805798793539,
                "explored_percent_lambda": 21.891418563922944,
                "explored_percent_none": 13.290523448141661,
                "kept_percent_concrete": 63.56060606060606,
                "kept_percent_lambda": 36.43939393939394,
                "num_examples": 3,
                "num_explored_concrete": 3331,
                "num_explored_lambda": 1125,
                "num_explored_none": 683,
                "num_inputs": 1,
                "num_kept_concrete": 839,
                "num_kept_lambda": 481,
                "num_values_explored": 5139,
                "num_values_kept": 1320,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52607
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03476292314008,
            "num_unique_values": 1325,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.50252289291721,
                "explored_percent_lambda": 25.45318632031396,
                "explored_percent_none": 13.044290786768828,
                "kept_percent_concrete": 59.8180439727066,
                "kept_percent_lambda": 40.1819560272934,
                "num_examples": 3,
                "num_explored_concrete": 3291,
                "num_explored_lambda": 1362,
                "num_explored_none": 698,
                "num_inputs": 2,
                "num_kept_concrete": 789,
                "num_kept_lambda": 530,
                "num_values_explored": 5351,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55785
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15247147600166,
            "num_unique_values": 1158,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.91286392731778,
                "explored_percent_lambda": 28.246954367127813,
                "explored_percent_none": 17.840181705554407,
                "kept_percent_concrete": 47.09453599306158,
                "kept_percent_lambda": 52.90546400693842,
                "num_examples": 3,
                "num_explored_concrete": 2611,
                "num_explored_lambda": 1368,
                "num_explored_none": 864,
                "num_inputs": 1,
                "num_kept_concrete": 543,
                "num_kept_lambda": 610,
                "num_values_explored": 4843,
                "num_values_kept": 1153,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51228
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.93517688685097,
            "num_unique_values": 694,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, IsEven(-1))))(u1)), r), Sort(c))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.54145854145854,
                "explored_percent_lambda": 29.72027972027972,
                "explored_percent_none": 11.738261738261738,
                "kept_percent_concrete": 61.04651162790697,
                "kept_percent_lambda": 38.95348837209303,
                "num_examples": 3,
                "num_explored_concrete": 1172,
                "num_explored_lambda": 595,
                "num_explored_none": 235,
                "num_inputs": 2,
                "num_kept_concrete": 420,
                "num_kept_lambda": 268,
                "num_values_explored": 2002,
                "num_values_kept": 688,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 20564
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.975617533084,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.75060689431947,
                "explored_percent_lambda": 11.830393267519016,
                "explored_percent_none": 9.418999838161515,
                "kept_percent_concrete": 78.81417208966016,
                "kept_percent_lambda": 21.185827910339842,
                "num_examples": 5,
                "num_explored_concrete": 4866,
                "num_explored_lambda": 731,
                "num_explored_none": 582,
                "num_inputs": 2,
                "num_kept_concrete": 1090,
                "num_kept_lambda": 293,
                "num_values_explored": 6179,
                "num_values_kept": 1383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63758
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22908299812116,
            "num_unique_values": 1205,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.44619010212097,
                "explored_percent_lambda": 27.847604084838963,
                "explored_percent_none": 12.706205813040063,
                "kept_percent_concrete": 45.75,
                "kept_percent_lambda": 54.25,
                "num_examples": 3,
                "num_explored_concrete": 3027,
                "num_explored_lambda": 1418,
                "num_explored_none": 647,
                "num_inputs": 1,
                "num_kept_concrete": 549,
                "num_kept_lambda": 651,
                "num_values_explored": 5092,
                "num_values_kept": 1200,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51183
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97929007606581,
            "num_unique_values": 1311,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.18263266712612,
                "explored_percent_lambda": 24.37973811164714,
                "explored_percent_none": 15.43762922122674,
                "kept_percent_concrete": 57.16475095785441,
                "kept_percent_lambda": 42.83524904214559,
                "num_examples": 3,
                "num_explored_concrete": 3493,
                "num_explored_lambda": 1415,
                "num_explored_none": 896,
                "num_inputs": 2,
                "num_kept_concrete": 746,
                "num_kept_lambda": 559,
                "num_values_explored": 5804,
                "num_values_kept": 1305,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59227
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98470696806908,
            "num_unique_values": 1602,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 83.44991814258074,
                "explored_percent_lambda": 10.700997172198244,
                "explored_percent_none": 5.849084685221015,
                "kept_percent_concrete": 83.64661654135338,
                "kept_percent_lambda": 16.353383458646615,
                "num_examples": 5,
                "num_explored_concrete": 5607,
                "num_explored_lambda": 719,
                "num_explored_none": 393,
                "num_inputs": 2,
                "num_kept_concrete": 1335,
                "num_kept_lambda": 261,
                "num_values_explored": 6719,
                "num_values_kept": 1596,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68133
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.5565216531977,
            "num_unique_values": 382,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 25.19372143850586,
                "explored_percent_lambda": 28.094575799721834,
                "explored_percent_none": 46.7117027617723,
                "kept_percent_concrete": 46.41909814323608,
                "kept_percent_lambda": 53.58090185676392,
                "num_examples": 5,
                "num_explored_concrete": 1268,
                "num_explored_lambda": 1414,
                "num_explored_none": 2351,
                "num_inputs": 1,
                "num_kept_concrete": 175,
                "num_kept_lambda": 202,
                "num_values_explored": 5033,
                "num_values_kept": 377,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53210
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16635719290934503,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04681186098605,
            "num_unique_values": 1301,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.44825018615041,
                "explored_percent_lambda": 27.773641102010423,
                "explored_percent_none": 10.778108711839167,
                "kept_percent_concrete": 52.23765432098765,
                "kept_percent_lambda": 47.76234567901235,
                "num_examples": 3,
                "num_explored_concrete": 3301,
                "num_explored_lambda": 1492,
                "num_explored_none": 579,
                "num_inputs": 1,
                "num_kept_concrete": 677,
                "num_kept_lambda": 619,
                "num_values_explored": 5372,
                "num_values_kept": 1296,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55344
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22749133314937353,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85566408582963,
            "num_unique_values": 1229,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.88745750581499,
                "explored_percent_lambda": 24.566112005725532,
                "explored_percent_none": 14.546430488459475,
                "kept_percent_concrete": 54.166666666666664,
                "kept_percent_lambda": 45.833333333333336,
                "num_examples": 3,
                "num_explored_concrete": 3403,
                "num_explored_lambda": 1373,
                "num_explored_none": 813,
                "num_inputs": 1,
                "num_kept_concrete": 663,
                "num_kept_lambda": 561,
                "num_values_explored": 5589,
                "num_values_kept": 1224,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57970
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.31203830218874,
            "num_unique_values": 417,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 40.07319304666057,
                "explored_percent_lambda": 45.10521500457457,
                "explored_percent_none": 14.821591948764867,
                "kept_percent_concrete": 45.38834951456311,
                "kept_percent_lambda": 54.61165048543689,
                "num_examples": 3,
                "num_explored_concrete": 438,
                "num_explored_lambda": 493,
                "num_explored_none": 162,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 225,
                "num_values_explored": 1093,
                "num_values_kept": 412,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 42121
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1005666849669,
            "num_unique_values": 1421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.33295150820924,
                "explored_percent_lambda": 28.713249331806033,
                "explored_percent_none": 8.953799159984728,
                "kept_percent_concrete": 52.33050847457627,
                "kept_percent_lambda": 47.66949152542373,
                "num_examples": 3,
                "num_explored_concrete": 3265,
                "num_explored_lambda": 1504,
                "num_explored_none": 469,
                "num_inputs": 1,
                "num_kept_concrete": 741,
                "num_kept_lambda": 675,
                "num_values_explored": 5238,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53206
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 62.71729877498001,
            "num_unique_values": 259,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u2, u1)), Sort(y), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 24.462365591397848,
                "explored_percent_lambda": 62.365591397849464,
                "explored_percent_none": 13.172043010752688,
                "kept_percent_concrete": 41.50197628458498,
                "kept_percent_lambda": 58.49802371541502,
                "num_examples": 3,
                "num_explored_concrete": 182,
                "num_explored_lambda": 464,
                "num_explored_none": 98,
                "num_inputs": 2,
                "num_kept_concrete": 105,
                "num_kept_lambda": 148,
                "num_values_explored": 744,
                "num_values_kept": 253,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 34142
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8952471760567278,
            "num_unique_values": 408,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.25557461406518,
                "explored_percent_lambda": 37.39279588336192,
                "explored_percent_none": 15.351629502572898,
                "kept_percent_concrete": 58.064516129032256,
                "kept_percent_lambda": 41.935483870967744,
                "num_examples": 5,
                "num_explored_concrete": 551,
                "num_explored_lambda": 436,
                "num_explored_none": 179,
                "num_inputs": 1,
                "num_kept_concrete": 234,
                "num_kept_lambda": 169,
                "num_values_explored": 1166,
                "num_values_kept": 403,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2566
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13468867610209,
            "num_unique_values": 1259,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.93614433407663,
                "explored_percent_lambda": 32.840056760591935,
                "explored_percent_none": 12.223798905331442,
                "kept_percent_concrete": 44.896331738437,
                "kept_percent_lambda": 55.103668261563,
                "num_examples": 3,
                "num_explored_concrete": 2710,
                "num_explored_lambda": 1620,
                "num_explored_none": 603,
                "num_inputs": 1,
                "num_kept_concrete": 563,
                "num_kept_lambda": 691,
                "num_values_explored": 4933,
                "num_values_kept": 1254,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53207
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98217020905577,
            "num_unique_values": 1238,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.636274317154644,
                "explored_percent_lambda": 28.650029475338968,
                "explored_percent_none": 12.713696207506386,
                "kept_percent_concrete": 50.527169505271694,
                "kept_percent_lambda": 49.472830494728306,
                "num_examples": 3,
                "num_explored_concrete": 2984,
                "num_explored_lambda": 1458,
                "num_explored_none": 647,
                "num_inputs": 1,
                "num_kept_concrete": 623,
                "num_kept_lambda": 610,
                "num_values_explored": 5089,
                "num_values_kept": 1233,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55150
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95449921186082,
            "num_unique_values": 1441,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.35585864848109,
                "explored_percent_lambda": 13.00371977681339,
                "explored_percent_none": 9.640421574705517,
                "kept_percent_concrete": 77.14285714285714,
                "kept_percent_lambda": 22.857142857142858,
                "num_examples": 5,
                "num_explored_concrete": 4991,
                "num_explored_lambda": 839,
                "num_explored_none": 622,
                "num_inputs": 2,
                "num_kept_concrete": 1107,
                "num_kept_lambda": 328,
                "num_values_explored": 6452,
                "num_values_kept": 1435,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62201
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0194505630061,
            "num_unique_values": 1346,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.962249614791986,
                "explored_percent_lambda": 27.446070878274266,
                "explored_percent_none": 9.591679506933744,
                "kept_percent_concrete": 53.656716417910445,
                "kept_percent_lambda": 46.343283582089555,
                "num_examples": 3,
                "num_explored_concrete": 3269,
                "num_explored_lambda": 1425,
                "num_explored_none": 498,
                "num_inputs": 2,
                "num_kept_concrete": 719,
                "num_kept_lambda": 621,
                "num_values_explored": 5192,
                "num_values_kept": 1340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53090
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1832169201225,
            "num_unique_values": 1262,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.302085043506814,
                "explored_percent_lambda": 12.543096371695945,
                "explored_percent_none": 27.15481858479724,
                "kept_percent_concrete": 79.61783439490446,
                "kept_percent_lambda": 20.38216560509554,
                "num_examples": 5,
                "num_explored_concrete": 3673,
                "num_explored_lambda": 764,
                "num_explored_none": 1654,
                "num_inputs": 2,
                "num_kept_concrete": 1000,
                "num_kept_lambda": 256,
                "num_values_explored": 6091,
                "num_values_kept": 1256,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63755
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24407796189189,
            "num_unique_values": 1385,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.78280690328883,
                "explored_percent_lambda": 15.516118528166722,
                "explored_percent_none": 7.701074568544448,
                "kept_percent_concrete": 77.81000725163162,
                "kept_percent_lambda": 22.189992748368383,
                "num_examples": 5,
                "num_explored_concrete": 4716,
                "num_explored_lambda": 953,
                "num_explored_none": 473,
                "num_inputs": 2,
                "num_kept_concrete": 1073,
                "num_kept_lambda": 306,
                "num_values_explored": 6142,
                "num_values_kept": 1379,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65956
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.744265075074509,
            "num_unique_values": 945,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(((lambda v1: IntDivide(v1, Head(x))))(v1))))(u1)), Filter((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x))",
            "solution_weight": 14,
            "stats": {
                "explored_percent_concrete": 69.48955916473318,
                "explored_percent_lambda": 14.40448569218871,
                "explored_percent_none": 16.105955143078113,
                "kept_percent_concrete": 74.22790202342918,
                "kept_percent_lambda": 25.77209797657082,
                "num_examples": 5,
                "num_explored_concrete": 3594,
                "num_explored_lambda": 745,
                "num_explored_none": 833,
                "num_inputs": 2,
                "num_kept_concrete": 697,
                "num_kept_lambda": 242,
                "num_values_explored": 5172,
                "num_values_kept": 939,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6852
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.36
}