{
    "num_tasks": 50,
    "num_tasks_solved": 16,
    "results": [
        {
            "elapsed_time": 0.7564030787907541,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4483513589948416,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8067205229308456,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26129744201899,
            "num_unique_values": 348,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 24.37619961612284,
                "explored_percent_lambda": 50.38387715930902,
                "explored_percent_none": 25.239923224568138,
                "kept_percent_concrete": 34.98542274052478,
                "kept_percent_lambda": 65.01457725947522,
                "num_examples": 3,
                "num_explored_concrete": 254,
                "num_explored_lambda": 525,
                "num_explored_none": 263,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 223,
                "num_values_explored": 1042,
                "num_values_kept": 343,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 17895
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8749366020783782,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88608230603859,
            "num_unique_values": 345,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.85149469623915,
                "explored_percent_lambda": 45.419479267116685,
                "explored_percent_none": 12.729026036644166,
                "kept_percent_concrete": 52.64705882352941,
                "kept_percent_lambda": 47.35294117647059,
                "num_examples": 5,
                "num_explored_concrete": 434,
                "num_explored_lambda": 471,
                "num_explored_none": 132,
                "num_inputs": 1,
                "num_kept_concrete": 179,
                "num_kept_lambda": 161,
                "num_values_explored": 1037,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 20710
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1381639949977398,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.89783240715042,
            "num_unique_values": 474,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.729789590254704,
                "explored_percent_lambda": 35.326688815060905,
                "explored_percent_none": 16.943521594684384,
                "kept_percent_concrete": 56.28997867803838,
                "kept_percent_lambda": 43.71002132196162,
                "num_examples": 5,
                "num_explored_concrete": 862,
                "num_explored_lambda": 638,
                "num_explored_none": 306,
                "num_inputs": 1,
                "num_kept_concrete": 264,
                "num_kept_lambda": 205,
                "num_values_explored": 1806,
                "num_values_kept": 469,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 21004
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8015302810818,
            "num_unique_values": 796,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.66666666666667,
                "explored_percent_lambda": 20.772403449568802,
                "explored_percent_none": 12.56092988376453,
                "kept_percent_concrete": 69.91150442477876,
                "kept_percent_lambda": 30.088495575221238,
                "num_examples": 5,
                "num_explored_concrete": 1778,
                "num_explored_lambda": 554,
                "num_explored_none": 335,
                "num_inputs": 1,
                "num_kept_concrete": 553,
                "num_kept_lambda": 238,
                "num_values_explored": 2667,
                "num_values_kept": 791,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 22583
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.00660332106054,
            "num_unique_values": 630,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.964244521337946,
                "explored_percent_lambda": 44.00230680507497,
                "explored_percent_none": 13.033448673587081,
                "kept_percent_concrete": 39.04,
                "kept_percent_lambda": 60.96,
                "num_examples": 3,
                "num_explored_concrete": 745,
                "num_explored_lambda": 763,
                "num_explored_none": 226,
                "num_inputs": 1,
                "num_kept_concrete": 244,
                "num_kept_lambda": 381,
                "num_values_explored": 1734,
                "num_values_kept": 625,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 21997
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.17051763087511,
            "num_unique_values": 792,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.01259974800504,
                "explored_percent_lambda": 17.42965140697186,
                "explored_percent_none": 12.557748845023099,
                "kept_percent_concrete": 77.35368956743002,
                "kept_percent_lambda": 22.646310432569976,
                "num_examples": 5,
                "num_explored_concrete": 1667,
                "num_explored_lambda": 415,
                "num_explored_none": 299,
                "num_inputs": 2,
                "num_kept_concrete": 608,
                "num_kept_lambda": 178,
                "num_values_explored": 2381,
                "num_values_kept": 786,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29146
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.55309896986,
            "num_unique_values": 622,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.9028794533919,
                "explored_percent_lambda": 37.872132747681796,
                "explored_percent_none": 11.224987798926305,
                "kept_percent_concrete": 56.16883116883117,
                "kept_percent_lambda": 43.83116883116883,
                "num_examples": 3,
                "num_explored_concrete": 1043,
                "num_explored_lambda": 776,
                "num_explored_none": 230,
                "num_inputs": 2,
                "num_kept_concrete": 346,
                "num_kept_lambda": 270,
                "num_values_explored": 2049,
                "num_values_kept": 616,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 22645
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.945065873907879,
            "num_unique_values": 601,
            "solution": "Min(Maximum(Drop(Subtract(-1, Add(1, 1)), x)), Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 57.55584756898817,
                "explored_percent_lambda": 27.266754270696453,
                "explored_percent_none": 15.177398160315375,
                "kept_percent_concrete": 71.30872483221476,
                "kept_percent_lambda": 28.691275167785236,
                "num_examples": 5,
                "num_explored_concrete": 876,
                "num_explored_lambda": 415,
                "num_explored_none": 231,
                "num_inputs": 1,
                "num_kept_concrete": 425,
                "num_kept_lambda": 171,
                "num_values_explored": 1522,
                "num_values_kept": 596,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3202
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.534257265971974,
            "num_unique_values": 518,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.77777777777778,
                "explored_percent_lambda": 35.810810810810814,
                "explored_percent_none": 11.411411411411411,
                "kept_percent_concrete": 58.28460038986355,
                "kept_percent_lambda": 41.71539961013645,
                "num_examples": 3,
                "num_explored_concrete": 703,
                "num_explored_lambda": 477,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 299,
                "num_kept_lambda": 214,
                "num_values_explored": 1332,
                "num_values_kept": 513,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3012
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.37672487599775,
            "num_unique_values": 933,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.589285714285715,
                "explored_percent_lambda": 24.49404761904762,
                "explored_percent_none": 12.916666666666666,
                "kept_percent_concrete": 65.2267818574514,
                "kept_percent_lambda": 34.77321814254859,
                "num_examples": 3,
                "num_explored_concrete": 2103,
                "num_explored_lambda": 823,
                "num_explored_none": 434,
                "num_inputs": 3,
                "num_kept_concrete": 604,
                "num_kept_lambda": 322,
                "num_values_explored": 3360,
                "num_values_kept": 926,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 24590
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.25337907508947,
            "num_unique_values": 660,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.6650740563784,
                "explored_percent_lambda": 28.18920210224558,
                "explored_percent_none": 15.145723841376014,
                "kept_percent_concrete": 55.283307810107196,
                "kept_percent_lambda": 44.716692189892804,
                "num_examples": 3,
                "num_explored_concrete": 1186,
                "num_explored_lambda": 590,
                "num_explored_none": 317,
                "num_inputs": 3,
                "num_kept_concrete": 361,
                "num_kept_lambda": 292,
                "num_values_explored": 2093,
                "num_values_kept": 653,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25219
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89522198308259,
            "num_unique_values": 775,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.23762376237623,
                "explored_percent_lambda": 20.99009900990099,
                "explored_percent_none": 12.772277227722773,
                "kept_percent_concrete": 72.65625,
                "kept_percent_lambda": 27.34375,
                "num_examples": 3,
                "num_explored_concrete": 2007,
                "num_explored_lambda": 636,
                "num_explored_none": 387,
                "num_inputs": 3,
                "num_kept_concrete": 558,
                "num_kept_lambda": 210,
                "num_values_explored": 3030,
                "num_values_kept": 768,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26962
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4375222590751946,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97584115108475,
            "num_unique_values": 771,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.9985835694051,
                "explored_percent_lambda": 18.944759206798867,
                "explored_percent_none": 10.056657223796034,
                "kept_percent_concrete": 76.33986928104575,
                "kept_percent_lambda": 23.66013071895425,
                "num_examples": 5,
                "num_explored_concrete": 2005,
                "num_explored_lambda": 535,
                "num_explored_none": 284,
                "num_inputs": 2,
                "num_kept_concrete": 584,
                "num_kept_lambda": 181,
                "num_values_explored": 2824,
                "num_values_kept": 765,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26958
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.76055377209559,
            "num_unique_values": 792,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.81448538754765,
                "explored_percent_lambda": 28.081321473951714,
                "explored_percent_none": 14.104193138500635,
                "kept_percent_concrete": 61.06870229007634,
                "kept_percent_lambda": 38.93129770992366,
                "num_examples": 3,
                "num_explored_concrete": 1365,
                "num_explored_lambda": 663,
                "num_explored_none": 333,
                "num_inputs": 2,
                "num_kept_concrete": 480,
                "num_kept_lambda": 306,
                "num_values_explored": 2361,
                "num_values_kept": 786,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 23956
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 78.25467059318908,
            "num_unique_values": 268,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 28.892005610098177,
                "explored_percent_lambda": 54.4179523141655,
                "explored_percent_none": 16.690042075736326,
                "kept_percent_concrete": 41.06463878326996,
                "kept_percent_lambda": 58.93536121673004,
                "num_examples": 3,
                "num_explored_concrete": 206,
                "num_explored_lambda": 388,
                "num_explored_none": 119,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 155,
                "num_values_explored": 713,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 16487
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.31031713495031,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.30457432800904,
            "num_unique_values": 810,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.108695652173914,
                "explored_percent_lambda": 28.315217391304348,
                "explored_percent_none": 11.576086956521738,
                "kept_percent_concrete": 70.02487562189054,
                "kept_percent_lambda": 29.975124378109452,
                "num_examples": 5,
                "num_explored_concrete": 1106,
                "num_explored_lambda": 521,
                "num_explored_none": 213,
                "num_inputs": 2,
                "num_kept_concrete": 563,
                "num_kept_lambda": 241,
                "num_values_explored": 1840,
                "num_values_kept": 804,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 22438
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.33356982981786,
            "num_unique_values": 748,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.58730158730159,
                "explored_percent_lambda": 26.50793650793651,
                "explored_percent_none": 11.904761904761905,
                "kept_percent_concrete": 63.07277628032345,
                "kept_percent_lambda": 36.92722371967655,
                "num_examples": 3,
                "num_explored_concrete": 1552,
                "num_explored_lambda": 668,
                "num_explored_none": 300,
                "num_inputs": 2,
                "num_kept_concrete": 468,
                "num_kept_lambda": 274,
                "num_values_explored": 2520,
                "num_values_kept": 742,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28084
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.18205437390134,
            "num_unique_values": 1063,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.1977240398293,
                "explored_percent_lambda": 22.532005689900426,
                "explored_percent_none": 10.27027027027027,
                "kept_percent_concrete": 64.10984848484848,
                "kept_percent_lambda": 35.890151515151516,
                "num_examples": 3,
                "num_explored_concrete": 2362,
                "num_explored_lambda": 792,
                "num_explored_none": 361,
                "num_inputs": 3,
                "num_kept_concrete": 677,
                "num_kept_lambda": 379,
                "num_values_explored": 3515,
                "num_values_kept": 1056,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 35160
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91031667799689,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.64808870732419,
                "explored_percent_lambda": 13.510358914502481,
                "explored_percent_none": 8.84155237817333,
                "kept_percent_concrete": 75.9768451519537,
                "kept_percent_lambda": 24.02315484804631,
                "num_examples": 5,
                "num_explored_concrete": 5322,
                "num_explored_lambda": 926,
                "num_explored_none": 606,
                "num_inputs": 1,
                "num_kept_concrete": 1050,
                "num_kept_lambda": 332,
                "num_values_explored": 6854,
                "num_values_kept": 1382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61370
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87940188194625,
            "num_unique_values": 124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.106796116504855,
                "explored_percent_lambda": 67.96116504854369,
                "explored_percent_none": 18.932038834951456,
                "kept_percent_concrete": 5.882352941176471,
                "kept_percent_lambda": 94.11764705882354,
                "num_examples": 3,
                "num_explored_concrete": 27,
                "num_explored_lambda": 140,
                "num_explored_none": 39,
                "num_inputs": 1,
                "num_kept_concrete": 7,
                "num_kept_lambda": 112,
                "num_values_explored": 206,
                "num_values_kept": 119,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 19474
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.3853005990386,
            "num_unique_values": 117,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 26.066350710900473,
                "explored_percent_lambda": 49.28909952606635,
                "explored_percent_none": 24.644549763033176,
                "kept_percent_concrete": 20.72072072072072,
                "kept_percent_lambda": 79.27927927927928,
                "num_examples": 3,
                "num_explored_concrete": 55,
                "num_explored_lambda": 104,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 23,
                "num_kept_lambda": 88,
                "num_values_explored": 211,
                "num_values_kept": 111,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3534
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.17823901213706,
            "num_unique_values": 91,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.440860215053764,
                "explored_percent_lambda": 61.82795698924731,
                "explored_percent_none": 24.731182795698924,
                "kept_percent_concrete": 6.976744186046512,
                "kept_percent_lambda": 93.02325581395348,
                "num_examples": 3,
                "num_explored_concrete": 25,
                "num_explored_lambda": 115,
                "num_explored_none": 46,
                "num_inputs": 1,
                "num_kept_concrete": 6,
                "num_kept_lambda": 80,
                "num_values_explored": 186,
                "num_values_kept": 86,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3640
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 81.44099315581843,
            "num_unique_values": 1220,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, ((lambda v1: IsEven(v1)))(v1))))(u1)), r), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 73.52455633512174,
                "explored_percent_lambda": 18.221213371853075,
                "explored_percent_none": 8.254230293025175,
                "kept_percent_concrete": 68.45140032948929,
                "kept_percent_lambda": 31.548599670510708,
                "num_examples": 3,
                "num_explored_concrete": 3563,
                "num_explored_lambda": 883,
                "num_explored_none": 400,
                "num_inputs": 2,
                "num_kept_concrete": 831,
                "num_kept_lambda": 383,
                "num_values_explored": 4846,
                "num_values_kept": 1214,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 14932
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97825678205118,
            "num_unique_values": 1614,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.90896139051146,
                "explored_percent_lambda": 9.987177660635417,
                "explored_percent_none": 9.103860948853113,
                "kept_percent_concrete": 81.8407960199005,
                "kept_percent_lambda": 18.1592039800995,
                "num_examples": 5,
                "num_explored_concrete": 5679,
                "num_explored_lambda": 701,
                "num_explored_none": 639,
                "num_inputs": 2,
                "num_kept_concrete": 1316,
                "num_kept_lambda": 292,
                "num_values_explored": 7019,
                "num_values_kept": 1608,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73178
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96386792580597,
            "num_unique_values": 1327,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.76153021094029,
                "explored_percent_lambda": 26.617804790847337,
                "explored_percent_none": 12.620664998212371,
                "kept_percent_concrete": 47.88199697428139,
                "kept_percent_lambda": 52.11800302571861,
                "num_examples": 3,
                "num_explored_concrete": 3399,
                "num_explored_lambda": 1489,
                "num_explored_none": 706,
                "num_inputs": 1,
                "num_kept_concrete": 633,
                "num_kept_lambda": 689,
                "num_values_explored": 5594,
                "num_values_kept": 1322,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58326
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84012547996826,
            "num_unique_values": 1435,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.03775050489359,
                "explored_percent_lambda": 25.151468075190305,
                "explored_percent_none": 13.81078141991611,
                "kept_percent_concrete": 55.49335199440168,
                "kept_percent_lambda": 44.50664800559832,
                "num_examples": 3,
                "num_explored_concrete": 3929,
                "num_explored_lambda": 1619,
                "num_explored_none": 889,
                "num_inputs": 2,
                "num_kept_concrete": 793,
                "num_kept_lambda": 636,
                "num_values_explored": 6437,
                "num_values_kept": 1429,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66239
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81112592713907,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.49289505221708,
                "explored_percent_lambda": 11.84728642355761,
                "explored_percent_none": 6.659818524225304,
                "kept_percent_concrete": 81.63412870571221,
                "kept_percent_lambda": 18.36587129428778,
                "num_examples": 5,
                "num_explored_concrete": 4760,
                "num_explored_lambda": 692,
                "num_explored_none": 389,
                "num_inputs": 2,
                "num_kept_concrete": 1129,
                "num_kept_lambda": 254,
                "num_values_explored": 5841,
                "num_values_kept": 1383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63117
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.60719700204208,
            "num_unique_values": 376,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.78951580632253,
                "explored_percent_lambda": 28.55142056822729,
                "explored_percent_none": 47.65906362545018,
                "kept_percent_concrete": 44.74393530997305,
                "kept_percent_lambda": 55.25606469002695,
                "num_examples": 5,
                "num_explored_concrete": 1189,
                "num_explored_lambda": 1427,
                "num_explored_none": 2382,
                "num_inputs": 1,
                "num_kept_concrete": 166,
                "num_kept_lambda": 205,
                "num_values_explored": 4998,
                "num_values_kept": 371,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45952
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1592418160289526,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 57.129110088106245,
            "num_unique_values": 1047,
            "solution": "Map((lambda u1: ((lambda v1: Add(((lambda v1: Add(v1, v1)))(v1), ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 59.66110959278491,
                "explored_percent_lambda": 30.50013664935775,
                "explored_percent_none": 9.838753757857338,
                "kept_percent_concrete": 51.91938579654511,
                "kept_percent_lambda": 48.08061420345489,
                "num_examples": 3,
                "num_explored_concrete": 2183,
                "num_explored_lambda": 1116,
                "num_explored_none": 360,
                "num_inputs": 1,
                "num_kept_concrete": 541,
                "num_kept_lambda": 501,
                "num_values_explored": 3659,
                "num_values_kept": 1042,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 34296
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.12263924395665526,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 37.54807233996689,
            "num_unique_values": 1049,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Min(-1, v1)))(v1))))(u1)), Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Min(-1, v1)))(v1))))(u1)), x))",
            "solution_weight": 17,
            "stats": {
                "explored_percent_concrete": 57.84828244274809,
                "explored_percent_lambda": 25.620229007633586,
                "explored_percent_none": 16.53148854961832,
                "kept_percent_concrete": 54.980842911877396,
                "kept_percent_lambda": 45.019157088122604,
                "num_examples": 3,
                "num_explored_concrete": 2425,
                "num_explored_lambda": 1074,
                "num_explored_none": 693,
                "num_inputs": 1,
                "num_kept_concrete": 574,
                "num_kept_lambda": 470,
                "num_values_explored": 4192,
                "num_values_kept": 1044,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 23922
            },
            "success": true,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 80.5955021281261,
            "num_unique_values": 1433,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 71.51090342679127,
                "explored_percent_lambda": 21.417445482866043,
                "explored_percent_none": 7.071651090342679,
                "kept_percent_concrete": 61.484593837535016,
                "kept_percent_lambda": 38.515406162464984,
                "num_examples": 3,
                "num_explored_concrete": 4591,
                "num_explored_lambda": 1375,
                "num_explored_none": 454,
                "num_inputs": 1,
                "num_kept_concrete": 878,
                "num_kept_lambda": 550,
                "num_values_explored": 6420,
                "num_values_kept": 1428,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 52597
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07608441007324,
            "num_unique_values": 1440,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.73512963904423,
                "explored_percent_lambda": 26.876800542280968,
                "explored_percent_none": 10.3880698186748,
                "kept_percent_concrete": 54.146341463414636,
                "kept_percent_lambda": 45.853658536585364,
                "num_examples": 3,
                "num_explored_concrete": 3702,
                "num_explored_lambda": 1586,
                "num_explored_none": 613,
                "num_inputs": 1,
                "num_kept_concrete": 777,
                "num_kept_lambda": 658,
                "num_values_explored": 5901,
                "num_values_kept": 1435,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59416
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03265177900903,
            "num_unique_values": 93,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.820512820512821,
                "explored_percent_lambda": 66.02564102564102,
                "explored_percent_none": 21.153846153846153,
                "kept_percent_concrete": 6.896551724137931,
                "kept_percent_lambda": 93.10344827586206,
                "num_examples": 3,
                "num_explored_concrete": 20,
                "num_explored_lambda": 103,
                "num_explored_none": 33,
                "num_inputs": 2,
                "num_kept_concrete": 6,
                "num_kept_lambda": 81,
                "num_values_explored": 156,
                "num_values_kept": 87,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 39812
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.02143375994638,
            "num_unique_values": 90,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 26.19047619047619,
                "explored_percent_lambda": 54.76190476190476,
                "explored_percent_none": 19.047619047619047,
                "kept_percent_concrete": 7.0588235294117645,
                "kept_percent_lambda": 92.94117647058823,
                "num_examples": 5,
                "num_explored_concrete": 44,
                "num_explored_lambda": 92,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 6,
                "num_kept_lambda": 79,
                "num_values_explored": 168,
                "num_values_kept": 85,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3154
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 107.47333893110044,
            "num_unique_values": 93,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.121212121212121,
                "explored_percent_lambda": 61.21212121212121,
                "explored_percent_none": 26.666666666666668,
                "kept_percent_concrete": 7.954545454545454,
                "kept_percent_lambda": 92.04545454545455,
                "num_examples": 3,
                "num_explored_concrete": 20,
                "num_explored_lambda": 101,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 7,
                "num_kept_lambda": 81,
                "num_values_explored": 165,
                "num_values_kept": 88,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3547
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 105.47240290697664,
            "num_unique_values": 126,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.11111111111111,
                "explored_percent_lambda": 70.53140096618357,
                "explored_percent_none": 18.357487922705314,
                "kept_percent_concrete": 4.958677685950414,
                "kept_percent_lambda": 95.04132231404958,
                "num_examples": 3,
                "num_explored_concrete": 23,
                "num_explored_lambda": 146,
                "num_explored_none": 38,
                "num_inputs": 1,
                "num_kept_concrete": 6,
                "num_kept_lambda": 115,
                "num_values_explored": 207,
                "num_values_kept": 121,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 2993
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.33358688210137,
            "num_unique_values": 94,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 17.171717171717173,
                "explored_percent_lambda": 59.09090909090909,
                "explored_percent_none": 23.737373737373737,
                "kept_percent_concrete": 6.818181818181818,
                "kept_percent_lambda": 93.18181818181819,
                "num_examples": 5,
                "num_explored_concrete": 34,
                "num_explored_lambda": 117,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 6,
                "num_kept_lambda": 82,
                "num_values_explored": 198,
                "num_values_kept": 88,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3727
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.20671280915849,
            "num_unique_values": 112,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.869565217391305,
                "explored_percent_lambda": 67.93478260869566,
                "explored_percent_none": 21.195652173913043,
                "kept_percent_concrete": 5.660377358490566,
                "kept_percent_lambda": 94.33962264150944,
                "num_examples": 3,
                "num_explored_concrete": 20,
                "num_explored_lambda": 125,
                "num_explored_none": 39,
                "num_inputs": 2,
                "num_kept_concrete": 6,
                "num_kept_lambda": 100,
                "num_values_explored": 184,
                "num_values_kept": 106,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3291
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 106.53435677313246,
            "num_unique_values": 94,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.354166666666668,
                "explored_percent_lambda": 57.8125,
                "explored_percent_none": 20.833333333333332,
                "kept_percent_concrete": 7.954545454545454,
                "kept_percent_lambda": 92.04545454545455,
                "num_examples": 5,
                "num_explored_concrete": 41,
                "num_explored_lambda": 111,
                "num_explored_none": 40,
                "num_inputs": 2,
                "num_kept_concrete": 7,
                "num_kept_lambda": 81,
                "num_values_explored": 192,
                "num_values_kept": 88,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4588
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 106.04612381197512,
            "num_unique_values": 94,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 20.100502512562816,
                "explored_percent_lambda": 51.256281407035175,
                "explored_percent_none": 28.64321608040201,
                "kept_percent_concrete": 9.090909090909092,
                "kept_percent_lambda": 90.9090909090909,
                "num_examples": 5,
                "num_explored_concrete": 40,
                "num_explored_lambda": 102,
                "num_explored_none": 57,
                "num_inputs": 2,
                "num_kept_concrete": 8,
                "num_kept_lambda": 80,
                "num_values_explored": 199,
                "num_values_kept": 88,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 4248
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.60966264596209,
            "num_unique_values": 93,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.64705882352941,
                "explored_percent_lambda": 42.15686274509804,
                "explored_percent_none": 15.196078431372548,
                "kept_percent_concrete": 17.24137931034483,
                "kept_percent_lambda": 82.75862068965517,
                "num_examples": 5,
                "num_explored_concrete": 87,
                "num_explored_lambda": 86,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 15,
                "num_kept_lambda": 72,
                "num_values_explored": 204,
                "num_values_kept": 87,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 3885
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.32
}