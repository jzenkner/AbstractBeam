{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.736184012144804,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22366673196665943,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2552528069354594,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07970041804947,
            "num_unique_values": 1218,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.04914933837429,
                "explored_percent_lambda": 27.618147448015122,
                "explored_percent_none": 16.332703213610586,
                "kept_percent_concrete": 49.71145919208574,
                "kept_percent_lambda": 50.28854080791426,
                "num_examples": 3,
                "num_explored_concrete": 2965,
                "num_explored_lambda": 1461,
                "num_explored_none": 864,
                "num_inputs": 1,
                "num_kept_concrete": 603,
                "num_kept_lambda": 610,
                "num_values_explored": 5290,
                "num_values_kept": 1213,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56392
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30378884822130203,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96541374595836,
            "num_unique_values": 1375,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.90484903934126,
                "explored_percent_lambda": 14.531869472400121,
                "explored_percent_none": 7.563281488258616,
                "kept_percent_concrete": 73.5036496350365,
                "kept_percent_lambda": 26.496350364963504,
                "num_examples": 5,
                "num_explored_concrete": 5109,
                "num_explored_lambda": 953,
                "num_explored_none": 496,
                "num_inputs": 1,
                "num_kept_concrete": 1007,
                "num_kept_lambda": 363,
                "num_values_explored": 6558,
                "num_values_kept": 1370,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65575
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16097561991773546,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98552760202438,
            "num_unique_values": 1222,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.49817720716437,
                "explored_percent_lambda": 16.595339990489776,
                "explored_percent_none": 9.906482802345856,
                "kept_percent_concrete": 69.43303204601479,
                "kept_percent_lambda": 30.56696795398521,
                "num_examples": 5,
                "num_explored_concrete": 4637,
                "num_explored_lambda": 1047,
                "num_explored_none": 625,
                "num_inputs": 1,
                "num_kept_concrete": 845,
                "num_kept_lambda": 372,
                "num_values_explored": 6309,
                "num_values_kept": 1217,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65105
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7726813678164,
            "num_unique_values": 1371,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.75150300601203,
                "explored_percent_lambda": 12.87189764143672,
                "explored_percent_none": 11.376599352551256,
                "kept_percent_concrete": 76.35431918008784,
                "kept_percent_lambda": 23.64568081991215,
                "num_examples": 5,
                "num_explored_concrete": 4914,
                "num_explored_lambda": 835,
                "num_explored_none": 738,
                "num_inputs": 1,
                "num_kept_concrete": 1043,
                "num_kept_lambda": 323,
                "num_values_explored": 6487,
                "num_values_kept": 1366,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64970
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 94.32465791585855,
            "num_unique_values": 540,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(((lambda v1: Max(v1, -1)))(v1), x)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 37.64633394947628,
                "explored_percent_lambda": 40.41897720271103,
                "explored_percent_none": 21.934688847812694,
                "kept_percent_concrete": 42.99065420560748,
                "kept_percent_lambda": 57.00934579439252,
                "num_examples": 3,
                "num_explored_concrete": 611,
                "num_explored_lambda": 656,
                "num_explored_none": 356,
                "num_inputs": 1,
                "num_kept_concrete": 230,
                "num_kept_lambda": 305,
                "num_values_explored": 1623,
                "num_values_kept": 535,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52613
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77213199809194,
            "num_unique_values": 1580,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.26658939437844,
                "explored_percent_lambda": 9.388583019414662,
                "explored_percent_none": 10.344827586206897,
                "kept_percent_concrete": 82.71918678526048,
                "kept_percent_lambda": 17.280813214739517,
                "num_examples": 5,
                "num_explored_concrete": 5540,
                "num_explored_lambda": 648,
                "num_explored_none": 714,
                "num_inputs": 2,
                "num_kept_concrete": 1302,
                "num_kept_lambda": 272,
                "num_values_explored": 6902,
                "num_values_kept": 1574,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69087
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86792766605504,
            "num_unique_values": 1414,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.92075591551533,
                "explored_percent_lambda": 21.835794822931554,
                "explored_percent_none": 11.24344926155312,
                "kept_percent_concrete": 63.84943181818182,
                "kept_percent_lambda": 36.15056818181818,
                "num_examples": 3,
                "num_explored_concrete": 4214,
                "num_explored_lambda": 1375,
                "num_explored_none": 708,
                "num_inputs": 2,
                "num_kept_concrete": 899,
                "num_kept_lambda": 509,
                "num_values_explored": 6297,
                "num_values_kept": 1408,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63099
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.003326751990244,
            "num_unique_values": 872,
            "solution": "Min(Sum(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Take(-1, x))), Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 66.11694152923538,
                "explored_percent_lambda": 19.902548725637182,
                "explored_percent_none": 13.980509745127437,
                "kept_percent_concrete": 74.39446366782006,
                "kept_percent_lambda": 25.60553633217993,
                "num_examples": 5,
                "num_explored_concrete": 1764,
                "num_explored_lambda": 531,
                "num_explored_none": 373,
                "num_inputs": 1,
                "num_kept_concrete": 645,
                "num_kept_lambda": 222,
                "num_values_explored": 2668,
                "num_values_kept": 867,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11094
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2307585531380028,
            "num_unique_values": 507,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 53.21888412017167,
                "explored_percent_lambda": 34.97854077253219,
                "explored_percent_none": 11.802575107296137,
                "kept_percent_concrete": 58.56573705179283,
                "kept_percent_lambda": 41.43426294820717,
                "num_examples": 3,
                "num_explored_concrete": 744,
                "num_explored_lambda": 489,
                "num_explored_none": 165,
                "num_inputs": 1,
                "num_kept_concrete": 294,
                "num_kept_lambda": 208,
                "num_values_explored": 1398,
                "num_values_kept": 502,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3078
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65589543385431,
            "num_unique_values": 1543,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.39410340407349,
                "explored_percent_lambda": 16.450648055832502,
                "explored_percent_none": 10.155248540094004,
                "kept_percent_concrete": 68.48958333333333,
                "kept_percent_lambda": 31.510416666666668,
                "num_examples": 3,
                "num_explored_concrete": 5153,
                "num_explored_lambda": 1155,
                "num_explored_none": 713,
                "num_inputs": 3,
                "num_kept_concrete": 1052,
                "num_kept_lambda": 484,
                "num_values_explored": 7021,
                "num_values_kept": 1536,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71119
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85873308195733,
            "num_unique_values": 1414,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.7301702808907,
                "explored_percent_lambda": 14.422936981516518,
                "explored_percent_none": 11.846892737592782,
                "kept_percent_concrete": 64.17910447761194,
                "kept_percent_lambda": 35.82089552238806,
                "num_examples": 3,
                "num_explored_concrete": 5066,
                "num_explored_lambda": 991,
                "num_explored_none": 814,
                "num_inputs": 3,
                "num_kept_concrete": 903,
                "num_kept_lambda": 504,
                "num_values_explored": 6871,
                "num_values_kept": 1407,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70980
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7190031639766,
            "num_unique_values": 1348,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.42836635084697,
                "explored_percent_lambda": 13.178294573643411,
                "explored_percent_none": 10.393339075509617,
                "kept_percent_concrete": 77.3303504847129,
                "kept_percent_lambda": 22.669649515287098,
                "num_examples": 3,
                "num_explored_concrete": 5324,
                "num_explored_lambda": 918,
                "num_explored_none": 724,
                "num_inputs": 3,
                "num_kept_concrete": 1037,
                "num_kept_lambda": 304,
                "num_values_explored": 6966,
                "num_values_kept": 1341,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72928
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.35773955495096743,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78619196196087,
            "num_unique_values": 1561,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 83.79926360289105,
                "explored_percent_lambda": 10.159552706941225,
                "explored_percent_none": 6.041183690167735,
                "kept_percent_concrete": 82.44372990353698,
                "kept_percent_lambda": 17.556270096463024,
                "num_examples": 5,
                "num_explored_concrete": 6145,
                "num_explored_lambda": 745,
                "num_explored_none": 443,
                "num_inputs": 2,
                "num_kept_concrete": 1282,
                "num_kept_lambda": 273,
                "num_values_explored": 7333,
                "num_values_kept": 1555,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73976
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03158403304406,
            "num_unique_values": 1466,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.19300398895366,
                "explored_percent_lambda": 18.333844737649585,
                "explored_percent_none": 12.473151273396747,
                "kept_percent_concrete": 65.95890410958904,
                "kept_percent_lambda": 34.04109589041096,
                "num_examples": 3,
                "num_explored_concrete": 4510,
                "num_explored_lambda": 1195,
                "num_explored_none": 813,
                "num_inputs": 2,
                "num_kept_concrete": 963,
                "num_kept_lambda": 497,
                "num_values_explored": 6518,
                "num_values_kept": 1460,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64940
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 82.69216223387048,
            "num_unique_values": 266,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 23.563892145369284,
                "explored_percent_lambda": 46.893317702227435,
                "explored_percent_none": 29.54279015240328,
                "kept_percent_concrete": 38.31417624521073,
                "kept_percent_lambda": 61.68582375478927,
                "num_examples": 3,
                "num_explored_concrete": 201,
                "num_explored_lambda": 400,
                "num_explored_none": 252,
                "num_inputs": 1,
                "num_kept_concrete": 100,
                "num_kept_lambda": 161,
                "num_values_explored": 853,
                "num_values_kept": 261,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 45784
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3138628869783133,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92463573301211,
            "num_unique_values": 1656,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.99050401753104,
                "explored_percent_lambda": 14.992695398100803,
                "explored_percent_none": 8.016800584368152,
                "kept_percent_concrete": 79.63636363636364,
                "kept_percent_lambda": 20.363636363636363,
                "num_examples": 5,
                "num_explored_concrete": 4216,
                "num_explored_lambda": 821,
                "num_explored_none": 439,
                "num_inputs": 2,
                "num_kept_concrete": 1314,
                "num_kept_lambda": 336,
                "num_values_explored": 5476,
                "num_values_kept": 1650,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63371
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87605580291711,
            "num_unique_values": 1250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.86068563092633,
                "explored_percent_lambda": 19.27425237053246,
                "explored_percent_none": 9.865061998541211,
                "kept_percent_concrete": 66.47909967845659,
                "kept_percent_lambda": 33.52090032154341,
                "num_examples": 3,
                "num_explored_concrete": 3886,
                "num_explored_lambda": 1057,
                "num_explored_none": 541,
                "num_inputs": 2,
                "num_kept_concrete": 827,
                "num_kept_lambda": 417,
                "num_values_explored": 5484,
                "num_values_kept": 1244,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57333
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94950574915856,
            "num_unique_values": 1445,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.96526262795771,
                "explored_percent_lambda": 17.838563517368687,
                "explored_percent_none": 9.196173854673603,
                "kept_percent_concrete": 68.15020862308762,
                "kept_percent_lambda": 31.84979137691238,
                "num_examples": 3,
                "num_explored_concrete": 4348,
                "num_explored_lambda": 1063,
                "num_explored_none": 548,
                "num_inputs": 3,
                "num_kept_concrete": 980,
                "num_kept_lambda": 458,
                "num_values_explored": 5959,
                "num_values_kept": 1438,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58696
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91496873903088,
            "num_unique_values": 1281,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.92437542201215,
                "explored_percent_lambda": 13.706954760297096,
                "explored_percent_none": 9.36866981769075,
                "kept_percent_concrete": 76.56739811912226,
                "kept_percent_lambda": 23.432601880877744,
                "num_examples": 5,
                "num_explored_concrete": 4557,
                "num_explored_lambda": 812,
                "num_explored_none": 555,
                "num_inputs": 1,
                "num_kept_concrete": 977,
                "num_kept_lambda": 299,
                "num_values_explored": 5924,
                "num_values_kept": 1276,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61720
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89662062609568,
            "num_unique_values": 1320,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.22073578595318,
                "explored_percent_lambda": 20.04830917874396,
                "explored_percent_none": 13.73095503530286,
                "kept_percent_concrete": 64.86692015209125,
                "kept_percent_lambda": 35.133079847908746,
                "num_examples": 3,
                "num_explored_concrete": 3564,
                "num_explored_lambda": 1079,
                "num_explored_none": 739,
                "num_inputs": 1,
                "num_kept_concrete": 853,
                "num_kept_lambda": 462,
                "num_values_explored": 5382,
                "num_values_kept": 1315,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54547
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.35611216304824,
            "num_unique_values": 785,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: If(((lambda v1: Greater(v1, -1)))(v1), v2, y)))(u2, u2)), x, x)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 51.17602427921093,
                "explored_percent_lambda": 32.66312594840668,
                "explored_percent_none": 16.1608497723824,
                "kept_percent_concrete": 56.996148908857506,
                "kept_percent_lambda": 43.003851091142494,
                "num_examples": 3,
                "num_explored_concrete": 1349,
                "num_explored_lambda": 861,
                "num_explored_none": 426,
                "num_inputs": 2,
                "num_kept_concrete": 444,
                "num_kept_lambda": 335,
                "num_values_explored": 2636,
                "num_values_kept": 779,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 44705
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98587257904,
            "num_unique_values": 1135,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.38809166845149,
                "explored_percent_lambda": 29.985007496251875,
                "explored_percent_none": 17.626900835296638,
                "kept_percent_concrete": 46.19469026548673,
                "kept_percent_lambda": 53.80530973451327,
                "num_examples": 3,
                "num_explored_concrete": 2446,
                "num_explored_lambda": 1400,
                "num_explored_none": 823,
                "num_inputs": 1,
                "num_kept_concrete": 522,
                "num_kept_lambda": 608,
                "num_values_explored": 4669,
                "num_values_kept": 1130,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56832
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.090878446819261,
            "num_unique_values": 969,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, ((lambda v1: IsEven(v1)))(v1))))(u1)), r), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 69.29551122194513,
                "explored_percent_lambda": 22.47506234413965,
                "explored_percent_none": 8.229426433915211,
                "kept_percent_concrete": 67.1858774662513,
                "kept_percent_lambda": 32.8141225337487,
                "num_examples": 3,
                "num_explored_concrete": 2223,
                "num_explored_lambda": 721,
                "num_explored_none": 264,
                "num_inputs": 2,
                "num_kept_concrete": 647,
                "num_kept_lambda": 316,
                "num_values_explored": 3208,
                "num_values_kept": 963,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4608
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98567154887132,
            "num_unique_values": 1398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.03690655930212,
                "explored_percent_lambda": 10.920986411675893,
                "explored_percent_none": 9.042107029021976,
                "kept_percent_concrete": 80.24425287356321,
                "kept_percent_lambda": 19.75574712643678,
                "num_examples": 5,
                "num_explored_concrete": 4771,
                "num_explored_lambda": 651,
                "num_explored_none": 539,
                "num_inputs": 2,
                "num_kept_concrete": 1117,
                "num_kept_lambda": 275,
                "num_values_explored": 5961,
                "num_values_kept": 1392,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60208
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0257547381334,
            "num_unique_values": 1198,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.312086092715234,
                "explored_percent_lambda": 29.44950331125828,
                "explored_percent_none": 14.23841059602649,
                "kept_percent_concrete": 44.92875104777871,
                "kept_percent_lambda": 55.07124895222129,
                "num_examples": 3,
                "num_explored_concrete": 2721,
                "num_explored_lambda": 1423,
                "num_explored_none": 688,
                "num_inputs": 1,
                "num_kept_concrete": 536,
                "num_kept_lambda": 657,
                "num_values_explored": 4832,
                "num_values_kept": 1193,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49761
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89923701412044,
            "num_unique_values": 1455,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.03448275862069,
                "explored_percent_lambda": 23.340996168582375,
                "explored_percent_none": 13.624521072796934,
                "kept_percent_concrete": 56.31469979296066,
                "kept_percent_lambda": 43.68530020703934,
                "num_examples": 3,
                "num_explored_concrete": 4113,
                "num_explored_lambda": 1523,
                "num_explored_none": 889,
                "num_inputs": 2,
                "num_kept_concrete": 816,
                "num_kept_lambda": 633,
                "num_values_explored": 6525,
                "num_values_kept": 1449,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62363
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82132676197216,
            "num_unique_values": 1458,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.01049785271195,
                "explored_percent_lambda": 11.03865118498489,
                "explored_percent_none": 6.950850962303165,
                "kept_percent_concrete": 82.64462809917356,
                "kept_percent_lambda": 17.355371900826448,
                "num_examples": 5,
                "num_explored_concrete": 5156,
                "num_explored_lambda": 694,
                "num_explored_none": 437,
                "num_inputs": 2,
                "num_kept_concrete": 1200,
                "num_kept_lambda": 252,
                "num_values_explored": 6287,
                "num_values_kept": 1452,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65769
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.58193219499663,
            "num_unique_values": 388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.99103139013453,
                "explored_percent_lambda": 28.149205055034653,
                "explored_percent_none": 47.85976355483082,
                "kept_percent_concrete": 47.25848563968668,
                "kept_percent_lambda": 52.74151436031332,
                "num_examples": 5,
                "num_explored_concrete": 1177,
                "num_explored_lambda": 1381,
                "num_explored_none": 2348,
                "num_inputs": 1,
                "num_kept_concrete": 181,
                "num_kept_lambda": 202,
                "num_values_explored": 4906,
                "num_values_kept": 383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49546
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17095414199866354,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 57.36928031197749,
            "num_unique_values": 1040,
            "solution": "Map((lambda u1: ((lambda v1: Add(((lambda v1: Add(v1, v1)))(v1), ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 59.26517571884984,
                "explored_percent_lambda": 29.63258785942492,
                "explored_percent_none": 11.10223642172524,
                "kept_percent_concrete": 52.65700483091788,
                "kept_percent_lambda": 47.34299516908212,
                "num_examples": 3,
                "num_explored_concrete": 2226,
                "num_explored_lambda": 1113,
                "num_explored_none": 417,
                "num_inputs": 1,
                "num_kept_concrete": 545,
                "num_kept_lambda": 490,
                "num_values_explored": 3756,
                "num_values_kept": 1035,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 33139
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11972871189936996,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80587105615996,
            "num_unique_values": 1283,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.542030934767986,
                "explored_percent_lambda": 23.4364492266308,
                "explored_percent_none": 14.021519838601211,
                "kept_percent_concrete": 54.929577464788736,
                "kept_percent_lambda": 45.070422535211264,
                "num_examples": 3,
                "num_explored_concrete": 3720,
                "num_explored_lambda": 1394,
                "num_explored_none": 834,
                "num_inputs": 1,
                "num_kept_concrete": 702,
                "num_kept_lambda": 576,
                "num_values_explored": 5948,
                "num_values_kept": 1278,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61645
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 72.97779676807113,
            "num_unique_values": 415,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u2, u1)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.67123287671233,
                "explored_percent_lambda": 49.02152641878669,
                "explored_percent_none": 13.307240704500979,
                "kept_percent_concrete": 45.1219512195122,
                "kept_percent_lambda": 54.8780487804878,
                "num_examples": 3,
                "num_explored_concrete": 385,
                "num_explored_lambda": 501,
                "num_explored_none": 136,
                "num_inputs": 1,
                "num_kept_concrete": 185,
                "num_kept_lambda": 225,
                "num_values_explored": 1022,
                "num_values_kept": 410,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 45229
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93723620800301,
            "num_unique_values": 891,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.69371912491179,
                "explored_percent_lambda": 36.48553281580804,
                "explored_percent_none": 11.82074805928017,
                "kept_percent_concrete": 48.53273137697517,
                "kept_percent_lambda": 51.46726862302483,
                "num_examples": 3,
                "num_explored_concrete": 1465,
                "num_explored_lambda": 1034,
                "num_explored_none": 335,
                "num_inputs": 1,
                "num_kept_concrete": 430,
                "num_kept_lambda": 456,
                "num_values_explored": 2834,
                "num_values_kept": 886,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 40815
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 40.602711723186076,
            "num_unique_values": 801,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), Sort(x), Sort(y))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 47.562526494277236,
                "explored_percent_lambda": 38.36371343789742,
                "explored_percent_none": 14.073760067825349,
                "kept_percent_concrete": 54.21383647798742,
                "kept_percent_lambda": 45.78616352201258,
                "num_examples": 3,
                "num_explored_concrete": 1122,
                "num_explored_lambda": 905,
                "num_explored_none": 332,
                "num_inputs": 2,
                "num_kept_concrete": 431,
                "num_kept_lambda": 364,
                "num_values_explored": 2359,
                "num_values_kept": 795,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 13099
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.795433862833306,
            "num_unique_values": 409,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 46.23376623376623,
                "explored_percent_lambda": 37.316017316017316,
                "explored_percent_none": 16.450216450216452,
                "kept_percent_concrete": 58.415841584158414,
                "kept_percent_lambda": 41.584158415841586,
                "num_examples": 5,
                "num_explored_concrete": 534,
                "num_explored_lambda": 431,
                "num_explored_none": 190,
                "num_inputs": 1,
                "num_kept_concrete": 236,
                "num_kept_lambda": 168,
                "num_values_explored": 1155,
                "num_values_kept": 404,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 9466
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.56935505894944,
            "num_unique_values": 903,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.437777020115924,
                "explored_percent_lambda": 36.0381861575179,
                "explored_percent_none": 11.524036822366178,
                "kept_percent_concrete": 45.76837416481069,
                "kept_percent_lambda": 54.23162583518931,
                "num_examples": 3,
                "num_explored_concrete": 1538,
                "num_explored_lambda": 1057,
                "num_explored_none": 338,
                "num_inputs": 1,
                "num_kept_concrete": 411,
                "num_kept_lambda": 487,
                "num_values_explored": 2933,
                "num_values_kept": 898,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29622
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.61819396098144,
            "num_unique_values": 881,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.65239294710327,
                "explored_percent_lambda": 34.11299028427492,
                "explored_percent_none": 12.234616768621807,
                "kept_percent_concrete": 52.054794520547944,
                "kept_percent_lambda": 47.945205479452056,
                "num_examples": 3,
                "num_explored_concrete": 1491,
                "num_explored_lambda": 948,
                "num_explored_none": 340,
                "num_inputs": 1,
                "num_kept_concrete": 456,
                "num_kept_lambda": 420,
                "num_values_explored": 2779,
                "num_values_kept": 876,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30162
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75263135391288,
            "num_unique_values": 928,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.32606199770379,
                "explored_percent_lambda": 17.766934557979333,
                "explored_percent_none": 10.907003444316878,
                "kept_percent_concrete": 73.21041214750542,
                "kept_percent_lambda": 26.789587852494577,
                "num_examples": 5,
                "num_explored_concrete": 2485,
                "num_explored_lambda": 619,
                "num_explored_none": 380,
                "num_inputs": 2,
                "num_kept_concrete": 675,
                "num_kept_lambda": 247,
                "num_values_explored": 3484,
                "num_values_kept": 922,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 35675
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.68819454917684,
            "num_unique_values": 894,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.524150268336314,
                "explored_percent_lambda": 36.135957066189626,
                "explored_percent_none": 10.33989266547406,
                "kept_percent_concrete": 52.47747747747748,
                "kept_percent_lambda": 47.52252252252252,
                "num_examples": 3,
                "num_explored_concrete": 1496,
                "num_explored_lambda": 1010,
                "num_explored_none": 289,
                "num_inputs": 2,
                "num_kept_concrete": 466,
                "num_kept_lambda": 422,
                "num_values_explored": 2795,
                "num_values_kept": 888,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29789
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.63557277410291,
            "num_unique_values": 878,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.65982404692082,
                "explored_percent_lambda": 19.853372434017594,
                "explored_percent_none": 24.486803519061585,
                "kept_percent_concrete": 74.54128440366972,
                "kept_percent_lambda": 25.458715596330276,
                "num_examples": 5,
                "num_explored_concrete": 1898,
                "num_explored_lambda": 677,
                "num_explored_none": 835,
                "num_inputs": 2,
                "num_kept_concrete": 650,
                "num_kept_lambda": 222,
                "num_values_explored": 3410,
                "num_values_kept": 872,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 36601
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.80859610601328,
            "num_unique_values": 944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.64399219403401,
                "explored_percent_lambda": 20.183997769724,
                "explored_percent_none": 9.172010036241986,
                "kept_percent_concrete": 73.88059701492537,
                "kept_percent_lambda": 26.119402985074625,
                "num_examples": 5,
                "num_explored_concrete": 2534,
                "num_explored_lambda": 724,
                "num_explored_none": 329,
                "num_inputs": 2,
                "num_kept_concrete": 693,
                "num_kept_lambda": 245,
                "num_values_explored": 3587,
                "num_values_kept": 938,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 37880
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32873704493977,
            "num_unique_values": 813,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.06711409395973,
                "explored_percent_lambda": 16.671140939597315,
                "explored_percent_none": 17.261744966442954,
                "kept_percent_concrete": 72.24287484510533,
                "kept_percent_lambda": 27.757125154894673,
                "num_examples": 5,
                "num_explored_concrete": 2461,
                "num_explored_lambda": 621,
                "num_explored_none": 643,
                "num_inputs": 2,
                "num_kept_concrete": 583,
                "num_kept_lambda": 224,
                "num_values_explored": 3725,
                "num_values_kept": 807,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 38483
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}