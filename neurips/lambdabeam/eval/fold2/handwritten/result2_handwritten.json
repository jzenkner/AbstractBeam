{
    "num_tasks": 50,
    "num_tasks_solved": 17,
    "results": [
        {
            "elapsed_time": 0.6750055449083447,
            "num_unique_values": 258,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.88187372708757,
                "explored_percent_lambda": 48.26883910386965,
                "explored_percent_none": 13.84928716904277,
                "kept_percent_concrete": 41.76706827309237,
                "kept_percent_lambda": 58.23293172690763,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 237,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 145,
                "num_values_explored": 491,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.274392168037593,
            "num_unique_values": 289,
            "solution": "Multiply(k, IntDivide(Add(k, x), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.716865937420504,
                "explored_percent_lambda": 19.282625286186722,
                "explored_percent_none": 58.00050877639278,
                "kept_percent_concrete": 67.38351254480287,
                "kept_percent_lambda": 32.61648745519713,
                "num_examples": 5,
                "num_explored_concrete": 893,
                "num_explored_lambda": 758,
                "num_explored_none": 2280,
                "num_inputs": 2,
                "num_kept_concrete": 188,
                "num_kept_lambda": 91,
                "num_values_explored": 3931,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11681
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.962799482047558,
            "num_unique_values": 477,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 24.86248624862486,
                "explored_percent_lambda": 42.7942794279428,
                "explored_percent_none": 32.34323432343234,
                "kept_percent_concrete": 48.07692307692308,
                "kept_percent_lambda": 51.92307692307692,
                "num_examples": 3,
                "num_explored_concrete": 452,
                "num_explored_lambda": 778,
                "num_explored_none": 588,
                "num_inputs": 1,
                "num_kept_concrete": 225,
                "num_kept_lambda": 243,
                "num_values_explored": 1818,
                "num_values_kept": 468,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15354
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84834038512781,
            "num_unique_values": 1284,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.38080495356037,
                "explored_percent_lambda": 29.876160990712073,
                "explored_percent_none": 20.743034055727556,
                "kept_percent_concrete": 52.627450980392155,
                "kept_percent_lambda": 47.372549019607845,
                "num_examples": 3,
                "num_explored_concrete": 2871,
                "num_explored_lambda": 1737,
                "num_explored_none": 1206,
                "num_inputs": 1,
                "num_kept_concrete": 671,
                "num_kept_lambda": 604,
                "num_values_explored": 5814,
                "num_values_kept": 1275,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59766
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.379187845159322,
            "num_unique_values": 333,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.22784810126582,
                "explored_percent_lambda": 33.895921237693386,
                "explored_percent_none": 7.876230661040788,
                "kept_percent_concrete": 60.06191950464396,
                "kept_percent_lambda": 39.93808049535604,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 241,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 129,
                "num_values_explored": 711,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94595312909223,
            "num_unique_values": 1402,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.55321620444316,
                "explored_percent_lambda": 12.109772034267461,
                "explored_percent_none": 17.337011761289386,
                "kept_percent_concrete": 73.86934673366834,
                "kept_percent_lambda": 26.13065326633166,
                "num_examples": 5,
                "num_explored_concrete": 4859,
                "num_explored_lambda": 834,
                "num_explored_none": 1194,
                "num_inputs": 1,
                "num_kept_concrete": 1029,
                "num_kept_lambda": 364,
                "num_values_explored": 6887,
                "num_values_kept": 1393,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69825
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2480894699692726,
            "num_unique_values": 127,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 20.606060606060606,
                "explored_percent_lambda": 66.66666666666667,
                "explored_percent_none": 12.727272727272727,
                "kept_percent_concrete": 15.254237288135593,
                "kept_percent_lambda": 84.7457627118644,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 110,
                "num_explored_none": 21,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 100,
                "num_values_explored": 165,
                "num_values_kept": 118,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 165
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7525470701512,
            "num_unique_values": 1108,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.71777104085463,
                "explored_percent_lambda": 14.21971993648044,
                "explored_percent_none": 21.062509022664933,
                "kept_percent_concrete": 71.97452229299363,
                "kept_percent_lambda": 28.02547770700637,
                "num_examples": 5,
                "num_explored_concrete": 4483,
                "num_explored_lambda": 985,
                "num_explored_none": 1459,
                "num_inputs": 1,
                "num_kept_concrete": 791,
                "num_kept_lambda": 308,
                "num_values_explored": 6927,
                "num_values_kept": 1099,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69694
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83521988010034,
            "num_unique_values": 1227,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.76616121308859,
                "explored_percent_lambda": 15.083798882681565,
                "explored_percent_none": 24.15003990422985,
                "kept_percent_concrete": 71.83908045977012,
                "kept_percent_lambda": 28.160919540229884,
                "num_examples": 5,
                "num_explored_concrete": 3807,
                "num_explored_lambda": 945,
                "num_explored_none": 1513,
                "num_inputs": 1,
                "num_kept_concrete": 875,
                "num_kept_lambda": 343,
                "num_values_explored": 6265,
                "num_values_kept": 1218,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64558
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 40.29425637307577,
            "num_unique_values": 1288,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 61.408594815825374,
                "explored_percent_lambda": 24.761255115961802,
                "explored_percent_none": 13.830150068212824,
                "kept_percent_concrete": 52.853792025019544,
                "kept_percent_lambda": 47.146207974980456,
                "num_examples": 3,
                "num_explored_concrete": 3601,
                "num_explored_lambda": 1452,
                "num_explored_none": 811,
                "num_inputs": 1,
                "num_kept_concrete": 676,
                "num_kept_lambda": 603,
                "num_values_explored": 5864,
                "num_values_kept": 1279,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 25197
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69509833096527,
            "num_unique_values": 1284,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.42150095461889,
                "explored_percent_lambda": 9.693053311793214,
                "explored_percent_none": 19.885445733587897,
                "kept_percent_concrete": 83.43799058084772,
                "kept_percent_lambda": 16.562009419152275,
                "num_examples": 5,
                "num_explored_concrete": 4795,
                "num_explored_lambda": 660,
                "num_explored_none": 1354,
                "num_inputs": 2,
                "num_kept_concrete": 1063,
                "num_kept_lambda": 211,
                "num_values_explored": 6809,
                "num_values_kept": 1274,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71145
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78573611588217,
            "num_unique_values": 1499,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.409056258576,
                "explored_percent_lambda": 24.15002286933984,
                "explored_percent_none": 12.44092087208416,
                "kept_percent_concrete": 63.12961719274681,
                "kept_percent_lambda": 36.87038280725319,
                "num_examples": 3,
                "num_explored_concrete": 4159,
                "num_explored_lambda": 1584,
                "num_explored_none": 816,
                "num_inputs": 2,
                "num_kept_concrete": 940,
                "num_kept_lambda": 549,
                "num_values_explored": 6559,
                "num_values_kept": 1489,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66708
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.06420366303064,
            "num_unique_values": 1002,
            "solution": "Count((lambda u1: ((lambda v1: Greater(IsEven(3), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.26086956521739,
                "explored_percent_lambda": 17.108695652173914,
                "explored_percent_none": 28.630434782608695,
                "kept_percent_concrete": 73.81671701913393,
                "kept_percent_lambda": 26.183282980866064,
                "num_examples": 5,
                "num_explored_concrete": 2496,
                "num_explored_lambda": 787,
                "num_explored_none": 1317,
                "num_inputs": 1,
                "num_kept_concrete": 733,
                "num_kept_lambda": 260,
                "num_values_explored": 4600,
                "num_values_kept": 993,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7120
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 11.991616134997457,
            "num_unique_values": 247,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 27.871148459383754,
                "explored_percent_lambda": 46.778711484593835,
                "explored_percent_none": 25.350140056022408,
                "kept_percent_concrete": 41.596638655462186,
                "kept_percent_lambda": 58.403361344537814,
                "num_examples": 3,
                "num_explored_concrete": 199,
                "num_explored_lambda": 334,
                "num_explored_none": 181,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 139,
                "num_values_explored": 714,
                "num_values_kept": 238,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8249
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66347876610234,
            "num_unique_values": 1560,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.93985068319482,
                "explored_percent_lambda": 16.18537822228483,
                "explored_percent_none": 10.874771094520355,
                "kept_percent_concrete": 71.40090380890898,
                "kept_percent_lambda": 28.599096191091025,
                "num_examples": 3,
                "num_explored_concrete": 5178,
                "num_explored_lambda": 1149,
                "num_explored_none": 772,
                "num_inputs": 3,
                "num_kept_concrete": 1106,
                "num_kept_lambda": 443,
                "num_values_explored": 7099,
                "num_values_kept": 1549,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72850
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73196565802209,
            "num_unique_values": 1395,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.6517119244392,
                "explored_percent_lambda": 23.760330578512395,
                "explored_percent_none": 16.587957497048407,
                "kept_percent_concrete": 62.066473988439306,
                "kept_percent_lambda": 37.933526011560694,
                "num_examples": 3,
                "num_explored_concrete": 4042,
                "num_explored_lambda": 1610,
                "num_explored_none": 1124,
                "num_inputs": 3,
                "num_kept_concrete": 859,
                "num_kept_lambda": 525,
                "num_values_explored": 6776,
                "num_values_kept": 1384,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69524
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8781345540192,
            "num_unique_values": 1418,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.20946538124453,
                "explored_percent_lambda": 17.03184341221151,
                "explored_percent_none": 11.758691206543967,
                "kept_percent_concrete": 66.52452025586354,
                "kept_percent_lambda": 33.47547974413646,
                "num_examples": 3,
                "num_explored_concrete": 4875,
                "num_explored_lambda": 1166,
                "num_explored_none": 805,
                "num_inputs": 3,
                "num_kept_concrete": 936,
                "num_kept_lambda": 471,
                "num_values_explored": 6846,
                "num_values_kept": 1407,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68432
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87809781893156,
            "num_unique_values": 1381,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.20777185835161,
                "explored_percent_lambda": 28.56471325603259,
                "explored_percent_none": 14.227514885615795,
                "kept_percent_concrete": 55.65280816921955,
                "kept_percent_lambda": 44.34719183078045,
                "num_examples": 3,
                "num_explored_concrete": 3651,
                "num_explored_lambda": 1823,
                "num_explored_none": 908,
                "num_inputs": 2,
                "num_kept_concrete": 763,
                "num_kept_lambda": 608,
                "num_values_explored": 6382,
                "num_values_kept": 1371,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63675
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89269925095141,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.59846617365105,
                "explored_percent_lambda": 13.051218844152286,
                "explored_percent_none": 21.350314982196657,
                "kept_percent_concrete": 77.19680464778504,
                "kept_percent_lambda": 22.80319535221496,
                "num_examples": 5,
                "num_explored_concrete": 4790,
                "num_explored_lambda": 953,
                "num_explored_none": 1559,
                "num_inputs": 2,
                "num_kept_concrete": 1063,
                "num_kept_lambda": 314,
                "num_values_explored": 7302,
                "num_values_kept": 1377,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75793
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0185286779888,
            "num_unique_values": 1489,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.81556572923479,
                "explored_percent_lambda": 25.14715500327011,
                "explored_percent_none": 17.037279267495094,
                "kept_percent_concrete": 56.727518593644355,
                "kept_percent_lambda": 43.272481406355645,
                "num_examples": 3,
                "num_explored_concrete": 3536,
                "num_explored_lambda": 1538,
                "num_explored_none": 1042,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 640,
                "num_values_explored": 6116,
                "num_values_kept": 1479,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62886
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92825807910413,
            "num_unique_values": 1422,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.813602015113354,
                "explored_percent_lambda": 23.96305625524769,
                "explored_percent_none": 14.223341729638959,
                "kept_percent_concrete": 54.49398443029016,
                "kept_percent_lambda": 45.50601556970984,
                "num_examples": 3,
                "num_explored_concrete": 3681,
                "num_explored_lambda": 1427,
                "num_explored_none": 847,
                "num_inputs": 1,
                "num_kept_concrete": 770,
                "num_kept_lambda": 643,
                "num_values_explored": 5955,
                "num_values_kept": 1413,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61521
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.33239363599568605,
            "num_unique_values": 272,
            "solution": "Sort(Reverse(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 46.435845213849284,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 41.444866920152094,
                "kept_percent_lambda": 58.555133079847906,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 228,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 154,
                "num_values_explored": 491,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94735686597414,
            "num_unique_values": 1404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.8235294117647,
                "explored_percent_lambda": 11.686274509803921,
                "explored_percent_none": 25.49019607843137,
                "kept_percent_concrete": 79.91391678622668,
                "kept_percent_lambda": 20.086083213773314,
                "num_examples": 5,
                "num_explored_concrete": 4005,
                "num_explored_lambda": 745,
                "num_explored_none": 1625,
                "num_inputs": 2,
                "num_kept_concrete": 1114,
                "num_kept_lambda": 280,
                "num_values_explored": 6375,
                "num_values_kept": 1394,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67447
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89524803496897,
            "num_unique_values": 1552,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.66302652106084,
                "explored_percent_lambda": 23.354134165366613,
                "explored_percent_none": 10.982839313572542,
                "kept_percent_concrete": 58.88456549935149,
                "kept_percent_lambda": 41.11543450064851,
                "num_examples": 3,
                "num_explored_concrete": 4209,
                "num_explored_lambda": 1497,
                "num_explored_none": 704,
                "num_inputs": 2,
                "num_kept_concrete": 908,
                "num_kept_lambda": 634,
                "num_values_explored": 6410,
                "num_values_kept": 1542,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65039
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84995820792392,
            "num_unique_values": 1489,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.3457115144797,
                "explored_percent_lambda": 18.290148261050298,
                "explored_percent_none": 16.364140224470002,
                "kept_percent_concrete": 68.53856562922869,
                "kept_percent_lambda": 31.46143437077131,
                "num_examples": 3,
                "num_explored_concrete": 4716,
                "num_explored_lambda": 1320,
                "num_explored_none": 1181,
                "num_inputs": 3,
                "num_kept_concrete": 1013,
                "num_kept_lambda": 465,
                "num_values_explored": 7217,
                "num_values_kept": 1478,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73438
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.328321997076273,
            "num_unique_values": 228,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.65753424657534,
                "explored_percent_lambda": 43.83561643835616,
                "explored_percent_none": 31.506849315068493,
                "kept_percent_concrete": 43.37899543378995,
                "kept_percent_lambda": 56.62100456621005,
                "num_examples": 5,
                "num_explored_concrete": 252,
                "num_explored_lambda": 448,
                "num_explored_none": 322,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 124,
                "num_values_explored": 1022,
                "num_values_kept": 219,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8877
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96356812398881,
            "num_unique_values": 1486,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.16225165562914,
                "explored_percent_lambda": 24.751655629139073,
                "explored_percent_none": 17.08609271523179,
                "kept_percent_concrete": 58.158429248476644,
                "kept_percent_lambda": 41.841570751523356,
                "num_examples": 3,
                "num_explored_concrete": 3513,
                "num_explored_lambda": 1495,
                "num_explored_none": 1032,
                "num_inputs": 1,
                "num_kept_concrete": 859,
                "num_kept_lambda": 618,
                "num_values_explored": 6040,
                "num_values_kept": 1477,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62920
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90254564490169,
            "num_unique_values": 1329,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.91295264623955,
                "explored_percent_lambda": 29.369777158774372,
                "explored_percent_none": 20.71727019498607,
                "kept_percent_concrete": 54.58680818802123,
                "kept_percent_lambda": 45.41319181197877,
                "num_examples": 3,
                "num_explored_concrete": 2867,
                "num_explored_lambda": 1687,
                "num_explored_none": 1190,
                "num_inputs": 2,
                "num_kept_concrete": 720,
                "num_kept_lambda": 599,
                "num_values_explored": 5744,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59056
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.734236425952986,
            "num_unique_values": 254,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Add(1, v1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 18.69488536155203,
                "explored_percent_lambda": 49.55908289241623,
                "explored_percent_none": 31.746031746031747,
                "kept_percent_concrete": 37.95918367346939,
                "kept_percent_lambda": 62.04081632653061,
                "num_examples": 3,
                "num_explored_concrete": 212,
                "num_explored_lambda": 562,
                "num_explored_none": 360,
                "num_inputs": 1,
                "num_kept_concrete": 93,
                "num_kept_lambda": 152,
                "num_values_explored": 1134,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14570
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.8507944939192384,
            "num_unique_values": 1250,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Add(v1, Head(r))))(v1))))(u1)), c), Sort(c))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 67.79051472240953,
                "explored_percent_lambda": 22.319622387053272,
                "explored_percent_none": 9.889862890537199,
                "kept_percent_concrete": 62.096774193548384,
                "kept_percent_lambda": 37.903225806451616,
                "num_examples": 3,
                "num_explored_concrete": 3016,
                "num_explored_lambda": 993,
                "num_explored_none": 440,
                "num_inputs": 2,
                "num_kept_concrete": 770,
                "num_kept_lambda": 470,
                "num_values_explored": 4449,
                "num_values_kept": 1240,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6129
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72063166392036,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.283703472005,
                "explored_percent_lambda": 11.08852048795746,
                "explored_percent_none": 19.627776040037535,
                "kept_percent_concrete": 78.97125567322239,
                "kept_percent_lambda": 21.02874432677761,
                "num_examples": 5,
                "num_explored_concrete": 4430,
                "num_explored_lambda": 709,
                "num_explored_none": 1255,
                "num_inputs": 2,
                "num_kept_concrete": 1044,
                "num_kept_lambda": 278,
                "num_values_explored": 6394,
                "num_values_kept": 1322,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67991
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8176604770124,
            "num_unique_values": 1335,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.75465013286094,
                "explored_percent_lambda": 27.670504871567758,
                "explored_percent_none": 19.5748449955713,
                "kept_percent_concrete": 53.77073906485671,
                "kept_percent_lambda": 46.22926093514329,
                "num_examples": 3,
                "num_explored_concrete": 2978,
                "num_explored_lambda": 1562,
                "num_explored_none": 1105,
                "num_inputs": 1,
                "num_kept_concrete": 713,
                "num_kept_lambda": 613,
                "num_values_explored": 5645,
                "num_values_kept": 1326,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58744
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9137599170208,
            "num_unique_values": 1350,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.38697318007663,
                "explored_percent_lambda": 23.196040868454663,
                "explored_percent_none": 17.41698595146871,
                "kept_percent_concrete": 62.23880597014925,
                "kept_percent_lambda": 37.76119402985075,
                "num_examples": 3,
                "num_explored_concrete": 3720,
                "num_explored_lambda": 1453,
                "num_explored_none": 1091,
                "num_inputs": 2,
                "num_kept_concrete": 834,
                "num_kept_lambda": 506,
                "num_values_explored": 6264,
                "num_values_kept": 1340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66046
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.411758134141564,
            "num_unique_values": 709,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 55.81767293082767,
                "explored_percent_lambda": 21.07157137145142,
                "explored_percent_none": 23.11075569772091,
                "kept_percent_concrete": 72.53218884120172,
                "kept_percent_lambda": 27.467811158798284,
                "num_examples": 5,
                "num_explored_concrete": 1396,
                "num_explored_lambda": 527,
                "num_explored_none": 578,
                "num_inputs": 2,
                "num_kept_concrete": 507,
                "num_kept_lambda": 192,
                "num_values_explored": 2501,
                "num_values_kept": 699,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18064
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.50925131887197,
            "num_unique_values": 391,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 18.127629733520337,
                "explored_percent_lambda": 27.17391304347826,
                "explored_percent_none": 54.698457223001405,
                "kept_percent_concrete": 50.52356020942408,
                "kept_percent_lambda": 49.47643979057592,
                "num_examples": 5,
                "num_explored_concrete": 1034,
                "num_explored_lambda": 1550,
                "num_explored_none": 3120,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 189,
                "num_values_explored": 5704,
                "num_values_kept": 382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58724
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13324666512198746,
            "num_unique_values": 143,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.84584980237154,
                "explored_percent_lambda": 17.786561264822133,
                "explored_percent_none": 19.367588932806324,
                "kept_percent_concrete": 75.93984962406014,
                "kept_percent_lambda": 24.06015037593985,
                "num_examples": 5,
                "num_explored_concrete": 159,
                "num_explored_lambda": 45,
                "num_explored_none": 49,
                "num_inputs": 2,
                "num_kept_concrete": 101,
                "num_kept_lambda": 32,
                "num_values_explored": 253,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84834715304896,
            "num_unique_values": 1367,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.695134756737836,
                "explored_percent_lambda": 28.543927196359817,
                "explored_percent_none": 18.760938046902346,
                "kept_percent_concrete": 56.40648011782032,
                "kept_percent_lambda": 43.59351988217968,
                "num_examples": 3,
                "num_explored_concrete": 3011,
                "num_explored_lambda": 1631,
                "num_explored_none": 1072,
                "num_inputs": 1,
                "num_kept_concrete": 766,
                "num_kept_lambda": 592,
                "num_values_explored": 5714,
                "num_values_kept": 1358,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60142
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.64351693703793,
            "num_unique_values": 274,
            "solution": "Subtract(Subtract(Multiply(y, x), x), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 18.31530139103555,
                "explored_percent_lambda": 19.577537351880473,
                "explored_percent_none": 62.10716125708398,
                "kept_percent_concrete": 64.01515151515152,
                "kept_percent_lambda": 35.984848484848484,
                "num_examples": 5,
                "num_explored_concrete": 711,
                "num_explored_lambda": 760,
                "num_explored_none": 2411,
                "num_inputs": 2,
                "num_kept_concrete": 169,
                "num_kept_lambda": 95,
                "num_values_explored": 3882,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5002
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07063074479811,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.30750563355868,
                "explored_percent_lambda": 27.99445311145779,
                "explored_percent_none": 17.698041254983533,
                "kept_percent_concrete": 55.69164265129683,
                "kept_percent_lambda": 44.30835734870317,
                "num_examples": 3,
                "num_explored_concrete": 3133,
                "num_explored_lambda": 1615,
                "num_explored_none": 1021,
                "num_inputs": 1,
                "num_kept_concrete": 773,
                "num_kept_lambda": 615,
                "num_values_explored": 5769,
                "num_values_kept": 1388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61429
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88050046400167,
            "num_unique_values": 1565,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.9333533925079,
                "explored_percent_lambda": 20.44531367534226,
                "explored_percent_none": 10.621332932149842,
                "kept_percent_concrete": 58.933161953727506,
                "kept_percent_lambda": 41.066838046272494,
                "num_examples": 3,
                "num_explored_concrete": 4582,
                "num_explored_lambda": 1359,
                "num_explored_none": 706,
                "num_inputs": 1,
                "num_kept_concrete": 917,
                "num_kept_lambda": 639,
                "num_values_explored": 6647,
                "num_values_kept": 1556,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67786
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97872665291652,
            "num_unique_values": 1463,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.74914559125085,
                "explored_percent_lambda": 25.649350649350648,
                "explored_percent_none": 15.601503759398497,
                "kept_percent_concrete": 53.988995873452545,
                "kept_percent_lambda": 46.011004126547455,
                "num_examples": 3,
                "num_explored_concrete": 3438,
                "num_explored_lambda": 1501,
                "num_explored_none": 913,
                "num_inputs": 1,
                "num_kept_concrete": 785,
                "num_kept_lambda": 669,
                "num_values_explored": 5852,
                "num_values_kept": 1454,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60789
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02157559082843,
            "num_unique_values": 1465,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.10598641604802,
                "explored_percent_lambda": 25.69894171536882,
                "explored_percent_none": 15.195071868583161,
                "kept_percent_concrete": 58.83161512027491,
                "kept_percent_lambda": 41.16838487972509,
                "num_examples": 3,
                "num_explored_concrete": 3742,
                "num_explored_lambda": 1627,
                "num_explored_none": 962,
                "num_inputs": 2,
                "num_kept_concrete": 856,
                "num_kept_lambda": 599,
                "num_values_explored": 6331,
                "num_values_kept": 1455,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65661
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94106224598363,
            "num_unique_values": 1281,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.5191663022883,
                "explored_percent_lambda": 15.5079434484769,
                "explored_percent_none": 25.972890249234805,
                "kept_percent_concrete": 74.37106918238993,
                "kept_percent_lambda": 25.628930817610062,
                "num_examples": 5,
                "num_explored_concrete": 4015,
                "num_explored_lambda": 1064,
                "num_explored_none": 1782,
                "num_inputs": 1,
                "num_kept_concrete": 946,
                "num_kept_lambda": 326,
                "num_values_explored": 6861,
                "num_values_kept": 1272,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70485
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07736900192685,
            "num_unique_values": 1429,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.30627431084052,
                "explored_percent_lambda": 28.750211398613224,
                "explored_percent_none": 17.943514290546254,
                "kept_percent_concrete": 52.183098591549296,
                "kept_percent_lambda": 47.816901408450704,
                "num_examples": 3,
                "num_explored_concrete": 3152,
                "num_explored_lambda": 1700,
                "num_explored_none": 1061,
                "num_inputs": 1,
                "num_kept_concrete": 741,
                "num_kept_lambda": 679,
                "num_values_explored": 5913,
                "num_values_kept": 1420,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60304
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.52855353499763,
            "num_unique_values": 1278,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Multiply(v1, 3)))(v1), 4)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 55.122950819672134,
                "explored_percent_lambda": 29.93666169895678,
                "explored_percent_none": 14.940387481371088,
                "kept_percent_concrete": 54.5311268715524,
                "kept_percent_lambda": 45.4688731284476,
                "num_examples": 3,
                "num_explored_concrete": 2959,
                "num_explored_lambda": 1607,
                "num_explored_none": 802,
                "num_inputs": 1,
                "num_kept_concrete": 692,
                "num_kept_lambda": 577,
                "num_values_explored": 5368,
                "num_values_kept": 1269,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 30893
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87267189798877,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.75439831104856,
                "explored_percent_lambda": 10.260380014074595,
                "explored_percent_none": 20.985221674876847,
                "kept_percent_concrete": 78.60882572924457,
                "kept_percent_lambda": 21.39117427075542,
                "num_examples": 5,
                "num_explored_concrete": 4885,
                "num_explored_lambda": 729,
                "num_explored_none": 1491,
                "num_inputs": 2,
                "num_kept_concrete": 1051,
                "num_kept_lambda": 286,
                "num_values_explored": 7105,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74106
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01847180491313,
            "num_unique_values": 1421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.83252973320476,
                "explored_percent_lambda": 26.325940212150435,
                "explored_percent_none": 12.841530054644808,
                "kept_percent_concrete": 60.949681077250176,
                "kept_percent_lambda": 39.050318922749824,
                "num_examples": 3,
                "num_explored_concrete": 3785,
                "num_explored_lambda": 1638,
                "num_explored_none": 799,
                "num_inputs": 2,
                "num_kept_concrete": 860,
                "num_kept_lambda": 551,
                "num_values_explored": 6222,
                "num_values_kept": 1411,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65359
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99109600693919,
            "num_unique_values": 1227,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.901458767490325,
                "explored_percent_lambda": 11.56594224471569,
                "explored_percent_none": 29.532598987793985,
                "kept_percent_concrete": 80.27937551355792,
                "kept_percent_lambda": 19.72062448644207,
                "num_examples": 5,
                "num_explored_concrete": 3957,
                "num_explored_lambda": 777,
                "num_explored_none": 1984,
                "num_inputs": 2,
                "num_kept_concrete": 977,
                "num_kept_lambda": 240,
                "num_values_explored": 6718,
                "num_values_kept": 1217,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68736
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82233725697733,
            "num_unique_values": 1323,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.06890779746129,
                "explored_percent_lambda": 9.582926489050077,
                "explored_percent_none": 16.348165713488633,
                "kept_percent_concrete": 82.25437928408225,
                "kept_percent_lambda": 17.745620715917745,
                "num_examples": 5,
                "num_explored_concrete": 5310,
                "num_explored_lambda": 687,
                "num_explored_none": 1172,
                "num_inputs": 2,
                "num_kept_concrete": 1080,
                "num_kept_lambda": 233,
                "num_values_explored": 7169,
                "num_values_kept": 1313,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74555
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.1683615108486265,
            "num_unique_values": 701,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, n)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 59.31372549019608,
                "explored_percent_lambda": 16.176470588235293,
                "explored_percent_none": 24.50980392156863,
                "kept_percent_concrete": 75.54269175108539,
                "kept_percent_lambda": 24.457308248914618,
                "num_examples": 5,
                "num_explored_concrete": 2420,
                "num_explored_lambda": 660,
                "num_explored_none": 1000,
                "num_inputs": 2,
                "num_kept_concrete": 522,
                "num_kept_lambda": 169,
                "num_values_explored": 4080,
                "num_values_kept": 691,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5480
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.34
}