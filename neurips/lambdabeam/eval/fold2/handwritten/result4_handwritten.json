{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 1.3070276628714055,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21338418289087713,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24375519109889865,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.67252373299561,
            "num_unique_values": 785,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.191881918819185,
                "explored_percent_lambda": 32.28782287822878,
                "explored_percent_none": 19.52029520295203,
                "kept_percent_concrete": 49.48717948717949,
                "kept_percent_lambda": 50.51282051282051,
                "num_examples": 3,
                "num_explored_concrete": 1306,
                "num_explored_lambda": 875,
                "num_explored_none": 529,
                "num_inputs": 1,
                "num_kept_concrete": 386,
                "num_kept_lambda": 394,
                "num_values_explored": 2710,
                "num_values_kept": 780,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28784
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.732841846998781,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2032039728947,
            "num_unique_values": 880,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.82692898862588,
                "explored_percent_lambda": 20.135259760221334,
                "explored_percent_none": 9.037811251152782,
                "kept_percent_concrete": 69.71428571428571,
                "kept_percent_lambda": 30.285714285714285,
                "num_examples": 5,
                "num_explored_concrete": 2304,
                "num_explored_lambda": 655,
                "num_explored_none": 294,
                "num_inputs": 1,
                "num_kept_concrete": 610,
                "num_kept_lambda": 265,
                "num_values_explored": 3253,
                "num_values_kept": 875,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 35123
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14959960500709713,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.49994401307777,
            "num_unique_values": 1254,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.14566259471161,
                "explored_percent_lambda": 16.251739601051494,
                "explored_percent_none": 9.602597804236895,
                "kept_percent_concrete": 71.01681345076061,
                "kept_percent_lambda": 28.98318654923939,
                "num_examples": 5,
                "num_explored_concrete": 4795,
                "num_explored_lambda": 1051,
                "num_explored_none": 621,
                "num_inputs": 1,
                "num_kept_concrete": 887,
                "num_kept_lambda": 362,
                "num_values_explored": 6467,
                "num_values_kept": 1249,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43016
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73213917808607,
            "num_unique_values": 1359,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.26191592436318,
                "explored_percent_lambda": 12.001875293014534,
                "explored_percent_none": 11.736208782622285,
                "kept_percent_concrete": 77.10487444608567,
                "kept_percent_lambda": 22.89512555391433,
                "num_examples": 5,
                "num_explored_concrete": 4880,
                "num_explored_lambda": 768,
                "num_explored_none": 751,
                "num_inputs": 1,
                "num_kept_concrete": 1044,
                "num_kept_lambda": 310,
                "num_values_explored": 6399,
                "num_values_kept": 1354,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69497
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 80.68444126681425,
            "num_unique_values": 1342,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(((lambda v1: Max(v1, -1)))(v1), x)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 58.06624888093106,
                "explored_percent_lambda": 29.042076991942704,
                "explored_percent_none": 12.891674127126231,
                "kept_percent_concrete": 43.754674644727004,
                "kept_percent_lambda": 56.245325355272996,
                "num_examples": 3,
                "num_explored_concrete": 3243,
                "num_explored_lambda": 1622,
                "num_explored_none": 720,
                "num_inputs": 1,
                "num_kept_concrete": 585,
                "num_kept_lambda": 752,
                "num_values_explored": 5585,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 47600
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77881860593334,
            "num_unique_values": 1576,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.92609245468596,
                "explored_percent_lambda": 10.67865673738935,
                "explored_percent_none": 11.395250807924688,
                "kept_percent_concrete": 82.92993630573248,
                "kept_percent_lambda": 17.070063694267517,
                "num_examples": 5,
                "num_explored_concrete": 5546,
                "num_explored_lambda": 760,
                "num_explored_none": 811,
                "num_inputs": 2,
                "num_kept_concrete": 1302,
                "num_kept_lambda": 268,
                "num_values_explored": 7117,
                "num_values_kept": 1570,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71985
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8320547491312,
            "num_unique_values": 1448,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.99707507312317,
                "explored_percent_lambda": 23.38316542086448,
                "explored_percent_none": 9.61975950601235,
                "kept_percent_concrete": 61.37309292649098,
                "kept_percent_lambda": 38.62690707350902,
                "num_examples": 3,
                "num_explored_concrete": 4123,
                "num_explored_lambda": 1439,
                "num_explored_none": 592,
                "num_inputs": 2,
                "num_kept_concrete": 885,
                "num_kept_lambda": 557,
                "num_values_explored": 6154,
                "num_values_kept": 1442,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63599
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.23717214888893,
            "num_unique_values": 516,
            "solution": "Count((lambda u1: ((lambda v1: Greater(((lambda v1: Subtract(-1, v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.451708766716195,
                "explored_percent_lambda": 30.98068350668648,
                "explored_percent_none": 16.567607726597327,
                "kept_percent_concrete": 67.31898238747554,
                "kept_percent_lambda": 32.681017612524464,
                "num_examples": 5,
                "num_explored_concrete": 706,
                "num_explored_lambda": 417,
                "num_explored_none": 223,
                "num_inputs": 1,
                "num_kept_concrete": 344,
                "num_kept_lambda": 167,
                "num_values_explored": 1346,
                "num_values_kept": 511,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9948
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.66580529906787,
            "num_unique_values": 1030,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(IntDivide(Head(x), Maximum(x)), v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 14,
            "stats": {
                "explored_percent_concrete": 71.58662308272567,
                "explored_percent_lambda": 19.56248428463666,
                "explored_percent_none": 8.850892632637667,
                "kept_percent_concrete": 67.02439024390245,
                "kept_percent_lambda": 32.97560975609756,
                "num_examples": 3,
                "num_explored_concrete": 2847,
                "num_explored_lambda": 778,
                "num_explored_none": 352,
                "num_inputs": 1,
                "num_kept_concrete": 687,
                "num_kept_lambda": 338,
                "num_values_explored": 3977,
                "num_values_kept": 1025,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5657
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66664090217091,
            "num_unique_values": 1488,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.64869616173455,
                "explored_percent_lambda": 16.144154702607675,
                "explored_percent_none": 11.20714913565778,
                "kept_percent_concrete": 67.31937879810938,
                "kept_percent_lambda": 32.68062120189062,
                "num_examples": 3,
                "num_explored_concrete": 4959,
                "num_explored_lambda": 1102,
                "num_explored_none": 765,
                "num_inputs": 3,
                "num_kept_concrete": 997,
                "num_kept_lambda": 484,
                "num_values_explored": 6826,
                "num_values_kept": 1481,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67735
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78420788492076,
            "num_unique_values": 1289,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.29436325678496,
                "explored_percent_lambda": 16.075156576200417,
                "explored_percent_none": 12.630480167014614,
                "kept_percent_concrete": 64.97659906396255,
                "kept_percent_lambda": 35.02340093603744,
                "num_examples": 3,
                "num_explored_concrete": 4098,
                "num_explored_lambda": 924,
                "num_explored_none": 726,
                "num_inputs": 3,
                "num_kept_concrete": 833,
                "num_kept_lambda": 449,
                "num_values_explored": 5748,
                "num_values_kept": 1282,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68798
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78458985616453,
            "num_unique_values": 1279,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.41307106598985,
                "explored_percent_lambda": 14.578045685279188,
                "explored_percent_none": 11.008883248730964,
                "kept_percent_concrete": 75.07861635220125,
                "kept_percent_lambda": 24.92138364779874,
                "num_examples": 3,
                "num_explored_concrete": 4691,
                "num_explored_lambda": 919,
                "num_explored_none": 694,
                "num_inputs": 3,
                "num_kept_concrete": 955,
                "num_kept_lambda": 317,
                "num_values_explored": 6304,
                "num_values_kept": 1272,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63443
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.36018832214176655,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72852527699433,
            "num_unique_values": 1367,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.01919692849144,
                "explored_percent_lambda": 12.318029115341545,
                "explored_percent_none": 7.662773956167014,
                "kept_percent_concrete": 79.79426891991183,
                "kept_percent_lambda": 20.20573108008817,
                "num_examples": 5,
                "num_explored_concrete": 5002,
                "num_explored_lambda": 770,
                "num_explored_none": 479,
                "num_inputs": 2,
                "num_kept_concrete": 1086,
                "num_kept_lambda": 275,
                "num_values_explored": 6251,
                "num_values_kept": 1361,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61266
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1127401990816,
            "num_unique_values": 1309,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.3319525513086,
                "explored_percent_lambda": 21.107136132555073,
                "explored_percent_none": 11.560911316136322,
                "kept_percent_concrete": 65.08058326937835,
                "kept_percent_lambda": 34.91941673062164,
                "num_examples": 3,
                "num_explored_concrete": 3576,
                "num_explored_lambda": 1121,
                "num_explored_none": 614,
                "num_inputs": 2,
                "num_kept_concrete": 848,
                "num_kept_lambda": 455,
                "num_values_explored": 5311,
                "num_values_kept": 1303,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54311
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.455966487061232,
            "num_unique_values": 544,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u1, u2)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 40.88093599449415,
                "explored_percent_lambda": 41.15622849277357,
                "explored_percent_none": 17.962835512732276,
                "kept_percent_concrete": 44.34137291280148,
                "kept_percent_lambda": 55.65862708719852,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 598,
                "num_explored_none": 261,
                "num_inputs": 1,
                "num_kept_concrete": 239,
                "num_kept_lambda": 300,
                "num_values_explored": 1453,
                "num_values_kept": 539,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2853
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.31264900299720466,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23729527299292,
            "num_unique_values": 1684,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.27522107922758,
                "explored_percent_lambda": 15.44847500451182,
                "explored_percent_none": 9.276303916260602,
                "kept_percent_concrete": 78.06912991656735,
                "kept_percent_lambda": 21.93087008343266,
                "num_examples": 5,
                "num_explored_concrete": 4171,
                "num_explored_lambda": 856,
                "num_explored_none": 514,
                "num_inputs": 2,
                "num_kept_concrete": 1310,
                "num_kept_lambda": 368,
                "num_values_explored": 5541,
                "num_values_kept": 1678,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57734
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9715644151438,
            "num_unique_values": 1289,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.96176046176046,
                "explored_percent_lambda": 17.37012987012987,
                "explored_percent_none": 9.668109668109668,
                "kept_percent_concrete": 66.25097427903351,
                "kept_percent_lambda": 33.749025720966486,
                "num_examples": 3,
                "num_explored_concrete": 4045,
                "num_explored_lambda": 963,
                "num_explored_none": 536,
                "num_inputs": 2,
                "num_kept_concrete": 850,
                "num_kept_lambda": 433,
                "num_values_explored": 5544,
                "num_values_kept": 1283,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57061
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83240845683031,
            "num_unique_values": 1444,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.82977182180369,
                "explored_percent_lambda": 19.90220934444042,
                "explored_percent_none": 10.268018833755885,
                "kept_percent_concrete": 64.43980514961726,
                "kept_percent_lambda": 35.56019485038274,
                "num_examples": 3,
                "num_explored_concrete": 3856,
                "num_explored_lambda": 1099,
                "num_explored_none": 567,
                "num_inputs": 3,
                "num_kept_concrete": 926,
                "num_kept_lambda": 511,
                "num_values_explored": 5522,
                "num_values_kept": 1437,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56496
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 36.375895300880075,
            "num_unique_values": 776,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(v1, Add(1, 1))))(v1))))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 67.53153153153153,
                "explored_percent_lambda": 21.65765765765766,
                "explored_percent_none": 10.81081081081081,
                "kept_percent_concrete": 71.98443579766537,
                "kept_percent_lambda": 28.01556420233463,
                "num_examples": 5,
                "num_explored_concrete": 1874,
                "num_explored_lambda": 601,
                "num_explored_none": 300,
                "num_inputs": 1,
                "num_kept_concrete": 555,
                "num_kept_lambda": 216,
                "num_values_explored": 2775,
                "num_values_kept": 771,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 21912
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08347981818952,
            "num_unique_values": 1247,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.79260780287474,
                "explored_percent_lambda": 22.628336755646817,
                "explored_percent_none": 14.57905544147844,
                "kept_percent_concrete": 62.47987117552335,
                "kept_percent_lambda": 37.52012882447665,
                "num_examples": 3,
                "num_explored_concrete": 3058,
                "num_explored_lambda": 1102,
                "num_explored_none": 710,
                "num_inputs": 1,
                "num_kept_concrete": 776,
                "num_kept_lambda": 466,
                "num_values_explored": 4870,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50011
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.65305023500696,
            "num_unique_values": 500,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: Greater(1, v1)))(v1), y, v1)))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 37.18772305496074,
                "explored_percent_lambda": 43.54032833690221,
                "explored_percent_none": 19.271948608137045,
                "kept_percent_concrete": 52.02429149797571,
                "kept_percent_lambda": 47.97570850202429,
                "num_examples": 3,
                "num_explored_concrete": 521,
                "num_explored_lambda": 610,
                "num_explored_none": 270,
                "num_inputs": 2,
                "num_kept_concrete": 257,
                "num_kept_lambda": 237,
                "num_values_explored": 1401,
                "num_values_kept": 494,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 18920
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.25221114093438,
            "num_unique_values": 1170,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.17190775681342,
                "explored_percent_lambda": 29.035639412997902,
                "explored_percent_none": 16.79245283018868,
                "kept_percent_concrete": 46.00858369098712,
                "kept_percent_lambda": 53.99141630901288,
                "num_examples": 3,
                "num_explored_concrete": 2584,
                "num_explored_lambda": 1385,
                "num_explored_none": 801,
                "num_inputs": 1,
                "num_kept_concrete": 536,
                "num_kept_lambda": 629,
                "num_values_explored": 4770,
                "num_values_kept": 1165,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50036
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 19.18998877913691,
            "num_unique_values": 1216,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(((lambda v1: Add(v1, v1)))(v1), v1)))(u1)), r), Sort(c))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 74.10695413231875,
                "explored_percent_lambda": 18.600718664130206,
                "explored_percent_none": 7.2923272035510465,
                "kept_percent_concrete": 69.58677685950413,
                "kept_percent_lambda": 30.41322314049587,
                "num_examples": 3,
                "num_explored_concrete": 3506,
                "num_explored_lambda": 880,
                "num_explored_none": 345,
                "num_inputs": 2,
                "num_kept_concrete": 842,
                "num_kept_lambda": 368,
                "num_values_explored": 4731,
                "num_values_kept": 1210,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11746
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91489758901298,
            "num_unique_values": 1141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.55879059350504,
                "explored_percent_lambda": 13.124300111982082,
                "explored_percent_none": 9.316909294512877,
                "kept_percent_concrete": 79.64757709251101,
                "kept_percent_lambda": 20.352422907488986,
                "num_examples": 5,
                "num_explored_concrete": 3463,
                "num_explored_lambda": 586,
                "num_explored_none": 416,
                "num_inputs": 2,
                "num_kept_concrete": 904,
                "num_kept_lambda": 231,
                "num_values_explored": 4465,
                "num_values_kept": 1135,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48517
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.56705271988176,
            "num_unique_values": 1176,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.89655172413793,
                "explored_percent_lambda": 29.55041466608468,
                "explored_percent_none": 13.55303360977739,
                "kept_percent_concrete": 46.28522630230572,
                "kept_percent_lambda": 53.71477369769428,
                "num_examples": 3,
                "num_explored_concrete": 2607,
                "num_explored_lambda": 1354,
                "num_explored_none": 621,
                "num_inputs": 1,
                "num_kept_concrete": 542,
                "num_kept_lambda": 629,
                "num_values_explored": 4582,
                "num_values_kept": 1171,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42216
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14868951495737,
            "num_unique_values": 1325,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.77294514468312,
                "explored_percent_lambda": 22.510207704597907,
                "explored_percent_none": 14.716847150718978,
                "kept_percent_concrete": 60.1213040181956,
                "kept_percent_lambda": 39.8786959818044,
                "num_examples": 3,
                "num_explored_concrete": 3536,
                "num_explored_lambda": 1268,
                "num_explored_none": 829,
                "num_inputs": 2,
                "num_kept_concrete": 793,
                "num_kept_lambda": 526,
                "num_values_explored": 5633,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55617
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0144938309677,
            "num_unique_values": 1505,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.5531235021569,
                "explored_percent_lambda": 10.832401342067422,
                "explored_percent_none": 6.614475155775683,
                "kept_percent_concrete": 83.32221480987324,
                "kept_percent_lambda": 16.67778519012675,
                "num_examples": 5,
                "num_explored_concrete": 5167,
                "num_explored_lambda": 678,
                "num_explored_none": 414,
                "num_inputs": 2,
                "num_kept_concrete": 1249,
                "num_kept_lambda": 250,
                "num_values_explored": 6259,
                "num_values_kept": 1499,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64800
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7257818421349,
            "num_unique_values": 388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.819139747797546,
                "explored_percent_lambda": 28.208671618586976,
                "explored_percent_none": 48.97218863361548,
                "kept_percent_concrete": 47.25848563968668,
                "kept_percent_lambda": 52.74151436031332,
                "num_examples": 5,
                "num_explored_concrete": 1321,
                "num_explored_lambda": 1633,
                "num_explored_none": 2835,
                "num_inputs": 1,
                "num_kept_concrete": 181,
                "num_kept_lambda": 202,
                "num_values_explored": 5789,
                "num_values_kept": 383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58430
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15488921897485852,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94619713397697,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.52849377520603,
                "explored_percent_lambda": 27.26635104331054,
                "explored_percent_none": 10.20515518148343,
                "kept_percent_concrete": 52.749638205499274,
                "kept_percent_lambda": 47.250361794500726,
                "num_examples": 3,
                "num_explored_concrete": 3566,
                "num_explored_lambda": 1555,
                "num_explored_none": 582,
                "num_inputs": 1,
                "num_kept_concrete": 729,
                "num_kept_lambda": 653,
                "num_values_explored": 5703,
                "num_values_kept": 1382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60123
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.12452847394160926,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8742394510191,
            "num_unique_values": 897,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.99770567027204,
                "explored_percent_lambda": 30.35070468698787,
                "explored_percent_none": 12.651589642740085,
                "kept_percent_concrete": 53.36322869955157,
                "kept_percent_lambda": 46.63677130044843,
                "num_examples": 3,
                "num_explored_concrete": 1739,
                "num_explored_lambda": 926,
                "num_explored_none": 386,
                "num_inputs": 1,
                "num_kept_concrete": 476,
                "num_kept_lambda": 416,
                "num_values_explored": 3051,
                "num_values_kept": 892,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42604
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.64795934013091,
            "num_unique_values": 418,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u2, u1)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.757009345794394,
                "explored_percent_lambda": 46.91588785046729,
                "explored_percent_none": 15.327102803738319,
                "kept_percent_concrete": 43.583535108958834,
                "kept_percent_lambda": 56.416464891041166,
                "num_examples": 3,
                "num_explored_concrete": 404,
                "num_explored_lambda": 502,
                "num_explored_none": 164,
                "num_inputs": 1,
                "num_kept_concrete": 180,
                "num_kept_lambda": 233,
                "num_values_explored": 1070,
                "num_values_kept": 413,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 8469
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.98714794195257,
            "num_unique_values": 944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.73284231670573,
                "explored_percent_lambda": 34.58319383997322,
                "explored_percent_none": 11.683963843321058,
                "kept_percent_concrete": 46.538871139510114,
                "kept_percent_lambda": 53.461128860489886,
                "num_examples": 3,
                "num_explored_concrete": 1605,
                "num_explored_lambda": 1033,
                "num_explored_none": 349,
                "num_inputs": 1,
                "num_kept_concrete": 437,
                "num_kept_lambda": 502,
                "num_values_explored": 2987,
                "num_values_kept": 939,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29725
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.65246184100397,
            "num_unique_values": 970,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.901356350184955,
                "explored_percent_lambda": 32.52157829839704,
                "explored_percent_none": 12.577065351418003,
                "kept_percent_concrete": 57.053941908713696,
                "kept_percent_lambda": 42.946058091286304,
                "num_examples": 3,
                "num_explored_concrete": 1781,
                "num_explored_lambda": 1055,
                "num_explored_none": 408,
                "num_inputs": 2,
                "num_kept_concrete": 550,
                "num_kept_lambda": 414,
                "num_values_explored": 3244,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26448
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 36.72083759587258,
            "num_unique_values": 412,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u2, u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.87141615986099,
                "explored_percent_lambda": 38.31450912250217,
                "explored_percent_none": 13.814074717636837,
                "kept_percent_concrete": 57.002457002457,
                "kept_percent_lambda": 42.997542997543,
                "num_examples": 5,
                "num_explored_concrete": 551,
                "num_explored_lambda": 441,
                "num_explored_none": 159,
                "num_inputs": 1,
                "num_kept_concrete": 232,
                "num_kept_lambda": 175,
                "num_values_explored": 1151,
                "num_values_kept": 407,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 11390
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2755261240527,
            "num_unique_values": 541,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.887624466571836,
                "explored_percent_lambda": 43.95448079658606,
                "explored_percent_none": 13.157894736842104,
                "kept_percent_concrete": 47.94776119402985,
                "kept_percent_lambda": 52.05223880597015,
                "num_examples": 3,
                "num_explored_concrete": 603,
                "num_explored_lambda": 618,
                "num_explored_none": 185,
                "num_inputs": 1,
                "num_kept_concrete": 257,
                "num_kept_lambda": 279,
                "num_values_explored": 1406,
                "num_values_kept": 536,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 22128
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14691325905733,
            "num_unique_values": 703,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.0073664825046,
                "explored_percent_lambda": 38.58195211786372,
                "explored_percent_none": 14.410681399631676,
                "kept_percent_concrete": 50.429799426934096,
                "kept_percent_lambda": 49.570200573065904,
                "num_examples": 3,
                "num_explored_concrete": 1021,
                "num_explored_lambda": 838,
                "num_explored_none": 313,
                "num_inputs": 1,
                "num_kept_concrete": 352,
                "num_kept_lambda": 346,
                "num_values_explored": 2172,
                "num_values_kept": 698,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13486
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.48533075512387,
            "num_unique_values": 634,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.77562326869806,
                "explored_percent_lambda": 26.64819944598338,
                "explored_percent_none": 12.57617728531856,
                "kept_percent_concrete": 71.97452229299363,
                "kept_percent_lambda": 28.02547770700637,
                "num_examples": 5,
                "num_explored_concrete": 1097,
                "num_explored_lambda": 481,
                "num_explored_none": 227,
                "num_inputs": 2,
                "num_kept_concrete": 452,
                "num_kept_lambda": 176,
                "num_values_explored": 1805,
                "num_values_kept": 628,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 19849
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.16812543896958,
            "num_unique_values": 624,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.948640483383684,
                "explored_percent_lambda": 41.329305135951664,
                "explored_percent_none": 11.722054380664652,
                "kept_percent_concrete": 50.80906148867314,
                "kept_percent_lambda": 49.19093851132686,
                "num_examples": 3,
                "num_explored_concrete": 777,
                "num_explored_lambda": 684,
                "num_explored_none": 194,
                "num_inputs": 2,
                "num_kept_concrete": 314,
                "num_kept_lambda": 304,
                "num_values_explored": 1655,
                "num_values_kept": 618,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 21251
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.15492510097101,
            "num_unique_values": 640,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.36221158032216,
                "explored_percent_lambda": 27.514148889856333,
                "explored_percent_none": 28.123639529821506,
                "kept_percent_concrete": 67.35015772870662,
                "kept_percent_lambda": 32.64984227129337,
                "num_examples": 5,
                "num_explored_concrete": 1019,
                "num_explored_lambda": 632,
                "num_explored_none": 646,
                "num_inputs": 2,
                "num_kept_concrete": 427,
                "num_kept_lambda": 207,
                "num_values_explored": 2297,
                "num_values_kept": 634,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27291
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.23745771218091,
            "num_unique_values": 319,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.14760147601476,
                "explored_percent_lambda": 49.53874538745387,
                "explored_percent_none": 15.313653136531366,
                "kept_percent_concrete": 57.50798722044728,
                "kept_percent_lambda": 42.49201277955272,
                "num_examples": 5,
                "num_explored_concrete": 381,
                "num_explored_lambda": 537,
                "num_explored_none": 166,
                "num_inputs": 2,
                "num_kept_concrete": 180,
                "num_kept_lambda": 133,
                "num_values_explored": 1084,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 24784
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.80890755797736,
            "num_unique_values": 227,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 25.888324873096447,
                "explored_percent_lambda": 46.90355329949239,
                "explored_percent_none": 27.20812182741117,
                "kept_percent_concrete": 49.7737556561086,
                "kept_percent_lambda": 50.2262443438914,
                "num_examples": 5,
                "num_explored_concrete": 255,
                "num_explored_lambda": 462,
                "num_explored_none": 268,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 111,
                "num_values_explored": 985,
                "num_values_kept": 221,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 12564
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}