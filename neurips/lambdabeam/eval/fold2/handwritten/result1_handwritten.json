{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.7258293668273836,
            "num_unique_values": 302,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.19551934826884,
                "explored_percent_lambda": 46.84317718940937,
                "explored_percent_none": 8.961303462321792,
                "kept_percent_concrete": 40.4040404040404,
                "kept_percent_lambda": 59.5959595959596,
                "num_examples": 3,
                "num_explored_concrete": 217,
                "num_explored_lambda": 230,
                "num_explored_none": 44,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 177,
                "num_values_explored": 491,
                "num_values_kept": 297,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22501850686967373,
            "num_unique_values": 129,
            "solution": "Multiply(k, Add(1, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.75257731958763,
                "explored_percent_lambda": 16.83848797250859,
                "explored_percent_none": 41.40893470790378,
                "kept_percent_concrete": 69.91869918699187,
                "kept_percent_lambda": 30.08130081300813,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 98,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 86,
                "num_kept_lambda": 37,
                "num_values_explored": 582,
                "num_values_kept": 123,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 582
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30391687201336026,
            "num_unique_values": 162,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(-1, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.05982905982906,
                "explored_percent_lambda": 57.69230769230769,
                "explored_percent_none": 13.247863247863247,
                "kept_percent_concrete": 28.02547770700637,
                "kept_percent_lambda": 71.97452229299363,
                "num_examples": 3,
                "num_explored_concrete": 68,
                "num_explored_lambda": 135,
                "num_explored_none": 31,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 113,
                "num_values_explored": 234,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 234
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05443776003085,
            "num_unique_values": 1207,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.88342440801457,
                "explored_percent_lambda": 28.797814207650273,
                "explored_percent_none": 15.318761384335154,
                "kept_percent_concrete": 50.66555740432612,
                "kept_percent_lambda": 49.33444259567388,
                "num_examples": 3,
                "num_explored_concrete": 3068,
                "num_explored_lambda": 1581,
                "num_explored_none": 841,
                "num_inputs": 1,
                "num_kept_concrete": 609,
                "num_kept_lambda": 593,
                "num_values_explored": 5490,
                "num_values_kept": 1202,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57396
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3023161899764091,
            "num_unique_values": 272,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.33056133056133,
                "explored_percent_lambda": 32.224532224532226,
                "explored_percent_none": 6.444906444906445,
                "kept_percent_concrete": 56.390977443609025,
                "kept_percent_lambda": 43.609022556390975,
                "num_examples": 3,
                "num_explored_concrete": 295,
                "num_explored_lambda": 155,
                "num_explored_none": 31,
                "num_inputs": 2,
                "num_kept_concrete": 150,
                "num_kept_lambda": 116,
                "num_values_explored": 481,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 481
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9617838000413,
            "num_unique_values": 1337,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.63218040530245,
                "explored_percent_lambda": 14.368429072070699,
                "explored_percent_none": 7.999390522626848,
                "kept_percent_concrete": 74.77477477477477,
                "kept_percent_lambda": 25.225225225225227,
                "num_examples": 5,
                "num_explored_concrete": 5095,
                "num_explored_lambda": 943,
                "num_explored_none": 525,
                "num_inputs": 1,
                "num_kept_concrete": 996,
                "num_kept_lambda": 336,
                "num_values_explored": 6563,
                "num_values_kept": 1332,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66363
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15781386895105243,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.926380368098158,
                "explored_percent_lambda": 66.25766871165644,
                "explored_percent_none": 9.815950920245399,
                "kept_percent_concrete": 16.513761467889907,
                "kept_percent_lambda": 83.4862385321101,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 108,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 91,
                "num_values_explored": 163,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 163
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89854969200678,
            "num_unique_values": 1247,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.15372424722662,
                "explored_percent_lambda": 16.973058637083994,
                "explored_percent_none": 9.873217115689382,
                "kept_percent_concrete": 69.48470209339774,
                "kept_percent_lambda": 30.515297906602253,
                "num_examples": 5,
                "num_explored_concrete": 4616,
                "num_explored_lambda": 1071,
                "num_explored_none": 623,
                "num_inputs": 1,
                "num_kept_concrete": 863,
                "num_kept_lambda": 379,
                "num_values_explored": 6310,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65049
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84159589908086,
            "num_unique_values": 1368,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.12022367194781,
                "explored_percent_lambda": 12.255358807082946,
                "explored_percent_none": 10.624417520969246,
                "kept_percent_concrete": 77.98972853998532,
                "kept_percent_lambda": 22.010271460014675,
                "num_examples": 5,
                "num_explored_concrete": 4965,
                "num_explored_lambda": 789,
                "num_explored_none": 684,
                "num_inputs": 1,
                "num_kept_concrete": 1063,
                "num_kept_lambda": 300,
                "num_values_explored": 6438,
                "num_values_kept": 1363,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65794
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.246149288956076,
            "num_unique_values": 261,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.344992050874403,
                "explored_percent_lambda": 62.00317965023847,
                "explored_percent_none": 10.651828298887123,
                "kept_percent_concrete": 35.546875,
                "kept_percent_lambda": 64.453125,
                "num_examples": 3,
                "num_explored_concrete": 172,
                "num_explored_lambda": 390,
                "num_explored_none": 67,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 165,
                "num_values_explored": 629,
                "num_values_kept": 256,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13238
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.423838063841686,
            "num_unique_values": 1252,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, Access(i, x))))(u1)), Reverse(Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 78.97483690587138,
                "explored_percent_lambda": 9.972041006523765,
                "explored_percent_none": 11.053122087604846,
                "kept_percent_concrete": 83.30658105939006,
                "kept_percent_lambda": 16.693418940609952,
                "num_examples": 5,
                "num_explored_concrete": 4237,
                "num_explored_lambda": 535,
                "num_explored_none": 593,
                "num_inputs": 2,
                "num_kept_concrete": 1038,
                "num_kept_lambda": 208,
                "num_values_explored": 5365,
                "num_values_kept": 1246,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 33893
            },
            "success": true,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8068588890601,
            "num_unique_values": 1439,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.05261365571258,
                "explored_percent_lambda": 22.680061297462967,
                "explored_percent_none": 10.267325046824451,
                "kept_percent_concrete": 59.73482205163992,
                "kept_percent_lambda": 40.26517794836008,
                "num_examples": 3,
                "num_explored_concrete": 3938,
                "num_explored_lambda": 1332,
                "num_explored_none": 603,
                "num_inputs": 2,
                "num_kept_concrete": 856,
                "num_kept_lambda": 577,
                "num_values_explored": 5873,
                "num_values_kept": 1433,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61346
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.226599334971979,
            "num_unique_values": 868,
            "solution": "Min(Maximum(Drop(Square(Add(-1, -1)), x)), Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 14,
            "stats": {
                "explored_percent_concrete": 68.98967551622418,
                "explored_percent_lambda": 17.514749262536874,
                "explored_percent_none": 13.495575221238939,
                "kept_percent_concrete": 75.89803012746233,
                "kept_percent_lambda": 24.10196987253766,
                "num_examples": 5,
                "num_explored_concrete": 1871,
                "num_explored_lambda": 475,
                "num_explored_none": 366,
                "num_inputs": 1,
                "num_kept_concrete": 655,
                "num_kept_lambda": 208,
                "num_values_explored": 2712,
                "num_values_kept": 863,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4392
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.867737520951778,
            "num_unique_values": 1051,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(Multiply(-1, Last(x)), v1)))(u1)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 70.92050209205021,
                "explored_percent_lambda": 20.475941422594143,
                "explored_percent_none": 8.603556485355648,
                "kept_percent_concrete": 67.20841300191205,
                "kept_percent_lambda": 32.79158699808795,
                "num_examples": 3,
                "num_explored_concrete": 2712,
                "num_explored_lambda": 783,
                "num_explored_none": 329,
                "num_inputs": 1,
                "num_kept_concrete": 703,
                "num_kept_lambda": 343,
                "num_values_explored": 3824,
                "num_values_kept": 1046,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11746
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 96.8027248159051,
            "num_unique_values": 1047,
            "solution": "Filter((lambda u1: ((lambda v1: Equal(y, ((lambda v1: Access(v1, x)))(v1))))(u1)), i)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 69.0632911392405,
                "explored_percent_lambda": 19.696202531645568,
                "explored_percent_none": 11.240506329113924,
                "kept_percent_concrete": 68.9423076923077,
                "kept_percent_lambda": 31.057692307692307,
                "num_examples": 3,
                "num_explored_concrete": 2728,
                "num_explored_lambda": 778,
                "num_explored_none": 444,
                "num_inputs": 3,
                "num_kept_concrete": 717,
                "num_kept_lambda": 323,
                "num_values_explored": 3950,
                "num_values_kept": 1040,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62193
            },
            "success": true,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87384019396268,
            "num_unique_values": 1391,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.25787106446776,
                "explored_percent_lambda": 13.9880059970015,
                "explored_percent_none": 11.754122938530735,
                "kept_percent_concrete": 65.39017341040463,
                "kept_percent_lambda": 34.60982658959538,
                "num_examples": 3,
                "num_explored_concrete": 4953,
                "num_explored_lambda": 933,
                "num_explored_none": 784,
                "num_inputs": 3,
                "num_kept_concrete": 905,
                "num_kept_lambda": 479,
                "num_values_explored": 6670,
                "num_values_kept": 1384,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66971
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77703538793139,
            "num_unique_values": 1341,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.54108338405356,
                "explored_percent_lambda": 12.325015216068168,
                "explored_percent_none": 10.13390139987827,
                "kept_percent_concrete": 76.31184407796101,
                "kept_percent_lambda": 23.68815592203898,
                "num_examples": 3,
                "num_explored_concrete": 5096,
                "num_explored_lambda": 810,
                "num_explored_none": 666,
                "num_inputs": 3,
                "num_kept_concrete": 1018,
                "num_kept_lambda": 316,
                "num_values_explored": 6572,
                "num_values_kept": 1334,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68346
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3766577250789851,
            "num_unique_values": 305,
            "solution": "Sort(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u1, u2)), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.86150712830957,
                "explored_percent_lambda": 45.21384928716904,
                "explored_percent_none": 6.924643584521385,
                "kept_percent_concrete": 42.14046822742475,
                "kept_percent_lambda": 57.85953177257525,
                "num_examples": 3,
                "num_explored_concrete": 235,
                "num_explored_lambda": 222,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 173,
                "num_values_explored": 491,
                "num_values_kept": 299,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76253588800319,
            "num_unique_values": 1414,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.48148148148148,
                "explored_percent_lambda": 11.125635439360929,
                "explored_percent_none": 7.392883079157589,
                "kept_percent_concrete": 80.53977272727273,
                "kept_percent_lambda": 19.460227272727273,
                "num_examples": 5,
                "num_explored_concrete": 5610,
                "num_explored_lambda": 766,
                "num_explored_none": 509,
                "num_inputs": 2,
                "num_kept_concrete": 1134,
                "num_kept_lambda": 274,
                "num_values_explored": 6885,
                "num_values_kept": 1408,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67114
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00318829086609,
            "num_unique_values": 1317,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.6546633057256,
                "explored_percent_lambda": 21.750090025207058,
                "explored_percent_none": 11.59524666906734,
                "kept_percent_concrete": 64.37833714721586,
                "kept_percent_lambda": 35.621662852784134,
                "num_examples": 3,
                "num_explored_concrete": 3702,
                "num_explored_lambda": 1208,
                "num_explored_none": 644,
                "num_inputs": 2,
                "num_kept_concrete": 844,
                "num_kept_lambda": 467,
                "num_values_explored": 5554,
                "num_values_kept": 1311,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59098
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96309720305726,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.6045142296369,
                "explored_percent_lambda": 30.42198233562316,
                "explored_percent_none": 12.973503434739941,
                "kept_percent_concrete": 46.274217585692995,
                "kept_percent_lambda": 53.725782414307005,
                "num_examples": 3,
                "num_explored_concrete": 2884,
                "num_explored_lambda": 1550,
                "num_explored_none": 661,
                "num_inputs": 1,
                "num_kept_concrete": 621,
                "num_kept_lambda": 721,
                "num_values_explored": 5095,
                "num_values_kept": 1342,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51866
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.44982636417262256,
            "num_unique_values": 278,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 38.4928716904277,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 47.252747252747255,
                "kept_percent_lambda": 52.747252747252745,
                "num_examples": 3,
                "num_explored_concrete": 260,
                "num_explored_lambda": 189,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 129,
                "num_kept_lambda": 144,
                "num_values_explored": 491,
                "num_values_kept": 273,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99167092493735,
            "num_unique_values": 1678,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.65145615947672,
                "explored_percent_lambda": 13.050926646939729,
                "explored_percent_none": 9.297617193583553,
                "kept_percent_concrete": 79.90430622009569,
                "kept_percent_lambda": 20.095693779904305,
                "num_examples": 5,
                "num_explored_concrete": 4986,
                "num_explored_lambda": 838,
                "num_explored_none": 597,
                "num_inputs": 2,
                "num_kept_concrete": 1336,
                "num_kept_lambda": 336,
                "num_values_explored": 6421,
                "num_values_kept": 1672,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65397
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82592548592947,
            "num_unique_values": 1404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.30084274129432,
                "explored_percent_lambda": 18.079185880108124,
                "explored_percent_none": 9.619971378597551,
                "kept_percent_concrete": 67.6680972818312,
                "kept_percent_lambda": 32.33190271816881,
                "num_examples": 3,
                "num_explored_concrete": 4547,
                "num_explored_lambda": 1137,
                "num_explored_none": 605,
                "num_inputs": 2,
                "num_kept_concrete": 946,
                "num_kept_lambda": 452,
                "num_values_explored": 6289,
                "num_values_kept": 1398,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63087
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90230740583502,
            "num_unique_values": 1572,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.3537989255564,
                "explored_percent_lambda": 16.730621642363776,
                "explored_percent_none": 9.915579432079817,
                "kept_percent_concrete": 68.56230031948881,
                "kept_percent_lambda": 31.437699680511184,
                "num_examples": 3,
                "num_explored_concrete": 4779,
                "num_explored_lambda": 1090,
                "num_explored_none": 646,
                "num_inputs": 3,
                "num_kept_concrete": 1073,
                "num_kept_lambda": 492,
                "num_values_explored": 6515,
                "num_values_kept": 1565,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65556
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.44223549496382,
            "num_unique_values": 521,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(v1, Add(1, 1))))(v1))))(u1)), Reverse(x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.180675049636,
                "explored_percent_lambda": 31.30377233620119,
                "explored_percent_none": 11.515552614162806,
                "kept_percent_concrete": 64.14728682170542,
                "kept_percent_lambda": 35.85271317829457,
                "num_examples": 5,
                "num_explored_concrete": 864,
                "num_explored_lambda": 473,
                "num_explored_none": 174,
                "num_inputs": 1,
                "num_kept_concrete": 331,
                "num_kept_lambda": 185,
                "num_values_explored": 1511,
                "num_values_kept": 516,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 48206
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91013577813283,
            "num_unique_values": 1317,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.6946205397573,
                "explored_percent_lambda": 20.068828110849484,
                "explored_percent_none": 14.236551349393226,
                "kept_percent_concrete": 66.46341463414635,
                "kept_percent_lambda": 33.53658536585366,
                "num_examples": 3,
                "num_explored_concrete": 3627,
                "num_explored_lambda": 1108,
                "num_explored_none": 786,
                "num_inputs": 1,
                "num_kept_concrete": 872,
                "num_kept_lambda": 440,
                "num_values_explored": 5521,
                "num_values_kept": 1312,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56179
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93193848407827,
            "num_unique_values": 1447,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.150703980531894,
                "explored_percent_lambda": 26.786024682774205,
                "explored_percent_none": 12.063271336693898,
                "kept_percent_concrete": 55.23941707147814,
                "kept_percent_lambda": 44.76058292852186,
                "num_examples": 3,
                "num_explored_concrete": 3518,
                "num_explored_lambda": 1541,
                "num_explored_none": 694,
                "num_inputs": 2,
                "num_kept_concrete": 796,
                "num_kept_lambda": 645,
                "num_values_explored": 5753,
                "num_values_kept": 1441,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59633
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0081665168982,
            "num_unique_values": 1232,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.618498135984375,
                "explored_percent_lambda": 30.552103674773655,
                "explored_percent_none": 16.829398189241967,
                "kept_percent_concrete": 44.987775061124694,
                "kept_percent_lambda": 55.012224938875306,
                "num_examples": 3,
                "num_explored_concrete": 2964,
                "num_explored_lambda": 1721,
                "num_explored_none": 948,
                "num_inputs": 1,
                "num_kept_concrete": 552,
                "num_kept_lambda": 675,
                "num_values_explored": 5633,
                "num_values_kept": 1227,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57355
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.210907693952322,
            "num_unique_values": 705,
            "solution": "Take(Max(Add(-1, Head(r)), Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), c)), Sort(c))",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 59.8974358974359,
                "explored_percent_lambda": 31.435897435897434,
                "explored_percent_none": 8.666666666666666,
                "kept_percent_concrete": 61.802575107296136,
                "kept_percent_lambda": 38.197424892703864,
                "num_examples": 3,
                "num_explored_concrete": 1168,
                "num_explored_lambda": 613,
                "num_explored_none": 169,
                "num_inputs": 2,
                "num_kept_concrete": 432,
                "num_kept_lambda": 267,
                "num_values_explored": 1950,
                "num_values_kept": 699,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3350
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91568459221162,
            "num_unique_values": 1522,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.41490287039721,
                "explored_percent_lambda": 9.770948100898812,
                "explored_percent_none": 8.814149028703973,
                "kept_percent_concrete": 81.39841688654353,
                "kept_percent_lambda": 18.601583113456464,
                "num_examples": 5,
                "num_explored_concrete": 5616,
                "num_explored_lambda": 674,
                "num_explored_none": 608,
                "num_inputs": 2,
                "num_kept_concrete": 1234,
                "num_kept_lambda": 282,
                "num_values_explored": 6898,
                "num_values_kept": 1516,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70743
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99514889880084,
            "num_unique_values": 1286,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.12,
                "explored_percent_lambda": 26.595555555555556,
                "explored_percent_none": 12.284444444444444,
                "kept_percent_concrete": 48.79000780640125,
                "kept_percent_lambda": 51.20999219359875,
                "num_examples": 3,
                "num_explored_concrete": 3438,
                "num_explored_lambda": 1496,
                "num_explored_none": 691,
                "num_inputs": 1,
                "num_kept_concrete": 625,
                "num_kept_lambda": 656,
                "num_values_explored": 5625,
                "num_values_kept": 1281,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57066
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8529932431411,
            "num_unique_values": 1409,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.82251082251082,
                "explored_percent_lambda": 24.958374958374957,
                "explored_percent_none": 14.21911421911422,
                "kept_percent_concrete": 57.51960085531005,
                "kept_percent_lambda": 42.48039914468995,
                "num_examples": 3,
                "num_explored_concrete": 3653,
                "num_explored_lambda": 1499,
                "num_explored_none": 854,
                "num_inputs": 2,
                "num_kept_concrete": 807,
                "num_kept_lambda": 596,
                "num_values_explored": 6006,
                "num_values_kept": 1403,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62337
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8295417369809,
            "num_unique_values": 1638,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.69872151195108,
                "explored_percent_lambda": 11.158977209560867,
                "explored_percent_none": 6.142301278488049,
                "kept_percent_concrete": 81.92401960784314,
                "kept_percent_lambda": 18.07598039215686,
                "num_examples": 5,
                "num_explored_concrete": 5951,
                "num_explored_lambda": 803,
                "num_explored_none": 442,
                "num_inputs": 2,
                "num_kept_concrete": 1337,
                "num_kept_lambda": 295,
                "num_values_explored": 7196,
                "num_values_kept": 1632,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71990
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.62811402813531,
            "num_unique_values": 384,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 22.16388524282768,
                "explored_percent_lambda": 30.826926682917684,
                "explored_percent_none": 47.00918807425464,
                "kept_percent_concrete": 44.32717678100264,
                "kept_percent_lambda": 55.67282321899736,
                "num_examples": 5,
                "num_explored_concrete": 1182,
                "num_explored_lambda": 1644,
                "num_explored_none": 2507,
                "num_inputs": 1,
                "num_kept_concrete": 168,
                "num_kept_lambda": 211,
                "num_values_explored": 5333,
                "num_values_kept": 379,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56350
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16309787100180984,
            "num_unique_values": 170,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.241106719367586,
                "explored_percent_lambda": 26.08695652173913,
                "explored_percent_none": 10.671936758893281,
                "kept_percent_concrete": 67.6829268292683,
                "kept_percent_lambda": 32.31707317073171,
                "num_examples": 5,
                "num_explored_concrete": 160,
                "num_explored_lambda": 66,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 53,
                "num_values_explored": 253,
                "num_values_kept": 164,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01772669609636,
            "num_unique_values": 1303,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.63933836749371,
                "explored_percent_lambda": 27.36425746134484,
                "explored_percent_none": 9.996404171161453,
                "kept_percent_concrete": 53.23574730354392,
                "kept_percent_lambda": 46.76425269645608,
                "num_examples": 3,
                "num_explored_concrete": 3484,
                "num_explored_lambda": 1522,
                "num_explored_none": 556,
                "num_inputs": 1,
                "num_kept_concrete": 691,
                "num_kept_lambda": 607,
                "num_values_explored": 5562,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57568
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13607446220703423,
            "num_unique_values": 82,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.79661016949152,
                "explored_percent_lambda": 10.169491525423728,
                "explored_percent_none": 42.03389830508475,
                "kept_percent_concrete": 84.21052631578948,
                "kept_percent_lambda": 15.789473684210526,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 30,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 64,
                "num_kept_lambda": 12,
                "num_values_explored": 295,
                "num_values_kept": 76,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 295
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84535445086658,
            "num_unique_values": 1317,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.940428496777564,
                "explored_percent_lambda": 24.07246124368577,
                "explored_percent_none": 13.987110259536665,
                "kept_percent_concrete": 56.63109756097561,
                "kept_percent_lambda": 43.36890243902439,
                "num_examples": 3,
                "num_explored_concrete": 3556,
                "num_explored_lambda": 1382,
                "num_explored_none": 803,
                "num_inputs": 1,
                "num_kept_concrete": 743,
                "num_kept_lambda": 569,
                "num_values_explored": 5741,
                "num_values_kept": 1312,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60021
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.13938367902301,
            "num_unique_values": 420,
            "solution": "Take(-1, Scanl1((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u2, u1)), Drop(1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 40.831758034026464,
                "explored_percent_lambda": 46.502835538752365,
                "explored_percent_none": 12.665406427221171,
                "kept_percent_concrete": 45.78313253012048,
                "kept_percent_lambda": 54.21686746987952,
                "num_examples": 3,
                "num_explored_concrete": 432,
                "num_explored_lambda": 492,
                "num_explored_none": 134,
                "num_inputs": 1,
                "num_kept_concrete": 190,
                "num_kept_lambda": 225,
                "num_values_explored": 1058,
                "num_values_kept": 415,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 20161
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03546966798604,
            "num_unique_values": 1426,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.28798267773367,
                "explored_percent_lambda": 28.690003608805487,
                "explored_percent_none": 9.022013713460844,
                "kept_percent_concrete": 54.11681914144968,
                "kept_percent_lambda": 45.88318085855032,
                "num_examples": 3,
                "num_explored_concrete": 3452,
                "num_explored_lambda": 1590,
                "num_explored_none": 500,
                "num_inputs": 1,
                "num_kept_concrete": 769,
                "num_kept_lambda": 652,
                "num_values_explored": 5542,
                "num_values_kept": 1421,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55019
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11606996902265,
            "num_unique_values": 1466,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.980162308385935,
                "explored_percent_lambda": 29.359783588818754,
                "explored_percent_none": 12.66005410279531,
                "kept_percent_concrete": 56.78082191780822,
                "kept_percent_lambda": 43.21917808219178,
                "num_examples": 3,
                "num_explored_concrete": 3215,
                "num_explored_lambda": 1628,
                "num_explored_none": 702,
                "num_inputs": 2,
                "num_kept_concrete": 829,
                "num_kept_lambda": 631,
                "num_values_explored": 5545,
                "num_values_kept": 1460,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56264
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7599302760791034,
            "num_unique_values": 406,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.83347493627868,
                "explored_percent_lambda": 36.78844519966015,
                "explored_percent_none": 15.378079864061172,
                "kept_percent_concrete": 58.104738154613464,
                "kept_percent_lambda": 41.895261845386536,
                "num_examples": 5,
                "num_explored_concrete": 563,
                "num_explored_lambda": 433,
                "num_explored_none": 181,
                "num_inputs": 1,
                "num_kept_concrete": 233,
                "num_kept_lambda": 168,
                "num_values_explored": 1177,
                "num_values_kept": 401,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2577
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14526650100015,
            "num_unique_values": 1274,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.58608559702951,
                "explored_percent_lambda": 32.14774281805745,
                "explored_percent_none": 14.266171584913035,
                "kept_percent_concrete": 45.153664302600475,
                "kept_percent_lambda": 54.846335697399525,
                "num_examples": 3,
                "num_explored_concrete": 2742,
                "num_explored_lambda": 1645,
                "num_explored_none": 730,
                "num_inputs": 1,
                "num_kept_concrete": 573,
                "num_kept_lambda": 696,
                "num_values_explored": 5117,
                "num_values_kept": 1269,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54414
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91002968885005,
            "num_unique_values": 1326,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.7906976744186,
                "explored_percent_lambda": 25.59956395348837,
                "explored_percent_none": 11.609738372093023,
                "kept_percent_concrete": 53.82286146858441,
                "kept_percent_lambda": 46.17713853141559,
                "num_examples": 3,
                "num_explored_concrete": 3456,
                "num_explored_lambda": 1409,
                "num_explored_none": 639,
                "num_inputs": 1,
                "num_kept_concrete": 711,
                "num_kept_lambda": 610,
                "num_values_explored": 5504,
                "num_values_kept": 1321,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56904
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88463793299161,
            "num_unique_values": 1458,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.62006354970495,
                "explored_percent_lambda": 11.665910122560145,
                "explored_percent_none": 9.714026327734906,
                "kept_percent_concrete": 79.75206611570248,
                "kept_percent_lambda": 20.24793388429752,
                "num_examples": 5,
                "num_explored_concrete": 5196,
                "num_explored_lambda": 771,
                "num_explored_none": 642,
                "num_inputs": 2,
                "num_kept_concrete": 1158,
                "num_kept_lambda": 294,
                "num_values_explored": 6609,
                "num_values_kept": 1452,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68615
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95076028001495,
            "num_unique_values": 1438,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.0633931843166,
                "explored_percent_lambda": 28.65518504946867,
                "explored_percent_none": 8.28142176621473,
                "kept_percent_concrete": 52.93296089385475,
                "kept_percent_lambda": 47.06703910614525,
                "num_examples": 3,
                "num_explored_concrete": 3442,
                "num_explored_lambda": 1564,
                "num_explored_none": 452,
                "num_inputs": 2,
                "num_kept_concrete": 758,
                "num_kept_lambda": 674,
                "num_values_explored": 5458,
                "num_values_kept": 1432,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55308
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11250569997355,
            "num_unique_values": 1291,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.88497800125707,
                "explored_percent_lambda": 12.209302325581396,
                "explored_percent_none": 24.905719673161535,
                "kept_percent_concrete": 80.70038910505836,
                "kept_percent_lambda": 19.299610894941633,
                "num_examples": 5,
                "num_explored_concrete": 4002,
                "num_explored_lambda": 777,
                "num_explored_none": 1585,
                "num_inputs": 2,
                "num_kept_concrete": 1037,
                "num_kept_lambda": 248,
                "num_values_explored": 6364,
                "num_values_kept": 1285,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66857
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08265738119371,
            "num_unique_values": 1464,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.07010428736965,
                "explored_percent_lambda": 13.673232908458864,
                "explored_percent_none": 7.256662804171495,
                "kept_percent_concrete": 78.80658436213992,
                "kept_percent_lambda": 21.19341563786008,
                "num_examples": 5,
                "num_explored_concrete": 5459,
                "num_explored_lambda": 944,
                "num_explored_none": 501,
                "num_inputs": 2,
                "num_kept_concrete": 1149,
                "num_kept_lambda": 309,
                "num_values_explored": 6904,
                "num_values_kept": 1458,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70430
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.260364820016548,
            "num_unique_values": 233,
            "solution": "Count((lambda u1: ((lambda v1: Equal(v1, n)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.849462365591396,
                "explored_percent_lambda": 48.81720430107527,
                "explored_percent_none": 23.333333333333332,
                "kept_percent_concrete": 49.33920704845815,
                "kept_percent_lambda": 50.66079295154185,
                "num_examples": 5,
                "num_explored_concrete": 259,
                "num_explored_lambda": 454,
                "num_explored_none": 217,
                "num_inputs": 2,
                "num_kept_concrete": 112,
                "num_kept_lambda": 115,
                "num_values_explored": 930,
                "num_values_kept": 227,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9315
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}