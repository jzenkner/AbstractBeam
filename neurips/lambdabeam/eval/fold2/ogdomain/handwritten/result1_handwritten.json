{
    "num_tasks": 50,
    "num_tasks_solved": 15,
    "results": [
        {
            "elapsed_time": 0.6681435741484165,
            "num_unique_values": 258,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.88187372708757,
                "explored_percent_lambda": 48.26883910386965,
                "explored_percent_none": 13.84928716904277,
                "kept_percent_concrete": 41.76706827309237,
                "kept_percent_lambda": 58.23293172690763,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 237,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 145,
                "num_values_explored": 491,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.904650474898517,
            "num_unique_values": 425,
            "solution": "Min(Multiply(k, IntDivide(x, Subtract(k, 3))), Square(k))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 27.07182320441989,
                "explored_percent_lambda": 17.64798737174428,
                "explored_percent_none": 55.280189423835836,
                "kept_percent_concrete": 68.91566265060241,
                "kept_percent_lambda": 31.08433734939759,
                "num_examples": 5,
                "num_explored_concrete": 1715,
                "num_explored_lambda": 1118,
                "num_explored_none": 3502,
                "num_inputs": 2,
                "num_kept_concrete": 286,
                "num_kept_lambda": 129,
                "num_values_explored": 6335,
                "num_values_kept": 415,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 20876
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.975303438026458,
            "num_unique_values": 473,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 23.12849162011173,
                "explored_percent_lambda": 43.40782122905028,
                "explored_percent_none": 33.46368715083799,
                "kept_percent_concrete": 45.474137931034484,
                "kept_percent_lambda": 54.525862068965516,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 777,
                "num_explored_none": 599,
                "num_inputs": 1,
                "num_kept_concrete": 211,
                "num_kept_lambda": 253,
                "num_values_explored": 1790,
                "num_values_kept": 464,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3470
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84943714691326,
            "num_unique_values": 1255,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.15611814345991,
                "explored_percent_lambda": 30.87201125175809,
                "explored_percent_none": 19.971870604781998,
                "kept_percent_concrete": 51.28410914927769,
                "kept_percent_lambda": 48.71589085072231,
                "num_examples": 3,
                "num_explored_concrete": 2796,
                "num_explored_lambda": 1756,
                "num_explored_none": 1136,
                "num_inputs": 1,
                "num_kept_concrete": 639,
                "num_kept_lambda": 607,
                "num_values_explored": 5688,
                "num_values_kept": 1246,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57901
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.38098922302015126,
            "num_unique_values": 333,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.22784810126582,
                "explored_percent_lambda": 33.895921237693386,
                "explored_percent_none": 7.876230661040788,
                "kept_percent_concrete": 60.06191950464396,
                "kept_percent_lambda": 39.93808049535604,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 241,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 129,
                "num_values_explored": 711,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82802622602321,
            "num_unique_values": 1407,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.15800899364243,
                "explored_percent_lambda": 13.071794076601023,
                "explored_percent_none": 17.77019692975655,
                "kept_percent_concrete": 75.03576537911302,
                "kept_percent_lambda": 24.96423462088698,
                "num_examples": 5,
                "num_explored_concrete": 4460,
                "num_explored_lambda": 843,
                "num_explored_none": 1146,
                "num_inputs": 1,
                "num_kept_concrete": 1049,
                "num_kept_lambda": 349,
                "num_values_explored": 6449,
                "num_values_kept": 1398,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66707
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15871338383294642,
            "num_unique_values": 127,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 20.606060606060606,
                "explored_percent_lambda": 66.66666666666667,
                "explored_percent_none": 12.727272727272727,
                "kept_percent_concrete": 15.254237288135593,
                "kept_percent_lambda": 84.7457627118644,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 110,
                "num_explored_none": 21,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 100,
                "num_values_explored": 165,
                "num_values_kept": 118,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 165
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75521231791936,
            "num_unique_values": 1146,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.469727009303035,
                "explored_percent_lambda": 15.601647094707946,
                "explored_percent_none": 23.92862589598902,
                "kept_percent_concrete": 68.77748460861918,
                "kept_percent_lambda": 31.222515391380828,
                "num_examples": 5,
                "num_explored_concrete": 3965,
                "num_explored_lambda": 1023,
                "num_explored_none": 1569,
                "num_inputs": 1,
                "num_kept_concrete": 782,
                "num_kept_lambda": 355,
                "num_values_explored": 6557,
                "num_values_kept": 1137,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67699
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83260977407917,
            "num_unique_values": 1203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.81703668713588,
                "explored_percent_lambda": 14.32845221225004,
                "explored_percent_none": 23.854511100614076,
                "kept_percent_concrete": 73.36683417085428,
                "kept_percent_lambda": 26.633165829145728,
                "num_examples": 5,
                "num_explored_concrete": 3926,
                "num_explored_lambda": 910,
                "num_explored_none": 1515,
                "num_inputs": 1,
                "num_kept_concrete": 876,
                "num_kept_lambda": 318,
                "num_values_explored": 6351,
                "num_values_kept": 1194,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63696
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81133267795667,
            "num_unique_values": 1278,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.1764705882353,
                "explored_percent_lambda": 23.10924369747899,
                "explored_percent_none": 13.714285714285714,
                "kept_percent_concrete": 54.767533490937744,
                "kept_percent_lambda": 45.232466509062256,
                "num_examples": 3,
                "num_explored_concrete": 3759,
                "num_explored_lambda": 1375,
                "num_explored_none": 816,
                "num_inputs": 1,
                "num_kept_concrete": 695,
                "num_kept_lambda": 574,
                "num_values_explored": 5950,
                "num_values_kept": 1269,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61017
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83861768315546,
            "num_unique_values": 1252,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.49804275820536,
                "explored_percent_lambda": 8.76242095754291,
                "explored_percent_none": 14.73953628425173,
                "kept_percent_concrete": 86.15136876006441,
                "kept_percent_lambda": 13.848631239935587,
                "num_examples": 5,
                "num_explored_concrete": 5081,
                "num_explored_lambda": 582,
                "num_explored_none": 979,
                "num_inputs": 2,
                "num_kept_concrete": 1070,
                "num_kept_lambda": 172,
                "num_values_explored": 6642,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69246
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78847201704048,
            "num_unique_values": 1589,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.34869240348692,
                "explored_percent_lambda": 22.773972602739725,
                "explored_percent_none": 11.87733499377335,
                "kept_percent_concrete": 63.33122229259025,
                "kept_percent_lambda": 36.66877770740975,
                "num_examples": 3,
                "num_explored_concrete": 4198,
                "num_explored_lambda": 1463,
                "num_explored_none": 763,
                "num_inputs": 2,
                "num_kept_concrete": 1000,
                "num_kept_lambda": 579,
                "num_values_explored": 6424,
                "num_values_kept": 1579,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64201
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.358487247955054,
            "num_unique_values": 244,
            "solution": "Count((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 30.151338766006983,
                "explored_percent_lambda": 42.49126891734575,
                "explored_percent_none": 27.357392316647264,
                "kept_percent_concrete": 49.361702127659576,
                "kept_percent_lambda": 50.638297872340424,
                "num_examples": 5,
                "num_explored_concrete": 259,
                "num_explored_lambda": 365,
                "num_explored_none": 235,
                "num_inputs": 1,
                "num_kept_concrete": 116,
                "num_kept_lambda": 119,
                "num_values_explored": 859,
                "num_values_kept": 235,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3379
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.5125502650626,
            "num_unique_values": 1058,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Filter((lambda u1: ((lambda v1: Greater(2, v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.49937609183928,
                "explored_percent_lambda": 26.204142750187174,
                "explored_percent_none": 16.296481157973545,
                "kept_percent_concrete": 57.959961868446136,
                "kept_percent_lambda": 42.040038131553864,
                "num_examples": 3,
                "num_explored_concrete": 2304,
                "num_explored_lambda": 1050,
                "num_explored_none": 653,
                "num_inputs": 1,
                "num_kept_concrete": 608,
                "num_kept_lambda": 441,
                "num_values_explored": 4007,
                "num_values_kept": 1049,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11179
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65879446594045,
            "num_unique_values": 1530,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.57630979498862,
                "explored_percent_lambda": 15.632118451025057,
                "explored_percent_none": 10.791571753986332,
                "kept_percent_concrete": 70.7044107965767,
                "kept_percent_lambda": 29.295589203423305,
                "num_examples": 3,
                "num_explored_concrete": 5168,
                "num_explored_lambda": 1098,
                "num_explored_none": 758,
                "num_inputs": 3,
                "num_kept_concrete": 1074,
                "num_kept_lambda": 445,
                "num_values_explored": 7024,
                "num_values_kept": 1519,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70916
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78272686316632,
            "num_unique_values": 1354,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.499019755692956,
                "explored_percent_lambda": 22.063037249283667,
                "explored_percent_none": 16.437942995023374,
                "kept_percent_concrete": 63.812360387192854,
                "kept_percent_lambda": 36.187639612807146,
                "num_examples": 3,
                "num_explored_concrete": 4078,
                "num_explored_lambda": 1463,
                "num_explored_none": 1090,
                "num_inputs": 3,
                "num_kept_concrete": 857,
                "num_kept_lambda": 486,
                "num_values_explored": 6631,
                "num_values_kept": 1343,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67572
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78055735607632,
            "num_unique_values": 1427,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.09812299710056,
                "explored_percent_lambda": 17.884938196245994,
                "explored_percent_none": 13.01693880665344,
                "kept_percent_concrete": 67.16101694915254,
                "kept_percent_lambda": 32.83898305084746,
                "num_examples": 3,
                "num_explored_concrete": 4528,
                "num_explored_lambda": 1172,
                "num_explored_none": 853,
                "num_inputs": 3,
                "num_kept_concrete": 951,
                "num_kept_lambda": 465,
                "num_values_explored": 6553,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66842
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80951408296824,
            "num_unique_values": 1339,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.009038619556286,
                "explored_percent_lambda": 29.022185702547247,
                "explored_percent_none": 13.968775677896467,
                "kept_percent_concrete": 56.50865312264861,
                "kept_percent_lambda": 43.49134687735139,
                "num_examples": 3,
                "num_explored_concrete": 3469,
                "num_explored_lambda": 1766,
                "num_explored_none": 850,
                "num_inputs": 2,
                "num_kept_concrete": 751,
                "num_kept_lambda": 578,
                "num_values_explored": 6085,
                "num_values_kept": 1329,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62735
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93080015806481,
            "num_unique_values": 1380,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.38859079356114,
                "explored_percent_lambda": 13.117763343688223,
                "explored_percent_none": 22.493645862750636,
                "kept_percent_concrete": 77.88321167883211,
                "kept_percent_lambda": 22.116788321167885,
                "num_examples": 5,
                "num_explored_concrete": 4560,
                "num_explored_lambda": 929,
                "num_explored_none": 1593,
                "num_inputs": 2,
                "num_kept_concrete": 1067,
                "num_kept_lambda": 303,
                "num_values_explored": 7082,
                "num_values_kept": 1370,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71906
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01027679606341,
            "num_unique_values": 1489,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.154728269901945,
                "explored_percent_lambda": 26.574705002492937,
                "explored_percent_none": 16.270566727605118,
                "kept_percent_concrete": 57.2684246112238,
                "kept_percent_lambda": 42.7315753887762,
                "num_examples": 3,
                "num_explored_concrete": 3439,
                "num_explored_lambda": 1599,
                "num_explored_none": 979,
                "num_inputs": 2,
                "num_kept_concrete": 847,
                "num_kept_lambda": 632,
                "num_values_explored": 6017,
                "num_values_kept": 1479,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62088
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93796374602243,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.791090111373606,
                "explored_percent_lambda": 23.506581167735405,
                "explored_percent_none": 13.70232872089099,
                "kept_percent_concrete": 55.950653120464445,
                "kept_percent_lambda": 44.049346879535555,
                "num_examples": 3,
                "num_explored_concrete": 3721,
                "num_explored_lambda": 1393,
                "num_explored_none": 812,
                "num_inputs": 1,
                "num_kept_concrete": 771,
                "num_kept_lambda": 607,
                "num_values_explored": 5926,
                "num_values_kept": 1378,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61086
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.32724050199612975,
            "num_unique_values": 272,
            "solution": "Sort(Reverse(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 46.435845213849284,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 41.444866920152094,
                "kept_percent_lambda": 58.555133079847906,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 228,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 154,
                "num_values_explored": 491,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86701794317923,
            "num_unique_values": 1453,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.91742552863096,
                "explored_percent_lambda": 11.220867417811391,
                "explored_percent_none": 23.861707053557648,
                "kept_percent_concrete": 80.59598059598059,
                "kept_percent_lambda": 19.404019404019405,
                "num_examples": 5,
                "num_explored_concrete": 4206,
                "num_explored_lambda": 727,
                "num_explored_none": 1546,
                "num_inputs": 2,
                "num_kept_concrete": 1163,
                "num_kept_lambda": 280,
                "num_values_explored": 6479,
                "num_values_kept": 1443,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67265
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86526520783082,
            "num_unique_values": 1530,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.44,
                "explored_percent_lambda": 23.392,
                "explored_percent_none": 11.168,
                "kept_percent_concrete": 59.93421052631579,
                "kept_percent_lambda": 40.06578947368421,
                "num_examples": 3,
                "num_explored_concrete": 4090,
                "num_explored_lambda": 1462,
                "num_explored_none": 698,
                "num_inputs": 2,
                "num_kept_concrete": 911,
                "num_kept_lambda": 609,
                "num_values_explored": 6250,
                "num_values_kept": 1520,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63013
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80324139003642,
            "num_unique_values": 1499,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.69847488456695,
                "explored_percent_lambda": 17.99356373303484,
                "explored_percent_none": 17.307961382398208,
                "kept_percent_concrete": 67.94354838709677,
                "kept_percent_lambda": 32.056451612903224,
                "num_examples": 3,
                "num_explored_concrete": 4624,
                "num_explored_lambda": 1286,
                "num_explored_none": 1237,
                "num_inputs": 3,
                "num_kept_concrete": 1011,
                "num_kept_lambda": 477,
                "num_values_explored": 7147,
                "num_values_kept": 1488,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73179
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.46431517903693,
            "num_unique_values": 1207,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(v1, 2)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.52664576802508,
                "explored_percent_lambda": 13.244514106583072,
                "explored_percent_none": 23.228840125391848,
                "kept_percent_concrete": 74.62437395659433,
                "kept_percent_lambda": 25.375626043405678,
                "num_examples": 5,
                "num_explored_concrete": 4053,
                "num_explored_lambda": 845,
                "num_explored_none": 1482,
                "num_inputs": 1,
                "num_kept_concrete": 894,
                "num_kept_lambda": 304,
                "num_values_explored": 6380,
                "num_values_kept": 1198,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 14220
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97910369117744,
            "num_unique_values": 1562,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.57004519044545,
                "explored_percent_lambda": 25.080697224015495,
                "explored_percent_none": 16.349257585539057,
                "kept_percent_concrete": 60.07726980038635,
                "kept_percent_lambda": 39.92273019961365,
                "num_examples": 3,
                "num_explored_concrete": 3629,
                "num_explored_lambda": 1554,
                "num_explored_none": 1013,
                "num_inputs": 1,
                "num_kept_concrete": 933,
                "num_kept_lambda": 620,
                "num_values_explored": 6196,
                "num_values_kept": 1553,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62144
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79230234702118,
            "num_unique_values": 1352,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.30769230769231,
                "explored_percent_lambda": 27.38115816767502,
                "explored_percent_none": 20.311149524632672,
                "kept_percent_concrete": 56.929955290611026,
                "kept_percent_lambda": 43.070044709388974,
                "num_examples": 3,
                "num_explored_concrete": 3026,
                "num_explored_lambda": 1584,
                "num_explored_none": 1175,
                "num_inputs": 2,
                "num_kept_concrete": 764,
                "num_kept_lambda": 578,
                "num_values_explored": 5785,
                "num_values_kept": 1342,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59072
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.47667648899369,
            "num_unique_values": 801,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Subtract(v1, -1)))(u1)), Reverse(Scanl1((lambda u1, u2: 0), x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.43219542749765,
                "explored_percent_lambda": 36.4547447541497,
                "explored_percent_none": 23.113059818352646,
                "kept_percent_concrete": 50.25252525252525,
                "kept_percent_lambda": 49.74747474747475,
                "num_examples": 3,
                "num_explored_concrete": 1291,
                "num_explored_lambda": 1164,
                "num_explored_none": 738,
                "num_inputs": 1,
                "num_kept_concrete": 398,
                "num_kept_lambda": 394,
                "num_values_explored": 3193,
                "num_values_kept": 792,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10693
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.68034174083732,
            "num_unique_values": 433,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 39.71830985915493,
                "explored_percent_lambda": 43.84976525821596,
                "explored_percent_none": 16.431924882629108,
                "kept_percent_concrete": 48.463356973995275,
                "kept_percent_lambda": 51.536643026004725,
                "num_examples": 3,
                "num_explored_concrete": 423,
                "num_explored_lambda": 467,
                "num_explored_none": 175,
                "num_inputs": 2,
                "num_kept_concrete": 205,
                "num_kept_lambda": 218,
                "num_values_explored": 1065,
                "num_values_kept": 423,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8873
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71018361416645,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.88230918018152,
                "explored_percent_lambda": 10.072905817586669,
                "explored_percent_none": 19.044785002231812,
                "kept_percent_concrete": 80.7720861172977,
                "kept_percent_lambda": 19.2279138827023,
                "num_examples": 5,
                "num_explored_concrete": 4764,
                "num_explored_lambda": 677,
                "num_explored_none": 1280,
                "num_inputs": 2,
                "num_kept_concrete": 1088,
                "num_kept_lambda": 259,
                "num_values_explored": 6721,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66885
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80626860912889,
            "num_unique_values": 1380,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.89182434844698,
                "explored_percent_lambda": 28.168511245983577,
                "explored_percent_none": 18.939664405569438,
                "kept_percent_concrete": 51.568198395331876,
                "kept_percent_lambda": 48.431801604668124,
                "num_examples": 3,
                "num_explored_concrete": 2963,
                "num_explored_lambda": 1578,
                "num_explored_none": 1061,
                "num_inputs": 1,
                "num_kept_concrete": 707,
                "num_kept_lambda": 664,
                "num_values_explored": 5602,
                "num_values_kept": 1371,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58953
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89194317883812,
            "num_unique_values": 1344,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.49156897382367,
                "explored_percent_lambda": 24.04046892564638,
                "explored_percent_none": 18.46796210052995,
                "kept_percent_concrete": 61.24437781109445,
                "kept_percent_lambda": 38.75562218890555,
                "num_examples": 3,
                "num_explored_concrete": 3580,
                "num_explored_lambda": 1497,
                "num_explored_none": 1150,
                "num_inputs": 2,
                "num_kept_concrete": 817,
                "num_kept_lambda": 517,
                "num_values_explored": 6227,
                "num_values_kept": 1334,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65632
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.845089999958873,
            "num_unique_values": 449,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 42.857142857142854,
                "explored_percent_lambda": 30.819434372733866,
                "explored_percent_none": 26.323422770123276,
                "kept_percent_concrete": 65.14806378132118,
                "kept_percent_lambda": 34.851936218678816,
                "num_examples": 5,
                "num_explored_concrete": 591,
                "num_explored_lambda": 425,
                "num_explored_none": 363,
                "num_inputs": 2,
                "num_kept_concrete": 286,
                "num_kept_lambda": 153,
                "num_values_explored": 1379,
                "num_values_kept": 439,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10031
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.50829271716066,
            "num_unique_values": 385,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 18.7034148032588,
                "explored_percent_lambda": 25.758363667880047,
                "explored_percent_none": 55.53822152886116,
                "kept_percent_concrete": 53.723404255319146,
                "kept_percent_lambda": 46.276595744680854,
                "num_examples": 5,
                "num_explored_concrete": 1079,
                "num_explored_lambda": 1486,
                "num_explored_none": 3204,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 174,
                "num_values_explored": 5769,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58737
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.12898139702156186,
            "num_unique_values": 143,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.84584980237154,
                "explored_percent_lambda": 17.786561264822133,
                "explored_percent_none": 19.367588932806324,
                "kept_percent_concrete": 75.93984962406014,
                "kept_percent_lambda": 24.06015037593985,
                "num_examples": 5,
                "num_explored_concrete": 159,
                "num_explored_lambda": 45,
                "num_explored_none": 49,
                "num_inputs": 2,
                "num_kept_concrete": 101,
                "num_kept_lambda": 32,
                "num_values_explored": 253,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8870233350899,
            "num_unique_values": 1386,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.8511354079058,
                "explored_percent_lambda": 28.040370058873002,
                "explored_percent_none": 19.108494533221194,
                "kept_percent_concrete": 56.13652868554829,
                "kept_percent_lambda": 43.86347131445171,
                "num_examples": 3,
                "num_explored_concrete": 3142,
                "num_explored_lambda": 1667,
                "num_explored_none": 1136,
                "num_inputs": 1,
                "num_kept_concrete": 773,
                "num_kept_lambda": 604,
                "num_values_explored": 5945,
                "num_values_kept": 1377,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60161
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.880377754103392,
            "num_unique_values": 279,
            "solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 17.780645161290323,
                "explored_percent_lambda": 21.858064516129033,
                "explored_percent_none": 60.36129032258064,
                "kept_percent_concrete": 62.0817843866171,
                "kept_percent_lambda": 37.9182156133829,
                "num_examples": 5,
                "num_explored_concrete": 689,
                "num_explored_lambda": 847,
                "num_explored_none": 2339,
                "num_inputs": 2,
                "num_kept_concrete": 167,
                "num_kept_lambda": 102,
                "num_values_explored": 3875,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 16960
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93315929197706,
            "num_unique_values": 1383,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.92503002230228,
                "explored_percent_lambda": 28.32389775261623,
                "explored_percent_none": 18.75107222508149,
                "kept_percent_concrete": 56.11353711790393,
                "kept_percent_lambda": 43.88646288209607,
                "num_examples": 3,
                "num_explored_concrete": 3085,
                "num_explored_lambda": 1651,
                "num_explored_none": 1093,
                "num_inputs": 1,
                "num_kept_concrete": 771,
                "num_kept_lambda": 603,
                "num_values_explored": 5829,
                "num_values_kept": 1374,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60320
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79757102811709,
            "num_unique_values": 1497,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.09332509270705,
                "explored_percent_lambda": 21.10630407911001,
                "explored_percent_none": 10.800370828182942,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 3,
                "num_explored_concrete": 4407,
                "num_explored_lambda": 1366,
                "num_explored_none": 699,
                "num_inputs": 1,
                "num_kept_concrete": 868,
                "num_kept_lambda": 620,
                "num_values_explored": 6472,
                "num_values_kept": 1488,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67458
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88742746808566,
            "num_unique_values": 1395,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.293390473050934,
                "explored_percent_lambda": 24.987638041865832,
                "explored_percent_none": 14.718971485083237,
                "kept_percent_concrete": 55.98845598845599,
                "kept_percent_lambda": 44.01154401154401,
                "num_examples": 3,
                "num_explored_concrete": 3658,
                "num_explored_lambda": 1516,
                "num_explored_none": 893,
                "num_inputs": 1,
                "num_kept_concrete": 776,
                "num_kept_lambda": 610,
                "num_values_explored": 6067,
                "num_values_kept": 1386,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60996
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97492568590678,
            "num_unique_values": 1450,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.7514361124049,
                "explored_percent_lambda": 24.778761061946902,
                "explored_percent_none": 14.469802825648191,
                "kept_percent_concrete": 59.72222222222222,
                "kept_percent_lambda": 40.27777777777778,
                "num_examples": 3,
                "num_explored_concrete": 3913,
                "num_explored_lambda": 1596,
                "num_explored_none": 932,
                "num_inputs": 2,
                "num_kept_concrete": 860,
                "num_kept_lambda": 580,
                "num_values_explored": 6441,
                "num_values_kept": 1440,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65586
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71061268518679,
            "num_unique_values": 1249,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.85136955545577,
                "explored_percent_lambda": 16.03053435114504,
                "explored_percent_none": 31.118096093399192,
                "kept_percent_concrete": 72.66129032258064,
                "kept_percent_lambda": 27.338709677419356,
                "num_examples": 5,
                "num_explored_concrete": 3531,
                "num_explored_lambda": 1071,
                "num_explored_none": 2079,
                "num_inputs": 1,
                "num_kept_concrete": 901,
                "num_kept_lambda": 339,
                "num_values_explored": 6681,
                "num_values_kept": 1240,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69985
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03744065784849,
            "num_unique_values": 1404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.402579295921925,
                "explored_percent_lambda": 28.180550714534682,
                "explored_percent_none": 16.416869989543393,
                "kept_percent_concrete": 54.121863799283155,
                "kept_percent_lambda": 45.878136200716845,
                "num_examples": 3,
                "num_explored_concrete": 3179,
                "num_explored_lambda": 1617,
                "num_explored_none": 942,
                "num_inputs": 1,
                "num_kept_concrete": 755,
                "num_kept_lambda": 640,
                "num_values_explored": 5738,
                "num_values_kept": 1395,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60311
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 89.98025779193267,
            "num_unique_values": 1276,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, 4)))(u1)), Map((lambda u1: ((lambda v1: Multiply(3, v1)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.92573434324774,
                "explored_percent_lambda": 30.66691298725291,
                "explored_percent_none": 15.407352669499353,
                "kept_percent_concrete": 55.16969218626677,
                "kept_percent_lambda": 44.83030781373323,
                "num_examples": 3,
                "num_explored_concrete": 2919,
                "num_explored_lambda": 1660,
                "num_explored_none": 834,
                "num_inputs": 1,
                "num_kept_concrete": 699,
                "num_kept_lambda": 568,
                "num_values_explored": 5413,
                "num_values_kept": 1267,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 53620
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85576317110099,
            "num_unique_values": 1310,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.36718871142813,
                "explored_percent_lambda": 10.280663668785857,
                "explored_percent_none": 21.352147619786013,
                "kept_percent_concrete": 79.61538461538461,
                "kept_percent_lambda": 20.384615384615383,
                "num_examples": 5,
                "num_explored_concrete": 4409,
                "num_explored_lambda": 663,
                "num_explored_none": 1377,
                "num_inputs": 2,
                "num_kept_concrete": 1035,
                "num_kept_lambda": 265,
                "num_values_explored": 6449,
                "num_values_kept": 1300,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70182
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1949688878376,
            "num_unique_values": 1419,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.07558979297063,
                "explored_percent_lambda": 27.170598619804206,
                "explored_percent_none": 13.753811587225165,
                "kept_percent_concrete": 60.82327892122073,
                "kept_percent_lambda": 39.17672107877927,
                "num_examples": 3,
                "num_explored_concrete": 3681,
                "num_explored_lambda": 1693,
                "num_explored_none": 857,
                "num_inputs": 2,
                "num_kept_concrete": 857,
                "num_kept_lambda": 552,
                "num_values_explored": 6231,
                "num_values_kept": 1409,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62660
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03076150687411,
            "num_unique_values": 1198,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.72532188841202,
                "explored_percent_lambda": 12.262415695892091,
                "explored_percent_none": 30.012262415695893,
                "kept_percent_concrete": 78.87205387205387,
                "kept_percent_lambda": 21.127946127946128,
                "num_examples": 5,
                "num_explored_concrete": 3766,
                "num_explored_lambda": 800,
                "num_explored_none": 1958,
                "num_inputs": 2,
                "num_kept_concrete": 937,
                "num_kept_lambda": 251,
                "num_values_explored": 6524,
                "num_values_kept": 1188,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67272
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82547519705258,
            "num_unique_values": 1338,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.74992991309223,
                "explored_percent_lambda": 8.25623773479114,
                "explored_percent_none": 15.993832352116625,
                "kept_percent_concrete": 81.62650602409639,
                "kept_percent_lambda": 18.373493975903614,
                "num_examples": 5,
                "num_explored_concrete": 5404,
                "num_explored_lambda": 589,
                "num_explored_none": 1141,
                "num_inputs": 2,
                "num_kept_concrete": 1084,
                "num_kept_lambda": 244,
                "num_values_explored": 7134,
                "num_values_kept": 1328,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72464
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71905526984483,
            "num_unique_values": 997,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.25218125527724,
                "explored_percent_lambda": 10.470025330706445,
                "explored_percent_none": 21.277793414016323,
                "kept_percent_concrete": 80.04052684903749,
                "kept_percent_lambda": 19.959473150962513,
                "num_examples": 5,
                "num_explored_concrete": 4850,
                "num_explored_lambda": 744,
                "num_explored_none": 1512,
                "num_inputs": 2,
                "num_kept_concrete": 790,
                "num_kept_lambda": 197,
                "num_values_explored": 7106,
                "num_values_kept": 987,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70725
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.3
}