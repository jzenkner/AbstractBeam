{
    "num_tasks": 50,
    "num_tasks_solved": 15,
    "results": [
        {
            "elapsed_time": 0.6266236938536167,
            "num_unique_values": 258,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.88187372708757,
                "explored_percent_lambda": 48.26883910386965,
                "explored_percent_none": 13.84928716904277,
                "kept_percent_concrete": 41.76706827309237,
                "kept_percent_lambda": 58.23293172690763,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 237,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 145,
                "num_values_explored": 491,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.009813015116379,
            "num_unique_values": 162,
            "solution": "Multiply(k, IntDivide(Add(k, x), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 16.87951138256524,
                "explored_percent_lambda": 18.212104386451973,
                "explored_percent_none": 64.90838423098279,
                "kept_percent_concrete": 69.07894736842105,
                "kept_percent_lambda": 30.92105263157895,
                "num_examples": 5,
                "num_explored_concrete": 304,
                "num_explored_lambda": 328,
                "num_explored_none": 1169,
                "num_inputs": 2,
                "num_kept_concrete": 105,
                "num_kept_lambda": 47,
                "num_values_explored": 1801,
                "num_values_kept": 152,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9733
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.095964526990429,
            "num_unique_values": 450,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 20.42042042042042,
                "explored_percent_lambda": 47.6976976976977,
                "explored_percent_none": 31.88188188188188,
                "kept_percent_concrete": 46.93877551020408,
                "kept_percent_lambda": 53.06122448979592,
                "num_examples": 3,
                "num_explored_concrete": 408,
                "num_explored_lambda": 953,
                "num_explored_none": 637,
                "num_inputs": 1,
                "num_kept_concrete": 207,
                "num_kept_lambda": 234,
                "num_values_explored": 1998,
                "num_values_kept": 441,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3678
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8412283139769,
            "num_unique_values": 1262,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.312236286919834,
                "explored_percent_lambda": 30.09282700421941,
                "explored_percent_none": 19.59493670886076,
                "kept_percent_concrete": 52.03511572226656,
                "kept_percent_lambda": 47.96488427773344,
                "num_examples": 3,
                "num_explored_concrete": 2981,
                "num_explored_lambda": 1783,
                "num_explored_none": 1161,
                "num_inputs": 1,
                "num_kept_concrete": 652,
                "num_kept_lambda": 601,
                "num_values_explored": 5925,
                "num_values_kept": 1253,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59769
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.37478055409155786,
            "num_unique_values": 333,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.22784810126582,
                "explored_percent_lambda": 33.895921237693386,
                "explored_percent_none": 7.876230661040788,
                "kept_percent_concrete": 60.06191950464396,
                "kept_percent_lambda": 39.93808049535604,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 241,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 129,
                "num_values_explored": 711,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81728816498071,
            "num_unique_values": 1375,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.95126408772464,
                "explored_percent_lambda": 13.189156259518732,
                "explored_percent_none": 16.859579652756626,
                "kept_percent_concrete": 73.13323572474378,
                "kept_percent_lambda": 26.866764275256223,
                "num_examples": 5,
                "num_explored_concrete": 4593,
                "num_explored_lambda": 866,
                "num_explored_none": 1107,
                "num_inputs": 1,
                "num_kept_concrete": 999,
                "num_kept_lambda": 367,
                "num_values_explored": 6566,
                "num_values_kept": 1366,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68342
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1587403230369091,
            "num_unique_values": 127,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 20.606060606060606,
                "explored_percent_lambda": 66.66666666666667,
                "explored_percent_none": 12.727272727272727,
                "kept_percent_concrete": 15.254237288135593,
                "kept_percent_lambda": 84.7457627118644,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 110,
                "num_explored_none": 21,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 100,
                "num_values_explored": 165,
                "num_values_kept": 118,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 165
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74640010506846,
            "num_unique_values": 1139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.0958605664488,
                "explored_percent_lambda": 14.727668845315904,
                "explored_percent_none": 21.176470588235293,
                "kept_percent_concrete": 69.91150442477876,
                "kept_percent_lambda": 30.088495575221238,
                "num_examples": 5,
                "num_explored_concrete": 4413,
                "num_explored_lambda": 1014,
                "num_explored_none": 1458,
                "num_inputs": 1,
                "num_kept_concrete": 790,
                "num_kept_lambda": 340,
                "num_values_explored": 6885,
                "num_values_kept": 1130,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69641
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83272023685277,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.63643777524058,
                "explored_percent_lambda": 16.506279562877182,
                "explored_percent_none": 24.857282661882238,
                "kept_percent_concrete": 72.03319502074689,
                "kept_percent_lambda": 27.966804979253112,
                "num_examples": 5,
                "num_explored_concrete": 3595,
                "num_explored_lambda": 1012,
                "num_explored_none": 1524,
                "num_inputs": 1,
                "num_kept_concrete": 868,
                "num_kept_lambda": 337,
                "num_values_explored": 6131,
                "num_values_kept": 1205,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63932
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00485684396699,
            "num_unique_values": 1399,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.467061923583664,
                "explored_percent_lambda": 24.75296442687747,
                "explored_percent_none": 12.779973649538867,
                "kept_percent_concrete": 53.093525179856115,
                "kept_percent_lambda": 46.906474820143885,
                "num_examples": 3,
                "num_explored_concrete": 3793,
                "num_explored_lambda": 1503,
                "num_explored_none": 776,
                "num_inputs": 1,
                "num_kept_concrete": 738,
                "num_kept_lambda": 652,
                "num_values_explored": 6072,
                "num_values_kept": 1390,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62052
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7001977879554,
            "num_unique_values": 1262,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.99236641221374,
                "explored_percent_lambda": 9.333141293389025,
                "explored_percent_none": 19.674492294397236,
                "kept_percent_concrete": 83.30670926517571,
                "kept_percent_lambda": 16.69329073482428,
                "num_examples": 5,
                "num_explored_concrete": 4929,
                "num_explored_lambda": 648,
                "num_explored_none": 1366,
                "num_inputs": 2,
                "num_kept_concrete": 1043,
                "num_kept_lambda": 209,
                "num_values_explored": 6943,
                "num_values_kept": 1252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71491
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73473321390338,
            "num_unique_values": 1598,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.57995409334353,
                "explored_percent_lambda": 22.38714613618975,
                "explored_percent_none": 11.032899770466718,
                "kept_percent_concrete": 64.4206549118388,
                "kept_percent_lambda": 35.57934508816121,
                "num_examples": 3,
                "num_explored_concrete": 4351,
                "num_explored_lambda": 1463,
                "num_explored_none": 721,
                "num_inputs": 2,
                "num_kept_concrete": 1023,
                "num_kept_lambda": 565,
                "num_values_explored": 6535,
                "num_values_kept": 1588,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67162
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.497890185099095,
            "num_unique_values": 242,
            "solution": "Count((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 25.79957356076759,
                "explored_percent_lambda": 49.04051172707889,
                "explored_percent_none": 25.15991471215352,
                "kept_percent_concrete": 45.493562231759654,
                "kept_percent_lambda": 54.506437768240346,
                "num_examples": 5,
                "num_explored_concrete": 242,
                "num_explored_lambda": 460,
                "num_explored_none": 236,
                "num_inputs": 1,
                "num_kept_concrete": 106,
                "num_kept_lambda": 127,
                "num_values_explored": 938,
                "num_values_kept": 233,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3458
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.092326925136149,
            "num_unique_values": 516,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(v1, 2)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 44.07008086253369,
                "explored_percent_lambda": 37.6010781671159,
                "explored_percent_none": 18.328840970350406,
                "kept_percent_concrete": 55.02958579881657,
                "kept_percent_lambda": 44.97041420118343,
                "num_examples": 3,
                "num_explored_concrete": 654,
                "num_explored_lambda": 558,
                "num_explored_none": 272,
                "num_inputs": 1,
                "num_kept_concrete": 279,
                "num_kept_lambda": 228,
                "num_values_explored": 1484,
                "num_values_kept": 507,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2884
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.60332686803304,
            "num_unique_values": 1511,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.01019003029468,
                "explored_percent_lambda": 15.877168824015422,
                "explored_percent_none": 11.112641145689892,
                "kept_percent_concrete": 72.2,
                "kept_percent_lambda": 27.8,
                "num_examples": 3,
                "num_explored_concrete": 5302,
                "num_explored_lambda": 1153,
                "num_explored_none": 807,
                "num_inputs": 3,
                "num_kept_concrete": 1083,
                "num_kept_lambda": 417,
                "num_values_explored": 7262,
                "num_values_kept": 1500,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73383
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70025050407276,
            "num_unique_values": 1358,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.322867298578196,
                "explored_percent_lambda": 22.348933649289098,
                "explored_percent_none": 17.328199052132703,
                "kept_percent_concrete": 62.806236080178174,
                "kept_percent_lambda": 37.193763919821826,
                "num_examples": 3,
                "num_explored_concrete": 4073,
                "num_explored_lambda": 1509,
                "num_explored_none": 1170,
                "num_inputs": 3,
                "num_kept_concrete": 846,
                "num_kept_lambda": 501,
                "num_values_explored": 6752,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69144
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75745938508771,
            "num_unique_values": 1427,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.5700365408039,
                "explored_percent_lambda": 18.49878197320341,
                "explored_percent_none": 13.931181485992692,
                "kept_percent_concrete": 65.74858757062147,
                "kept_percent_lambda": 34.25141242937853,
                "num_examples": 3,
                "num_explored_concrete": 4438,
                "num_explored_lambda": 1215,
                "num_explored_none": 915,
                "num_inputs": 3,
                "num_kept_concrete": 931,
                "num_kept_lambda": 485,
                "num_values_explored": 6568,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68388
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90769487200305,
            "num_unique_values": 1373,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.95878630537076,
                "explored_percent_lambda": 27.56774298231381,
                "explored_percent_none": 14.47347071231543,
                "kept_percent_concrete": 58.18048422597212,
                "kept_percent_lambda": 41.81951577402788,
                "num_examples": 3,
                "num_explored_concrete": 3572,
                "num_explored_lambda": 1699,
                "num_explored_none": 892,
                "num_inputs": 2,
                "num_kept_concrete": 793,
                "num_kept_lambda": 570,
                "num_values_explored": 6163,
                "num_values_kept": 1363,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64010
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88654982694425,
            "num_unique_values": 1428,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.92656587473002,
                "explored_percent_lambda": 12.32451403887689,
                "explored_percent_none": 19.74892008639309,
                "kept_percent_concrete": 78.56135401974612,
                "kept_percent_lambda": 21.438645980253877,
                "num_examples": 5,
                "num_explored_concrete": 5032,
                "num_explored_lambda": 913,
                "num_explored_none": 1463,
                "num_inputs": 2,
                "num_kept_concrete": 1114,
                "num_kept_lambda": 304,
                "num_values_explored": 7408,
                "num_values_kept": 1418,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75226
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02462194301188,
            "num_unique_values": 1471,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.03333875426899,
                "explored_percent_lambda": 27.37030411449016,
                "explored_percent_none": 17.59635713124085,
                "kept_percent_concrete": 57.426420260095824,
                "kept_percent_lambda": 42.573579739904176,
                "num_examples": 3,
                "num_explored_concrete": 3384,
                "num_explored_lambda": 1683,
                "num_explored_none": 1082,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 622,
                "num_values_explored": 6149,
                "num_values_kept": 1461,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63736
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91688943793997,
            "num_unique_values": 1446,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.34826613572258,
                "explored_percent_lambda": 24.22432387589182,
                "explored_percent_none": 12.427409988385598,
                "kept_percent_concrete": 54.488517745302715,
                "kept_percent_lambda": 45.511482254697285,
                "num_examples": 3,
                "num_explored_concrete": 3818,
                "num_explored_lambda": 1460,
                "num_explored_none": 749,
                "num_inputs": 1,
                "num_kept_concrete": 783,
                "num_kept_lambda": 654,
                "num_values_explored": 6027,
                "num_values_kept": 1437,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62026
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3294391168747097,
            "num_unique_values": 272,
            "solution": "Sort(Reverse(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 46.435845213849284,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 41.444866920152094,
                "kept_percent_lambda": 58.555133079847906,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 228,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 154,
                "num_values_explored": 491,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00796331698075,
            "num_unique_values": 1378,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.64699983285977,
                "explored_percent_lambda": 13.003509944843724,
                "explored_percent_none": 23.349490222296506,
                "kept_percent_concrete": 78.65497076023392,
                "kept_percent_lambda": 21.34502923976608,
                "num_examples": 5,
                "num_explored_concrete": 3808,
                "num_explored_lambda": 778,
                "num_explored_none": 1397,
                "num_inputs": 2,
                "num_kept_concrete": 1076,
                "num_kept_lambda": 292,
                "num_values_explored": 5983,
                "num_values_kept": 1368,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63535
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89466409594752,
            "num_unique_values": 1482,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.03710094909405,
                "explored_percent_lambda": 24.866264020707508,
                "explored_percent_none": 12.096635030198447,
                "kept_percent_concrete": 57.94836956521739,
                "kept_percent_lambda": 42.05163043478261,
                "num_examples": 3,
                "num_explored_concrete": 3653,
                "num_explored_lambda": 1441,
                "num_explored_none": 701,
                "num_inputs": 2,
                "num_kept_concrete": 853,
                "num_kept_lambda": 619,
                "num_values_explored": 5795,
                "num_values_kept": 1472,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59495
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82698497199453,
            "num_unique_values": 1424,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.58025981782888,
                "explored_percent_lambda": 20.068687472002388,
                "explored_percent_none": 17.351052710168734,
                "kept_percent_concrete": 65.18046709129511,
                "kept_percent_lambda": 34.819532908704886,
                "num_examples": 3,
                "num_explored_concrete": 4191,
                "num_explored_lambda": 1344,
                "num_explored_none": 1162,
                "num_inputs": 3,
                "num_kept_concrete": 921,
                "num_kept_lambda": 492,
                "num_values_explored": 6697,
                "num_values_kept": 1413,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69328
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 36.0318749321159,
            "num_unique_values": 755,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 50.23547880690738,
                "explored_percent_lambda": 21.915227629513343,
                "explored_percent_none": 27.849293563579277,
                "kept_percent_concrete": 67.42627345844504,
                "kept_percent_lambda": 32.57372654155496,
                "num_examples": 5,
                "num_explored_concrete": 1600,
                "num_explored_lambda": 698,
                "num_explored_none": 887,
                "num_inputs": 1,
                "num_kept_concrete": 503,
                "num_kept_lambda": 243,
                "num_values_explored": 3185,
                "num_values_kept": 746,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22982
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04176413407549,
            "num_unique_values": 1441,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.48016997167139,
                "explored_percent_lambda": 26.805949008498583,
                "explored_percent_none": 16.71388101983003,
                "kept_percent_concrete": 58.17039106145251,
                "kept_percent_lambda": 41.82960893854749,
                "num_examples": 3,
                "num_explored_concrete": 3190,
                "num_explored_lambda": 1514,
                "num_explored_none": 944,
                "num_inputs": 1,
                "num_kept_concrete": 833,
                "num_kept_lambda": 599,
                "num_values_explored": 5648,
                "num_values_kept": 1432,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58067
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85951722809114,
            "num_unique_values": 1283,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.15917934205872,
                "explored_percent_lambda": 28.829147506190306,
                "explored_percent_none": 21.011673151750973,
                "kept_percent_concrete": 57.18774548311076,
                "kept_percent_lambda": 42.81225451688924,
                "num_examples": 3,
                "num_explored_concrete": 2836,
                "num_explored_lambda": 1630,
                "num_explored_none": 1188,
                "num_inputs": 2,
                "num_kept_concrete": 728,
                "num_kept_lambda": 545,
                "num_values_explored": 5654,
                "num_values_kept": 1273,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57120
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.48224309599027,
            "num_unique_values": 505,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Add(v1, 1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 28.0,
                "explored_percent_lambda": 40.19512195121951,
                "explored_percent_none": 31.804878048780488,
                "kept_percent_concrete": 46.57258064516129,
                "kept_percent_lambda": 53.42741935483871,
                "num_examples": 3,
                "num_explored_concrete": 574,
                "num_explored_lambda": 824,
                "num_explored_none": 652,
                "num_inputs": 1,
                "num_kept_concrete": 231,
                "num_kept_lambda": 265,
                "num_values_explored": 2050,
                "num_values_kept": 496,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3730
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.860914505086839,
            "num_unique_values": 429,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsOdd(((lambda v1: Max(v1, 3)))(v1))))(u1)), c), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 39.38832252085264,
                "explored_percent_lambda": 42.53938832252085,
                "explored_percent_none": 18.072289156626507,
                "kept_percent_concrete": 49.16467780429594,
                "kept_percent_lambda": 50.83532219570406,
                "num_examples": 3,
                "num_explored_concrete": 425,
                "num_explored_lambda": 459,
                "num_explored_none": 195,
                "num_inputs": 2,
                "num_kept_concrete": 206,
                "num_kept_lambda": 213,
                "num_values_explored": 1079,
                "num_values_kept": 419,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2759
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73477482493035,
            "num_unique_values": 1317,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.05631536604987,
                "explored_percent_lambda": 10.394207562349155,
                "explored_percent_none": 19.549477071600965,
                "kept_percent_concrete": 81.1017597551645,
                "kept_percent_lambda": 18.898240244835502,
                "num_examples": 5,
                "num_explored_concrete": 4354,
                "num_explored_lambda": 646,
                "num_explored_none": 1215,
                "num_inputs": 2,
                "num_kept_concrete": 1060,
                "num_kept_lambda": 247,
                "num_values_explored": 6215,
                "num_values_kept": 1307,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64210
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83903216687031,
            "num_unique_values": 1277,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.35507246376812,
                "explored_percent_lambda": 28.297101449275363,
                "explored_percent_none": 19.347826086956523,
                "kept_percent_concrete": 53.62776025236593,
                "kept_percent_lambda": 46.37223974763407,
                "num_examples": 3,
                "num_explored_concrete": 2890,
                "num_explored_lambda": 1562,
                "num_explored_none": 1068,
                "num_inputs": 1,
                "num_kept_concrete": 680,
                "num_kept_lambda": 588,
                "num_values_explored": 5520,
                "num_values_kept": 1268,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56821
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94916037819348,
            "num_unique_values": 1321,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.10698654563138,
                "explored_percent_lambda": 22.629275409304586,
                "explored_percent_none": 17.26373804506403,
                "kept_percent_concrete": 62.92906178489702,
                "kept_percent_lambda": 37.07093821510298,
                "num_examples": 3,
                "num_explored_concrete": 3708,
                "num_explored_lambda": 1396,
                "num_explored_none": 1065,
                "num_inputs": 2,
                "num_kept_concrete": 825,
                "num_kept_lambda": 486,
                "num_values_explored": 6169,
                "num_values_kept": 1311,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63693
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.620806785067543,
            "num_unique_values": 1176,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 68.21179208688906,
                "explored_percent_lambda": 11.113266097750193,
                "explored_percent_none": 20.674941815360746,
                "kept_percent_concrete": 78.8164665523156,
                "kept_percent_lambda": 21.18353344768439,
                "num_examples": 5,
                "num_explored_concrete": 3517,
                "num_explored_lambda": 573,
                "num_explored_none": 1066,
                "num_inputs": 2,
                "num_kept_concrete": 919,
                "num_kept_lambda": 247,
                "num_values_explored": 5156,
                "num_values_kept": 1166,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 20459
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.51396344904788,
            "num_unique_values": 390,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 19.760267935836417,
                "explored_percent_lambda": 26.52917327692579,
                "explored_percent_none": 53.710558787237794,
                "kept_percent_concrete": 51.968503937007874,
                "kept_percent_lambda": 48.031496062992126,
                "num_examples": 5,
                "num_explored_concrete": 1121,
                "num_explored_lambda": 1505,
                "num_explored_none": 3047,
                "num_inputs": 1,
                "num_kept_concrete": 198,
                "num_kept_lambda": 183,
                "num_values_explored": 5673,
                "num_values_kept": 381,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57661
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13481675484217703,
            "num_unique_values": 143,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.84584980237154,
                "explored_percent_lambda": 17.786561264822133,
                "explored_percent_none": 19.367588932806324,
                "kept_percent_concrete": 75.93984962406014,
                "kept_percent_lambda": 24.06015037593985,
                "num_examples": 5,
                "num_explored_concrete": 159,
                "num_explored_lambda": 45,
                "num_explored_none": 49,
                "num_inputs": 2,
                "num_kept_concrete": 101,
                "num_kept_lambda": 32,
                "num_values_explored": 253,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.10561645193957,
            "num_unique_values": 1279,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.62345909600299,
                "explored_percent_lambda": 28.40866641763168,
                "explored_percent_none": 17.967874486365336,
                "kept_percent_concrete": 58.188976377952756,
                "kept_percent_lambda": 41.811023622047244,
                "num_examples": 3,
                "num_explored_concrete": 2871,
                "num_explored_lambda": 1521,
                "num_explored_none": 962,
                "num_inputs": 1,
                "num_kept_concrete": 739,
                "num_kept_lambda": 531,
                "num_values_explored": 5354,
                "num_values_kept": 1270,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57809
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 56.93864321289584,
            "num_unique_values": 285,
            "solution": "Subtract(Subtract(Multiply(y, x), x), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 19.339865910263022,
                "explored_percent_lambda": 21.634863331614234,
                "explored_percent_none": 59.025270758122744,
                "kept_percent_concrete": 62.90909090909091,
                "kept_percent_lambda": 37.09090909090909,
                "num_examples": 5,
                "num_explored_concrete": 750,
                "num_explored_lambda": 839,
                "num_explored_none": 2289,
                "num_inputs": 2,
                "num_kept_concrete": 173,
                "num_kept_lambda": 102,
                "num_values_explored": 3878,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 34390
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05107246199623,
            "num_unique_values": 1388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.151584912342834,
                "explored_percent_lambda": 29.67947582787321,
                "explored_percent_none": 18.168939259783958,
                "kept_percent_concrete": 54.53226976069616,
                "kept_percent_lambda": 45.46773023930384,
                "num_examples": 3,
                "num_explored_concrete": 2945,
                "num_explored_lambda": 1676,
                "num_explored_none": 1026,
                "num_inputs": 1,
                "num_kept_concrete": 752,
                "num_kept_lambda": 627,
                "num_values_explored": 5647,
                "num_values_kept": 1379,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58796
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.822901960928,
            "num_unique_values": 1504,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.03594351732991,
                "explored_percent_lambda": 21.630295250320923,
                "explored_percent_none": 10.333761232349165,
                "kept_percent_concrete": 57.123745819397996,
                "kept_percent_lambda": 42.876254180602004,
                "num_examples": 3,
                "num_explored_concrete": 4240,
                "num_explored_lambda": 1348,
                "num_explored_none": 644,
                "num_inputs": 1,
                "num_kept_concrete": 854,
                "num_kept_lambda": 641,
                "num_values_explored": 6232,
                "num_values_kept": 1495,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64856
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95682201697491,
            "num_unique_values": 1368,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.80410220754389,
                "explored_percent_lambda": 25.343299148270468,
                "explored_percent_none": 15.852598644185642,
                "kept_percent_concrete": 56.43855776306108,
                "kept_percent_lambda": 43.56144223693892,
                "num_examples": 3,
                "num_explored_concrete": 3383,
                "num_explored_lambda": 1458,
                "num_explored_none": 912,
                "num_inputs": 1,
                "num_kept_concrete": 767,
                "num_kept_lambda": 592,
                "num_values_explored": 5753,
                "num_values_kept": 1359,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58968
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01643163710833,
            "num_unique_values": 1461,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.03823720025923,
                "explored_percent_lambda": 23.671419313026572,
                "explored_percent_none": 14.290343486714193,
                "kept_percent_concrete": 60.30323914541695,
                "kept_percent_lambda": 39.69676085458305,
                "num_examples": 3,
                "num_explored_concrete": 3829,
                "num_explored_lambda": 1461,
                "num_explored_none": 882,
                "num_inputs": 2,
                "num_kept_concrete": 875,
                "num_kept_lambda": 576,
                "num_values_explored": 6172,
                "num_values_kept": 1451,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62407
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83643551403657,
            "num_unique_values": 1177,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.466805907802474,
                "explored_percent_lambda": 15.023123974339848,
                "explored_percent_none": 27.510070117857676,
                "kept_percent_concrete": 72.51712328767124,
                "kept_percent_lambda": 27.482876712328768,
                "num_examples": 5,
                "num_explored_concrete": 3852,
                "num_explored_lambda": 1007,
                "num_explored_none": 1844,
                "num_inputs": 1,
                "num_kept_concrete": 847,
                "num_kept_lambda": 321,
                "num_values_explored": 6703,
                "num_values_kept": 1168,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68120
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07799820089713,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.664265129682995,
                "explored_percent_lambda": 26.242795389048993,
                "explored_percent_none": 17.09293948126801,
                "kept_percent_concrete": 55.37010159651669,
                "kept_percent_lambda": 44.62989840348331,
                "num_examples": 3,
                "num_explored_concrete": 3146,
                "num_explored_lambda": 1457,
                "num_explored_none": 949,
                "num_inputs": 1,
                "num_kept_concrete": 763,
                "num_kept_lambda": 615,
                "num_values_explored": 5552,
                "num_values_kept": 1378,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57798
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91862414614297,
            "num_unique_values": 1318,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.64926590538336,
                "explored_percent_lambda": 30.215696936740983,
                "explored_percent_none": 15.135037157875656,
                "kept_percent_concrete": 57.67761650114591,
                "kept_percent_lambda": 42.32238349885409,
                "num_examples": 3,
                "num_explored_concrete": 3015,
                "num_explored_lambda": 1667,
                "num_explored_none": 835,
                "num_inputs": 1,
                "num_kept_concrete": 755,
                "num_kept_lambda": 554,
                "num_values_explored": 5517,
                "num_values_kept": 1309,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57947
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89595386595465,
            "num_unique_values": 1329,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.6121599524305,
                "explored_percent_lambda": 10.926118626430801,
                "explored_percent_none": 22.461721421138694,
                "kept_percent_concrete": 77.33131159969675,
                "kept_percent_lambda": 22.66868840030326,
                "num_examples": 5,
                "num_explored_concrete": 4481,
                "num_explored_lambda": 735,
                "num_explored_none": 1511,
                "num_inputs": 2,
                "num_kept_concrete": 1020,
                "num_kept_lambda": 299,
                "num_values_explored": 6727,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69594
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9737052039709,
            "num_unique_values": 1450,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.81059260455353,
                "explored_percent_lambda": 25.57726465364121,
                "explored_percent_none": 13.612142741805265,
                "kept_percent_concrete": 59.09722222222222,
                "kept_percent_lambda": 40.90277777777778,
                "num_examples": 3,
                "num_explored_concrete": 3766,
                "num_explored_lambda": 1584,
                "num_explored_none": 843,
                "num_inputs": 2,
                "num_kept_concrete": 851,
                "num_kept_lambda": 589,
                "num_values_explored": 6193,
                "num_values_kept": 1440,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63044
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94073454500176,
            "num_unique_values": 1143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.45380519887254,
                "explored_percent_lambda": 11.822737237707486,
                "explored_percent_none": 30.72345756341998,
                "kept_percent_concrete": 79.87643424536628,
                "kept_percent_lambda": 20.123565754633717,
                "num_examples": 5,
                "num_explored_concrete": 3669,
                "num_explored_lambda": 755,
                "num_explored_none": 1962,
                "num_inputs": 2,
                "num_kept_concrete": 905,
                "num_kept_lambda": 228,
                "num_values_explored": 6386,
                "num_values_kept": 1133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66795
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72770031006075,
            "num_unique_values": 1340,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.65640461792194,
                "explored_percent_lambda": 9.153380978559648,
                "explored_percent_none": 16.190214403518418,
                "kept_percent_concrete": 82.25563909774436,
                "kept_percent_lambda": 17.74436090225564,
                "num_examples": 5,
                "num_explored_concrete": 5432,
                "num_explored_lambda": 666,
                "num_explored_none": 1178,
                "num_inputs": 2,
                "num_kept_concrete": 1094,
                "num_kept_lambda": 236,
                "num_values_explored": 7276,
                "num_values_kept": 1330,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71436
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.62046853988431,
            "num_unique_values": 985,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.93640934634723,
                "explored_percent_lambda": 11.313220940550133,
                "explored_percent_none": 23.750369713102632,
                "kept_percent_concrete": 78.76923076923077,
                "kept_percent_lambda": 21.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 4391,
                "num_explored_lambda": 765,
                "num_explored_none": 1606,
                "num_inputs": 2,
                "num_kept_concrete": 768,
                "num_kept_lambda": 207,
                "num_values_explored": 6762,
                "num_values_kept": 975,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70117
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.3
}