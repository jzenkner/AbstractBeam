{
    "num_tasks": 50,
    "num_tasks_solved": 13,
    "results": [
        {
            "elapsed_time": 0.6712827438022941,
            "num_unique_values": 258,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.88187372708757,
                "explored_percent_lambda": 48.26883910386965,
                "explored_percent_none": 13.84928716904277,
                "kept_percent_concrete": 41.76706827309237,
                "kept_percent_lambda": 58.23293172690763,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 237,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 145,
                "num_values_explored": 491,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.369814524892718,
            "num_unique_values": 288,
            "solution": "Multiply(k, IntDivide(Add(x, Min(x, k)), k))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 24.37735849056604,
                "explored_percent_lambda": 16.77987421383648,
                "explored_percent_none": 58.84276729559748,
                "kept_percent_concrete": 70.14388489208633,
                "kept_percent_lambda": 29.85611510791367,
                "num_examples": 5,
                "num_explored_concrete": 969,
                "num_explored_lambda": 667,
                "num_explored_none": 2339,
                "num_inputs": 2,
                "num_kept_concrete": 195,
                "num_kept_lambda": 83,
                "num_values_explored": 3975,
                "num_values_kept": 278,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11603
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.200268409913406,
            "num_unique_values": 994,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(v1, -1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.60690294185777,
                "explored_percent_lambda": 33.21751216122307,
                "explored_percent_none": 26.17558489691916,
                "kept_percent_concrete": 55.025380710659896,
                "kept_percent_lambda": 44.974619289340104,
                "num_examples": 3,
                "num_explored_concrete": 1753,
                "num_explored_lambda": 1434,
                "num_explored_none": 1130,
                "num_inputs": 1,
                "num_kept_concrete": 542,
                "num_kept_lambda": 443,
                "num_values_explored": 4317,
                "num_values_kept": 985,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 11731
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92144303699024,
            "num_unique_values": 1263,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.540041067761805,
                "explored_percent_lambda": 29.89390828199863,
                "explored_percent_none": 18.56605065023956,
                "kept_percent_concrete": 52.39234449760765,
                "kept_percent_lambda": 47.60765550239235,
                "num_examples": 3,
                "num_explored_concrete": 3012,
                "num_explored_lambda": 1747,
                "num_explored_none": 1085,
                "num_inputs": 1,
                "num_kept_concrete": 657,
                "num_kept_lambda": 597,
                "num_values_explored": 5844,
                "num_values_kept": 1254,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57480
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.37969522015191615,
            "num_unique_values": 333,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.22784810126582,
                "explored_percent_lambda": 33.895921237693386,
                "explored_percent_none": 7.876230661040788,
                "kept_percent_concrete": 60.06191950464396,
                "kept_percent_lambda": 39.93808049535604,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 241,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 129,
                "num_values_explored": 711,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8438607249409,
            "num_unique_values": 1352,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.69565217391305,
                "explored_percent_lambda": 12.683658170914542,
                "explored_percent_none": 18.620689655172413,
                "kept_percent_concrete": 74.38570364854803,
                "kept_percent_lambda": 25.614296351451973,
                "num_examples": 5,
                "num_explored_concrete": 4582,
                "num_explored_lambda": 846,
                "num_explored_none": 1242,
                "num_inputs": 1,
                "num_kept_concrete": 999,
                "num_kept_lambda": 344,
                "num_values_explored": 6670,
                "num_values_kept": 1343,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67387
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16180757712572813,
            "num_unique_values": 127,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 20.606060606060606,
                "explored_percent_lambda": 66.66666666666667,
                "explored_percent_none": 12.727272727272727,
                "kept_percent_concrete": 15.254237288135593,
                "kept_percent_lambda": 84.7457627118644,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 110,
                "num_explored_none": 21,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 100,
                "num_values_explored": 165,
                "num_values_kept": 118,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 165
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74742298689671,
            "num_unique_values": 1111,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.214983713355046,
                "explored_percent_lambda": 15.102161681966242,
                "explored_percent_none": 22.68285460467871,
                "kept_percent_concrete": 68.51179673321234,
                "kept_percent_lambda": 31.488203266787657,
                "num_examples": 5,
                "num_explored_concrete": 4202,
                "num_explored_lambda": 1020,
                "num_explored_none": 1532,
                "num_inputs": 1,
                "num_kept_concrete": 755,
                "num_kept_lambda": 347,
                "num_values_explored": 6754,
                "num_values_kept": 1102,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69231
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8123331880197,
            "num_unique_values": 1212,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.73285198555957,
                "explored_percent_lambda": 14.40904096688118,
                "explored_percent_none": 23.85810704755925,
                "kept_percent_concrete": 73.39983374896093,
                "kept_percent_lambda": 26.60016625103907,
                "num_examples": 5,
                "num_explored_concrete": 3933,
                "num_explored_lambda": 918,
                "num_explored_none": 1520,
                "num_inputs": 1,
                "num_kept_concrete": 883,
                "num_kept_lambda": 320,
                "num_values_explored": 6371,
                "num_values_kept": 1203,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64048
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86216221610084,
            "num_unique_values": 1379,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.62889983579639,
                "explored_percent_lambda": 22.857142857142858,
                "explored_percent_none": 13.513957307060755,
                "kept_percent_concrete": 52.99270072992701,
                "kept_percent_lambda": 47.00729927007299,
                "num_examples": 3,
                "num_explored_concrete": 3875,
                "num_explored_lambda": 1392,
                "num_explored_none": 823,
                "num_inputs": 1,
                "num_kept_concrete": 726,
                "num_kept_lambda": 644,
                "num_values_explored": 6090,
                "num_values_kept": 1370,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62144
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75712907896377,
            "num_unique_values": 1289,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.73944372387952,
                "explored_percent_lambda": 9.655569966854014,
                "explored_percent_none": 18.604986309266465,
                "kept_percent_concrete": 84.20641125879594,
                "kept_percent_lambda": 15.793588741204065,
                "num_examples": 5,
                "num_explored_concrete": 4978,
                "num_explored_lambda": 670,
                "num_explored_none": 1291,
                "num_inputs": 2,
                "num_kept_concrete": 1077,
                "num_kept_lambda": 202,
                "num_values_explored": 6939,
                "num_values_kept": 1279,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71709
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80144492303953,
            "num_unique_values": 1499,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.88512302427897,
                "explored_percent_lambda": 23.496822551735377,
                "explored_percent_none": 11.618054423985662,
                "kept_percent_concrete": 61.047683008730694,
                "kept_percent_lambda": 38.952316991269306,
                "num_examples": 3,
                "num_explored_concrete": 3982,
                "num_explored_lambda": 1442,
                "num_explored_none": 713,
                "num_inputs": 2,
                "num_kept_concrete": 909,
                "num_kept_lambda": 580,
                "num_values_explored": 6137,
                "num_values_kept": 1489,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64943
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 74.18910620105453,
            "num_unique_values": 500,
            "solution": "Count((lambda u1: ((lambda v1, v2: Less(((lambda v1: Multiply(3, v1)))(v2), ((lambda v1: Add(-1, v1)))(v1))))(u1, u1)), x)",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 41.38297872340426,
                "explored_percent_lambda": 31.914893617021278,
                "explored_percent_none": 26.70212765957447,
                "kept_percent_concrete": 66.19144602851324,
                "kept_percent_lambda": 33.80855397148676,
                "num_examples": 5,
                "num_explored_concrete": 778,
                "num_explored_lambda": 600,
                "num_explored_none": 502,
                "num_inputs": 1,
                "num_kept_concrete": 325,
                "num_kept_lambda": 166,
                "num_values_explored": 1880,
                "num_values_kept": 491,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 48590
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.096771529875696,
            "num_unique_values": 797,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.19937205651491,
                "explored_percent_lambda": 27.747252747252748,
                "explored_percent_none": 18.053375196232338,
                "kept_percent_concrete": 57.994923857868024,
                "kept_percent_lambda": 42.005076142131976,
                "num_examples": 3,
                "num_explored_concrete": 1381,
                "num_explored_lambda": 707,
                "num_explored_none": 460,
                "num_inputs": 1,
                "num_kept_concrete": 457,
                "num_kept_lambda": 331,
                "num_values_explored": 2548,
                "num_values_kept": 788,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3948
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.64808227797039,
            "num_unique_values": 1564,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.49127906976744,
                "explored_percent_lambda": 15.348837209302326,
                "explored_percent_none": 10.159883720930232,
                "kept_percent_concrete": 71.60334835801675,
                "kept_percent_lambda": 28.396651641983258,
                "num_examples": 3,
                "num_explored_concrete": 5125,
                "num_explored_lambda": 1056,
                "num_explored_none": 699,
                "num_inputs": 3,
                "num_kept_concrete": 1112,
                "num_kept_lambda": 441,
                "num_values_explored": 6880,
                "num_values_kept": 1553,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71298
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71549901389517,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.76138828633405,
                "explored_percent_lambda": 23.938642702200188,
                "explored_percent_none": 16.29996901146576,
                "kept_percent_concrete": 62.874251497005986,
                "kept_percent_lambda": 37.125748502994014,
                "num_examples": 3,
                "num_explored_concrete": 3857,
                "num_explored_lambda": 1545,
                "num_explored_none": 1052,
                "num_inputs": 3,
                "num_kept_concrete": 840,
                "num_kept_lambda": 496,
                "num_values_explored": 6454,
                "num_values_kept": 1336,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66822
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77699920698069,
            "num_unique_values": 1313,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.84155214227971,
                "explored_percent_lambda": 16.443007275666936,
                "explored_percent_none": 15.715440582053354,
                "kept_percent_concrete": 69.27803379416282,
                "kept_percent_lambda": 30.721966205837173,
                "num_examples": 3,
                "num_explored_concrete": 4196,
                "num_explored_lambda": 1017,
                "num_explored_none": 972,
                "num_inputs": 3,
                "num_kept_concrete": 902,
                "num_kept_lambda": 400,
                "num_values_explored": 6185,
                "num_values_kept": 1302,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64924
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94408315303735,
            "num_unique_values": 1367,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.781893004115226,
                "explored_percent_lambda": 30.05761316872428,
                "explored_percent_none": 15.160493827160494,
                "kept_percent_concrete": 57.03758290346352,
                "kept_percent_lambda": 42.96241709653648,
                "num_examples": 3,
                "num_explored_concrete": 3328,
                "num_explored_lambda": 1826,
                "num_explored_none": 921,
                "num_inputs": 2,
                "num_kept_concrete": 774,
                "num_kept_lambda": 583,
                "num_values_explored": 6075,
                "num_values_kept": 1357,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60728
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06903512496501,
            "num_unique_values": 1381,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.01294219154444,
                "explored_percent_lambda": 13.387978142076502,
                "explored_percent_none": 21.599079666379062,
                "kept_percent_concrete": 76.65937272064187,
                "kept_percent_lambda": 23.340627279358134,
                "num_examples": 5,
                "num_explored_concrete": 4521,
                "num_explored_lambda": 931,
                "num_explored_none": 1502,
                "num_inputs": 2,
                "num_kept_concrete": 1051,
                "num_kept_lambda": 320,
                "num_values_explored": 6954,
                "num_values_kept": 1371,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70321
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95499804103747,
            "num_unique_values": 1458,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.83827353094124,
                "explored_percent_lambda": 26.781071242849713,
                "explored_percent_none": 16.380655226209047,
                "kept_percent_concrete": 57.04419889502763,
                "kept_percent_lambda": 42.95580110497237,
                "num_examples": 3,
                "num_explored_concrete": 3279,
                "num_explored_lambda": 1545,
                "num_explored_none": 945,
                "num_inputs": 2,
                "num_kept_concrete": 826,
                "num_kept_lambda": 622,
                "num_values_explored": 5769,
                "num_values_kept": 1448,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59902
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94420856097713,
            "num_unique_values": 1387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.48295059151009,
                "explored_percent_lambda": 24.182324286708422,
                "explored_percent_none": 12.334725121781489,
                "kept_percent_concrete": 54.716981132075475,
                "kept_percent_lambda": 45.283018867924525,
                "num_examples": 3,
                "num_explored_concrete": 3649,
                "num_explored_lambda": 1390,
                "num_explored_none": 709,
                "num_inputs": 1,
                "num_kept_concrete": 754,
                "num_kept_lambda": 624,
                "num_values_explored": 5748,
                "num_values_kept": 1378,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59612
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3337298249825835,
            "num_unique_values": 272,
            "solution": "Sort(Reverse(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 46.435845213849284,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 41.444866920152094,
                "kept_percent_lambda": 58.555133079847906,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 228,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 154,
                "num_values_explored": 491,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87551889498718,
            "num_unique_values": 1461,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.47582851930677,
                "explored_percent_lambda": 11.477652782000607,
                "explored_percent_none": 23.046518698692612,
                "kept_percent_concrete": 80.08270158511371,
                "kept_percent_lambda": 19.917298414886286,
                "num_examples": 5,
                "num_explored_concrete": 4307,
                "num_explored_lambda": 755,
                "num_explored_none": 1516,
                "num_inputs": 2,
                "num_kept_concrete": 1162,
                "num_kept_lambda": 289,
                "num_values_explored": 6578,
                "num_values_kept": 1451,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65546
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87415716284886,
            "num_unique_values": 1469,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.17769807629605,
                "explored_percent_lambda": 23.606129768503422,
                "explored_percent_none": 11.216172155200521,
                "kept_percent_concrete": 58.327621658670324,
                "kept_percent_lambda": 41.672378341329676,
                "num_examples": 3,
                "num_explored_concrete": 3998,
                "num_explored_lambda": 1448,
                "num_explored_none": 688,
                "num_inputs": 2,
                "num_kept_concrete": 851,
                "num_kept_lambda": 608,
                "num_values_explored": 6134,
                "num_values_kept": 1459,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61892
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82379164593294,
            "num_unique_values": 1399,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.159428737977265,
                "explored_percent_lambda": 18.53686971728359,
                "explored_percent_none": 18.303701544739145,
                "kept_percent_concrete": 67.86743515850144,
                "kept_percent_lambda": 32.13256484149856,
                "num_examples": 3,
                "num_explored_concrete": 4334,
                "num_explored_lambda": 1272,
                "num_explored_none": 1256,
                "num_inputs": 3,
                "num_kept_concrete": 942,
                "num_kept_lambda": 446,
                "num_values_explored": 6862,
                "num_values_kept": 1388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70928
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.356790533056483,
            "num_unique_values": 236,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.123152709359605,
                "explored_percent_lambda": 45.320197044334975,
                "explored_percent_none": 29.55665024630542,
                "kept_percent_concrete": 45.81497797356828,
                "kept_percent_lambda": 54.18502202643172,
                "num_examples": 5,
                "num_explored_concrete": 255,
                "num_explored_lambda": 460,
                "num_explored_none": 300,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 123,
                "num_values_explored": 1015,
                "num_values_kept": 227,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8526
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93734968593344,
            "num_unique_values": 1453,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.80349344978166,
                "explored_percent_lambda": 27.021834061135372,
                "explored_percent_none": 16.17467248908297,
                "kept_percent_concrete": 57.06371191135734,
                "kept_percent_lambda": 42.93628808864266,
                "num_examples": 3,
                "num_explored_concrete": 3252,
                "num_explored_lambda": 1547,
                "num_explored_none": 926,
                "num_inputs": 1,
                "num_kept_concrete": 824,
                "num_kept_lambda": 620,
                "num_values_explored": 5725,
                "num_values_kept": 1444,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58635
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93940529297106,
            "num_unique_values": 1299,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.764746703678,
                "explored_percent_lambda": 27.931991672449687,
                "explored_percent_none": 18.30326162387231,
                "kept_percent_concrete": 58.96043444530644,
                "kept_percent_lambda": 41.03956555469356,
                "num_examples": 3,
                "num_explored_concrete": 3099,
                "num_explored_lambda": 1610,
                "num_explored_none": 1055,
                "num_inputs": 2,
                "num_kept_concrete": 760,
                "num_kept_lambda": 529,
                "num_values_explored": 5764,
                "num_values_kept": 1289,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58031
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.758661024039611,
            "num_unique_values": 244,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Add(1, v1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 19.910714285714285,
                "explored_percent_lambda": 54.82142857142857,
                "explored_percent_none": 25.267857142857142,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 223,
                "num_explored_lambda": 614,
                "num_explored_none": 283,
                "num_inputs": 1,
                "num_kept_concrete": 94,
                "num_kept_lambda": 141,
                "num_values_explored": 1120,
                "num_values_kept": 235,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2800
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.49347331095487,
            "num_unique_values": 1503,
            "solution": "Take(Count((lambda u1: ((lambda v1, v2: Less(((lambda v1: IntDivide(v1, 2)))(v1), ((lambda v1: Max(((lambda v1: Add(-1, v1)))(v1), v1)))(v2))))(u1, u1)), r), Sort(c))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 74.05423501841312,
                "explored_percent_lambda": 17.72681620354871,
                "explored_percent_none": 8.218948778038165,
                "kept_percent_concrete": 64.09912926992632,
                "kept_percent_lambda": 35.90087073007368,
                "num_examples": 3,
                "num_explored_concrete": 4424,
                "num_explored_lambda": 1059,
                "num_explored_none": 491,
                "num_inputs": 2,
                "num_kept_concrete": 957,
                "num_kept_lambda": 536,
                "num_values_explored": 5974,
                "num_values_kept": 1493,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 32788
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75038245716132,
            "num_unique_values": 1318,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.39360200721342,
                "explored_percent_lambda": 10.208562019758507,
                "explored_percent_none": 19.39783597302807,
                "kept_percent_concrete": 81.34556574923548,
                "kept_percent_lambda": 18.654434250764528,
                "num_examples": 5,
                "num_explored_concrete": 4489,
                "num_explored_lambda": 651,
                "num_explored_none": 1237,
                "num_inputs": 2,
                "num_kept_concrete": 1064,
                "num_kept_lambda": 244,
                "num_values_explored": 6377,
                "num_values_kept": 1308,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65208
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82857217011042,
            "num_unique_values": 1288,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.561932437341085,
                "explored_percent_lambda": 28.18743189248093,
                "explored_percent_none": 20.25063567017799,
                "kept_percent_concrete": 52.462861610633304,
                "kept_percent_lambda": 47.537138389366696,
                "num_examples": 3,
                "num_explored_concrete": 2839,
                "num_explored_lambda": 1552,
                "num_explored_none": 1115,
                "num_inputs": 1,
                "num_kept_concrete": 671,
                "num_kept_lambda": 608,
                "num_values_explored": 5506,
                "num_values_kept": 1279,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56980
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9870773719158,
            "num_unique_values": 1266,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.80499917232246,
                "explored_percent_lambda": 23.39016719086244,
                "explored_percent_none": 18.804833636815097,
                "kept_percent_concrete": 63.69426751592356,
                "kept_percent_lambda": 36.30573248407644,
                "num_examples": 3,
                "num_explored_concrete": 3492,
                "num_explored_lambda": 1413,
                "num_explored_none": 1136,
                "num_inputs": 2,
                "num_kept_concrete": 800,
                "num_kept_lambda": 456,
                "num_values_explored": 6041,
                "num_values_kept": 1256,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63551
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.96159525308758,
            "num_unique_values": 453,
            "solution": "Maximum(Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), Sort(i)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 45.357902197023385,
                "explored_percent_lambda": 27.498228206945427,
                "explored_percent_none": 27.143869596031184,
                "kept_percent_concrete": 66.13995485327314,
                "kept_percent_lambda": 33.86004514672686,
                "num_examples": 5,
                "num_explored_concrete": 640,
                "num_explored_lambda": 388,
                "num_explored_none": 383,
                "num_inputs": 2,
                "num_kept_concrete": 293,
                "num_kept_lambda": 150,
                "num_values_explored": 1411,
                "num_values_kept": 443,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 23707
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.52446649293415,
            "num_unique_values": 389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 17.570058997050147,
                "explored_percent_lambda": 31.61873156342183,
                "explored_percent_none": 50.81120943952802,
                "kept_percent_concrete": 44.473684210526315,
                "kept_percent_lambda": 55.526315789473685,
                "num_examples": 5,
                "num_explored_concrete": 953,
                "num_explored_lambda": 1715,
                "num_explored_none": 2756,
                "num_inputs": 1,
                "num_kept_concrete": 169,
                "num_kept_lambda": 211,
                "num_values_explored": 5424,
                "num_values_kept": 380,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56963
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13055936805903912,
            "num_unique_values": 143,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.84584980237154,
                "explored_percent_lambda": 17.786561264822133,
                "explored_percent_none": 19.367588932806324,
                "kept_percent_concrete": 75.93984962406014,
                "kept_percent_lambda": 24.06015037593985,
                "num_examples": 5,
                "num_explored_concrete": 159,
                "num_explored_lambda": 45,
                "num_explored_none": 49,
                "num_inputs": 2,
                "num_kept_concrete": 101,
                "num_kept_lambda": 32,
                "num_values_explored": 253,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96846578782424,
            "num_unique_values": 1406,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.114583333333336,
                "explored_percent_lambda": 27.881944444444443,
                "explored_percent_none": 18.00347222222222,
                "kept_percent_concrete": 56.0486757337151,
                "kept_percent_lambda": 43.9513242662849,
                "num_examples": 3,
                "num_explored_concrete": 3117,
                "num_explored_lambda": 1606,
                "num_explored_none": 1037,
                "num_inputs": 1,
                "num_kept_concrete": 783,
                "num_kept_lambda": 614,
                "num_values_explored": 5760,
                "num_values_kept": 1397,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58149
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.46549146994948,
            "num_unique_values": 369,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 21.72117039586919,
                "explored_percent_lambda": 22.444061962134253,
                "explored_percent_none": 55.83476764199656,
                "kept_percent_concrete": 62.39554317548747,
                "kept_percent_lambda": 37.60445682451253,
                "num_examples": 5,
                "num_explored_concrete": 1262,
                "num_explored_lambda": 1304,
                "num_explored_none": 3244,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 135,
                "num_values_explored": 5810,
                "num_values_kept": 359,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59805
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96981713804416,
            "num_unique_values": 1334,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.675876726886294,
                "explored_percent_lambda": 27.435352461919944,
                "explored_percent_none": 17.888770811193766,
                "kept_percent_concrete": 57.43396226415094,
                "kept_percent_lambda": 42.56603773584906,
                "num_examples": 3,
                "num_explored_concrete": 3087,
                "num_explored_lambda": 1549,
                "num_explored_none": 1010,
                "num_inputs": 1,
                "num_kept_concrete": 761,
                "num_kept_lambda": 564,
                "num_values_explored": 5646,
                "num_values_kept": 1325,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58828
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95044572395273,
            "num_unique_values": 1482,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.63425253991292,
                "explored_percent_lambda": 21.835187872923722,
                "explored_percent_none": 10.53055958716336,
                "kept_percent_concrete": 58.791581805838426,
                "kept_percent_lambda": 41.208418194161574,
                "num_examples": 3,
                "num_explored_concrete": 4194,
                "num_explored_lambda": 1354,
                "num_explored_none": 653,
                "num_inputs": 1,
                "num_kept_concrete": 866,
                "num_kept_lambda": 607,
                "num_values_explored": 6201,
                "num_values_kept": 1473,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63040
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97949790582061,
            "num_unique_values": 1376,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.95973734231899,
                "explored_percent_lambda": 25.21168135476067,
                "explored_percent_none": 15.82858130292034,
                "kept_percent_concrete": 56.69348939283102,
                "kept_percent_lambda": 43.30651060716898,
                "num_examples": 3,
                "num_explored_concrete": 3412,
                "num_explored_lambda": 1459,
                "num_explored_none": 916,
                "num_inputs": 1,
                "num_kept_concrete": 775,
                "num_kept_lambda": 592,
                "num_values_explored": 5787,
                "num_values_kept": 1367,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58384
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03600735310465,
            "num_unique_values": 1440,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.04934541792548,
                "explored_percent_lambda": 27.962403491104396,
                "explored_percent_none": 14.988251090970124,
                "kept_percent_concrete": 57.06293706293706,
                "kept_percent_lambda": 42.93706293706294,
                "num_examples": 3,
                "num_explored_concrete": 3399,
                "num_explored_lambda": 1666,
                "num_explored_none": 893,
                "num_inputs": 2,
                "num_kept_concrete": 816,
                "num_kept_lambda": 614,
                "num_values_explored": 5958,
                "num_values_kept": 1430,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63035
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74662794009782,
            "num_unique_values": 1178,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.22079456505686,
                "explored_percent_lambda": 16.541131295229658,
                "explored_percent_none": 28.238074139713483,
                "kept_percent_concrete": 72.96834901625321,
                "kept_percent_lambda": 27.031650983746793,
                "num_examples": 5,
                "num_explored_concrete": 3739,
                "num_explored_lambda": 1120,
                "num_explored_none": 1912,
                "num_inputs": 1,
                "num_kept_concrete": 853,
                "num_kept_lambda": 316,
                "num_values_explored": 6771,
                "num_values_kept": 1169,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68487
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07737076911144,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.49734136830911,
                "explored_percent_lambda": 27.419354838709676,
                "explored_percent_none": 15.083303792981212,
                "kept_percent_concrete": 54.538904899135446,
                "kept_percent_lambda": 45.461095100864554,
                "num_examples": 3,
                "num_explored_concrete": 3244,
                "num_explored_lambda": 1547,
                "num_explored_none": 851,
                "num_inputs": 1,
                "num_kept_concrete": 757,
                "num_kept_lambda": 631,
                "num_values_explored": 5642,
                "num_values_kept": 1388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58137
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92073837900534,
            "num_unique_values": 1394,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.02749140893471,
                "explored_percent_lambda": 28.986254295532646,
                "explored_percent_none": 13.986254295532646,
                "kept_percent_concrete": 56.17328519855596,
                "kept_percent_lambda": 43.82671480144404,
                "num_examples": 3,
                "num_explored_concrete": 3319,
                "num_explored_lambda": 1687,
                "num_explored_none": 814,
                "num_inputs": 1,
                "num_kept_concrete": 778,
                "num_kept_lambda": 607,
                "num_values_explored": 5820,
                "num_values_kept": 1385,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59081
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90609124302864,
            "num_unique_values": 1300,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.14359733530718,
                "explored_percent_lambda": 11.369356032568469,
                "explored_percent_none": 22.487046632124354,
                "kept_percent_concrete": 79.76744186046511,
                "kept_percent_lambda": 20.232558139534884,
                "num_examples": 5,
                "num_explored_concrete": 4468,
                "num_explored_lambda": 768,
                "num_explored_none": 1519,
                "num_inputs": 2,
                "num_kept_concrete": 1029,
                "num_kept_lambda": 261,
                "num_values_explored": 6755,
                "num_values_kept": 1290,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71262
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99072118615732,
            "num_unique_values": 1478,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.70444104134763,
                "explored_percent_lambda": 25.834609494640123,
                "explored_percent_none": 13.460949464012252,
                "kept_percent_concrete": 60.14986376021798,
                "kept_percent_lambda": 39.85013623978202,
                "num_examples": 3,
                "num_explored_concrete": 3964,
                "num_explored_lambda": 1687,
                "num_explored_none": 879,
                "num_inputs": 2,
                "num_kept_concrete": 883,
                "num_kept_lambda": 585,
                "num_values_explored": 6530,
                "num_values_kept": 1468,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65344
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9284819229506,
            "num_unique_values": 1130,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.06790670209625,
                "explored_percent_lambda": 11.278417478594626,
                "explored_percent_none": 28.65367581930912,
                "kept_percent_concrete": 80.17857142857143,
                "kept_percent_lambda": 19.821428571428573,
                "num_examples": 5,
                "num_explored_concrete": 4069,
                "num_explored_lambda": 764,
                "num_explored_none": 1941,
                "num_inputs": 2,
                "num_kept_concrete": 898,
                "num_kept_lambda": 222,
                "num_values_explored": 6774,
                "num_values_kept": 1120,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68571
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79157045995817,
            "num_unique_values": 1355,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.77477477477477,
                "explored_percent_lambda": 8.230958230958231,
                "explored_percent_none": 16.994266994266994,
                "kept_percent_concrete": 83.19702602230483,
                "kept_percent_lambda": 16.802973977695167,
                "num_examples": 5,
                "num_explored_concrete": 5478,
                "num_explored_lambda": 603,
                "num_explored_none": 1245,
                "num_inputs": 2,
                "num_kept_concrete": 1119,
                "num_kept_lambda": 226,
                "num_values_explored": 7326,
                "num_values_kept": 1345,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73765
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.61513186292723,
            "num_unique_values": 1034,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.06239460370995,
                "explored_percent_lambda": 11.382799325463743,
                "explored_percent_none": 22.554806070826306,
                "kept_percent_concrete": 77.44140625,
                "kept_percent_lambda": 22.55859375,
                "num_examples": 5,
                "num_explored_concrete": 4701,
                "num_explored_lambda": 810,
                "num_explored_none": 1605,
                "num_inputs": 2,
                "num_kept_concrete": 793,
                "num_kept_lambda": 231,
                "num_values_explored": 7116,
                "num_values_kept": 1024,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71821
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.26
}