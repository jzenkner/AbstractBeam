{
    "num_tasks": 50,
    "num_tasks_solved": 14,
    "results": [
        {
            "elapsed_time": 0.65788240195252,
            "num_unique_values": 258,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.88187372708757,
                "explored_percent_lambda": 48.26883910386965,
                "explored_percent_none": 13.84928716904277,
                "kept_percent_concrete": 41.76706827309237,
                "kept_percent_lambda": 58.23293172690763,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 237,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 145,
                "num_values_explored": 491,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.136586447013542,
            "num_unique_values": 161,
            "solution": "Multiply(k, IntDivide(Add(k, x), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 17.907995618838992,
                "explored_percent_lambda": 18.674698795180724,
                "explored_percent_none": 63.41730558598029,
                "kept_percent_concrete": 68.21192052980132,
                "kept_percent_lambda": 31.788079470198674,
                "num_examples": 5,
                "num_explored_concrete": 327,
                "num_explored_lambda": 341,
                "num_explored_none": 1158,
                "num_inputs": 2,
                "num_kept_concrete": 103,
                "num_kept_lambda": 48,
                "num_values_explored": 1826,
                "num_values_kept": 151,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 16327
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.275584107032046,
            "num_unique_values": 1030,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.49767008387698,
                "explored_percent_lambda": 31.19757688723206,
                "explored_percent_none": 26.30475302889096,
                "kept_percent_concrete": 54.94613124387855,
                "kept_percent_lambda": 45.05386875612145,
                "num_examples": 3,
                "num_explored_concrete": 1824,
                "num_explored_lambda": 1339,
                "num_explored_none": 1129,
                "num_inputs": 1,
                "num_kept_concrete": 561,
                "num_kept_lambda": 460,
                "num_values_explored": 4292,
                "num_values_kept": 1021,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5972
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87154894392006,
            "num_unique_values": 1210,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.917718047174986,
                "explored_percent_lambda": 29.548363503382703,
                "explored_percent_none": 20.53391844944231,
                "kept_percent_concrete": 50.208159866777684,
                "kept_percent_lambda": 49.791840133222316,
                "num_examples": 3,
                "num_explored_concrete": 2730,
                "num_explored_lambda": 1616,
                "num_explored_none": 1123,
                "num_inputs": 1,
                "num_kept_concrete": 603,
                "num_kept_lambda": 598,
                "num_values_explored": 5469,
                "num_values_kept": 1201,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57580
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3861661129631102,
            "num_unique_values": 333,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.22784810126582,
                "explored_percent_lambda": 33.895921237693386,
                "explored_percent_none": 7.876230661040788,
                "kept_percent_concrete": 60.06191950464396,
                "kept_percent_lambda": 39.93808049535604,
                "num_examples": 3,
                "num_explored_concrete": 414,
                "num_explored_lambda": 241,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 129,
                "num_values_explored": 711,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90777432895266,
            "num_unique_values": 1362,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.03328050713154,
                "explored_percent_lambda": 13.438985736925515,
                "explored_percent_none": 17.527733755942947,
                "kept_percent_concrete": 74.05764966740577,
                "kept_percent_lambda": 25.942350332594234,
                "num_examples": 5,
                "num_explored_concrete": 4356,
                "num_explored_lambda": 848,
                "num_explored_none": 1106,
                "num_inputs": 1,
                "num_kept_concrete": 1002,
                "num_kept_lambda": 351,
                "num_values_explored": 6310,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65873
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1674656909890473,
            "num_unique_values": 127,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 20.606060606060606,
                "explored_percent_lambda": 66.66666666666667,
                "explored_percent_none": 12.727272727272727,
                "kept_percent_concrete": 15.254237288135593,
                "kept_percent_lambda": 84.7457627118644,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 110,
                "num_explored_none": 21,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 100,
                "num_values_explored": 165,
                "num_values_kept": 118,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 165
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84457436297089,
            "num_unique_values": 1118,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.71875,
                "explored_percent_lambda": 15.64031862745098,
                "explored_percent_none": 22.64093137254902,
                "kept_percent_concrete": 67.44815148782688,
                "kept_percent_lambda": 32.55184851217313,
                "num_examples": 5,
                "num_explored_concrete": 4029,
                "num_explored_lambda": 1021,
                "num_explored_none": 1478,
                "num_inputs": 1,
                "num_kept_concrete": 748,
                "num_kept_lambda": 361,
                "num_values_explored": 6528,
                "num_values_kept": 1109,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66196
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93277438986115,
            "num_unique_values": 1201,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.59795682979074,
                "explored_percent_lambda": 15.455594002306805,
                "explored_percent_none": 24.946449167902454,
                "kept_percent_concrete": 70.80536912751678,
                "kept_percent_lambda": 29.19463087248322,
                "num_examples": 5,
                "num_explored_concrete": 3617,
                "num_explored_lambda": 938,
                "num_explored_none": 1514,
                "num_inputs": 1,
                "num_kept_concrete": 844,
                "num_kept_lambda": 348,
                "num_values_explored": 6069,
                "num_values_kept": 1192,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62453
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87210890906863,
            "num_unique_values": 1263,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.78365547643269,
                "explored_percent_lambda": 23.90640895218718,
                "explored_percent_none": 14.309935571380128,
                "kept_percent_concrete": 54.22647527910686,
                "kept_percent_lambda": 45.77352472089314,
                "num_examples": 3,
                "num_explored_concrete": 3644,
                "num_explored_lambda": 1410,
                "num_explored_none": 844,
                "num_inputs": 1,
                "num_kept_concrete": 680,
                "num_kept_lambda": 574,
                "num_values_explored": 5898,
                "num_values_kept": 1254,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59792
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8126269839704,
            "num_unique_values": 1279,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.40540125824766,
                "explored_percent_lambda": 9.252723645849317,
                "explored_percent_none": 16.341875095903024,
                "kept_percent_concrete": 85.1063829787234,
                "kept_percent_lambda": 14.893617021276595,
                "num_examples": 5,
                "num_explored_concrete": 4849,
                "num_explored_lambda": 603,
                "num_explored_none": 1065,
                "num_inputs": 2,
                "num_kept_concrete": 1080,
                "num_kept_lambda": 189,
                "num_values_explored": 6517,
                "num_values_kept": 1269,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67716
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85937206191011,
            "num_unique_values": 1494,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.60710792305184,
                "explored_percent_lambda": 23.524616889468536,
                "explored_percent_none": 11.868275187479622,
                "kept_percent_concrete": 62.129380053908356,
                "kept_percent_lambda": 37.870619946091644,
                "num_examples": 3,
                "num_explored_concrete": 3963,
                "num_explored_lambda": 1443,
                "num_explored_none": 728,
                "num_inputs": 2,
                "num_kept_concrete": 922,
                "num_kept_lambda": 562,
                "num_values_explored": 6134,
                "num_values_kept": 1484,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62544
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.597641536965966,
            "num_unique_values": 241,
            "solution": "Count((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 29.09090909090909,
                "explored_percent_lambda": 46.20320855614973,
                "explored_percent_none": 24.705882352941178,
                "kept_percent_concrete": 46.98275862068966,
                "kept_percent_lambda": 53.01724137931034,
                "num_examples": 5,
                "num_explored_concrete": 272,
                "num_explored_lambda": 432,
                "num_explored_none": 231,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 123,
                "num_values_explored": 935,
                "num_values_kept": 232,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9794
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.226213339017704,
            "num_unique_values": 518,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.46648612051456,
                "explored_percent_lambda": 36.899119837508465,
                "explored_percent_none": 19.63439404197698,
                "kept_percent_concrete": 55.0098231827112,
                "kept_percent_lambda": 44.9901768172888,
                "num_examples": 3,
                "num_explored_concrete": 642,
                "num_explored_lambda": 545,
                "num_explored_none": 290,
                "num_inputs": 1,
                "num_kept_concrete": 280,
                "num_kept_lambda": 229,
                "num_values_explored": 1477,
                "num_values_kept": 509,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2877
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65205251402222,
            "num_unique_values": 1483,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.8690077225703,
                "explored_percent_lambda": 16.465102724755937,
                "explored_percent_none": 10.665889552673757,
                "kept_percent_concrete": 69.76902173913044,
                "kept_percent_lambda": 30.230978260869566,
                "num_examples": 3,
                "num_explored_concrete": 5001,
                "num_explored_lambda": 1130,
                "num_explored_none": 732,
                "num_inputs": 3,
                "num_kept_concrete": 1027,
                "num_kept_lambda": 445,
                "num_values_explored": 6863,
                "num_values_kept": 1472,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70364
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70577227883041,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.47170971709717,
                "explored_percent_lambda": 23.70848708487085,
                "explored_percent_none": 17.81980319803198,
                "kept_percent_concrete": 64.48736998514116,
                "kept_percent_lambda": 35.51263001485884,
                "num_examples": 3,
                "num_explored_concrete": 3803,
                "num_explored_lambda": 1542,
                "num_explored_none": 1159,
                "num_inputs": 3,
                "num_kept_concrete": 868,
                "num_kept_lambda": 478,
                "num_values_explored": 6504,
                "num_values_kept": 1346,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65722
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84690355602652,
            "num_unique_values": 1410,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.02479841776966,
                "explored_percent_lambda": 18.36300015213753,
                "explored_percent_none": 12.612201430092805,
                "kept_percent_concrete": 67.04789135096497,
                "kept_percent_lambda": 32.952108649035026,
                "num_examples": 3,
                "num_explored_concrete": 4537,
                "num_explored_lambda": 1207,
                "num_explored_none": 829,
                "num_inputs": 3,
                "num_kept_concrete": 938,
                "num_kept_lambda": 461,
                "num_values_explored": 6573,
                "num_values_kept": 1399,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66635
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94752744119614,
            "num_unique_values": 1361,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.42831511988256,
                "explored_percent_lambda": 31.381503832979938,
                "explored_percent_none": 14.190181047137498,
                "kept_percent_concrete": 56.25462620281273,
                "kept_percent_lambda": 43.74537379718727,
                "num_examples": 3,
                "num_explored_concrete": 3337,
                "num_explored_lambda": 1924,
                "num_explored_none": 870,
                "num_inputs": 2,
                "num_kept_concrete": 760,
                "num_kept_lambda": 591,
                "num_values_explored": 6131,
                "num_values_kept": 1351,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62778
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89997356617823,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.5930314571872,
                "explored_percent_lambda": 13.330512060939483,
                "explored_percent_none": 22.076456481873326,
                "kept_percent_concrete": 77.06013363028953,
                "kept_percent_lambda": 22.93986636971047,
                "num_examples": 5,
                "num_explored_concrete": 4579,
                "num_explored_lambda": 945,
                "num_explored_none": 1565,
                "num_inputs": 2,
                "num_kept_concrete": 1038,
                "num_kept_lambda": 309,
                "num_values_explored": 7089,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73107
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01160703296773,
            "num_unique_values": 1476,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.154492023509654,
                "explored_percent_lambda": 26.56591099916037,
                "explored_percent_none": 17.279596977329973,
                "kept_percent_concrete": 57.16234652114598,
                "kept_percent_lambda": 42.83765347885402,
                "num_examples": 3,
                "num_explored_concrete": 3344,
                "num_explored_lambda": 1582,
                "num_explored_none": 1029,
                "num_inputs": 2,
                "num_kept_concrete": 838,
                "num_kept_lambda": 628,
                "num_values_explored": 5955,
                "num_values_kept": 1466,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62225
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8930756249465,
            "num_unique_values": 1395,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.02170283806344,
                "explored_percent_lambda": 22.821368948247077,
                "explored_percent_none": 14.156928213689483,
                "kept_percent_concrete": 56.34920634920635,
                "kept_percent_lambda": 43.65079365079365,
                "num_examples": 3,
                "num_explored_concrete": 3775,
                "num_explored_lambda": 1367,
                "num_explored_none": 848,
                "num_inputs": 1,
                "num_kept_concrete": 781,
                "num_kept_lambda": 605,
                "num_values_explored": 5990,
                "num_values_kept": 1386,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61029
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.32712557003833354,
            "num_unique_values": 272,
            "solution": "Sort(Reverse(Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.010183299389,
                "explored_percent_lambda": 46.435845213849284,
                "explored_percent_none": 8.55397148676171,
                "kept_percent_concrete": 41.444866920152094,
                "kept_percent_lambda": 58.555133079847906,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 228,
                "num_explored_none": 42,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 154,
                "num_values_explored": 491,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9834817389492,
            "num_unique_values": 1405,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.67854400245738,
                "explored_percent_lambda": 12.071878359698971,
                "explored_percent_none": 25.24957763784365,
                "kept_percent_concrete": 79.78494623655914,
                "kept_percent_lambda": 20.21505376344086,
                "num_examples": 5,
                "num_explored_concrete": 4081,
                "num_explored_lambda": 786,
                "num_explored_none": 1644,
                "num_inputs": 2,
                "num_kept_concrete": 1113,
                "num_kept_lambda": 282,
                "num_values_explored": 6511,
                "num_values_kept": 1395,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67165
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95128563302569,
            "num_unique_values": 1518,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.50577663671373,
                "explored_percent_lambda": 24.069319640564828,
                "explored_percent_none": 11.424903722721437,
                "kept_percent_concrete": 58.753315649867375,
                "kept_percent_lambda": 41.246684350132625,
                "num_examples": 3,
                "num_explored_concrete": 4020,
                "num_explored_lambda": 1500,
                "num_explored_none": 712,
                "num_inputs": 2,
                "num_kept_concrete": 886,
                "num_kept_lambda": 622,
                "num_values_explored": 6232,
                "num_values_kept": 1508,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63095
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84100269991904,
            "num_unique_values": 1501,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.55013284855265,
                "explored_percent_lambda": 16.69696545937631,
                "explored_percent_none": 16.75290169207104,
                "kept_percent_concrete": 68.79194630872483,
                "kept_percent_lambda": 31.20805369127517,
                "num_examples": 3,
                "num_explored_concrete": 4759,
                "num_explored_lambda": 1194,
                "num_explored_none": 1198,
                "num_inputs": 3,
                "num_kept_concrete": 1025,
                "num_kept_lambda": 465,
                "num_values_explored": 7151,
                "num_values_kept": 1490,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72770
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.389960698084906,
            "num_unique_values": 1232,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.94435351882161,
                "explored_percent_lambda": 13.404255319148936,
                "explored_percent_none": 22.65139116202946,
                "kept_percent_concrete": 73.2624693376942,
                "kept_percent_lambda": 26.737530662305804,
                "num_examples": 5,
                "num_explored_concrete": 3907,
                "num_explored_lambda": 819,
                "num_explored_none": 1384,
                "num_inputs": 1,
                "num_kept_concrete": 896,
                "num_kept_lambda": 327,
                "num_values_explored": 6110,
                "num_values_kept": 1223,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 38880
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93107901397161,
            "num_unique_values": 1477,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.5430307121161,
                "explored_percent_lambda": 24.654066824164698,
                "explored_percent_none": 17.802902463719203,
                "kept_percent_concrete": 59.33242506811989,
                "kept_percent_lambda": 40.66757493188011,
                "num_examples": 3,
                "num_explored_concrete": 3410,
                "num_explored_lambda": 1461,
                "num_explored_none": 1055,
                "num_inputs": 1,
                "num_kept_concrete": 871,
                "num_kept_lambda": 597,
                "num_values_explored": 5926,
                "num_values_kept": 1468,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60944
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82571446709335,
            "num_unique_values": 1366,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.051387461459406,
                "explored_percent_lambda": 29.63343610825625,
                "explored_percent_none": 20.315176430284343,
                "kept_percent_concrete": 56.48967551622419,
                "kept_percent_lambda": 43.51032448377581,
                "num_examples": 3,
                "num_explored_concrete": 2922,
                "num_explored_lambda": 1730,
                "num_explored_none": 1186,
                "num_inputs": 2,
                "num_kept_concrete": 766,
                "num_kept_lambda": 590,
                "num_values_explored": 5838,
                "num_values_kept": 1356,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58937
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.90813116892241,
            "num_unique_values": 1036,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Add(v1, 1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.06919886487666,
                "explored_percent_lambda": 34.92687186203886,
                "explored_percent_none": 22.00392927308448,
                "kept_percent_concrete": 48.58812074001948,
                "kept_percent_lambda": 51.41187925998052,
                "num_examples": 3,
                "num_explored_concrete": 1973,
                "num_explored_lambda": 1600,
                "num_explored_none": 1008,
                "num_inputs": 1,
                "num_kept_concrete": 499,
                "num_kept_lambda": 528,
                "num_values_explored": 4581,
                "num_values_kept": 1027,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17840
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.190237388946116,
            "num_unique_values": 1477,
            "solution": "If(IsOdd(Sum(r)), Take(Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), c), Sort(c)), Take(3, Sort(c)))",
            "solution_weight": 16,
            "stats": {
                "explored_percent_concrete": 70.69237510955303,
                "explored_percent_lambda": 20.087642418930763,
                "explored_percent_none": 9.219982471516214,
                "kept_percent_concrete": 62.78118609406953,
                "kept_percent_lambda": 37.21881390593047,
                "num_examples": 3,
                "num_explored_concrete": 4033,
                "num_explored_lambda": 1146,
                "num_explored_none": 526,
                "num_inputs": 2,
                "num_kept_concrete": 921,
                "num_kept_lambda": 546,
                "num_values_explored": 5705,
                "num_values_kept": 1467,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7385
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72014173795469,
            "num_unique_values": 1333,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.98858516070892,
                "explored_percent_lambda": 10.168218684289576,
                "explored_percent_none": 17.8431961550015,
                "kept_percent_concrete": 81.33030990173847,
                "kept_percent_lambda": 18.669690098261526,
                "num_examples": 5,
                "num_explored_concrete": 4793,
                "num_explored_lambda": 677,
                "num_explored_none": 1188,
                "num_inputs": 2,
                "num_kept_concrete": 1076,
                "num_kept_lambda": 247,
                "num_values_explored": 6658,
                "num_values_kept": 1323,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67627
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90325899515301,
            "num_unique_values": 1307,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.61938702779758,
                "explored_percent_lambda": 27.263007840342123,
                "explored_percent_none": 20.117605131860298,
                "kept_percent_concrete": 54.622496147919875,
                "kept_percent_lambda": 45.377503852080125,
                "num_examples": 3,
                "num_explored_concrete": 2953,
                "num_explored_lambda": 1530,
                "num_explored_none": 1129,
                "num_inputs": 1,
                "num_kept_concrete": 709,
                "num_kept_lambda": 589,
                "num_values_explored": 5612,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58156
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91472249198705,
            "num_unique_values": 1345,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.14850530376085,
                "explored_percent_lambda": 24.22050787528126,
                "explored_percent_none": 17.63098682095789,
                "kept_percent_concrete": 60.29962546816479,
                "kept_percent_lambda": 39.70037453183521,
                "num_examples": 3,
                "num_explored_concrete": 3618,
                "num_explored_lambda": 1507,
                "num_explored_none": 1097,
                "num_inputs": 2,
                "num_kept_concrete": 805,
                "num_kept_lambda": 530,
                "num_values_explored": 6222,
                "num_values_kept": 1335,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64281
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.347593262791634,
            "num_unique_values": 710,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Max(3, ((lambda v1: Access(v1, x)))(v1))))(u1)), i))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 55.746367239101716,
                "explored_percent_lambda": 19.638925583443417,
                "explored_percent_none": 24.614707177454864,
                "kept_percent_concrete": 73.57142857142857,
                "kept_percent_lambda": 26.428571428571427,
                "num_examples": 5,
                "num_explored_concrete": 1266,
                "num_explored_lambda": 446,
                "num_explored_none": 559,
                "num_inputs": 2,
                "num_kept_concrete": 515,
                "num_kept_lambda": 185,
                "num_values_explored": 2271,
                "num_values_kept": 700,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17513
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.5132822431624,
            "num_unique_values": 393,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 18.663594470046082,
                "explored_percent_lambda": 28.961361219425736,
                "explored_percent_none": 52.37504431052818,
                "kept_percent_concrete": 46.09375,
                "kept_percent_lambda": 53.90625,
                "num_examples": 5,
                "num_explored_concrete": 1053,
                "num_explored_lambda": 1634,
                "num_explored_none": 2955,
                "num_inputs": 1,
                "num_kept_concrete": 177,
                "num_kept_lambda": 207,
                "num_values_explored": 5642,
                "num_values_kept": 384,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57913
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1328975830692798,
            "num_unique_values": 143,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 62.84584980237154,
                "explored_percent_lambda": 17.786561264822133,
                "explored_percent_none": 19.367588932806324,
                "kept_percent_concrete": 75.93984962406014,
                "kept_percent_lambda": 24.06015037593985,
                "num_examples": 5,
                "num_explored_concrete": 159,
                "num_explored_lambda": 45,
                "num_explored_none": 49,
                "num_inputs": 2,
                "num_kept_concrete": 101,
                "num_kept_lambda": 32,
                "num_values_explored": 253,
                "num_values_kept": 133,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84807131113485,
            "num_unique_values": 1362,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.44122837980939,
                "explored_percent_lambda": 29.38581009530533,
                "explored_percent_none": 20.17296152488528,
                "kept_percent_concrete": 56.614929785661495,
                "kept_percent_lambda": 43.385070214338505,
                "num_examples": 3,
                "num_explored_concrete": 2858,
                "num_explored_lambda": 1665,
                "num_explored_none": 1143,
                "num_inputs": 1,
                "num_kept_concrete": 766,
                "num_kept_lambda": 587,
                "num_values_explored": 5666,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60004
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.17903786408715,
            "num_unique_values": 276,
            "solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 18.10477657935285,
                "explored_percent_lambda": 22.98407806882383,
                "explored_percent_none": 58.911145351823315,
                "kept_percent_concrete": 60.150375939849624,
                "kept_percent_lambda": 39.849624060150376,
                "num_examples": 5,
                "num_explored_concrete": 705,
                "num_explored_lambda": 895,
                "num_explored_none": 2294,
                "num_inputs": 2,
                "num_kept_concrete": 160,
                "num_kept_lambda": 106,
                "num_values_explored": 3894,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17117
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95589803997427,
            "num_unique_values": 1453,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.659409533234374,
                "explored_percent_lambda": 26.98334158007587,
                "explored_percent_none": 18.357248886689757,
                "kept_percent_concrete": 54.6398891966759,
                "kept_percent_lambda": 45.3601108033241,
                "num_examples": 3,
                "num_explored_concrete": 3314,
                "num_explored_lambda": 1636,
                "num_explored_none": 1113,
                "num_inputs": 1,
                "num_kept_concrete": 789,
                "num_kept_lambda": 655,
                "num_values_explored": 6063,
                "num_values_kept": 1444,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60358
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91765699209645,
            "num_unique_values": 1536,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.55259122968414,
                "explored_percent_lambda": 21.20515179392824,
                "explored_percent_none": 10.242256976387612,
                "kept_percent_concrete": 57.36738703339882,
                "kept_percent_lambda": 42.63261296660118,
                "num_examples": 3,
                "num_explored_concrete": 4471,
                "num_explored_lambda": 1383,
                "num_explored_none": 668,
                "num_inputs": 1,
                "num_kept_concrete": 876,
                "num_kept_lambda": 651,
                "num_values_explored": 6522,
                "num_values_kept": 1527,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66669
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93444743193686,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.75650997632736,
                "explored_percent_lambda": 25.143726750084546,
                "explored_percent_none": 15.099763273588096,
                "kept_percent_concrete": 55.61959654178674,
                "kept_percent_lambda": 44.38040345821326,
                "num_examples": 3,
                "num_explored_concrete": 3534,
                "num_explored_lambda": 1487,
                "num_explored_none": 893,
                "num_inputs": 1,
                "num_kept_concrete": 772,
                "num_kept_lambda": 616,
                "num_values_explored": 5914,
                "num_values_kept": 1388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60626
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03826789697632,
            "num_unique_values": 1461,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.51507417450949,
                "explored_percent_lambda": 25.889296538522892,
                "explored_percent_none": 14.595629286967618,
                "kept_percent_concrete": 58.5802894555479,
                "kept_percent_lambda": 41.4197105444521,
                "num_examples": 3,
                "num_explored_concrete": 3731,
                "num_explored_lambda": 1623,
                "num_explored_none": 915,
                "num_inputs": 2,
                "num_kept_concrete": 850,
                "num_kept_lambda": 601,
                "num_values_explored": 6269,
                "num_values_kept": 1451,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64438
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74442623811774,
            "num_unique_values": 1184,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.505494505494504,
                "explored_percent_lambda": 15.868131868131869,
                "explored_percent_none": 29.626373626373628,
                "kept_percent_concrete": 71.48936170212765,
                "kept_percent_lambda": 28.51063829787234,
                "num_examples": 5,
                "num_explored_concrete": 3720,
                "num_explored_lambda": 1083,
                "num_explored_none": 2022,
                "num_inputs": 1,
                "num_kept_concrete": 840,
                "num_kept_lambda": 335,
                "num_values_explored": 6825,
                "num_values_kept": 1175,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69880
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06838061893359,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.63616033029417,
                "explored_percent_lambda": 29.27920178909341,
                "explored_percent_none": 16.08463788061242,
                "kept_percent_concrete": 55.507246376811594,
                "kept_percent_lambda": 44.492753623188406,
                "num_examples": 3,
                "num_explored_concrete": 3176,
                "num_explored_lambda": 1702,
                "num_explored_none": 935,
                "num_inputs": 1,
                "num_kept_concrete": 766,
                "num_kept_lambda": 614,
                "num_values_explored": 5813,
                "num_values_kept": 1380,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59944
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89857201999985,
            "num_unique_values": 1404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.81818181818182,
                "explored_percent_lambda": 28.90840220385675,
                "explored_percent_none": 14.273415977961433,
                "kept_percent_concrete": 54.623655913978496,
                "kept_percent_lambda": 45.376344086021504,
                "num_examples": 3,
                "num_explored_concrete": 3300,
                "num_explored_lambda": 1679,
                "num_explored_none": 829,
                "num_inputs": 1,
                "num_kept_concrete": 762,
                "num_kept_lambda": 633,
                "num_values_explored": 5808,
                "num_values_kept": 1395,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59586
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89141983212903,
            "num_unique_values": 1322,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.44333940327778,
                "explored_percent_lambda": 11.654293318391932,
                "explored_percent_none": 22.9023672783303,
                "kept_percent_concrete": 79.42073170731707,
                "kept_percent_lambda": 20.579268292682926,
                "num_examples": 5,
                "num_explored_concrete": 4672,
                "num_explored_lambda": 832,
                "num_explored_none": 1635,
                "num_inputs": 2,
                "num_kept_concrete": 1042,
                "num_kept_lambda": 270,
                "num_values_explored": 7139,
                "num_values_kept": 1312,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73576
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12766492390074,
            "num_unique_values": 1463,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.197793538219074,
                "explored_percent_lambda": 25.059101654846337,
                "explored_percent_none": 13.743104806934594,
                "kept_percent_concrete": 60.01376462491397,
                "kept_percent_lambda": 39.98623537508603,
                "num_examples": 3,
                "num_explored_concrete": 3883,
                "num_explored_lambda": 1590,
                "num_explored_none": 872,
                "num_inputs": 2,
                "num_kept_concrete": 872,
                "num_kept_lambda": 581,
                "num_values_explored": 6345,
                "num_values_kept": 1453,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64725
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9319658970926,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.69239976062238,
                "explored_percent_lambda": 11.415320167564333,
                "explored_percent_none": 29.892280071813286,
                "kept_percent_concrete": 78.74354561101549,
                "kept_percent_lambda": 21.25645438898451,
                "num_examples": 5,
                "num_explored_concrete": 3923,
                "num_explored_lambda": 763,
                "num_explored_none": 1998,
                "num_inputs": 2,
                "num_kept_concrete": 915,
                "num_kept_lambda": 247,
                "num_values_explored": 6684,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68295
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71135869296268,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.77589298027858,
                "explored_percent_lambda": 9.488346434974487,
                "explored_percent_none": 15.73576058474693,
                "kept_percent_concrete": 81.089258698941,
                "kept_percent_lambda": 18.910741301059,
                "num_examples": 5,
                "num_explored_concrete": 5422,
                "num_explored_lambda": 688,
                "num_explored_none": 1141,
                "num_inputs": 2,
                "num_kept_concrete": 1072,
                "num_kept_lambda": 250,
                "num_values_explored": 7251,
                "num_values_kept": 1322,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74809
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.61549234203994,
            "num_unique_values": 1061,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.17815937751543,
                "explored_percent_lambda": 10.370270995438691,
                "explored_percent_none": 21.45156962704588,
                "kept_percent_concrete": 79.82873453853473,
                "kept_percent_lambda": 20.17126546146527,
                "num_examples": 5,
                "num_explored_concrete": 5082,
                "num_explored_lambda": 773,
                "num_explored_none": 1599,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 212,
                "num_values_explored": 7454,
                "num_values_kept": 1051,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74047
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.28
}