{
    "num_operations": 28,
    "num_tasks": 50,
    "num_tasks_solved": 21,
    "results": [
        {
            "elapsed_time": 201.39932001708075,
            "num_unique_values": 984,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.840963412391986,
                "explored_percent_lambda": 26.971869829012686,
                "explored_percent_none": 38.18716675859533,
                "kept_percent_concrete": 54.41478439425051,
                "kept_percent_lambda": 45.58521560574949,
                "num_examples": 3,
                "num_explored_concrete": 1895,
                "num_explored_lambda": 1467,
                "num_explored_none": 2077,
                "num_inputs": 2,
                "num_kept_concrete": 530,
                "num_kept_lambda": 444,
                "num_values_explored": 5439,
                "num_values_kept": 974,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 111715
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.235969953006133,
            "num_unique_values": 723,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.69327527818094,
                "explored_percent_lambda": 15.844218674407353,
                "explored_percent_none": 32.46250604741171,
                "kept_percent_concrete": 70.16806722689076,
                "kept_percent_lambda": 29.831932773109244,
                "num_examples": 5,
                "num_explored_concrete": 2137,
                "num_explored_lambda": 655,
                "num_explored_none": 1342,
                "num_inputs": 1,
                "num_kept_concrete": 501,
                "num_kept_lambda": 213,
                "num_values_explored": 4134,
                "num_values_kept": 714,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18307
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.00638515804894,
            "num_unique_values": 1110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.13238926395521,
                "explored_percent_lambda": 12.662604972830561,
                "explored_percent_none": 35.205005763214224,
                "kept_percent_concrete": 75.36363636363636,
                "kept_percent_lambda": 24.636363636363637,
                "num_examples": 5,
                "num_explored_concrete": 3166,
                "num_explored_lambda": 769,
                "num_explored_none": 2138,
                "num_inputs": 2,
                "num_kept_concrete": 829,
                "num_kept_lambda": 271,
                "num_values_explored": 6073,
                "num_values_kept": 1100,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 137174
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.46426951489411294,
            "num_unique_values": 303,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Greater(0, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.1480996068152,
                "explored_percent_lambda": 37.61467889908257,
                "explored_percent_none": 13.237221494102227,
                "kept_percent_concrete": 50.34013605442177,
                "kept_percent_lambda": 49.65986394557823,
                "num_examples": 3,
                "num_explored_concrete": 375,
                "num_explored_lambda": 287,
                "num_explored_none": 101,
                "num_inputs": 1,
                "num_kept_concrete": 148,
                "num_kept_lambda": 146,
                "num_values_explored": 763,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 763
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2876397129148245,
            "num_unique_values": 225,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.70259481037924,
                "explored_percent_lambda": 27.14570858283433,
                "explored_percent_none": 24.151696606786427,
                "kept_percent_concrete": 61.111111111111114,
                "kept_percent_lambda": 38.888888888888886,
                "num_examples": 5,
                "num_explored_concrete": 244,
                "num_explored_lambda": 136,
                "num_explored_none": 121,
                "num_inputs": 1,
                "num_kept_concrete": 132,
                "num_kept_lambda": 84,
                "num_values_explored": 501,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.55205769115128,
            "num_unique_values": 1076,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.95691906005222,
                "explored_percent_lambda": 23.172323759791123,
                "explored_percent_none": 38.87075718015666,
                "kept_percent_concrete": 57.22326454033771,
                "kept_percent_lambda": 42.77673545966229,
                "num_examples": 3,
                "num_explored_concrete": 2326,
                "num_explored_lambda": 1420,
                "num_explored_none": 2382,
                "num_inputs": 2,
                "num_kept_concrete": 610,
                "num_kept_lambda": 456,
                "num_values_explored": 6128,
                "num_values_kept": 1066,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 124230
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.869088037870824,
            "num_unique_values": 425,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Min(b, ((lambda v1: Max(v1, a)))(v1))))(u1)), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 29.54892966360856,
                "explored_percent_lambda": 21.483180428134556,
                "explored_percent_none": 48.96788990825688,
                "kept_percent_concrete": 50.24154589371981,
                "kept_percent_lambda": 49.75845410628019,
                "num_examples": 3,
                "num_explored_concrete": 773,
                "num_explored_lambda": 562,
                "num_explored_none": 1281,
                "num_inputs": 3,
                "num_kept_concrete": 208,
                "num_kept_lambda": 206,
                "num_values_explored": 2616,
                "num_values_kept": 414,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 29498
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.9125584680587,
            "num_unique_values": 1110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.65940274414851,
                "explored_percent_lambda": 14.188861985472155,
                "explored_percent_none": 28.151735270379337,
                "kept_percent_concrete": 73.56948228882834,
                "kept_percent_lambda": 26.430517711171664,
                "num_examples": 5,
                "num_explored_concrete": 3572,
                "num_explored_lambda": 879,
                "num_explored_none": 1744,
                "num_inputs": 1,
                "num_kept_concrete": 810,
                "num_kept_lambda": 291,
                "num_values_explored": 6195,
                "num_values_kept": 1101,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 126478
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.19333364907652,
            "num_unique_values": 1236,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.812701334560515,
                "explored_percent_lambda": 12.977450529222274,
                "explored_percent_none": 28.20984813621721,
                "kept_percent_concrete": 74.16462917685412,
                "kept_percent_lambda": 25.835370823145883,
                "num_examples": 5,
                "num_explored_concrete": 3834,
                "num_explored_lambda": 846,
                "num_explored_none": 1839,
                "num_inputs": 1,
                "num_kept_concrete": 910,
                "num_kept_lambda": 317,
                "num_values_explored": 6519,
                "num_values_kept": 1227,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 129842
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.68477758183144,
            "num_unique_values": 688,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.05504330818665,
                "explored_percent_lambda": 11.2042469963677,
                "explored_percent_none": 31.740709695445656,
                "kept_percent_concrete": 79.05604719764011,
                "kept_percent_lambda": 20.94395280235988,
                "num_examples": 5,
                "num_explored_concrete": 2042,
                "num_explored_lambda": 401,
                "num_explored_none": 1136,
                "num_inputs": 2,
                "num_kept_concrete": 536,
                "num_kept_lambda": 142,
                "num_values_explored": 3579,
                "num_values_kept": 678,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 12126
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.11815569596365,
            "num_unique_values": 1032,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 31.76248821866164,
                "explored_percent_lambda": 32.40339302544769,
                "explored_percent_none": 35.83411875589067,
                "kept_percent_concrete": 50.048875855327466,
                "kept_percent_lambda": 49.951124144672534,
                "num_examples": 3,
                "num_explored_concrete": 1685,
                "num_explored_lambda": 1719,
                "num_explored_none": 1901,
                "num_inputs": 1,
                "num_kept_concrete": 512,
                "num_kept_lambda": 511,
                "num_values_explored": 5305,
                "num_values_kept": 1023,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 109259
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.22469534515403,
            "num_unique_values": 211,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 12.22707423580786,
                "explored_percent_lambda": 32.24163027656478,
                "explored_percent_none": 55.53129548762737,
                "kept_percent_concrete": 36.633663366336634,
                "kept_percent_lambda": 63.366336633663366,
                "num_examples": 3,
                "num_explored_concrete": 168,
                "num_explored_lambda": 443,
                "num_explored_none": 763,
                "num_inputs": 1,
                "num_kept_concrete": 74,
                "num_kept_lambda": 128,
                "num_values_explored": 1374,
                "num_values_kept": 202,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 40512
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.87043786118738,
            "num_unique_values": 828,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.83815028901734,
                "explored_percent_lambda": 24.477545575811472,
                "explored_percent_none": 39.68430413517119,
                "kept_percent_concrete": 52.567237163814184,
                "kept_percent_lambda": 47.432762836185816,
                "num_examples": 3,
                "num_explored_concrete": 1612,
                "num_explored_lambda": 1101,
                "num_explored_none": 1785,
                "num_inputs": 2,
                "num_kept_concrete": 430,
                "num_kept_lambda": 388,
                "num_values_explored": 4498,
                "num_values_kept": 818,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 114311
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.984384099021554,
            "num_unique_values": 757,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(Last(x), v1)))(u2)), ZipWith((lambda u1, u2: ((lambda v1: Subtract(1, v1)))(u2)), x, Sort(Drop(1, x))), x)",
            "solution_weight": 17,
            "stats": {
                "explored_percent_concrete": 32.14074512123004,
                "explored_percent_lambda": 28.149024246008278,
                "explored_percent_none": 39.71023063276168,
                "kept_percent_concrete": 50.26737967914438,
                "kept_percent_lambda": 49.73262032085562,
                "num_examples": 3,
                "num_explored_concrete": 1087,
                "num_explored_lambda": 952,
                "num_explored_none": 1343,
                "num_inputs": 1,
                "num_kept_concrete": 376,
                "num_kept_lambda": 372,
                "num_values_explored": 3382,
                "num_values_kept": 748,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14957
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.16104156104848,
            "num_unique_values": 1058,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.43475032485613,
                "explored_percent_lambda": 31.5574531279005,
                "explored_percent_none": 34.007796547243366,
                "kept_percent_concrete": 47.569113441372735,
                "kept_percent_lambda": 52.430886558627265,
                "num_examples": 3,
                "num_explored_concrete": 1855,
                "num_explored_lambda": 1700,
                "num_explored_none": 1832,
                "num_inputs": 1,
                "num_kept_concrete": 499,
                "num_kept_lambda": 550,
                "num_values_explored": 5387,
                "num_values_kept": 1049,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 106504
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.804722069995478,
            "num_unique_values": 468,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 39.5361380798274,
                "explored_percent_lambda": 28.910463861920174,
                "explored_percent_none": 31.553398058252426,
                "kept_percent_concrete": 52.838427947598255,
                "kept_percent_lambda": 47.161572052401745,
                "num_examples": 3,
                "num_explored_concrete": 733,
                "num_explored_lambda": 536,
                "num_explored_none": 585,
                "num_inputs": 2,
                "num_kept_concrete": 242,
                "num_kept_lambda": 216,
                "num_values_explored": 1854,
                "num_values_kept": 458,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3254
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.93603287101723,
            "num_unique_values": 1166,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.037758465687745,
                "explored_percent_lambda": 15.058435720707221,
                "explored_percent_none": 32.90380581360503,
                "kept_percent_concrete": 74.41659464131374,
                "kept_percent_lambda": 25.583405358686257,
                "num_examples": 5,
                "num_explored_concrete": 3473,
                "num_explored_lambda": 1005,
                "num_explored_none": 2196,
                "num_inputs": 1,
                "num_kept_concrete": 861,
                "num_kept_lambda": 296,
                "num_values_explored": 6674,
                "num_values_kept": 1157,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 134162
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.87814150191844,
            "num_unique_values": 1100,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.9231750079694,
                "explored_percent_lambda": 24.322601211348424,
                "explored_percent_none": 32.75422378068218,
                "kept_percent_concrete": 50.0,
                "kept_percent_lambda": 50.0,
                "num_examples": 3,
                "num_explored_concrete": 2693,
                "num_explored_lambda": 1526,
                "num_explored_none": 2055,
                "num_inputs": 2,
                "num_kept_concrete": 545,
                "num_kept_lambda": 545,
                "num_values_explored": 6274,
                "num_values_kept": 1090,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 111109
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.874799126992002,
            "num_unique_values": 902,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Subtract(Maximum(x), v1)))(u1)), x, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.77642276422764,
                "explored_percent_lambda": 13.434959349593496,
                "explored_percent_none": 36.78861788617886,
                "kept_percent_concrete": 71.10862262038074,
                "kept_percent_lambda": 28.89137737961926,
                "num_examples": 5,
                "num_explored_concrete": 2449,
                "num_explored_lambda": 661,
                "num_explored_none": 1810,
                "num_inputs": 1,
                "num_kept_concrete": 635,
                "num_kept_lambda": 258,
                "num_values_explored": 4920,
                "num_values_kept": 893,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 20021
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.7840338300448,
            "num_unique_values": 1080,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.34918723660446,
                "explored_percent_lambda": 20.033112582781456,
                "explored_percent_none": 34.61770018061409,
                "kept_percent_concrete": 57.34331150608045,
                "kept_percent_lambda": 42.65668849391955,
                "num_examples": 3,
                "num_explored_concrete": 3013,
                "num_explored_lambda": 1331,
                "num_explored_none": 2300,
                "num_inputs": 3,
                "num_kept_concrete": 613,
                "num_kept_lambda": 456,
                "num_values_explored": 6644,
                "num_values_kept": 1069,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 135133
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.98424132796936,
            "num_unique_values": 1113,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.75593426658551,
                "explored_percent_lambda": 13.587948874010955,
                "explored_percent_none": 29.65611685940353,
                "kept_percent_concrete": 71.3768115942029,
                "kept_percent_lambda": 28.6231884057971,
                "num_examples": 5,
                "num_explored_concrete": 3730,
                "num_explored_lambda": 893,
                "num_explored_none": 1949,
                "num_inputs": 1,
                "num_kept_concrete": 788,
                "num_kept_lambda": 316,
                "num_values_explored": 6572,
                "num_values_kept": 1104,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 134363
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.0957110428717,
            "num_unique_values": 1110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 35.02044989775051,
                "explored_percent_lambda": 30.09543285616905,
                "explored_percent_none": 34.884117246080436,
                "kept_percent_concrete": 49.50045413260672,
                "kept_percent_lambda": 50.49954586739328,
                "num_examples": 3,
                "num_explored_concrete": 2055,
                "num_explored_lambda": 1766,
                "num_explored_none": 2047,
                "num_inputs": 1,
                "num_kept_concrete": 545,
                "num_kept_lambda": 556,
                "num_values_explored": 5868,
                "num_values_kept": 1101,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 122151
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 108.2745157990139,
            "num_unique_values": 962,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Access(i, x))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 36.50413582934262,
                "explored_percent_lambda": 27.666521549847626,
                "explored_percent_none": 35.829342620809754,
                "kept_percent_concrete": 54.096638655462186,
                "kept_percent_lambda": 45.903361344537814,
                "num_examples": 3,
                "num_explored_concrete": 1677,
                "num_explored_lambda": 1271,
                "num_explored_none": 1646,
                "num_inputs": 2,
                "num_kept_concrete": 515,
                "num_kept_lambda": 437,
                "num_values_explored": 4594,
                "num_values_kept": 952,
                "temperature": 1.0,
                "total_num_restarts": 12,
                "total_num_values_explored": 66165
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26541312993504107,
            "num_unique_values": 243,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.74946921443737,
                "explored_percent_lambda": 27.176220806794056,
                "explored_percent_none": 15.074309978768577,
                "kept_percent_concrete": 60.256410256410255,
                "kept_percent_lambda": 39.743589743589745,
                "num_examples": 5,
                "num_explored_concrete": 272,
                "num_explored_lambda": 128,
                "num_explored_none": 71,
                "num_inputs": 1,
                "num_kept_concrete": 141,
                "num_kept_lambda": 93,
                "num_values_explored": 471,
                "num_values_kept": 234,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.03486934606917,
            "num_unique_values": 1261,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.11793785310734,
                "explored_percent_lambda": 29.166666666666668,
                "explored_percent_none": 32.715395480225986,
                "kept_percent_concrete": 50.239616613418534,
                "kept_percent_lambda": 49.760383386581466,
                "num_examples": 3,
                "num_explored_concrete": 2159,
                "num_explored_lambda": 1652,
                "num_explored_none": 1853,
                "num_inputs": 1,
                "num_kept_concrete": 629,
                "num_kept_lambda": 623,
                "num_values_explored": 5664,
                "num_values_kept": 1252,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 113005
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.1244783939328,
            "num_unique_values": 1149,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 33.03333333333333,
                "explored_percent_lambda": 28.2,
                "explored_percent_none": 38.766666666666666,
                "kept_percent_concrete": 53.333333333333336,
                "kept_percent_lambda": 46.666666666666664,
                "num_examples": 3,
                "num_explored_concrete": 1982,
                "num_explored_lambda": 1692,
                "num_explored_none": 2326,
                "num_inputs": 1,
                "num_kept_concrete": 608,
                "num_kept_lambda": 532,
                "num_values_explored": 6000,
                "num_values_kept": 1140,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 119627
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.336499216035008,
            "num_unique_values": 479,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(v1, y)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 34.05730129390018,
                "explored_percent_lambda": 22.828096118299445,
                "explored_percent_none": 43.11460258780037,
                "kept_percent_concrete": 54.15778251599147,
                "kept_percent_lambda": 45.84221748400853,
                "num_examples": 3,
                "num_explored_concrete": 737,
                "num_explored_lambda": 494,
                "num_explored_none": 933,
                "num_inputs": 2,
                "num_kept_concrete": 254,
                "num_kept_lambda": 215,
                "num_values_explored": 2164,
                "num_values_kept": 469,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3844
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.97478771791793,
            "num_unique_values": 1015,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.44684528954192,
                "explored_percent_lambda": 26.188418323249785,
                "explored_percent_none": 34.364736387208296,
                "kept_percent_concrete": 51.192842942345926,
                "kept_percent_lambda": 48.807157057654074,
                "num_examples": 3,
                "num_explored_concrete": 2282,
                "num_explored_lambda": 1515,
                "num_explored_none": 1988,
                "num_inputs": 1,
                "num_kept_concrete": 515,
                "num_kept_lambda": 491,
                "num_values_explored": 5785,
                "num_values_kept": 1006,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 117385
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.515635686926544,
            "num_unique_values": 1093,
            "solution": "Maximum(Drop(k, Reverse(Sort(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.40183646698732,
                "explored_percent_lambda": 8.118350094738377,
                "explored_percent_none": 28.479813438274306,
                "kept_percent_concrete": 82.64081255771006,
                "kept_percent_lambda": 17.359187442289937,
                "num_examples": 5,
                "num_explored_concrete": 4350,
                "num_explored_lambda": 557,
                "num_explored_none": 1954,
                "num_inputs": 2,
                "num_kept_concrete": 895,
                "num_kept_lambda": 188,
                "num_values_explored": 6861,
                "num_values_kept": 1083,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 8261
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.99377711000852,
            "num_unique_values": 1098,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.249855741488744,
                "explored_percent_lambda": 11.281015579919215,
                "explored_percent_none": 39.469128678592035,
                "kept_percent_concrete": 76.28676470588235,
                "kept_percent_lambda": 23.71323529411765,
                "num_examples": 5,
                "num_explored_concrete": 3414,
                "num_explored_lambda": 782,
                "num_explored_none": 2736,
                "num_inputs": 2,
                "num_kept_concrete": 830,
                "num_kept_lambda": 258,
                "num_values_explored": 6932,
                "num_values_kept": 1088,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 140944
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.35076708206906915,
            "num_unique_values": 291,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: Greater(Maximum(x), v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.05326231691078,
                "explored_percent_lambda": 23.568575233022635,
                "explored_percent_none": 16.37816245006658,
                "kept_percent_concrete": 67.02127659574468,
                "kept_percent_lambda": 32.97872340425532,
                "num_examples": 5,
                "num_explored_concrete": 451,
                "num_explored_lambda": 177,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 93,
                "num_values_explored": 751,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 751
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.99077796004713,
            "num_unique_values": 1110,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.67530784186649,
                "explored_percent_lambda": 18.097861309138043,
                "explored_percent_none": 25.226830848995462,
                "kept_percent_concrete": 59.18181818181818,
                "kept_percent_lambda": 40.81818181818182,
                "num_examples": 3,
                "num_explored_concrete": 3498,
                "num_explored_lambda": 1117,
                "num_explored_none": 1557,
                "num_inputs": 2,
                "num_kept_concrete": 651,
                "num_kept_lambda": 449,
                "num_values_explored": 6172,
                "num_values_kept": 1100,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 120399
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.97457796614617,
            "num_unique_values": 909,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.911294231701405,
                "explored_percent_lambda": 21.215058975601874,
                "explored_percent_none": 37.87364679269672,
                "kept_percent_concrete": 57.619577308120135,
                "kept_percent_lambda": 42.380422691879865,
                "num_examples": 3,
                "num_explored_concrete": 2532,
                "num_explored_lambda": 1313,
                "num_explored_none": 2344,
                "num_inputs": 2,
                "num_kept_concrete": 518,
                "num_kept_lambda": 381,
                "num_values_explored": 6189,
                "num_values_kept": 899,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 125406
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.02326425909996,
            "num_unique_values": 1213,
            "solution": "Map((lambda u1: ((lambda v1: Access(((lambda v1: Min(v1, Maximum(x))))(v1), x)))(u1)), i)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 49.34179222839017,
                "explored_percent_lambda": 20.507533703409994,
                "explored_percent_none": 30.15067406819984,
                "kept_percent_concrete": 59.85037406483791,
                "kept_percent_lambda": 40.14962593516209,
                "num_examples": 3,
                "num_explored_concrete": 3111,
                "num_explored_lambda": 1293,
                "num_explored_none": 1901,
                "num_inputs": 2,
                "num_kept_concrete": 720,
                "num_kept_lambda": 483,
                "num_values_explored": 6305,
                "num_values_kept": 1203,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7705
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.88991552195512,
            "num_unique_values": 1044,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.49256900212314,
                "explored_percent_lambda": 12.031139419674451,
                "explored_percent_none": 39.47629157820241,
                "kept_percent_concrete": 69.34235976789168,
                "kept_percent_lambda": 30.657640232108317,
                "num_examples": 5,
                "num_explored_concrete": 3426,
                "num_explored_lambda": 850,
                "num_explored_none": 2789,
                "num_inputs": 2,
                "num_kept_concrete": 717,
                "num_kept_lambda": 317,
                "num_values_explored": 7065,
                "num_values_kept": 1034,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 147026
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.405041820835322,
            "num_unique_values": 706,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.94457507557944,
                "explored_percent_lambda": 23.748740342626807,
                "explored_percent_none": 31.306684581793753,
                "kept_percent_concrete": 53.5919540229885,
                "kept_percent_lambda": 46.4080459770115,
                "num_examples": 3,
                "num_explored_concrete": 1338,
                "num_explored_lambda": 707,
                "num_explored_none": 932,
                "num_inputs": 2,
                "num_kept_concrete": 373,
                "num_kept_lambda": 323,
                "num_values_explored": 2977,
                "num_values_kept": 696,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4377
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.05136541090906,
            "num_unique_values": 1181,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.61418347430059,
                "explored_percent_lambda": 26.707872478854913,
                "explored_percent_none": 34.6779440468445,
                "kept_percent_concrete": 57.472245943637915,
                "kept_percent_lambda": 42.527754056362085,
                "num_examples": 3,
                "num_explored_concrete": 2374,
                "num_explored_lambda": 1642,
                "num_explored_none": 2132,
                "num_inputs": 2,
                "num_kept_concrete": 673,
                "num_kept_lambda": 498,
                "num_values_explored": 6148,
                "num_values_kept": 1171,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 125329
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.94016634090804,
            "num_unique_values": 1274,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.8936108701937,
                "explored_percent_lambda": 11.361665221162186,
                "explored_percent_none": 36.74472390864412,
                "kept_percent_concrete": 78.71835443037975,
                "kept_percent_lambda": 21.281645569620252,
                "num_examples": 5,
                "num_explored_concrete": 3590,
                "num_explored_lambda": 786,
                "num_explored_none": 2542,
                "num_inputs": 2,
                "num_kept_concrete": 995,
                "num_kept_lambda": 269,
                "num_values_explored": 6918,
                "num_values_kept": 1264,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 139486
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24313937104307115,
            "num_unique_values": 199,
            "solution": "Maximum(ZipWith((lambda u1, u2: ((lambda v1: Count((lambda u1: ((lambda v1: IsEven(v1)))(v1)), x)))(u1)), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.74309978768577,
                "explored_percent_lambda": 29.29936305732484,
                "explored_percent_none": 19.957537154989385,
                "kept_percent_concrete": 60.526315789473685,
                "kept_percent_lambda": 39.473684210526315,
                "num_examples": 5,
                "num_explored_concrete": 239,
                "num_explored_lambda": 138,
                "num_explored_none": 94,
                "num_inputs": 1,
                "num_kept_concrete": 115,
                "num_kept_lambda": 75,
                "num_values_explored": 471,
                "num_values_kept": 190,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.147991074016318,
            "num_unique_values": 211,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Max(v1, ((lambda v1: Subtract(0, v1)))(v1))))(u2)), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 10.624551328068916,
                "explored_percent_lambda": 34.67336683417086,
                "explored_percent_none": 54.70208183776023,
                "kept_percent_concrete": 31.683168316831683,
                "kept_percent_lambda": 68.31683168316832,
                "num_examples": 3,
                "num_explored_concrete": 148,
                "num_explored_lambda": 483,
                "num_explored_none": 762,
                "num_inputs": 1,
                "num_kept_concrete": 64,
                "num_kept_lambda": 138,
                "num_values_explored": 1393,
                "num_values_kept": 202,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14713
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.9760083889123,
            "num_unique_values": 967,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.49423507141628,
                "explored_percent_lambda": 23.988986405093787,
                "explored_percent_none": 27.516778523489933,
                "kept_percent_concrete": 55.636743215031316,
                "kept_percent_lambda": 44.363256784968684,
                "num_examples": 3,
                "num_explored_concrete": 2818,
                "num_explored_lambda": 1394,
                "num_explored_none": 1599,
                "num_inputs": 1,
                "num_kept_concrete": 533,
                "num_kept_lambda": 425,
                "num_values_explored": 5811,
                "num_values_kept": 958,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 118560
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17373669194057584,
            "num_unique_values": 118,
            "solution": "ZipWith((lambda u1, u2: Head(x)), x, x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 33.333333333333336,
                "explored_percent_lambda": 38.51851851851852,
                "explored_percent_none": 28.14814814814815,
                "kept_percent_concrete": 29.357798165137616,
                "kept_percent_lambda": 70.64220183486239,
                "num_examples": 3,
                "num_explored_concrete": 90,
                "num_explored_lambda": 104,
                "num_explored_none": 76,
                "num_inputs": 1,
                "num_kept_concrete": 32,
                "num_kept_lambda": 77,
                "num_values_explored": 270,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 270
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.914073405088857,
            "num_unique_values": 409,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.95026178010471,
                "explored_percent_lambda": 23.298429319371728,
                "explored_percent_none": 34.75130890052356,
                "kept_percent_concrete": 53.768844221105525,
                "kept_percent_lambda": 46.231155778894475,
                "num_examples": 3,
                "num_explored_concrete": 641,
                "num_explored_lambda": 356,
                "num_explored_none": 531,
                "num_inputs": 3,
                "num_kept_concrete": 214,
                "num_kept_lambda": 184,
                "num_values_explored": 1528,
                "num_values_kept": 398,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2928
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.06318268808536,
            "num_unique_values": 1123,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.20493358633776,
                "explored_percent_lambda": 28.671726755218216,
                "explored_percent_none": 35.123339658444024,
                "kept_percent_concrete": 49.64093357271095,
                "kept_percent_lambda": 50.35906642728905,
                "num_examples": 3,
                "num_explored_concrete": 1908,
                "num_explored_lambda": 1511,
                "num_explored_none": 1851,
                "num_inputs": 1,
                "num_kept_concrete": 553,
                "num_kept_lambda": 561,
                "num_values_explored": 5270,
                "num_values_kept": 1114,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 107349
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.09611074789427,
            "num_unique_values": 1124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.23972602739726,
                "explored_percent_lambda": 21.2640099626401,
                "explored_percent_none": 38.49626400996264,
                "kept_percent_concrete": 58.61759425493717,
                "kept_percent_lambda": 41.38240574506283,
                "num_examples": 3,
                "num_explored_concrete": 2585,
                "num_explored_lambda": 1366,
                "num_explored_none": 2473,
                "num_inputs": 2,
                "num_kept_concrete": 653,
                "num_kept_lambda": 461,
                "num_values_explored": 6424,
                "num_values_kept": 1114,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 128738
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.93378956709057,
            "num_unique_values": 1159,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.174780768067734,
                "explored_percent_lambda": 20.83459328696704,
                "explored_percent_none": 32.990625944965224,
                "kept_percent_concrete": 62.97909407665505,
                "kept_percent_lambda": 37.02090592334495,
                "num_examples": 3,
                "num_explored_concrete": 3054,
                "num_explored_lambda": 1378,
                "num_explored_none": 2182,
                "num_inputs": 3,
                "num_kept_concrete": 723,
                "num_kept_lambda": 425,
                "num_values_explored": 6614,
                "num_values_kept": 1148,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 134978
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.9849668869283,
            "num_unique_values": 1078,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.37035797925728,
                "explored_percent_lambda": 24.255603880896622,
                "explored_percent_none": 38.3740381398461,
                "kept_percent_concrete": 55.940130963517305,
                "kept_percent_lambda": 44.059869036482695,
                "num_examples": 3,
                "num_explored_concrete": 2234,
                "num_explored_lambda": 1450,
                "num_explored_none": 2294,
                "num_inputs": 1,
                "num_kept_concrete": 598,
                "num_kept_lambda": 471,
                "num_values_explored": 5978,
                "num_values_kept": 1069,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 120785
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.897542753024027,
            "num_unique_values": 703,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), Map((lambda u1: -1), x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 29.518413597733712,
                "explored_percent_lambda": 29.71671388101983,
                "explored_percent_none": 40.76487252124646,
                "kept_percent_concrete": 49.711815561959654,
                "kept_percent_lambda": 50.288184438040346,
                "num_examples": 3,
                "num_explored_concrete": 1042,
                "num_explored_lambda": 1049,
                "num_explored_none": 1439,
                "num_inputs": 1,
                "num_kept_concrete": 345,
                "num_kept_lambda": 349,
                "num_values_explored": 3530,
                "num_values_kept": 694,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5490
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.03251837496646,
            "num_unique_values": 1204,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.05806348699952,
                "explored_percent_lambda": 26.495453820386025,
                "explored_percent_none": 29.446482692614453,
                "kept_percent_concrete": 51.29707112970711,
                "kept_percent_lambda": 48.70292887029289,
                "num_examples": 3,
                "num_explored_concrete": 2762,
                "num_explored_lambda": 1661,
                "num_explored_none": 1846,
                "num_inputs": 1,
                "num_kept_concrete": 613,
                "num_kept_lambda": 582,
                "num_values_explored": 6269,
                "num_values_kept": 1195,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 123378
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.00432959292084,
            "num_unique_values": 1257,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.795638803466595,
                "explored_percent_lambda": 10.819122169415712,
                "explored_percent_none": 36.3852390271177,
                "kept_percent_concrete": 75.22052927024859,
                "kept_percent_lambda": 24.779470729751402,
                "num_examples": 5,
                "num_explored_concrete": 3777,
                "num_explored_lambda": 774,
                "num_explored_none": 2603,
                "num_inputs": 2,
                "num_kept_concrete": 938,
                "num_kept_lambda": 309,
                "num_values_explored": 7154,
                "num_values_kept": 1247,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 144646
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.42
}