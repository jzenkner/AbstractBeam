{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.7378372820094228,
            "num_unique_values": 344,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.69230769230769,
                "explored_percent_lambda": 36.53846153846154,
                "explored_percent_none": 5.769230769230769,
                "kept_percent_concrete": 56.932153392330385,
                "kept_percent_lambda": 43.067846607669615,
                "num_examples": 3,
                "num_explored_concrete": 330,
                "num_explored_lambda": 209,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 146,
                "num_values_explored": 572,
                "num_values_kept": 339,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 572
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2214184100739658,
            "num_unique_values": 101,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.19838056680162,
                "explored_percent_lambda": 15.654520917678813,
                "explored_percent_none": 51.147098515519566,
                "kept_percent_concrete": 72.63157894736842,
                "kept_percent_lambda": 27.36842105263158,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 116,
                "num_explored_none": 379,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 26,
                "num_values_explored": 741,
                "num_values_kept": 95,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 741
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.96831118199043,
            "num_unique_values": 725,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.73525557011796,
                "explored_percent_lambda": 35.714285714285715,
                "explored_percent_none": 10.55045871559633,
                "kept_percent_concrete": 61.25,
                "kept_percent_lambda": 38.75,
                "num_examples": 3,
                "num_explored_concrete": 820,
                "num_explored_lambda": 545,
                "num_explored_none": 161,
                "num_inputs": 1,
                "num_kept_concrete": 441,
                "num_kept_lambda": 279,
                "num_values_explored": 1526,
                "num_values_kept": 720,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14759
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27217346196994,
            "num_unique_values": 1283,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.761129983908454,
                "explored_percent_lambda": 33.863758269265155,
                "explored_percent_none": 14.37511174682639,
                "kept_percent_concrete": 56.25978090766823,
                "kept_percent_lambda": 43.74021909233177,
                "num_examples": 3,
                "num_explored_concrete": 2895,
                "num_explored_lambda": 1894,
                "num_explored_none": 804,
                "num_inputs": 1,
                "num_kept_concrete": 719,
                "num_kept_lambda": 559,
                "num_values_explored": 5593,
                "num_values_kept": 1278,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61403
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.37658771802671254,
            "num_unique_values": 285,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 68.90595009596929,
                "explored_percent_lambda": 27.06333973128599,
                "explored_percent_none": 4.030710172744722,
                "kept_percent_concrete": 70.25089605734767,
                "kept_percent_lambda": 29.74910394265233,
                "num_examples": 3,
                "num_explored_concrete": 359,
                "num_explored_lambda": 141,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 196,
                "num_kept_lambda": 83,
                "num_values_explored": 521,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03977338899858,
            "num_unique_values": 1646,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.59462651313846,
                "explored_percent_lambda": 13.876586950103336,
                "explored_percent_none": 7.528786536758193,
                "kept_percent_concrete": 79.15904936014626,
                "kept_percent_lambda": 20.840950639853748,
                "num_examples": 5,
                "num_explored_concrete": 5324,
                "num_explored_lambda": 940,
                "num_explored_none": 510,
                "num_inputs": 1,
                "num_kept_concrete": 1299,
                "num_kept_lambda": 342,
                "num_values_explored": 6774,
                "num_values_kept": 1641,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68306
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14837763900868595,
            "num_unique_values": 108,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 31.48148148148148,
                "explored_percent_lambda": 64.81481481481481,
                "explored_percent_none": 3.7037037037037037,
                "kept_percent_concrete": 16.50485436893204,
                "kept_percent_lambda": 83.49514563106796,
                "num_examples": 3,
                "num_explored_concrete": 51,
                "num_explored_lambda": 105,
                "num_explored_none": 6,
                "num_inputs": 1,
                "num_kept_concrete": 17,
                "num_kept_lambda": 86,
                "num_values_explored": 162,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.012252433924,
            "num_unique_values": 1405,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.57823804795007,
                "explored_percent_lambda": 12.824514115477372,
                "explored_percent_none": 10.597247836572564,
                "kept_percent_concrete": 77.07142857142857,
                "kept_percent_lambda": 22.928571428571427,
                "num_examples": 5,
                "num_explored_concrete": 5398,
                "num_explored_lambda": 904,
                "num_explored_none": 747,
                "num_inputs": 1,
                "num_kept_concrete": 1079,
                "num_kept_lambda": 321,
                "num_values_explored": 7049,
                "num_values_kept": 1400,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71320
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01853614090942,
            "num_unique_values": 1422,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.2291414752116,
                "explored_percent_lambda": 13.074365175332527,
                "explored_percent_none": 12.696493349455865,
                "kept_percent_concrete": 79.39308398023995,
                "kept_percent_lambda": 20.606916019760057,
                "num_examples": 5,
                "num_explored_concrete": 4911,
                "num_explored_lambda": 865,
                "num_explored_none": 840,
                "num_inputs": 1,
                "num_kept_concrete": 1125,
                "num_kept_lambda": 292,
                "num_values_explored": 6616,
                "num_values_kept": 1417,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67769
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 86.33961019595154,
            "num_unique_values": 993,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.8997461928934,
                "explored_percent_lambda": 31.091370558375633,
                "explored_percent_none": 11.008883248730964,
                "kept_percent_concrete": 52.32793522267207,
                "kept_percent_lambda": 47.67206477732793,
                "num_examples": 3,
                "num_explored_concrete": 1825,
                "num_explored_lambda": 980,
                "num_explored_none": 347,
                "num_inputs": 1,
                "num_kept_concrete": 517,
                "num_kept_lambda": 471,
                "num_values_explored": 3152,
                "num_values_kept": 988,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 48684
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91338797006756,
            "num_unique_values": 1702,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.24727379899794,
                "explored_percent_lambda": 8.959622752726201,
                "explored_percent_none": 13.793103448275861,
                "kept_percent_concrete": 87.5,
                "kept_percent_lambda": 12.5,
                "num_examples": 5,
                "num_explored_concrete": 5242,
                "num_explored_lambda": 608,
                "num_explored_none": 936,
                "num_inputs": 2,
                "num_kept_concrete": 1484,
                "num_kept_lambda": 212,
                "num_values_explored": 6786,
                "num_values_kept": 1696,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69272
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92890241998248,
            "num_unique_values": 1616,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.84793776603551,
                "explored_percent_lambda": 20.62233964479671,
                "explored_percent_none": 7.5297225891677675,
                "kept_percent_concrete": 71.80124223602485,
                "kept_percent_lambda": 28.198757763975156,
                "num_examples": 3,
                "num_explored_concrete": 4895,
                "num_explored_lambda": 1405,
                "num_explored_none": 513,
                "num_inputs": 2,
                "num_kept_concrete": 1156,
                "num_kept_lambda": 454,
                "num_values_explored": 6813,
                "num_values_kept": 1610,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68502
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.39038249896839,
            "num_unique_values": 1115,
            "solution": "Min(If(IsOdd(Minimum(fn_1(fn_1(x)))), Last(fn_21(fn_10(x))), Last(x)), Count((lambda u1: ((lambda v1: Less(v1, 1)))(u1)), x))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 76.17765814266487,
                "explored_percent_lambda": 13.378196500672948,
                "explored_percent_none": 10.44414535666218,
                "kept_percent_concrete": 81.62162162162163,
                "kept_percent_lambda": 18.37837837837838,
                "num_examples": 5,
                "num_explored_concrete": 2830,
                "num_explored_lambda": 497,
                "num_explored_none": 388,
                "num_inputs": 1,
                "num_kept_concrete": 906,
                "num_kept_lambda": 204,
                "num_values_explored": 3715,
                "num_values_kept": 1110,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 32570
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.832781229168177,
            "num_unique_values": 960,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), fn_21(x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 58.038258038258036,
                "explored_percent_lambda": 30.64713064713065,
                "explored_percent_none": 11.314611314611314,
                "kept_percent_concrete": 63.246073298429316,
                "kept_percent_lambda": 36.753926701570684,
                "num_examples": 3,
                "num_explored_concrete": 1426,
                "num_explored_lambda": 753,
                "num_explored_none": 278,
                "num_inputs": 1,
                "num_kept_concrete": 604,
                "num_kept_lambda": 351,
                "num_values_explored": 2457,
                "num_values_kept": 955,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4307
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93437006697059,
            "num_unique_values": 1894,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.62066831683168,
                "explored_percent_lambda": 21.797648514851485,
                "explored_percent_none": 10.581683168316832,
                "kept_percent_concrete": 72.97297297297297,
                "kept_percent_lambda": 27.027027027027028,
                "num_examples": 3,
                "num_explored_concrete": 4371,
                "num_explored_lambda": 1409,
                "num_explored_none": 684,
                "num_inputs": 3,
                "num_kept_concrete": 1377,
                "num_kept_lambda": 510,
                "num_values_explored": 6464,
                "num_values_kept": 1887,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67771
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19006200879812,
            "num_unique_values": 1818,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.68726428778648,
                "explored_percent_lambda": 15.404699738903394,
                "explored_percent_none": 10.908035973310124,
                "kept_percent_concrete": 72.5565985643291,
                "kept_percent_lambda": 27.4434014356709,
                "num_examples": 3,
                "num_explored_concrete": 5080,
                "num_explored_lambda": 1062,
                "num_explored_none": 752,
                "num_inputs": 3,
                "num_kept_concrete": 1314,
                "num_kept_lambda": 497,
                "num_values_explored": 6894,
                "num_values_kept": 1811,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68940
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91843719710596,
            "num_unique_values": 1667,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.60119047619048,
                "explored_percent_lambda": 17.038690476190474,
                "explored_percent_none": 9.360119047619047,
                "kept_percent_concrete": 77.65060240963855,
                "kept_percent_lambda": 22.349397590361445,
                "num_examples": 3,
                "num_explored_concrete": 4946,
                "num_explored_lambda": 1145,
                "num_explored_none": 629,
                "num_inputs": 3,
                "num_kept_concrete": 1289,
                "num_kept_lambda": 371,
                "num_values_explored": 6720,
                "num_values_kept": 1660,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69537
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.3302349851001054,
            "num_unique_values": 580,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 60.84788029925187,
                "explored_percent_lambda": 26.433915211970074,
                "explored_percent_none": 12.718204488778055,
                "kept_percent_concrete": 59.23344947735192,
                "kept_percent_lambda": 40.76655052264808,
                "num_examples": 3,
                "num_explored_concrete": 976,
                "num_explored_lambda": 424,
                "num_explored_none": 204,
                "num_inputs": 2,
                "num_kept_concrete": 340,
                "num_kept_lambda": 234,
                "num_values_explored": 1604,
                "num_values_kept": 574,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3824
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.729341916972771,
            "num_unique_values": 1753,
            "solution": "fn_11(Sort(y), fn_0(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 78.95592779313709,
                "explored_percent_lambda": 12.13205399251911,
                "explored_percent_none": 8.912018214343796,
                "kept_percent_concrete": 83.85804235832856,
                "kept_percent_lambda": 16.141957641671436,
                "num_examples": 5,
                "num_explored_concrete": 4855,
                "num_explored_lambda": 746,
                "num_explored_none": 548,
                "num_inputs": 2,
                "num_kept_concrete": 1465,
                "num_kept_lambda": 282,
                "num_values_explored": 6149,
                "num_values_kept": 1747,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 8369
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.372446335852146,
            "num_unique_values": 339,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u2, u1)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.46466809421842,
                "explored_percent_lambda": 36.50963597430407,
                "explored_percent_none": 14.025695931477516,
                "kept_percent_concrete": 57.95795795795796,
                "kept_percent_lambda": 42.04204204204204,
                "num_examples": 3,
                "num_explored_concrete": 462,
                "num_explored_lambda": 341,
                "num_explored_none": 131,
                "num_inputs": 2,
                "num_kept_concrete": 193,
                "num_kept_lambda": 140,
                "num_values_explored": 934,
                "num_values_kept": 333,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3154
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.98511589691043,
            "num_unique_values": 632,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.97001873828857,
                "explored_percent_lambda": 36.102435977514055,
                "explored_percent_none": 15.927545284197377,
                "kept_percent_concrete": 53.90749601275917,
                "kept_percent_lambda": 46.09250398724083,
                "num_examples": 3,
                "num_explored_concrete": 768,
                "num_explored_lambda": 578,
                "num_explored_none": 255,
                "num_inputs": 1,
                "num_kept_concrete": 338,
                "num_kept_lambda": 289,
                "num_values_explored": 1601,
                "num_values_kept": 627,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 43515
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24046038300730288,
            "num_unique_values": 143,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.68852459016394,
                "explored_percent_lambda": 40.16393442622951,
                "explored_percent_none": 6.147540983606557,
                "kept_percent_concrete": 43.47826086956522,
                "kept_percent_lambda": 56.52173913043478,
                "num_examples": 3,
                "num_explored_concrete": 131,
                "num_explored_lambda": 98,
                "num_explored_none": 15,
                "num_inputs": 1,
                "num_kept_concrete": 60,
                "num_kept_lambda": 78,
                "num_values_explored": 244,
                "num_values_kept": 138,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96183135383762,
            "num_unique_values": 1871,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.52592592592593,
                "explored_percent_lambda": 11.481481481481481,
                "explored_percent_none": 10.992592592592592,
                "kept_percent_concrete": 84.07506702412869,
                "kept_percent_lambda": 15.924932975871315,
                "num_examples": 5,
                "num_explored_concrete": 5233,
                "num_explored_lambda": 775,
                "num_explored_none": 742,
                "num_inputs": 2,
                "num_kept_concrete": 1568,
                "num_kept_lambda": 297,
                "num_values_explored": 6750,
                "num_values_kept": 1865,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70473
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95586492703296,
            "num_unique_values": 1782,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.36225266362253,
                "explored_percent_lambda": 22.712667004904446,
                "explored_percent_none": 10.925080331473026,
                "kept_percent_concrete": 73.42342342342343,
                "kept_percent_lambda": 26.576576576576578,
                "num_examples": 3,
                "num_explored_concrete": 3924,
                "num_explored_lambda": 1343,
                "num_explored_none": 646,
                "num_inputs": 2,
                "num_kept_concrete": 1304,
                "num_kept_lambda": 472,
                "num_values_explored": 5913,
                "num_values_kept": 1776,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60306
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28222090285271,
            "num_unique_values": 1902,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.51305091998289,
                "explored_percent_lambda": 15.632577378405363,
                "explored_percent_none": 10.854371701611752,
                "kept_percent_concrete": 73.93139841688654,
                "kept_percent_lambda": 26.068601583113455,
                "num_examples": 3,
                "num_explored_concrete": 5154,
                "num_explored_lambda": 1096,
                "num_explored_none": 761,
                "num_inputs": 3,
                "num_kept_concrete": 1401,
                "num_kept_lambda": 494,
                "num_values_explored": 7011,
                "num_values_kept": 1895,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72722
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00172925298102,
            "num_unique_values": 1726,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.02348460806094,
                "explored_percent_lambda": 14.40812440495081,
                "explored_percent_none": 9.568390986988257,
                "kept_percent_concrete": 81.87100522951772,
                "kept_percent_lambda": 18.12899477048228,
                "num_examples": 5,
                "num_explored_concrete": 4791,
                "num_explored_lambda": 908,
                "num_explored_none": 603,
                "num_inputs": 1,
                "num_kept_concrete": 1409,
                "num_kept_lambda": 312,
                "num_values_explored": 6302,
                "num_values_kept": 1721,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65948
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03467497695237,
            "num_unique_values": 1669,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.29735376044569,
                "explored_percent_lambda": 22.38857938718663,
                "explored_percent_none": 9.314066852367688,
                "kept_percent_concrete": 72.65625,
                "kept_percent_lambda": 27.34375,
                "num_examples": 3,
                "num_explored_concrete": 3923,
                "num_explored_lambda": 1286,
                "num_explored_none": 535,
                "num_inputs": 1,
                "num_kept_concrete": 1209,
                "num_kept_lambda": 455,
                "num_values_explored": 5744,
                "num_values_kept": 1664,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60738
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09430465707555,
            "num_unique_values": 1552,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.69281045751634,
                "explored_percent_lambda": 25.784313725490197,
                "explored_percent_none": 10.522875816993464,
                "kept_percent_concrete": 67.07632600258732,
                "kept_percent_lambda": 32.92367399741268,
                "num_examples": 3,
                "num_explored_concrete": 3898,
                "num_explored_lambda": 1578,
                "num_explored_none": 644,
                "num_inputs": 2,
                "num_kept_concrete": 1037,
                "num_kept_lambda": 509,
                "num_values_explored": 6120,
                "num_values_kept": 1546,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65071
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.36436925106681883,
            "num_unique_values": 323,
            "solution": "fn_10(fn_14(Map((lambda u1: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.33285094066571,
                "explored_percent_lambda": 21.99710564399421,
                "explored_percent_none": 7.6700434153400865,
                "kept_percent_concrete": 69.49685534591195,
                "kept_percent_lambda": 30.50314465408805,
                "num_examples": 3,
                "num_explored_concrete": 486,
                "num_explored_lambda": 152,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 221,
                "num_kept_lambda": 97,
                "num_values_explored": 691,
                "num_values_kept": 318,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 691
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.26769548188895,
            "num_unique_values": 878,
            "solution": "Take(Sum(fn_21(fn_1(Sort(r)))), fn_1(Take(Sum(Drop(Subtract(Add(-1, -1), 1), r)), Sort(c))))",
            "solution_weight": 18,
            "stats": {
                "explored_percent_concrete": 64.7179909427748,
                "explored_percent_lambda": 24.331000411692056,
                "explored_percent_none": 10.951008645533141,
                "kept_percent_concrete": 67.88990825688073,
                "kept_percent_lambda": 32.11009174311926,
                "num_examples": 3,
                "num_explored_concrete": 1572,
                "num_explored_lambda": 591,
                "num_explored_none": 266,
                "num_inputs": 2,
                "num_kept_concrete": 592,
                "num_kept_lambda": 280,
                "num_values_explored": 2429,
                "num_values_kept": 872,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3909
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05136158503592,
            "num_unique_values": 1666,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.11316810988355,
                "explored_percent_lambda": 9.271424305762915,
                "explored_percent_none": 11.61540758435354,
                "kept_percent_concrete": 84.4578313253012,
                "kept_percent_lambda": 15.542168674698795,
                "num_examples": 5,
                "num_explored_concrete": 5299,
                "num_explored_lambda": 621,
                "num_explored_none": 778,
                "num_inputs": 2,
                "num_kept_concrete": 1402,
                "num_kept_lambda": 258,
                "num_values_explored": 6698,
                "num_values_kept": 1660,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70225
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0621757588815,
            "num_unique_values": 1391,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.62000365030115,
                "explored_percent_lambda": 26.482934842124475,
                "explored_percent_none": 15.897061507574374,
                "kept_percent_concrete": 59.668109668109665,
                "kept_percent_lambda": 40.331890331890335,
                "num_examples": 3,
                "num_explored_concrete": 3157,
                "num_explored_lambda": 1451,
                "num_explored_none": 871,
                "num_inputs": 1,
                "num_kept_concrete": 827,
                "num_kept_lambda": 559,
                "num_values_explored": 5479,
                "num_values_kept": 1386,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56617
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94702593819238,
            "num_unique_values": 1848,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.20377594008426,
                "explored_percent_lambda": 22.889686378530193,
                "explored_percent_none": 10.90653768138555,
                "kept_percent_concrete": 72.69272529858848,
                "kept_percent_lambda": 27.307274701411508,
                "num_examples": 3,
                "num_explored_concrete": 4243,
                "num_explored_lambda": 1467,
                "num_explored_none": 699,
                "num_inputs": 2,
                "num_kept_concrete": 1339,
                "num_kept_lambda": 503,
                "num_values_explored": 6409,
                "num_values_kept": 1842,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65139
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7245239259209484,
            "num_unique_values": 500,
            "solution": "Head(fn_14(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 54.88986784140969,
                "explored_percent_lambda": 31.365638766519822,
                "explored_percent_none": 13.744493392070485,
                "kept_percent_concrete": 68.21862348178138,
                "kept_percent_lambda": 31.781376518218625,
                "num_examples": 5,
                "num_explored_concrete": 623,
                "num_explored_lambda": 356,
                "num_explored_none": 156,
                "num_inputs": 2,
                "num_kept_concrete": 337,
                "num_kept_lambda": 157,
                "num_values_explored": 1135,
                "num_values_kept": 494,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3355
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.58933937503025,
            "num_unique_values": 318,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.952040085898354,
                "explored_percent_lambda": 16.8790264853257,
                "explored_percent_none": 52.16893342877595,
                "kept_percent_concrete": 65.17571884984025,
                "kept_percent_lambda": 34.82428115015974,
                "num_examples": 5,
                "num_explored_concrete": 2162,
                "num_explored_lambda": 1179,
                "num_explored_none": 3644,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 109,
                "num_values_explored": 6985,
                "num_values_kept": 313,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66399
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1448838000651449,
            "num_unique_values": 167,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 69.56521739130434,
                "explored_percent_lambda": 22.134387351778656,
                "explored_percent_none": 8.300395256916996,
                "kept_percent_concrete": 68.94409937888199,
                "kept_percent_lambda": 31.055900621118013,
                "num_examples": 5,
                "num_explored_concrete": 176,
                "num_explored_lambda": 56,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 50,
                "num_values_explored": 253,
                "num_values_kept": 161,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92058835783973,
            "num_unique_values": 1670,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.32001248829222,
                "explored_percent_lambda": 17.405557290040587,
                "explored_percent_none": 7.2744302216671874,
                "kept_percent_concrete": 72.1921921921922,
                "kept_percent_lambda": 27.80780780780781,
                "num_examples": 3,
                "num_explored_concrete": 4825,
                "num_explored_lambda": 1115,
                "num_explored_none": 466,
                "num_inputs": 1,
                "num_kept_concrete": 1202,
                "num_kept_lambda": 463,
                "num_values_explored": 6406,
                "num_values_kept": 1665,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66582
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1467401550617069,
            "num_unique_values": 84,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 34.72584856396867,
                "explored_percent_lambda": 15.143603133159269,
                "explored_percent_none": 50.130548302872064,
                "kept_percent_concrete": 74.35897435897436,
                "kept_percent_lambda": 25.641025641025642,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 58,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 58,
                "num_kept_lambda": 20,
                "num_values_explored": 383,
                "num_values_kept": 78,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 383
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09983160113916,
            "num_unique_values": 480,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.06741573033708,
                "explored_percent_lambda": 44.06099518459069,
                "explored_percent_none": 9.87158908507223,
                "kept_percent_concrete": 54.526315789473685,
                "kept_percent_lambda": 45.473684210526315,
                "num_examples": 3,
                "num_explored_concrete": 574,
                "num_explored_lambda": 549,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 259,
                "num_kept_lambda": 216,
                "num_values_explored": 1246,
                "num_values_kept": 475,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27836
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.78416660288349,
            "num_unique_values": 333,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.05340699815838,
                "explored_percent_lambda": 37.476979742173114,
                "explored_percent_none": 15.469613259668508,
                "kept_percent_concrete": 53.65853658536585,
                "kept_percent_lambda": 46.34146341463415,
                "num_examples": 3,
                "num_explored_concrete": 511,
                "num_explored_lambda": 407,
                "num_explored_none": 168,
                "num_inputs": 1,
                "num_kept_concrete": 176,
                "num_kept_lambda": 152,
                "num_values_explored": 1086,
                "num_values_kept": 328,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13776
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.87691731005907,
            "num_unique_values": 275,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 33.51877607788595,
                "explored_percent_lambda": 51.04311543810849,
                "explored_percent_none": 15.438108484005562,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 241,
                "num_explored_lambda": 367,
                "num_explored_none": 111,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 162,
                "num_values_explored": 719,
                "num_values_kept": 270,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 12834
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 104.2992181009613,
            "num_unique_values": 311,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 36.90621193666261,
                "explored_percent_lambda": 44.45797807551766,
                "explored_percent_none": 18.635809987819734,
                "kept_percent_concrete": 53.77049180327869,
                "kept_percent_lambda": 46.22950819672131,
                "num_examples": 3,
                "num_explored_concrete": 303,
                "num_explored_lambda": 365,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 164,
                "num_kept_lambda": 141,
                "num_values_explored": 821,
                "num_values_kept": 305,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 10847
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.9835405680351,
            "num_unique_values": 271,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 44.71830985915493,
                "explored_percent_none": 15.140845070422536,
                "kept_percent_concrete": 52.255639097744364,
                "kept_percent_lambda": 47.744360902255636,
                "num_examples": 5,
                "num_explored_concrete": 342,
                "num_explored_lambda": 381,
                "num_explored_none": 129,
                "num_inputs": 1,
                "num_kept_concrete": 139,
                "num_kept_lambda": 127,
                "num_values_explored": 852,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 10345
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.28584197186865,
            "num_unique_values": 359,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.83720930232558,
                "explored_percent_lambda": 46.16279069767442,
                "explored_percent_none": 15.0,
                "kept_percent_concrete": 51.12994350282486,
                "kept_percent_lambda": 48.87005649717514,
                "num_examples": 3,
                "num_explored_concrete": 334,
                "num_explored_lambda": 397,
                "num_explored_none": 129,
                "num_inputs": 1,
                "num_kept_concrete": 181,
                "num_kept_lambda": 173,
                "num_values_explored": 860,
                "num_values_kept": 354,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 9816
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.15845886804163,
            "num_unique_values": 345,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.95539033457249,
                "explored_percent_lambda": 45.353159851301115,
                "explored_percent_none": 6.691449814126394,
                "kept_percent_concrete": 54.11764705882353,
                "kept_percent_lambda": 45.88235294117647,
                "num_examples": 3,
                "num_explored_concrete": 387,
                "num_explored_lambda": 366,
                "num_explored_none": 54,
                "num_inputs": 1,
                "num_kept_concrete": 184,
                "num_kept_lambda": 156,
                "num_values_explored": 807,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 10249
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.09110072697513,
            "num_unique_values": 199,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 31.379310344827587,
                "explored_percent_lambda": 47.93103448275862,
                "explored_percent_none": 20.689655172413794,
                "kept_percent_concrete": 38.86010362694301,
                "kept_percent_lambda": 61.13989637305699,
                "num_examples": 5,
                "num_explored_concrete": 182,
                "num_explored_lambda": 278,
                "num_explored_none": 120,
                "num_inputs": 2,
                "num_kept_concrete": 75,
                "num_kept_lambda": 118,
                "num_values_explored": 580,
                "num_values_kept": 193,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 9506
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.8625858661253,
            "num_unique_values": 325,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.48318042813456,
                "explored_percent_lambda": 40.825688073394495,
                "explored_percent_none": 12.691131498470948,
                "kept_percent_concrete": 47.64890282131662,
                "kept_percent_lambda": 52.35109717868338,
                "num_examples": 3,
                "num_explored_concrete": 304,
                "num_explored_lambda": 267,
                "num_explored_none": 83,
                "num_inputs": 2,
                "num_kept_concrete": 152,
                "num_kept_lambda": 167,
                "num_values_explored": 654,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 8457
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.00098307593726,
            "num_unique_values": 320,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.143737166324435,
                "explored_percent_lambda": 40.965092402464066,
                "explored_percent_none": 18.8911704312115,
                "kept_percent_concrete": 59.554140127388536,
                "kept_percent_lambda": 40.445859872611464,
                "num_examples": 5,
                "num_explored_concrete": 391,
                "num_explored_lambda": 399,
                "num_explored_none": 184,
                "num_inputs": 2,
                "num_kept_concrete": 187,
                "num_kept_lambda": 127,
                "num_values_explored": 974,
                "num_values_kept": 314,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 13012
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.33226357609965,
            "num_unique_values": 220,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.29353233830846,
                "explored_percent_lambda": 43.28358208955224,
                "explored_percent_none": 15.422885572139304,
                "kept_percent_concrete": 46.26168224299065,
                "kept_percent_lambda": 53.73831775700935,
                "num_examples": 5,
                "num_explored_concrete": 249,
                "num_explored_lambda": 261,
                "num_explored_none": 93,
                "num_inputs": 2,
                "num_kept_concrete": 99,
                "num_kept_lambda": 115,
                "num_values_explored": 603,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 8688
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.776574585121125,
            "num_unique_values": 234,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 36.753100338218715,
                "explored_percent_lambda": 47.688838782412624,
                "explored_percent_none": 15.558060879368659,
                "kept_percent_concrete": 49.56140350877193,
                "kept_percent_lambda": 50.43859649122807,
                "num_examples": 5,
                "num_explored_concrete": 326,
                "num_explored_lambda": 423,
                "num_explored_none": 138,
                "num_inputs": 2,
                "num_kept_concrete": 113,
                "num_kept_lambda": 115,
                "num_values_explored": 887,
                "num_values_kept": 228,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 7716
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}