{
    "num_tasks": 50,
    "num_tasks_solved": 17,
    "results": [
        {
            "elapsed_time": 0.7197819389402866,
            "num_unique_values": 344,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.69230769230769,
                "explored_percent_lambda": 36.53846153846154,
                "explored_percent_none": 5.769230769230769,
                "kept_percent_concrete": 56.932153392330385,
                "kept_percent_lambda": 43.067846607669615,
                "num_examples": 3,
                "num_explored_concrete": 330,
                "num_explored_lambda": 209,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 146,
                "num_values_explored": 572,
                "num_values_kept": 339,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 572
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21731739095412195,
            "num_unique_values": 101,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.19838056680162,
                "explored_percent_lambda": 15.654520917678813,
                "explored_percent_none": 51.147098515519566,
                "kept_percent_concrete": 72.63157894736842,
                "kept_percent_lambda": 27.36842105263158,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 116,
                "num_explored_none": 379,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 26,
                "num_values_explored": 741,
                "num_values_kept": 95,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 741
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.4206818100065,
            "num_unique_values": 1432,
            "solution": "fn_18(fn_9(1, x, x), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.660023446658855,
                "explored_percent_lambda": 34.490035169988275,
                "explored_percent_none": 15.849941383352872,
                "kept_percent_concrete": 60.89698668535389,
                "kept_percent_lambda": 39.10301331464611,
                "num_examples": 3,
                "num_explored_concrete": 2118,
                "num_explored_lambda": 1471,
                "num_explored_none": 676,
                "num_inputs": 1,
                "num_kept_concrete": 869,
                "num_kept_lambda": 558,
                "num_values_explored": 4265,
                "num_values_kept": 1427,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22313
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19675922184251,
            "num_unique_values": 1302,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.71157291293443,
                "explored_percent_lambda": 28.46649946255822,
                "explored_percent_none": 16.821927624507346,
                "kept_percent_concrete": 62.22050886661527,
                "kept_percent_lambda": 37.77949113338473,
                "num_examples": 3,
                "num_explored_concrete": 3054,
                "num_explored_lambda": 1589,
                "num_explored_none": 939,
                "num_inputs": 1,
                "num_kept_concrete": 807,
                "num_kept_lambda": 490,
                "num_values_explored": 5582,
                "num_values_kept": 1297,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61475
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2828210270963609,
            "num_unique_values": 285,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 68.90595009596929,
                "explored_percent_lambda": 27.06333973128599,
                "explored_percent_none": 4.030710172744722,
                "kept_percent_concrete": 70.25089605734767,
                "kept_percent_lambda": 29.74910394265233,
                "num_examples": 3,
                "num_explored_concrete": 359,
                "num_explored_lambda": 141,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 196,
                "num_kept_lambda": 83,
                "num_values_explored": 521,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03013701899908,
            "num_unique_values": 1752,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.29709697344039,
                "explored_percent_lambda": 13.372452130945028,
                "explored_percent_none": 10.330450895614577,
                "kept_percent_concrete": 81.45392100744132,
                "kept_percent_lambda": 18.546078992558673,
                "num_examples": 5,
                "num_explored_concrete": 4941,
                "num_explored_lambda": 866,
                "num_explored_none": 669,
                "num_inputs": 1,
                "num_kept_concrete": 1423,
                "num_kept_lambda": 324,
                "num_values_explored": 6476,
                "num_values_kept": 1747,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66992
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14904684899374843,
            "num_unique_values": 108,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 31.48148148148148,
                "explored_percent_lambda": 64.81481481481481,
                "explored_percent_none": 3.7037037037037037,
                "kept_percent_concrete": 16.50485436893204,
                "kept_percent_lambda": 83.49514563106796,
                "num_examples": 3,
                "num_explored_concrete": 51,
                "num_explored_lambda": 105,
                "num_explored_none": 6,
                "num_inputs": 1,
                "num_kept_concrete": 17,
                "num_kept_lambda": 86,
                "num_values_explored": 162,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97415637806989,
            "num_unique_values": 1315,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.6255096097845,
                "explored_percent_lambda": 13.46825859056494,
                "explored_percent_none": 7.906231799650553,
                "kept_percent_concrete": 77.78625954198473,
                "kept_percent_lambda": 22.213740458015266,
                "num_examples": 5,
                "num_explored_concrete": 5400,
                "num_explored_lambda": 925,
                "num_explored_none": 543,
                "num_inputs": 1,
                "num_kept_concrete": 1019,
                "num_kept_lambda": 291,
                "num_values_explored": 6868,
                "num_values_kept": 1310,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70218
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03754666494206,
            "num_unique_values": 1420,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.38689048760992,
                "explored_percent_lambda": 12.517985611510792,
                "explored_percent_none": 11.095123900879296,
                "kept_percent_concrete": 79.36395759717314,
                "kept_percent_lambda": 20.636042402826856,
                "num_examples": 5,
                "num_explored_concrete": 4778,
                "num_explored_lambda": 783,
                "num_explored_none": 694,
                "num_inputs": 1,
                "num_kept_concrete": 1123,
                "num_kept_lambda": 292,
                "num_values_explored": 6255,
                "num_values_kept": 1415,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65403
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87395285000093,
            "num_unique_values": 1413,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.27730016462411,
                "explored_percent_lambda": 34.90031095664899,
                "explored_percent_none": 12.822388878726906,
                "kept_percent_concrete": 55.18465909090909,
                "kept_percent_lambda": 44.81534090909091,
                "num_examples": 3,
                "num_explored_concrete": 2858,
                "num_explored_lambda": 1908,
                "num_explored_none": 701,
                "num_inputs": 1,
                "num_kept_concrete": 777,
                "num_kept_lambda": 631,
                "num_values_explored": 5467,
                "num_values_kept": 1408,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56779
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92602826980874,
            "num_unique_values": 1578,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.69586448954678,
                "explored_percent_lambda": 10.285365481458873,
                "explored_percent_none": 9.018770028994354,
                "kept_percent_concrete": 86.1323155216285,
                "kept_percent_lambda": 13.867684478371501,
                "num_examples": 5,
                "num_explored_concrete": 5288,
                "num_explored_lambda": 674,
                "num_explored_none": 591,
                "num_inputs": 2,
                "num_kept_concrete": 1354,
                "num_kept_lambda": 218,
                "num_values_explored": 6553,
                "num_values_kept": 1572,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67851
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84179204585962,
            "num_unique_values": 1654,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.84175691937425,
                "explored_percent_lambda": 18.54693140794224,
                "explored_percent_none": 7.611311672683514,
                "kept_percent_concrete": 73.54368932038835,
                "kept_percent_lambda": 26.45631067961165,
                "num_examples": 3,
                "num_explored_concrete": 4909,
                "num_explored_lambda": 1233,
                "num_explored_none": 506,
                "num_inputs": 2,
                "num_kept_concrete": 1212,
                "num_kept_lambda": 436,
                "num_values_explored": 6648,
                "num_values_kept": 1648,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68531
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.20673068892211,
            "num_unique_values": 1314,
            "solution": "Count((lambda u1: ((lambda v1: Greater(((lambda v1: If(((lambda v1: Less(-1, v1)))(v1), -1, Square(Add(-1, -1)))))(v1), v1)))(u1)), x)",
            "solution_weight": 16,
            "stats": {
                "explored_percent_concrete": 77.11754537597234,
                "explored_percent_lambda": 14.282627484874675,
                "explored_percent_none": 8.599827139152982,
                "kept_percent_concrete": 81.97097020626433,
                "kept_percent_lambda": 18.029029793735678,
                "num_examples": 5,
                "num_explored_concrete": 3569,
                "num_explored_lambda": 661,
                "num_explored_none": 398,
                "num_inputs": 1,
                "num_kept_concrete": 1073,
                "num_kept_lambda": 236,
                "num_values_explored": 4628,
                "num_values_kept": 1309,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 25975
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.41685569495894,
            "num_unique_values": 914,
            "solution": "Reverse(Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), fn_21(Reverse(x))))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 55.65152084115659,
                "explored_percent_lambda": 30.116410063837776,
                "explored_percent_none": 14.232069095005633,
                "kept_percent_concrete": 60.286028602860284,
                "kept_percent_lambda": 39.713971397139716,
                "num_examples": 3,
                "num_explored_concrete": 1482,
                "num_explored_lambda": 802,
                "num_explored_none": 379,
                "num_inputs": 1,
                "num_kept_concrete": 548,
                "num_kept_lambda": 361,
                "num_values_explored": 2663,
                "num_values_kept": 909,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4513
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98527189297602,
            "num_unique_values": 1802,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.28455781273865,
                "explored_percent_lambda": 17.275087826485414,
                "explored_percent_none": 11.440354360775927,
                "kept_percent_concrete": 75.37604456824512,
                "kept_percent_lambda": 24.623955431754876,
                "num_examples": 3,
                "num_explored_concrete": 4667,
                "num_explored_lambda": 1131,
                "num_explored_none": 749,
                "num_inputs": 3,
                "num_kept_concrete": 1353,
                "num_kept_lambda": 442,
                "num_values_explored": 6547,
                "num_values_kept": 1795,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66357
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14283389318734,
            "num_unique_values": 1792,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.99278412507516,
                "explored_percent_lambda": 14.987973541791943,
                "explored_percent_none": 11.019242333132892,
                "kept_percent_concrete": 72.04481792717087,
                "kept_percent_lambda": 27.955182072829132,
                "num_examples": 3,
                "num_explored_concrete": 4922,
                "num_explored_lambda": 997,
                "num_explored_none": 733,
                "num_inputs": 3,
                "num_kept_concrete": 1286,
                "num_kept_lambda": 499,
                "num_values_explored": 6652,
                "num_values_kept": 1785,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68349
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97907433100045,
            "num_unique_values": 1559,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.29400864731316,
                "explored_percent_lambda": 18.591723285979,
                "explored_percent_none": 10.114268066707844,
                "kept_percent_concrete": 75.06443298969072,
                "kept_percent_lambda": 24.935567010309278,
                "num_examples": 3,
                "num_explored_concrete": 4617,
                "num_explored_lambda": 1204,
                "num_explored_none": 655,
                "num_inputs": 3,
                "num_kept_concrete": 1165,
                "num_kept_lambda": 387,
                "num_values_explored": 6476,
                "num_values_kept": 1552,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67634
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.530367095954716,
            "num_unique_values": 578,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 55.62091503267974,
                "explored_percent_lambda": 31.176470588235293,
                "explored_percent_none": 13.202614379084967,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 851,
                "num_explored_lambda": 477,
                "num_explored_none": 202,
                "num_inputs": 2,
                "num_kept_concrete": 312,
                "num_kept_lambda": 260,
                "num_values_explored": 1530,
                "num_values_kept": 572,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3750
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.81535893585533,
            "num_unique_values": 1758,
            "solution": "fn_11(Sort(x), fn_0(y))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 78.20555741546703,
                "explored_percent_lambda": 13.039839303649146,
                "explored_percent_none": 8.75460328088383,
                "kept_percent_concrete": 82.70547945205479,
                "kept_percent_lambda": 17.294520547945204,
                "num_examples": 5,
                "num_explored_concrete": 4672,
                "num_explored_lambda": 779,
                "num_explored_none": 523,
                "num_inputs": 2,
                "num_kept_concrete": 1449,
                "num_kept_lambda": 303,
                "num_values_explored": 5974,
                "num_values_kept": 1752,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 34947
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4719479479826987,
            "num_unique_values": 349,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.4028230184582,
                "explored_percent_lambda": 36.26492942453854,
                "explored_percent_none": 14.332247557003257,
                "kept_percent_concrete": 55.68513119533527,
                "kept_percent_lambda": 44.31486880466473,
                "num_examples": 3,
                "num_explored_concrete": 455,
                "num_explored_lambda": 334,
                "num_explored_none": 132,
                "num_inputs": 2,
                "num_kept_concrete": 191,
                "num_kept_lambda": 152,
                "num_values_explored": 921,
                "num_values_kept": 343,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3141
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 92.22052671783604,
            "num_unique_values": 271,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.5,
                "explored_percent_lambda": 52.56410256410256,
                "explored_percent_none": 9.935897435897436,
                "kept_percent_concrete": 40.6015037593985,
                "kept_percent_lambda": 59.3984962406015,
                "num_examples": 3,
                "num_explored_concrete": 234,
                "num_explored_lambda": 328,
                "num_explored_none": 62,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 158,
                "num_values_explored": 624,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52539
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15237214602530003,
            "num_unique_values": 143,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.68852459016394,
                "explored_percent_lambda": 40.16393442622951,
                "explored_percent_none": 6.147540983606557,
                "kept_percent_concrete": 43.47826086956522,
                "kept_percent_lambda": 56.52173913043478,
                "num_examples": 3,
                "num_explored_concrete": 131,
                "num_explored_lambda": 98,
                "num_explored_none": 15,
                "num_inputs": 1,
                "num_kept_concrete": 60,
                "num_kept_lambda": 78,
                "num_values_explored": 244,
                "num_values_kept": 138,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96037852787413,
            "num_unique_values": 1861,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.60550458715596,
                "explored_percent_lambda": 12.474104764723291,
                "explored_percent_none": 10.920390648120746,
                "kept_percent_concrete": 84.7978436657682,
                "kept_percent_lambda": 15.202156334231805,
                "num_examples": 5,
                "num_explored_concrete": 5177,
                "num_explored_lambda": 843,
                "num_explored_none": 738,
                "num_inputs": 2,
                "num_kept_concrete": 1573,
                "num_kept_lambda": 282,
                "num_values_explored": 6758,
                "num_values_kept": 1855,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68701
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.963743602857,
            "num_unique_values": 1740,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.75407608695652,
                "explored_percent_lambda": 20.3125,
                "explored_percent_none": 8.933423913043478,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 3,
                "num_explored_concrete": 4166,
                "num_explored_lambda": 1196,
                "num_explored_none": 526,
                "num_inputs": 2,
                "num_kept_concrete": 1292,
                "num_kept_lambda": 442,
                "num_values_explored": 5888,
                "num_values_kept": 1734,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59233
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.35866175009869,
            "num_unique_values": 1864,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.07774367967266,
                "explored_percent_lambda": 13.517463100979104,
                "explored_percent_none": 10.404793219348239,
                "kept_percent_concrete": 76.09046849757674,
                "kept_percent_lambda": 23.909531502423263,
                "num_examples": 3,
                "num_explored_concrete": 5206,
                "num_explored_lambda": 925,
                "num_explored_none": 712,
                "num_inputs": 3,
                "num_kept_concrete": 1413,
                "num_kept_lambda": 444,
                "num_values_explored": 6843,
                "num_values_kept": 1857,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68460
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96092325495556,
            "num_unique_values": 1632,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.62701954146792,
                "explored_percent_lambda": 14.340667795045391,
                "explored_percent_none": 10.03231266348669,
                "kept_percent_concrete": 82.11432083589429,
                "kept_percent_lambda": 17.885679164105717,
                "num_examples": 5,
                "num_explored_concrete": 4915,
                "num_explored_lambda": 932,
                "num_explored_none": 652,
                "num_inputs": 1,
                "num_kept_concrete": 1336,
                "num_kept_lambda": 291,
                "num_values_explored": 6499,
                "num_values_kept": 1627,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65069
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03512969985604,
            "num_unique_values": 1681,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.35688536409516,
                "explored_percent_lambda": 22.855082912761354,
                "explored_percent_none": 11.788031723143476,
                "kept_percent_concrete": 71.30071599045345,
                "kept_percent_lambda": 28.69928400954654,
                "num_examples": 3,
                "num_explored_concrete": 3626,
                "num_explored_lambda": 1268,
                "num_explored_none": 654,
                "num_inputs": 1,
                "num_kept_concrete": 1195,
                "num_kept_lambda": 481,
                "num_values_explored": 5548,
                "num_values_kept": 1676,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59582
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0981108089909,
            "num_unique_values": 1745,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.83301707779886,
                "explored_percent_lambda": 20.95192915876028,
                "explored_percent_none": 10.21505376344086,
                "kept_percent_concrete": 72.16791259344451,
                "kept_percent_lambda": 27.83208740655549,
                "num_examples": 3,
                "num_explored_concrete": 4353,
                "num_explored_lambda": 1325,
                "num_explored_none": 646,
                "num_inputs": 2,
                "num_kept_concrete": 1255,
                "num_kept_lambda": 484,
                "num_values_explored": 6324,
                "num_values_kept": 1739,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64508
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.38200782309286296,
            "num_unique_values": 323,
            "solution": "fn_10(fn_14(Map((lambda u1: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.33285094066571,
                "explored_percent_lambda": 21.99710564399421,
                "explored_percent_none": 7.6700434153400865,
                "kept_percent_concrete": 69.49685534591195,
                "kept_percent_lambda": 30.50314465408805,
                "num_examples": 3,
                "num_explored_concrete": 486,
                "num_explored_lambda": 152,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 221,
                "num_kept_lambda": 97,
                "num_values_explored": 691,
                "num_values_kept": 318,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 691
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.350332675036043,
            "num_unique_values": 872,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), fn_1(Sort(c)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 64.22324031653477,
                "explored_percent_lambda": 24.906289046230736,
                "explored_percent_none": 10.870470637234485,
                "kept_percent_concrete": 67.4364896073903,
                "kept_percent_lambda": 32.5635103926097,
                "num_examples": 3,
                "num_explored_concrete": 1542,
                "num_explored_lambda": 598,
                "num_explored_none": 261,
                "num_inputs": 2,
                "num_kept_concrete": 584,
                "num_kept_lambda": 282,
                "num_values_explored": 2401,
                "num_values_kept": 866,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3881
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.020022676792,
            "num_unique_values": 1817,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.57971014492753,
                "explored_percent_lambda": 9.173913043478262,
                "explored_percent_none": 9.246376811594203,
                "kept_percent_concrete": 85.3119823302043,
                "kept_percent_lambda": 14.688017669795693,
                "num_examples": 5,
                "num_explored_concrete": 5629,
                "num_explored_lambda": 633,
                "num_explored_none": 638,
                "num_inputs": 2,
                "num_kept_concrete": 1545,
                "num_kept_lambda": 266,
                "num_values_explored": 6900,
                "num_values_kept": 1811,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70596
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12874397914857,
            "num_unique_values": 1379,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.21198397491726,
                "explored_percent_lambda": 23.549904197874934,
                "explored_percent_none": 13.238111827207803,
                "kept_percent_concrete": 63.17321688500728,
                "kept_percent_lambda": 36.82678311499272,
                "num_examples": 3,
                "num_explored_concrete": 3629,
                "num_explored_lambda": 1352,
                "num_explored_none": 760,
                "num_inputs": 1,
                "num_kept_concrete": 868,
                "num_kept_lambda": 506,
                "num_values_explored": 5741,
                "num_values_kept": 1374,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57518
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95180880697444,
            "num_unique_values": 1719,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.31245154287487,
                "explored_percent_lambda": 22.53062490308575,
                "explored_percent_none": 12.156923554039386,
                "kept_percent_concrete": 72.3292469352014,
                "kept_percent_lambda": 27.6707530647986,
                "num_examples": 3,
                "num_explored_concrete": 4212,
                "num_explored_lambda": 1453,
                "num_explored_none": 784,
                "num_inputs": 2,
                "num_kept_concrete": 1239,
                "num_kept_lambda": 474,
                "num_values_explored": 6449,
                "num_values_kept": 1713,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66101
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.654479220043868,
            "num_unique_values": 503,
            "solution": "Head(fn_0(Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 56.64395229982964,
                "explored_percent_lambda": 27.427597955706986,
                "explored_percent_none": 15.928449744463373,
                "kept_percent_concrete": 70.02012072434607,
                "kept_percent_lambda": 29.979879275653925,
                "num_examples": 5,
                "num_explored_concrete": 665,
                "num_explored_lambda": 322,
                "num_explored_none": 187,
                "num_inputs": 2,
                "num_kept_concrete": 348,
                "num_kept_lambda": 149,
                "num_values_explored": 1174,
                "num_values_kept": 497,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3394
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.58040720503777,
            "num_unique_values": 330,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.793962029256146,
                "explored_percent_lambda": 20.54154995331466,
                "explored_percent_none": 55.66448801742919,
                "kept_percent_concrete": 60.0,
                "kept_percent_lambda": 40.0,
                "num_examples": 5,
                "num_explored_concrete": 1529,
                "num_explored_lambda": 1320,
                "num_explored_none": 3577,
                "num_inputs": 1,
                "num_kept_concrete": 195,
                "num_kept_lambda": 130,
                "num_values_explored": 6426,
                "num_values_kept": 325,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66352
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22429753583855927,
            "num_unique_values": 167,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 69.56521739130434,
                "explored_percent_lambda": 22.134387351778656,
                "explored_percent_none": 8.300395256916996,
                "kept_percent_concrete": 68.94409937888199,
                "kept_percent_lambda": 31.055900621118013,
                "num_examples": 5,
                "num_explored_concrete": 176,
                "num_explored_lambda": 56,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 50,
                "num_values_explored": 253,
                "num_values_kept": 161,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91256005386822,
            "num_unique_values": 1661,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.93175530279741,
                "explored_percent_lambda": 16.78450660928374,
                "explored_percent_none": 9.283738087918843,
                "kept_percent_concrete": 70.65217391304348,
                "kept_percent_lambda": 29.347826086956523,
                "num_examples": 3,
                "num_explored_concrete": 4810,
                "num_explored_lambda": 1092,
                "num_explored_none": 604,
                "num_inputs": 1,
                "num_kept_concrete": 1170,
                "num_kept_lambda": 486,
                "num_values_explored": 6506,
                "num_values_kept": 1656,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65818
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14549141190946102,
            "num_unique_values": 84,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 34.72584856396867,
                "explored_percent_lambda": 15.143603133159269,
                "explored_percent_none": 50.130548302872064,
                "kept_percent_concrete": 74.35897435897436,
                "kept_percent_lambda": 25.641025641025642,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 58,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 58,
                "num_kept_lambda": 20,
                "num_values_explored": 383,
                "num_values_kept": 78,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 383
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10414426401258,
            "num_unique_values": 1829,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.77181832274066,
                "explored_percent_lambda": 18.291737715082935,
                "explored_percent_none": 9.936443962176407,
                "kept_percent_concrete": 74.72587719298245,
                "kept_percent_lambda": 25.274122807017545,
                "num_examples": 3,
                "num_explored_concrete": 4630,
                "num_explored_lambda": 1180,
                "num_explored_none": 641,
                "num_inputs": 1,
                "num_kept_concrete": 1363,
                "num_kept_lambda": 461,
                "num_values_explored": 6451,
                "num_values_kept": 1824,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66623
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99500027485192,
            "num_unique_values": 1476,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.86426262969893,
                "explored_percent_lambda": 25.072291205987412,
                "explored_percent_none": 13.063446164313659,
                "kept_percent_concrete": 65.19374575118967,
                "kept_percent_lambda": 34.80625424881033,
                "num_examples": 3,
                "num_explored_concrete": 3637,
                "num_explored_lambda": 1474,
                "num_explored_none": 768,
                "num_inputs": 1,
                "num_kept_concrete": 959,
                "num_kept_lambda": 512,
                "num_values_explored": 5879,
                "num_values_kept": 1471,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64585
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04598953109235,
            "num_unique_values": 1500,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.567549777850914,
                "explored_percent_lambda": 23.33388184959684,
                "explored_percent_none": 13.098568372552247,
                "kept_percent_concrete": 64.68227424749163,
                "kept_percent_lambda": 35.31772575250836,
                "num_examples": 3,
                "num_explored_concrete": 3863,
                "num_explored_lambda": 1418,
                "num_explored_none": 796,
                "num_inputs": 1,
                "num_kept_concrete": 967,
                "num_kept_lambda": 528,
                "num_values_explored": 6077,
                "num_values_kept": 1495,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62670
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19462292897515,
            "num_unique_values": 1755,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.14520504228499,
                "explored_percent_lambda": 20.28083612573799,
                "explored_percent_none": 9.573958831977022,
                "kept_percent_concrete": 71.4694110920526,
                "kept_percent_lambda": 28.530588907947397,
                "num_examples": 3,
                "num_explored_concrete": 4396,
                "num_explored_lambda": 1271,
                "num_explored_none": 600,
                "num_inputs": 2,
                "num_kept_concrete": 1250,
                "num_kept_lambda": 499,
                "num_values_explored": 6267,
                "num_values_kept": 1749,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67897
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93529379996471,
            "num_unique_values": 1835,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.30785443304764,
                "explored_percent_lambda": 12.547421666432486,
                "explored_percent_none": 10.144723900519882,
                "kept_percent_concrete": 84.04371584699453,
                "kept_percent_lambda": 15.956284153005464,
                "num_examples": 5,
                "num_explored_concrete": 5502,
                "num_explored_lambda": 893,
                "num_explored_none": 722,
                "num_inputs": 1,
                "num_kept_concrete": 1538,
                "num_kept_lambda": 292,
                "num_values_explored": 7117,
                "num_values_kept": 1830,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70333
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11957231513225,
            "num_unique_values": 1683,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.0308515661892,
                "explored_percent_lambda": 22.524791437116324,
                "explored_percent_none": 9.444356996694475,
                "kept_percent_concrete": 67.58045292014303,
                "kept_percent_lambda": 32.419547079856976,
                "num_examples": 3,
                "num_explored_concrete": 4322,
                "num_explored_lambda": 1431,
                "num_explored_none": 600,
                "num_inputs": 1,
                "num_kept_concrete": 1134,
                "num_kept_lambda": 544,
                "num_values_explored": 6353,
                "num_values_kept": 1678,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64501
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01672196388245,
            "num_unique_values": 1732,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.32362459546925,
                "explored_percent_lambda": 21.618122977346278,
                "explored_percent_none": 8.058252427184467,
                "kept_percent_concrete": 69.4267515923567,
                "kept_percent_lambda": 30.573248407643312,
                "num_examples": 3,
                "num_explored_concrete": 4346,
                "num_explored_lambda": 1336,
                "num_explored_none": 498,
                "num_inputs": 1,
                "num_kept_concrete": 1199,
                "num_kept_lambda": 528,
                "num_values_explored": 6180,
                "num_values_kept": 1727,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61122
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.961624330841,
            "num_unique_values": 1801,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.76433121019109,
                "explored_percent_lambda": 9.851380042462845,
                "explored_percent_none": 9.384288747346073,
                "kept_percent_concrete": 84.34540389972145,
                "kept_percent_lambda": 15.654596100278551,
                "num_examples": 5,
                "num_explored_concrete": 5706,
                "num_explored_lambda": 696,
                "num_explored_none": 663,
                "num_inputs": 2,
                "num_kept_concrete": 1514,
                "num_kept_lambda": 281,
                "num_values_explored": 7065,
                "num_values_kept": 1795,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72541
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04715725802816,
            "num_unique_values": 1666,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.42925948223962,
                "explored_percent_lambda": 23.841059602649008,
                "explored_percent_none": 8.729680915111379,
                "kept_percent_concrete": 65.60240963855422,
                "kept_percent_lambda": 34.397590361445786,
                "num_examples": 3,
                "num_explored_concrete": 4480,
                "num_explored_lambda": 1584,
                "num_explored_none": 580,
                "num_inputs": 2,
                "num_kept_concrete": 1089,
                "num_kept_lambda": 571,
                "num_values_explored": 6644,
                "num_values_kept": 1660,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63344
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11472536996007,
            "num_unique_values": 1750,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.90764810507594,
                "explored_percent_lambda": 10.877000957723356,
                "explored_percent_none": 14.21535093720071,
                "kept_percent_concrete": 85.72247706422019,
                "kept_percent_lambda": 14.277522935779816,
                "num_examples": 5,
                "num_explored_concrete": 5475,
                "num_explored_lambda": 795,
                "num_explored_none": 1039,
                "num_inputs": 2,
                "num_kept_concrete": 1495,
                "num_kept_lambda": 249,
                "num_values_explored": 7309,
                "num_values_kept": 1744,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73719
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14215694088489,
            "num_unique_values": 1788,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.98549673676577,
                "explored_percent_lambda": 11.080493110949964,
                "explored_percent_none": 8.934010152284264,
                "kept_percent_concrete": 85.29741863075196,
                "kept_percent_lambda": 14.702581369248035,
                "num_examples": 5,
                "num_explored_concrete": 5515,
                "num_explored_lambda": 764,
                "num_explored_none": 616,
                "num_inputs": 2,
                "num_kept_concrete": 1520,
                "num_kept_lambda": 262,
                "num_values_explored": 6895,
                "num_values_kept": 1782,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72328
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02847706200555,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.41766109785203,
                "explored_percent_lambda": 12.604415274463006,
                "explored_percent_none": 11.977923627684964,
                "kept_percent_concrete": 81.07088989441931,
                "kept_percent_lambda": 18.929110105580694,
                "num_examples": 5,
                "num_explored_concrete": 5056,
                "num_explored_lambda": 845,
                "num_explored_none": 803,
                "num_inputs": 2,
                "num_kept_concrete": 1075,
                "num_kept_lambda": 251,
                "num_values_explored": 6704,
                "num_values_kept": 1326,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70706
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.34
}