{
    "num_tasks": 50,
    "num_tasks_solved": 18,
    "results": [
        {
            "elapsed_time": 0.9079253629315645,
            "num_unique_values": 344,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.69230769230769,
                "explored_percent_lambda": 36.53846153846154,
                "explored_percent_none": 5.769230769230769,
                "kept_percent_concrete": 56.932153392330385,
                "kept_percent_lambda": 43.067846607669615,
                "num_examples": 3,
                "num_explored_concrete": 330,
                "num_explored_lambda": 209,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 146,
                "num_values_explored": 572,
                "num_values_kept": 339,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 572
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24118662206456065,
            "num_unique_values": 101,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.19838056680162,
                "explored_percent_lambda": 15.654520917678813,
                "explored_percent_none": 51.147098515519566,
                "kept_percent_concrete": 72.63157894736842,
                "kept_percent_lambda": 27.36842105263158,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 116,
                "num_explored_none": 379,
                "num_inputs": 2,
                "num_kept_concrete": 69,
                "num_kept_lambda": 26,
                "num_values_explored": 741,
                "num_values_kept": 95,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 741
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.12551264488138,
            "num_unique_values": 732,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.14021164021164,
                "explored_percent_lambda": 39.351851851851855,
                "explored_percent_none": 11.507936507936508,
                "kept_percent_concrete": 57.22145804676754,
                "kept_percent_lambda": 42.77854195323246,
                "num_examples": 3,
                "num_explored_concrete": 743,
                "num_explored_lambda": 595,
                "num_explored_none": 174,
                "num_inputs": 1,
                "num_kept_concrete": 416,
                "num_kept_lambda": 311,
                "num_values_explored": 1512,
                "num_values_kept": 727,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 19123
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2972604490351,
            "num_unique_values": 1299,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.54280670785525,
                "explored_percent_lambda": 21.818181818181817,
                "explored_percent_none": 12.639011473962931,
                "kept_percent_concrete": 67.31066460587326,
                "kept_percent_lambda": 32.689335394126736,
                "num_examples": 3,
                "num_explored_concrete": 3713,
                "num_explored_lambda": 1236,
                "num_explored_none": 716,
                "num_inputs": 1,
                "num_kept_concrete": 871,
                "num_kept_lambda": 423,
                "num_values_explored": 5665,
                "num_values_kept": 1294,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56921
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30334662599489093,
            "num_unique_values": 285,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 68.90595009596929,
                "explored_percent_lambda": 27.06333973128599,
                "explored_percent_none": 4.030710172744722,
                "kept_percent_concrete": 70.25089605734767,
                "kept_percent_lambda": 29.74910394265233,
                "num_examples": 3,
                "num_explored_concrete": 359,
                "num_explored_lambda": 141,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 196,
                "num_kept_lambda": 83,
                "num_values_explored": 521,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12490275595337,
            "num_unique_values": 1659,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.94893548903474,
                "explored_percent_lambda": 14.070753961901714,
                "explored_percent_none": 8.980310549063551,
                "kept_percent_concrete": 80.53204353083434,
                "kept_percent_lambda": 19.46795646916566,
                "num_examples": 5,
                "num_explored_concrete": 4807,
                "num_explored_lambda": 879,
                "num_explored_none": 561,
                "num_inputs": 1,
                "num_kept_concrete": 1332,
                "num_kept_lambda": 322,
                "num_values_explored": 6247,
                "num_values_kept": 1654,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63785
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15460046380758286,
            "num_unique_values": 108,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 31.48148148148148,
                "explored_percent_lambda": 64.81481481481481,
                "explored_percent_none": 3.7037037037037037,
                "kept_percent_concrete": 16.50485436893204,
                "kept_percent_lambda": 83.49514563106796,
                "num_examples": 3,
                "num_explored_concrete": 51,
                "num_explored_lambda": 105,
                "num_explored_none": 6,
                "num_inputs": 1,
                "num_kept_concrete": 17,
                "num_kept_lambda": 86,
                "num_values_explored": 162,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02998470584862,
            "num_unique_values": 1396,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.88917036098796,
                "explored_percent_lambda": 13.758708043065232,
                "explored_percent_none": 11.352121595946802,
                "kept_percent_concrete": 77.57009345794393,
                "kept_percent_lambda": 22.429906542056074,
                "num_examples": 5,
                "num_explored_concrete": 4730,
                "num_explored_lambda": 869,
                "num_explored_none": 717,
                "num_inputs": 1,
                "num_kept_concrete": 1079,
                "num_kept_lambda": 312,
                "num_values_explored": 6316,
                "num_values_kept": 1391,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66601
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13547966000624,
            "num_unique_values": 1375,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.20567487066938,
                "explored_percent_lambda": 12.102210377802164,
                "explored_percent_none": 15.692114751528452,
                "kept_percent_concrete": 77.95620437956204,
                "kept_percent_lambda": 22.043795620437955,
                "num_examples": 5,
                "num_explored_concrete": 4606,
                "num_explored_lambda": 772,
                "num_explored_none": 1001,
                "num_inputs": 1,
                "num_kept_concrete": 1068,
                "num_kept_lambda": 302,
                "num_values_explored": 6379,
                "num_values_kept": 1370,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65289
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.43116699112579,
            "num_unique_values": 1422,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.34130812270885,
                "explored_percent_lambda": 28.593478680300983,
                "explored_percent_none": 14.06521319699016,
                "kept_percent_concrete": 59.35074100211715,
                "kept_percent_lambda": 40.64925899788285,
                "num_examples": 3,
                "num_explored_concrete": 2972,
                "num_explored_lambda": 1482,
                "num_explored_none": 729,
                "num_inputs": 1,
                "num_kept_concrete": 841,
                "num_kept_lambda": 576,
                "num_values_explored": 5183,
                "num_values_kept": 1417,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51700
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11836596298963,
            "num_unique_values": 1692,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.24387932396147,
                "explored_percent_lambda": 9.793081661664823,
                "explored_percent_none": 13.963039014373717,
                "kept_percent_concrete": 87.30723606168446,
                "kept_percent_lambda": 12.69276393831554,
                "num_examples": 5,
                "num_explored_concrete": 4827,
                "num_explored_lambda": 620,
                "num_explored_none": 884,
                "num_inputs": 2,
                "num_kept_concrete": 1472,
                "num_kept_lambda": 214,
                "num_values_explored": 6331,
                "num_values_kept": 1686,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64859
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90165754593909,
            "num_unique_values": 1496,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.55174665360758,
                "explored_percent_lambda": 21.237349004244205,
                "explored_percent_none": 8.21090434214822,
                "kept_percent_concrete": 71.81208053691275,
                "kept_percent_lambda": 28.187919463087248,
                "num_examples": 3,
                "num_explored_concrete": 4322,
                "num_explored_lambda": 1301,
                "num_explored_none": 503,
                "num_inputs": 2,
                "num_kept_concrete": 1070,
                "num_kept_lambda": 420,
                "num_values_explored": 6126,
                "num_values_kept": 1490,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63551
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 98.30548801994883,
            "num_unique_values": 1193,
            "solution": "Last(Scanl1((lambda u1, u2: Count((lambda u1: ((lambda v1: Less(v1, 1)))(u1)), x)), Drop(Multiply(Add(-1, -1), Subtract(-1, Add(1, 1))), x)))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 74.13632119514473,
                "explored_percent_lambda": 16.129785247432306,
                "explored_percent_none": 9.733893557422968,
                "kept_percent_concrete": 79.46127946127946,
                "kept_percent_lambda": 20.53872053872054,
                "num_examples": 5,
                "num_explored_concrete": 3176,
                "num_explored_lambda": 691,
                "num_explored_none": 417,
                "num_inputs": 1,
                "num_kept_concrete": 944,
                "num_kept_lambda": 244,
                "num_values_explored": 4284,
                "num_values_kept": 1188,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60860
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.686577597865835,
            "num_unique_values": 957,
            "solution": "Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), fn_21(x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.423634336677814,
                "explored_percent_lambda": 28.725380899293942,
                "explored_percent_none": 10.850984764028242,
                "kept_percent_concrete": 63.55042016806723,
                "kept_percent_lambda": 36.44957983193277,
                "num_examples": 3,
                "num_explored_concrete": 1626,
                "num_explored_lambda": 773,
                "num_explored_none": 292,
                "num_inputs": 1,
                "num_kept_concrete": 605,
                "num_kept_lambda": 347,
                "num_values_explored": 2691,
                "num_values_kept": 952,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10292
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00990256411023,
            "num_unique_values": 1801,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.82926829268293,
                "explored_percent_lambda": 19.691056910569106,
                "explored_percent_none": 11.479674796747968,
                "kept_percent_concrete": 75.41806020066889,
                "kept_percent_lambda": 24.581939799331103,
                "num_examples": 3,
                "num_explored_concrete": 4233,
                "num_explored_lambda": 1211,
                "num_explored_none": 706,
                "num_inputs": 3,
                "num_kept_concrete": 1353,
                "num_kept_lambda": 441,
                "num_values_explored": 6150,
                "num_values_kept": 1794,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64388
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.33240059600212,
            "num_unique_values": 1713,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.32985593641331,
                "explored_percent_lambda": 15.996025832091405,
                "explored_percent_none": 11.67411823149528,
                "kept_percent_concrete": 70.63305978898008,
                "kept_percent_lambda": 29.36694021101993,
                "num_examples": 3,
                "num_explored_concrete": 4368,
                "num_explored_lambda": 966,
                "num_explored_none": 705,
                "num_inputs": 3,
                "num_kept_concrete": 1205,
                "num_kept_lambda": 501,
                "num_values_explored": 6039,
                "num_values_kept": 1706,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65830
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96880299807526,
            "num_unique_values": 1513,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.21609702315325,
                "explored_percent_lambda": 18.412348401323044,
                "explored_percent_none": 9.371554575523705,
                "kept_percent_concrete": 75.56440903054448,
                "kept_percent_lambda": 24.43559096945551,
                "num_examples": 3,
                "num_explored_concrete": 4585,
                "num_explored_lambda": 1169,
                "num_explored_none": 595,
                "num_inputs": 3,
                "num_kept_concrete": 1138,
                "num_kept_lambda": 368,
                "num_values_explored": 6349,
                "num_values_kept": 1506,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65576
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2872184859588742,
            "num_unique_values": 577,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.268824771287825,
                "explored_percent_lambda": 30.11963406052076,
                "explored_percent_none": 11.611541168191415,
                "kept_percent_concrete": 55.3415061295972,
                "kept_percent_lambda": 44.6584938704028,
                "num_examples": 3,
                "num_explored_concrete": 828,
                "num_explored_lambda": 428,
                "num_explored_none": 165,
                "num_inputs": 2,
                "num_kept_concrete": 316,
                "num_kept_lambda": 255,
                "num_values_explored": 1421,
                "num_values_kept": 571,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3641
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.877363590057939,
            "num_unique_values": 1060,
            "solution": "fn_11(Sort(y), fn_0(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.44872632266492,
                "explored_percent_lambda": 16.81907250163292,
                "explored_percent_none": 9.732201175702155,
                "kept_percent_concrete": 78.93738140417457,
                "kept_percent_lambda": 21.062618595825427,
                "num_examples": 5,
                "num_explored_concrete": 2249,
                "num_explored_lambda": 515,
                "num_explored_none": 298,
                "num_inputs": 2,
                "num_kept_concrete": 832,
                "num_kept_lambda": 222,
                "num_values_explored": 3062,
                "num_values_kept": 1054,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5282
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.568028065143153,
            "num_unique_values": 337,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.470588235294116,
                "explored_percent_lambda": 34.66386554621849,
                "explored_percent_none": 13.865546218487395,
                "kept_percent_concrete": 55.89123867069486,
                "kept_percent_lambda": 44.10876132930514,
                "num_examples": 3,
                "num_explored_concrete": 490,
                "num_explored_lambda": 330,
                "num_explored_none": 132,
                "num_inputs": 2,
                "num_kept_concrete": 185,
                "num_kept_lambda": 146,
                "num_values_explored": 952,
                "num_values_kept": 331,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3172
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97393642598763,
            "num_unique_values": 1561,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.881386531864955,
                "explored_percent_lambda": 27.27929229102726,
                "explored_percent_none": 9.83932117710778,
                "kept_percent_concrete": 60.347043701799485,
                "kept_percent_lambda": 39.652956298200515,
                "num_examples": 3,
                "num_explored_concrete": 3483,
                "num_explored_lambda": 1511,
                "num_explored_none": 545,
                "num_inputs": 1,
                "num_kept_concrete": 939,
                "num_kept_lambda": 617,
                "num_values_explored": 5539,
                "num_values_kept": 1556,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57859
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17185027594678104,
            "num_unique_values": 143,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.68852459016394,
                "explored_percent_lambda": 40.16393442622951,
                "explored_percent_none": 6.147540983606557,
                "kept_percent_concrete": 43.47826086956522,
                "kept_percent_lambda": 56.52173913043478,
                "num_examples": 3,
                "num_explored_concrete": 131,
                "num_explored_lambda": 98,
                "num_explored_none": 15,
                "num_inputs": 1,
                "num_kept_concrete": 60,
                "num_kept_lambda": 78,
                "num_values_explored": 244,
                "num_values_kept": 138,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03489157999866,
            "num_unique_values": 1807,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.32270916334662,
                "explored_percent_lambda": 12.063745019920319,
                "explored_percent_none": 10.613545816733067,
                "kept_percent_concrete": 84.7307051637979,
                "kept_percent_lambda": 15.26929483620211,
                "num_examples": 5,
                "num_explored_concrete": 4852,
                "num_explored_lambda": 757,
                "num_explored_none": 666,
                "num_inputs": 2,
                "num_kept_concrete": 1526,
                "num_kept_lambda": 275,
                "num_values_explored": 6275,
                "num_values_kept": 1801,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66001
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02961985301226,
            "num_unique_values": 1615,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.95640802092414,
                "explored_percent_lambda": 21.69136878814298,
                "explored_percent_none": 8.352223190932868,
                "kept_percent_concrete": 73.27532628962088,
                "kept_percent_lambda": 26.72467371037912,
                "num_examples": 3,
                "num_explored_concrete": 4012,
                "num_explored_lambda": 1244,
                "num_explored_none": 479,
                "num_inputs": 2,
                "num_kept_concrete": 1179,
                "num_kept_lambda": 430,
                "num_values_explored": 5735,
                "num_values_kept": 1609,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57490
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40225929906592,
            "num_unique_values": 1865,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.31206657420249,
                "explored_percent_lambda": 13.3764832793959,
                "explored_percent_none": 11.311450146401603,
                "kept_percent_concrete": 75.24219590958019,
                "kept_percent_lambda": 24.757804090419807,
                "num_examples": 3,
                "num_explored_concrete": 4887,
                "num_explored_lambda": 868,
                "num_explored_none": 734,
                "num_inputs": 3,
                "num_kept_concrete": 1398,
                "num_kept_lambda": 460,
                "num_values_explored": 6489,
                "num_values_kept": 1858,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68019
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02255873801187,
            "num_unique_values": 1757,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.39520958083833,
                "explored_percent_lambda": 14.288090485695276,
                "explored_percent_none": 8.316699933466401,
                "kept_percent_concrete": 82.64840182648402,
                "kept_percent_lambda": 17.35159817351598,
                "num_examples": 5,
                "num_explored_concrete": 4653,
                "num_explored_lambda": 859,
                "num_explored_none": 500,
                "num_inputs": 1,
                "num_kept_concrete": 1448,
                "num_kept_lambda": 304,
                "num_values_explored": 6012,
                "num_values_kept": 1752,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62427
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03598635294475,
            "num_unique_values": 1689,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.80843522948786,
                "explored_percent_lambda": 21.72603225234804,
                "explored_percent_none": 11.465532518164098,
                "kept_percent_concrete": 74.6437054631829,
                "kept_percent_lambda": 25.356294536817103,
                "num_examples": 3,
                "num_explored_concrete": 3770,
                "num_explored_lambda": 1226,
                "num_explored_none": 647,
                "num_inputs": 1,
                "num_kept_concrete": 1257,
                "num_kept_lambda": 427,
                "num_values_explored": 5643,
                "num_values_kept": 1684,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57268
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.3891725409776,
            "num_unique_values": 261,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: If(((lambda v1: Greater(-1, v1)))(v1), y, v1)))(u2)), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.69776609724047,
                "explored_percent_lambda": 51.51116951379763,
                "explored_percent_none": 18.791064388961892,
                "kept_percent_concrete": 46.666666666666664,
                "kept_percent_lambda": 53.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 226,
                "num_explored_lambda": 392,
                "num_explored_none": 143,
                "num_inputs": 2,
                "num_kept_concrete": 119,
                "num_kept_lambda": 136,
                "num_values_explored": 761,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 32389
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3600570030976087,
            "num_unique_values": 323,
            "solution": "fn_10(fn_14(Map((lambda u1: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.33285094066571,
                "explored_percent_lambda": 21.99710564399421,
                "explored_percent_none": 7.6700434153400865,
                "kept_percent_concrete": 69.49685534591195,
                "kept_percent_lambda": 30.50314465408805,
                "num_examples": 3,
                "num_explored_concrete": 486,
                "num_explored_lambda": 152,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 221,
                "num_kept_lambda": 97,
                "num_values_explored": 691,
                "num_values_kept": 318,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 691
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.710660334909335,
            "num_unique_values": 880,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.909856781802866,
                "explored_percent_lambda": 26.663858466722832,
                "explored_percent_none": 12.426284751474306,
                "kept_percent_concrete": 65.78947368421052,
                "kept_percent_lambda": 34.21052631578947,
                "num_examples": 3,
                "num_explored_concrete": 1446,
                "num_explored_lambda": 633,
                "num_explored_none": 295,
                "num_inputs": 2,
                "num_kept_concrete": 575,
                "num_kept_lambda": 299,
                "num_values_explored": 2374,
                "num_values_kept": 874,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3854
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09720813203603,
            "num_unique_values": 1731,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.52912398715793,
                "explored_percent_lambda": 10.457116648830453,
                "explored_percent_none": 10.01375936401162,
                "kept_percent_concrete": 83.47826086956522,
                "kept_percent_lambda": 16.52173913043478,
                "num_examples": 5,
                "num_explored_concrete": 5202,
                "num_explored_lambda": 684,
                "num_explored_none": 655,
                "num_inputs": 2,
                "num_kept_concrete": 1440,
                "num_kept_lambda": 285,
                "num_values_explored": 6541,
                "num_values_kept": 1725,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67902
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09130708384328,
            "num_unique_values": 1250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.2479674796748,
                "explored_percent_lambda": 33.94308943089431,
                "explored_percent_none": 16.808943089430894,
                "kept_percent_concrete": 54.05622489959839,
                "kept_percent_lambda": 45.94377510040161,
                "num_examples": 3,
                "num_explored_concrete": 2423,
                "num_explored_lambda": 1670,
                "num_explored_none": 827,
                "num_inputs": 1,
                "num_kept_concrete": 673,
                "num_kept_lambda": 572,
                "num_values_explored": 4920,
                "num_values_kept": 1245,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53821
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95440993807279,
            "num_unique_values": 1606,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.81265206812652,
                "explored_percent_lambda": 22.903487429034875,
                "explored_percent_none": 10.283860502838605,
                "kept_percent_concrete": 69.0,
                "kept_percent_lambda": 31.0,
                "num_examples": 3,
                "num_explored_concrete": 4119,
                "num_explored_lambda": 1412,
                "num_explored_none": 634,
                "num_inputs": 2,
                "num_kept_concrete": 1104,
                "num_kept_lambda": 496,
                "num_values_explored": 6165,
                "num_values_kept": 1600,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62481
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8216054500080645,
            "num_unique_values": 499,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 56.28794449262793,
                "explored_percent_lambda": 29.748482220294882,
                "explored_percent_none": 13.96357328707719,
                "kept_percent_concrete": 70.18255578093306,
                "kept_percent_lambda": 29.81744421906694,
                "num_examples": 5,
                "num_explored_concrete": 649,
                "num_explored_lambda": 343,
                "num_explored_none": 161,
                "num_inputs": 2,
                "num_kept_concrete": 346,
                "num_kept_lambda": 147,
                "num_values_explored": 1153,
                "num_values_kept": 493,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3373
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.60935586784035,
            "num_unique_values": 265,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 18.524199045671438,
                "explored_percent_lambda": 21.489434219495568,
                "explored_percent_none": 59.98636673483299,
                "kept_percent_concrete": 55.76923076923077,
                "kept_percent_lambda": 44.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 1087,
                "num_explored_lambda": 1261,
                "num_explored_none": 3520,
                "num_inputs": 1,
                "num_kept_concrete": 145,
                "num_kept_lambda": 115,
                "num_values_explored": 5868,
                "num_values_kept": 260,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60606
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1506139871198684,
            "num_unique_values": 167,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 69.56521739130434,
                "explored_percent_lambda": 22.134387351778656,
                "explored_percent_none": 8.300395256916996,
                "kept_percent_concrete": 68.94409937888199,
                "kept_percent_lambda": 31.055900621118013,
                "num_examples": 5,
                "num_explored_concrete": 176,
                "num_explored_lambda": 56,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 111,
                "num_kept_lambda": 50,
                "num_values_explored": 253,
                "num_values_kept": 161,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.14301820215769,
            "num_unique_values": 1427,
            "solution": "fn_18(fn_9(Add(-1, -1), x, x), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 75.10721247563353,
                "explored_percent_lambda": 17.426900584795323,
                "explored_percent_none": 7.46588693957115,
                "kept_percent_concrete": 71.87060478199719,
                "kept_percent_lambda": 28.129395218002813,
                "num_examples": 3,
                "num_explored_concrete": 3853,
                "num_explored_lambda": 894,
                "num_explored_none": 383,
                "num_inputs": 1,
                "num_kept_concrete": 1022,
                "num_kept_lambda": 400,
                "num_values_explored": 5130,
                "num_values_kept": 1422,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18692
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1537437450606376,
            "num_unique_values": 84,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 34.72584856396867,
                "explored_percent_lambda": 15.143603133159269,
                "explored_percent_none": 50.130548302872064,
                "kept_percent_concrete": 74.35897435897436,
                "kept_percent_lambda": 25.641025641025642,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 58,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 58,
                "num_kept_lambda": 20,
                "num_values_explored": 383,
                "num_values_kept": 78,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 383
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14410606399179,
            "num_unique_values": 1765,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.02204928664072,
                "explored_percent_lambda": 18.174448767833983,
                "explored_percent_none": 8.803501945525293,
                "kept_percent_concrete": 74.94318181818181,
                "kept_percent_lambda": 25.056818181818183,
                "num_examples": 3,
                "num_explored_concrete": 4504,
                "num_explored_lambda": 1121,
                "num_explored_none": 543,
                "num_inputs": 1,
                "num_kept_concrete": 1319,
                "num_kept_lambda": 441,
                "num_values_explored": 6168,
                "num_values_kept": 1760,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62092
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0520526219625,
            "num_unique_values": 1421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.16614264438194,
                "explored_percent_lambda": 19.774946218765514,
                "explored_percent_none": 8.058911136852556,
                "kept_percent_concrete": 67.16101694915254,
                "kept_percent_lambda": 32.83898305084746,
                "num_examples": 3,
                "num_explored_concrete": 4361,
                "num_explored_lambda": 1195,
                "num_explored_none": 487,
                "num_inputs": 1,
                "num_kept_concrete": 951,
                "num_kept_lambda": 465,
                "num_values_explored": 6043,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59409
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0940237750765,
            "num_unique_values": 1310,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.64150943396226,
                "explored_percent_lambda": 29.566037735849058,
                "explored_percent_none": 12.79245283018868,
                "kept_percent_concrete": 56.934865900383144,
                "kept_percent_lambda": 43.065134099616856,
                "num_examples": 3,
                "num_explored_concrete": 3055,
                "num_explored_lambda": 1567,
                "num_explored_none": 678,
                "num_inputs": 1,
                "num_kept_concrete": 743,
                "num_kept_lambda": 562,
                "num_values_explored": 5300,
                "num_values_kept": 1305,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58820
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.255560670048,
            "num_unique_values": 1608,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.02423768569194,
                "explored_percent_lambda": 18.686473807662235,
                "explored_percent_none": 10.289288506645818,
                "kept_percent_concrete": 69.22596754057429,
                "kept_percent_lambda": 30.77403245942572,
                "num_examples": 3,
                "num_explored_concrete": 4542,
                "num_explored_lambda": 1195,
                "num_explored_none": 658,
                "num_inputs": 2,
                "num_kept_concrete": 1109,
                "num_kept_lambda": 493,
                "num_values_explored": 6395,
                "num_values_kept": 1602,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64190
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0430490358267,
            "num_unique_values": 1644,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.66389244558259,
                "explored_percent_lambda": 14.772727272727273,
                "explored_percent_none": 10.56338028169014,
                "kept_percent_concrete": 82.91641244661379,
                "kept_percent_lambda": 17.08358755338621,
                "num_examples": 5,
                "num_explored_concrete": 4665,
                "num_explored_lambda": 923,
                "num_explored_none": 660,
                "num_inputs": 1,
                "num_kept_concrete": 1359,
                "num_kept_lambda": 280,
                "num_values_explored": 6248,
                "num_values_kept": 1639,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64654
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10313214198686,
            "num_unique_values": 1672,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35553329994993,
                "explored_percent_lambda": 21.365381405441497,
                "explored_percent_none": 8.27908529460858,
                "kept_percent_concrete": 66.5866826634673,
                "kept_percent_lambda": 33.41331733653269,
                "num_examples": 3,
                "num_explored_concrete": 4215,
                "num_explored_lambda": 1280,
                "num_explored_none": 496,
                "num_inputs": 1,
                "num_kept_concrete": 1110,
                "num_kept_lambda": 557,
                "num_values_explored": 5991,
                "num_values_kept": 1667,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56281
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11416273703799,
            "num_unique_values": 1472,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.87926509186352,
                "explored_percent_lambda": 25.21559805024372,
                "explored_percent_none": 8.905136857892764,
                "kept_percent_concrete": 65.30334014996592,
                "kept_percent_lambda": 34.69665985003408,
                "num_examples": 3,
                "num_explored_concrete": 3514,
                "num_explored_lambda": 1345,
                "num_explored_none": 475,
                "num_inputs": 1,
                "num_kept_concrete": 958,
                "num_kept_lambda": 509,
                "num_values_explored": 5334,
                "num_values_kept": 1467,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53988
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01477641100064,
            "num_unique_values": 1643,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.67470615173256,
                "explored_percent_lambda": 10.899099374141352,
                "explored_percent_none": 8.426194474126088,
                "kept_percent_concrete": 82.52901649358583,
                "kept_percent_lambda": 17.47098350641417,
                "num_examples": 5,
                "num_explored_concrete": 5285,
                "num_explored_lambda": 714,
                "num_explored_none": 552,
                "num_inputs": 2,
                "num_kept_concrete": 1351,
                "num_kept_lambda": 286,
                "num_values_explored": 6551,
                "num_values_kept": 1637,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66496
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1778318118304,
            "num_unique_values": 1496,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.01910219675263,
                "explored_percent_lambda": 28.787010506208215,
                "explored_percent_none": 11.19388729703916,
                "kept_percent_concrete": 62.013422818791945,
                "kept_percent_lambda": 37.986577181208055,
                "num_examples": 3,
                "num_explored_concrete": 3142,
                "num_explored_lambda": 1507,
                "num_explored_none": 586,
                "num_inputs": 2,
                "num_kept_concrete": 924,
                "num_kept_lambda": 566,
                "num_values_explored": 5235,
                "num_values_kept": 1490,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56231
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13691613310948,
            "num_unique_values": 1502,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.8133535660091,
                "explored_percent_lambda": 11.471927162367223,
                "explored_percent_none": 11.714719271623672,
                "kept_percent_concrete": 84.55882352941177,
                "kept_percent_lambda": 15.441176470588236,
                "num_examples": 5,
                "num_explored_concrete": 5062,
                "num_explored_lambda": 756,
                "num_explored_none": 772,
                "num_inputs": 2,
                "num_kept_concrete": 1265,
                "num_kept_lambda": 231,
                "num_values_explored": 6590,
                "num_values_kept": 1496,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66563
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1698513480369,
            "num_unique_values": 1504,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.77342897239981,
                "explored_percent_lambda": 10.54108841415874,
                "explored_percent_none": 8.685482613441447,
                "kept_percent_concrete": 83.11081441922563,
                "kept_percent_lambda": 16.889185580774367,
                "num_examples": 5,
                "num_explored_concrete": 5180,
                "num_explored_lambda": 676,
                "num_explored_none": 557,
                "num_inputs": 2,
                "num_kept_concrete": 1245,
                "num_kept_lambda": 253,
                "num_values_explored": 6413,
                "num_values_kept": 1498,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66187
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13367347395979,
            "num_unique_values": 1268,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.18594320165,
                "explored_percent_lambda": 12.755830556877678,
                "explored_percent_none": 11.058226241472315,
                "kept_percent_concrete": 80.42789223454834,
                "kept_percent_lambda": 19.572107765451666,
                "num_examples": 5,
                "num_explored_concrete": 4802,
                "num_explored_lambda": 804,
                "num_explored_none": 697,
                "num_inputs": 2,
                "num_kept_concrete": 1015,
                "num_kept_lambda": 247,
                "num_values_explored": 6303,
                "num_values_kept": 1262,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65079
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.36
}