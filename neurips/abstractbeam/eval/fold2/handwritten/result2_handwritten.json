{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.8779424829408526,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2661324399523437,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.34110265085473657,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18979659420438,
            "num_unique_values": 1303,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.96407076418019,
                "explored_percent_lambda": 30.51249316067846,
                "explored_percent_none": 10.523436075141346,
                "kept_percent_concrete": 55.00770416024653,
                "kept_percent_lambda": 44.99229583975347,
                "num_examples": 3,
                "num_explored_concrete": 3233,
                "num_explored_lambda": 1673,
                "num_explored_none": 577,
                "num_inputs": 1,
                "num_kept_concrete": 714,
                "num_kept_lambda": 584,
                "num_values_explored": 5483,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57568
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3316737939603627,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.34633881994523,
            "num_unique_values": 1705,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.98449255335483,
                "explored_percent_lambda": 12.298479963150621,
                "explored_percent_none": 10.71702748349455,
                "kept_percent_concrete": 78.88235294117646,
                "kept_percent_lambda": 21.11764705882353,
                "num_examples": 5,
                "num_explored_concrete": 5014,
                "num_explored_lambda": 801,
                "num_explored_none": 698,
                "num_inputs": 1,
                "num_kept_concrete": 1341,
                "num_kept_lambda": 359,
                "num_values_explored": 6513,
                "num_values_kept": 1700,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62232
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17126929084770381,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27809418994002,
            "num_unique_values": 1292,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.40447715424716,
                "explored_percent_lambda": 15.332720024532351,
                "explored_percent_none": 13.262802821220484,
                "kept_percent_concrete": 71.4063714063714,
                "kept_percent_lambda": 28.593628593628594,
                "num_examples": 5,
                "num_explored_concrete": 4657,
                "num_explored_lambda": 1000,
                "num_explored_none": 865,
                "num_inputs": 1,
                "num_kept_concrete": 919,
                "num_kept_lambda": 368,
                "num_values_explored": 6522,
                "num_values_kept": 1287,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65531
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.90004010591656,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.09707351891507,
                "explored_percent_lambda": 23.572448251249106,
                "explored_percent_none": 12.330478229835832,
                "kept_percent_concrete": 65.02890173410404,
                "kept_percent_lambda": 34.971098265895954,
                "num_examples": 5,
                "num_explored_concrete": 3592,
                "num_explored_lambda": 1321,
                "num_explored_none": 691,
                "num_inputs": 1,
                "num_kept_concrete": 900,
                "num_kept_lambda": 484,
                "num_values_explored": 5604,
                "num_values_kept": 1384,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63833
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.53658426506445,
            "num_unique_values": 1349,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.48696349779382,
                "explored_percent_lambda": 34.21580425190533,
                "explored_percent_none": 13.297232250300842,
                "kept_percent_concrete": 51.041666666666664,
                "kept_percent_lambda": 48.958333333333336,
                "num_examples": 3,
                "num_explored_concrete": 2617,
                "num_explored_lambda": 1706,
                "num_explored_none": 663,
                "num_inputs": 1,
                "num_kept_concrete": 686,
                "num_kept_lambda": 658,
                "num_values_explored": 4986,
                "num_values_kept": 1344,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52892
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26347120595165,
            "num_unique_values": 1652,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.60525182953079,
                "explored_percent_lambda": 7.260726072607261,
                "explored_percent_none": 14.13402209786196,
                "kept_percent_concrete": 85.96597812879709,
                "kept_percent_lambda": 14.034021871202917,
                "num_examples": 5,
                "num_explored_concrete": 5478,
                "num_explored_lambda": 506,
                "num_explored_none": 985,
                "num_inputs": 2,
                "num_kept_concrete": 1415,
                "num_kept_lambda": 231,
                "num_values_explored": 6969,
                "num_values_kept": 1646,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69580
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19559114496224,
            "num_unique_values": 1609,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.12613763372185,
                "explored_percent_lambda": 19.192080472616958,
                "explored_percent_none": 10.681781893661185,
                "kept_percent_concrete": 65.25265127885216,
                "kept_percent_lambda": 34.74734872114785,
                "num_examples": 3,
                "num_explored_concrete": 4392,
                "num_explored_lambda": 1202,
                "num_explored_none": 669,
                "num_inputs": 2,
                "num_kept_concrete": 1046,
                "num_kept_lambda": 557,
                "num_values_explored": 6263,
                "num_values_kept": 1603,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64319
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 30.048821646953,
            "num_unique_values": 1493,
            "solution": "Min(Last(Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: IntDivide(v1, Minimum(x))))(v1))))(u1)), fn_1(fn_1(Sort(x))))), Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 72.69813000890471,
                "explored_percent_lambda": 11.024042742653606,
                "explored_percent_none": 16.277827248441675,
                "kept_percent_concrete": 81.58602150537635,
                "kept_percent_lambda": 18.413978494623656,
                "num_examples": 5,
                "num_explored_concrete": 4082,
                "num_explored_lambda": 619,
                "num_explored_none": 914,
                "num_inputs": 1,
                "num_kept_concrete": 1214,
                "num_kept_lambda": 274,
                "num_values_explored": 5615,
                "num_values_kept": 1488,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 21886
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9352349329274148,
            "num_unique_values": 357,
            "solution": "fn_21(Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 44.13472706155633,
                "explored_percent_lambda": 37.51451800232288,
                "explored_percent_none": 18.35075493612079,
                "kept_percent_concrete": 55.11363636363637,
                "kept_percent_lambda": 44.88636363636363,
                "num_examples": 3,
                "num_explored_concrete": 380,
                "num_explored_lambda": 323,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 194,
                "num_kept_lambda": 158,
                "num_values_explored": 861,
                "num_values_kept": 352,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3981
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86400034208782,
            "num_unique_values": 1721,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.96533249290891,
                "explored_percent_lambda": 17.00283643239836,
                "explored_percent_none": 13.03183107469272,
                "kept_percent_concrete": 72.40373395565928,
                "kept_percent_lambda": 27.596266044340723,
                "num_examples": 3,
                "num_explored_concrete": 4440,
                "num_explored_lambda": 1079,
                "num_explored_none": 827,
                "num_inputs": 3,
                "num_kept_concrete": 1241,
                "num_kept_lambda": 473,
                "num_values_explored": 6346,
                "num_values_kept": 1714,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64840
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13761582016014,
            "num_unique_values": 1885,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.88512121692283,
                "explored_percent_lambda": 14.450958643638092,
                "explored_percent_none": 10.663920139439075,
                "kept_percent_concrete": 71.19275825346112,
                "kept_percent_lambda": 28.80724174653887,
                "num_examples": 3,
                "num_explored_concrete": 4726,
                "num_explored_lambda": 912,
                "num_explored_none": 673,
                "num_inputs": 3,
                "num_kept_concrete": 1337,
                "num_kept_lambda": 541,
                "num_values_explored": 6311,
                "num_values_kept": 1878,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64976
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8376060470473,
            "num_unique_values": 1371,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.96447099512655,
                "explored_percent_lambda": 16.035214588901116,
                "explored_percent_none": 18.00031441597233,
                "kept_percent_concrete": 71.04105571847508,
                "kept_percent_lambda": 28.958944281524925,
                "num_examples": 3,
                "num_explored_concrete": 4196,
                "num_explored_lambda": 1020,
                "num_explored_none": 1145,
                "num_inputs": 3,
                "num_kept_concrete": 969,
                "num_kept_lambda": 395,
                "num_values_explored": 6361,
                "num_values_kept": 1364,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63829
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.42592504899948835,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.130136888008565,
            "num_unique_values": 1337,
            "solution": "Sum(fn_18(fn_0(y), Sort(x)))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 75.28251983649916,
                "explored_percent_lambda": 14.138013945660015,
                "explored_percent_none": 10.579466217840826,
                "kept_percent_concrete": 79.26371149511645,
                "kept_percent_lambda": 20.736288504883547,
                "num_examples": 5,
                "num_explored_concrete": 3131,
                "num_explored_lambda": 588,
                "num_explored_none": 440,
                "num_inputs": 2,
                "num_kept_concrete": 1055,
                "num_kept_lambda": 276,
                "num_values_explored": 4159,
                "num_values_kept": 1331,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6889
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5391712188720703,
            "num_unique_values": 341,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u1, u2)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.030848329048844,
                "explored_percent_lambda": 42.80205655526992,
                "explored_percent_none": 15.167095115681233,
                "kept_percent_concrete": 46.865671641791046,
                "kept_percent_lambda": 53.134328358208954,
                "num_examples": 3,
                "num_explored_concrete": 327,
                "num_explored_lambda": 333,
                "num_explored_none": 118,
                "num_inputs": 2,
                "num_kept_concrete": 157,
                "num_kept_lambda": 178,
                "num_values_explored": 778,
                "num_values_kept": 335,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2728
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.35609206696972,
            "num_unique_values": 271,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v2, v1)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.14589665653495,
                "explored_percent_lambda": 52.27963525835866,
                "explored_percent_none": 9.574468085106384,
                "kept_percent_concrete": 37.59398496240601,
                "kept_percent_lambda": 62.40601503759399,
                "num_examples": 3,
                "num_explored_concrete": 251,
                "num_explored_lambda": 344,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 100,
                "num_kept_lambda": 166,
                "num_values_explored": 658,
                "num_values_kept": 266,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 18008
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18753203586675227,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11398119688965,
            "num_unique_values": 1981,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.93124905144938,
                "explored_percent_lambda": 11.98967976931249,
                "explored_percent_none": 11.079071179238124,
                "kept_percent_concrete": 82.48101265822785,
                "kept_percent_lambda": 17.518987341772153,
                "num_examples": 5,
                "num_explored_concrete": 5069,
                "num_explored_lambda": 790,
                "num_explored_none": 730,
                "num_inputs": 2,
                "num_kept_concrete": 1629,
                "num_kept_lambda": 346,
                "num_values_explored": 6589,
                "num_values_kept": 1975,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67762
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05231260997243,
            "num_unique_values": 1702,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.24252717391305,
                "explored_percent_lambda": 19.718070652173914,
                "explored_percent_none": 11.039402173913043,
                "kept_percent_concrete": 68.98584905660377,
                "kept_percent_lambda": 31.014150943396228,
                "num_examples": 3,
                "num_explored_concrete": 4077,
                "num_explored_lambda": 1161,
                "num_explored_none": 650,
                "num_inputs": 2,
                "num_kept_concrete": 1170,
                "num_kept_lambda": 526,
                "num_values_explored": 5888,
                "num_values_kept": 1696,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58238
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30618366389535,
            "num_unique_values": 1707,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.00892145929585,
                "explored_percent_lambda": 15.389517285327386,
                "explored_percent_none": 12.601561255376772,
                "kept_percent_concrete": 68.11764705882354,
                "kept_percent_lambda": 31.88235294117647,
                "num_examples": 3,
                "num_explored_concrete": 4520,
                "num_explored_lambda": 966,
                "num_explored_none": 791,
                "num_inputs": 3,
                "num_kept_concrete": 1158,
                "num_kept_lambda": 542,
                "num_values_explored": 6277,
                "num_values_kept": 1700,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61322
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09395115496591,
            "num_unique_values": 1551,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.72651222651223,
                "explored_percent_lambda": 11.036036036036036,
                "explored_percent_none": 14.237451737451737,
                "kept_percent_concrete": 80.46571798188874,
                "kept_percent_lambda": 19.534282018111256,
                "num_examples": 5,
                "num_explored_concrete": 4645,
                "num_explored_lambda": 686,
                "num_explored_none": 885,
                "num_inputs": 1,
                "num_kept_concrete": 1244,
                "num_kept_lambda": 302,
                "num_values_explored": 6216,
                "num_values_kept": 1546,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64928
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12868725997396,
            "num_unique_values": 1710,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.49323621227887,
                "explored_percent_lambda": 18.331599028789455,
                "explored_percent_none": 15.175164758931668,
                "kept_percent_concrete": 69.91202346041055,
                "kept_percent_lambda": 30.087976539589445,
                "num_examples": 3,
                "num_explored_concrete": 3834,
                "num_explored_lambda": 1057,
                "num_explored_none": 875,
                "num_inputs": 1,
                "num_kept_concrete": 1192,
                "num_kept_lambda": 513,
                "num_values_explored": 5766,
                "num_values_kept": 1705,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59215
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40659090899862,
            "num_unique_values": 1395,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.12041210560206,
                "explored_percent_lambda": 16.854475209272376,
                "explored_percent_none": 12.025112685125563,
                "kept_percent_concrete": 66.37868970482361,
                "kept_percent_lambda": 33.621310295176386,
                "num_examples": 3,
                "num_explored_concrete": 4418,
                "num_explored_lambda": 1047,
                "num_explored_none": 747,
                "num_inputs": 2,
                "num_kept_concrete": 922,
                "num_kept_lambda": 467,
                "num_values_explored": 6212,
                "num_values_kept": 1389,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63618
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.46437355410307646,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.721756899030879,
            "num_unique_values": 899,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 58.27151335311573,
                "explored_percent_lambda": 22.589020771513354,
                "explored_percent_none": 19.13946587537092,
                "kept_percent_concrete": 60.91825307950728,
                "kept_percent_lambda": 39.08174692049272,
                "num_examples": 3,
                "num_explored_concrete": 1571,
                "num_explored_lambda": 609,
                "num_explored_none": 516,
                "num_inputs": 2,
                "num_kept_concrete": 544,
                "num_kept_lambda": 349,
                "num_values_explored": 2696,
                "num_values_kept": 893,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5426
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14849012088962,
            "num_unique_values": 1669,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.1185682326622,
                "explored_percent_lambda": 9.634601043997018,
                "explored_percent_none": 9.246830723340791,
                "kept_percent_concrete": 79.61515333734215,
                "kept_percent_lambda": 20.384846662657846,
                "num_examples": 5,
                "num_explored_concrete": 5439,
                "num_explored_lambda": 646,
                "num_explored_none": 620,
                "num_inputs": 2,
                "num_kept_concrete": 1324,
                "num_kept_lambda": 339,
                "num_values_explored": 6705,
                "num_values_kept": 1663,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68463
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17451683012769,
            "num_unique_values": 1350,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.55502392344498,
                "explored_percent_lambda": 26.066985645933013,
                "explored_percent_none": 9.37799043062201,
                "kept_percent_concrete": 56.951672862453535,
                "kept_percent_lambda": 43.048327137546465,
                "num_examples": 3,
                "num_explored_concrete": 3373,
                "num_explored_lambda": 1362,
                "num_explored_none": 490,
                "num_inputs": 1,
                "num_kept_concrete": 766,
                "num_kept_lambda": 579,
                "num_values_explored": 5225,
                "num_values_kept": 1345,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56900
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03729380201548,
            "num_unique_values": 1618,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.62054071348584,
                "explored_percent_lambda": 16.30139177731563,
                "explored_percent_none": 12.078067509198528,
                "kept_percent_concrete": 71.52605459057072,
                "kept_percent_lambda": 28.47394540942928,
                "num_examples": 3,
                "num_explored_concrete": 4477,
                "num_explored_lambda": 1019,
                "num_explored_none": 755,
                "num_inputs": 2,
                "num_kept_concrete": 1153,
                "num_kept_lambda": 459,
                "num_values_explored": 6251,
                "num_values_kept": 1612,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66624
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3393562638666481,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.51243194402196,
            "num_unique_values": 315,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 16.164207825529186,
                "explored_percent_lambda": 18.601667735728032,
                "explored_percent_none": 65.23412443874278,
                "kept_percent_concrete": 53.87096774193548,
                "kept_percent_lambda": 46.12903225806452,
                "num_examples": 5,
                "num_explored_concrete": 1008,
                "num_explored_lambda": 1160,
                "num_explored_none": 4068,
                "num_inputs": 1,
                "num_kept_concrete": 167,
                "num_kept_lambda": 143,
                "num_values_explored": 6236,
                "num_values_kept": 310,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64332
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15267800400033593,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.877713493071496,
            "num_unique_values": 1457,
            "solution": "fn_18(x, fn_9(Add(-1, -1), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 70.12248468941382,
                "explored_percent_lambda": 20.013123359580053,
                "explored_percent_none": 9.864391951006125,
                "kept_percent_concrete": 63.84297520661157,
                "kept_percent_lambda": 36.15702479338843,
                "num_examples": 3,
                "num_explored_concrete": 3206,
                "num_explored_lambda": 915,
                "num_explored_none": 451,
                "num_inputs": 1,
                "num_kept_concrete": 927,
                "num_kept_lambda": 525,
                "num_values_explored": 4572,
                "num_values_kept": 1452,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 12137
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15248318505473435,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27199103916064,
            "num_unique_values": 1846,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.95310136157337,
                "explored_percent_lambda": 19.549504118339218,
                "explored_percent_none": 9.49739452008741,
                "kept_percent_concrete": 69.74470396523628,
                "kept_percent_lambda": 30.255296034763717,
                "num_examples": 3,
                "num_explored_concrete": 4221,
                "num_explored_lambda": 1163,
                "num_explored_none": 565,
                "num_inputs": 1,
                "num_kept_concrete": 1284,
                "num_kept_lambda": 557,
                "num_values_explored": 5949,
                "num_values_kept": 1841,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59223
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12620692607015,
            "num_unique_values": 1511,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.7573812580231,
                "explored_percent_lambda": 20.523106546854944,
                "explored_percent_none": 13.71951219512195,
                "kept_percent_concrete": 61.221779548472774,
                "kept_percent_lambda": 38.778220451527226,
                "num_examples": 3,
                "num_explored_concrete": 4098,
                "num_explored_lambda": 1279,
                "num_explored_none": 855,
                "num_inputs": 1,
                "num_kept_concrete": 922,
                "num_kept_lambda": 584,
                "num_values_explored": 6232,
                "num_values_kept": 1506,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62305
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4105472669471,
            "num_unique_values": 1238,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.78454186578018,
                "explored_percent_lambda": 36.06897984624974,
                "explored_percent_none": 15.146478287970082,
                "kept_percent_concrete": 51.58150851581509,
                "kept_percent_lambda": 48.41849148418491,
                "num_examples": 3,
                "num_explored_concrete": 2348,
                "num_explored_lambda": 1736,
                "num_explored_none": 729,
                "num_inputs": 1,
                "num_kept_concrete": 636,
                "num_kept_lambda": 597,
                "num_values_explored": 4813,
                "num_values_kept": 1233,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52747
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16846109810285,
            "num_unique_values": 1745,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.92599590615652,
                "explored_percent_lambda": 17.823964729963784,
                "explored_percent_none": 12.250039363879704,
                "kept_percent_concrete": 63.139735480161015,
                "kept_percent_lambda": 36.860264519838985,
                "num_examples": 3,
                "num_explored_concrete": 4441,
                "num_explored_lambda": 1132,
                "num_explored_none": 778,
                "num_inputs": 2,
                "num_kept_concrete": 1098,
                "num_kept_lambda": 641,
                "num_values_explored": 6351,
                "num_values_kept": 1739,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57486
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.958189510041848,
            "num_unique_values": 515,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 54.029432375613176,
                "explored_percent_lambda": 30.273300630693765,
                "explored_percent_none": 15.697266993693063,
                "kept_percent_concrete": 66.47058823529412,
                "kept_percent_lambda": 33.529411764705884,
                "num_examples": 5,
                "num_explored_concrete": 771,
                "num_explored_lambda": 432,
                "num_explored_none": 224,
                "num_inputs": 1,
                "num_kept_concrete": 339,
                "num_kept_lambda": 171,
                "num_values_explored": 1427,
                "num_values_kept": 510,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2987
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19876895612106,
            "num_unique_values": 1472,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.97110423116615,
                "explored_percent_lambda": 34.59236326109391,
                "explored_percent_none": 13.436532507739939,
                "kept_percent_concrete": 55.2828902522154,
                "kept_percent_lambda": 44.7171097477846,
                "num_examples": 3,
                "num_explored_concrete": 2518,
                "num_explored_lambda": 1676,
                "num_explored_none": 651,
                "num_inputs": 1,
                "num_kept_concrete": 811,
                "num_kept_lambda": 656,
                "num_values_explored": 4845,
                "num_values_kept": 1467,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53534
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28935708501376,
            "num_unique_values": 1525,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.352856109906,
                "explored_percent_lambda": 25.01807664497469,
                "explored_percent_none": 10.629067245119305,
                "kept_percent_concrete": 61.973684210526315,
                "kept_percent_lambda": 38.026315789473685,
                "num_examples": 3,
                "num_explored_concrete": 3560,
                "num_explored_lambda": 1384,
                "num_explored_none": 588,
                "num_inputs": 1,
                "num_kept_concrete": 942,
                "num_kept_lambda": 578,
                "num_values_explored": 5532,
                "num_values_kept": 1520,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56844
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24539975891821,
            "num_unique_values": 1540,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.58169732570722,
                "explored_percent_lambda": 10.851754521564384,
                "explored_percent_none": 15.566548152728396,
                "kept_percent_concrete": 80.4432855280313,
                "kept_percent_lambda": 19.55671447196871,
                "num_examples": 5,
                "num_explored_concrete": 4760,
                "num_explored_lambda": 702,
                "num_explored_none": 1007,
                "num_inputs": 2,
                "num_kept_concrete": 1234,
                "num_kept_lambda": 300,
                "num_values_explored": 6469,
                "num_values_kept": 1534,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70361
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15095043298788,
            "num_unique_values": 1385,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.07174727824379,
                "explored_percent_lambda": 23.96930215955738,
                "explored_percent_none": 9.958950562198822,
                "kept_percent_concrete": 57.36040609137056,
                "kept_percent_lambda": 42.63959390862944,
                "num_examples": 3,
                "num_explored_concrete": 3702,
                "num_explored_lambda": 1343,
                "num_explored_none": 558,
                "num_inputs": 2,
                "num_kept_concrete": 791,
                "num_kept_lambda": 588,
                "num_values_explored": 5603,
                "num_values_kept": 1379,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62654
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00179605698213,
            "num_unique_values": 1571,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.4569716775599,
                "explored_percent_lambda": 8.700980392156863,
                "explored_percent_none": 14.842047930283224,
                "kept_percent_concrete": 84.72843450479233,
                "kept_percent_lambda": 15.271565495207668,
                "num_examples": 5,
                "num_explored_concrete": 5615,
                "num_explored_lambda": 639,
                "num_explored_none": 1090,
                "num_inputs": 2,
                "num_kept_concrete": 1326,
                "num_kept_lambda": 239,
                "num_values_explored": 7344,
                "num_values_kept": 1565,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75436
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.72078621387482,
            "num_unique_values": 1483,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.21440384904525,
                "explored_percent_lambda": 11.577206435122537,
                "explored_percent_none": 14.208389715832206,
                "kept_percent_concrete": 81.17806364251862,
                "kept_percent_lambda": 18.82193635748138,
                "num_examples": 5,
                "num_explored_concrete": 4936,
                "num_explored_lambda": 770,
                "num_explored_none": 945,
                "num_inputs": 2,
                "num_kept_concrete": 1199,
                "num_kept_lambda": 278,
                "num_values_explored": 6651,
                "num_values_kept": 1477,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70847
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21983862901106,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.82685512367492,
                "explored_percent_lambda": 9.069493521790342,
                "explored_percent_none": 13.103651354534747,
                "kept_percent_concrete": 81.34490238611714,
                "kept_percent_lambda": 18.655097613882862,
                "num_examples": 5,
                "num_explored_concrete": 5286,
                "num_explored_lambda": 616,
                "num_explored_none": 890,
                "num_inputs": 2,
                "num_kept_concrete": 1125,
                "num_kept_lambda": 258,
                "num_values_explored": 6792,
                "num_values_kept": 1383,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71203
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}