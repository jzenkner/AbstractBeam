{
    "num_tasks": 50,
    "num_tasks_solved": 21,
    "results": [
        {
            "elapsed_time": 0.7294258989859372,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21948099695146084,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.33572875591926277,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04226317605935,
            "num_unique_values": 1342,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.449208443271765,
                "explored_percent_lambda": 27.275725593667545,
                "explored_percent_none": 13.275065963060687,
                "kept_percent_concrete": 55.422587883320865,
                "kept_percent_lambda": 44.577412116679135,
                "num_examples": 3,
                "num_explored_concrete": 3605,
                "num_explored_lambda": 1654,
                "num_explored_none": 805,
                "num_inputs": 1,
                "num_kept_concrete": 741,
                "num_kept_lambda": 596,
                "num_values_explored": 6064,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60431
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.316149682039395,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28945586807095,
            "num_unique_values": 1537,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.2270546850016,
                "explored_percent_lambda": 17.47681483850336,
                "explored_percent_none": 12.296130476495042,
                "kept_percent_concrete": 75.71801566579634,
                "kept_percent_lambda": 24.281984334203656,
                "num_examples": 5,
                "num_explored_concrete": 4392,
                "num_explored_lambda": 1093,
                "num_explored_none": 769,
                "num_inputs": 1,
                "num_kept_concrete": 1160,
                "num_kept_lambda": 372,
                "num_values_explored": 6254,
                "num_values_kept": 1532,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67267
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15485749789513648,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10022463998757,
            "num_unique_values": 1409,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.3582295988935,
                "explored_percent_lambda": 17.519594283079762,
                "explored_percent_none": 15.12217611802674,
                "kept_percent_concrete": 71.08262108262109,
                "kept_percent_lambda": 28.91737891737892,
                "num_examples": 5,
                "num_explored_concrete": 4383,
                "num_explored_lambda": 1140,
                "num_explored_none": 984,
                "num_inputs": 1,
                "num_kept_concrete": 998,
                "num_kept_lambda": 406,
                "num_values_explored": 6507,
                "num_values_kept": 1404,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69586
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.59314319491386,
            "num_unique_values": 1385,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.13683872005146,
                "explored_percent_lambda": 18.427399903521465,
                "explored_percent_none": 10.43576137642708,
                "kept_percent_concrete": 66.15942028985508,
                "kept_percent_lambda": 33.84057971014493,
                "num_examples": 5,
                "num_explored_concrete": 4424,
                "num_explored_lambda": 1146,
                "num_explored_none": 649,
                "num_inputs": 1,
                "num_kept_concrete": 913,
                "num_kept_lambda": 467,
                "num_values_explored": 6219,
                "num_values_kept": 1380,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68191
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.42258276510984,
            "num_unique_values": 1358,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.47038327526133,
                "explored_percent_lambda": 35.90785907859079,
                "explored_percent_none": 18.62175764614789,
                "kept_percent_concrete": 49.150036954915,
                "kept_percent_lambda": 50.849963045085,
                "num_examples": 3,
                "num_explored_concrete": 2349,
                "num_explored_lambda": 1855,
                "num_explored_none": 962,
                "num_inputs": 1,
                "num_kept_concrete": 665,
                "num_kept_lambda": 688,
                "num_values_explored": 5166,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55743
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13680930901319,
            "num_unique_values": 1697,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.96367796367797,
                "explored_percent_lambda": 8.236808236808237,
                "explored_percent_none": 13.7995137995138,
                "kept_percent_concrete": 84.62448255470136,
                "kept_percent_lambda": 15.37551744529864,
                "num_examples": 5,
                "num_explored_concrete": 5452,
                "num_explored_lambda": 576,
                "num_explored_none": 965,
                "num_inputs": 2,
                "num_kept_concrete": 1431,
                "num_kept_lambda": 260,
                "num_values_explored": 6993,
                "num_values_kept": 1691,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73524
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00374506996013,
            "num_unique_values": 1559,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.04009575104728,
                "explored_percent_lambda": 17.220227408737284,
                "explored_percent_none": 9.73967684021544,
                "kept_percent_concrete": 64.90663232453316,
                "kept_percent_lambda": 35.09336767546684,
                "num_examples": 3,
                "num_explored_concrete": 4882,
                "num_explored_lambda": 1151,
                "num_explored_none": 651,
                "num_inputs": 2,
                "num_kept_concrete": 1008,
                "num_kept_lambda": 545,
                "num_values_explored": 6684,
                "num_values_kept": 1553,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70589
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 82.42971169599332,
            "num_unique_values": 242,
            "solution": "Count((lambda u1: ((lambda v1: Greater(((lambda v1: Subtract(-1, v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 35.17915309446254,
                "explored_percent_lambda": 49.3485342019544,
                "explored_percent_none": 15.472312703583063,
                "kept_percent_concrete": 44.30379746835443,
                "kept_percent_lambda": 55.69620253164557,
                "num_examples": 5,
                "num_explored_concrete": 216,
                "num_explored_lambda": 303,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 132,
                "num_values_explored": 614,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 60802
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.313488175161183,
            "num_unique_values": 720,
            "solution": "fn_21(fn_1(Filter((lambda u1: ((lambda v1: Less(v1, 1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.92437404190087,
                "explored_percent_lambda": 23.709759836484416,
                "explored_percent_none": 12.365866121614717,
                "kept_percent_concrete": 63.07692307692308,
                "kept_percent_lambda": 36.92307692307692,
                "num_examples": 3,
                "num_explored_concrete": 1251,
                "num_explored_lambda": 464,
                "num_explored_none": 242,
                "num_inputs": 1,
                "num_kept_concrete": 451,
                "num_kept_lambda": 264,
                "num_values_explored": 1957,
                "num_values_kept": 715,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5077
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83127817604691,
            "num_unique_values": 1724,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.43538946420531,
                "explored_percent_lambda": 14.19780879483716,
                "explored_percent_none": 12.366801740957527,
                "kept_percent_concrete": 71.98602213162492,
                "kept_percent_lambda": 28.013977868375072,
                "num_examples": 3,
                "num_explored_concrete": 4893,
                "num_explored_lambda": 946,
                "num_explored_none": 824,
                "num_inputs": 3,
                "num_kept_concrete": 1236,
                "num_kept_lambda": 481,
                "num_values_explored": 6663,
                "num_values_kept": 1717,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69428
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03936874400824,
            "num_unique_values": 1930,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.42521817634668,
                "explored_percent_lambda": 18.65783930183569,
                "explored_percent_none": 11.916942521817635,
                "kept_percent_concrete": 66.97867914716589,
                "kept_percent_lambda": 33.021320852834116,
                "num_examples": 3,
                "num_explored_concrete": 4614,
                "num_explored_lambda": 1240,
                "num_explored_none": 792,
                "num_inputs": 3,
                "num_kept_concrete": 1288,
                "num_kept_lambda": 635,
                "num_values_explored": 6646,
                "num_values_kept": 1923,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69390
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92782316287048,
            "num_unique_values": 1388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.70425458318921,
                "explored_percent_lambda": 24.455205811138015,
                "explored_percent_none": 20.840539605672777,
                "kept_percent_concrete": 65.31498913830558,
                "kept_percent_lambda": 34.68501086169442,
                "num_examples": 3,
                "num_explored_concrete": 3163,
                "num_explored_lambda": 1414,
                "num_explored_none": 1205,
                "num_inputs": 3,
                "num_kept_concrete": 902,
                "num_kept_lambda": 479,
                "num_values_explored": 5782,
                "num_values_kept": 1381,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66240
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.43218708294443786,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.069340165005997,
            "num_unique_values": 709,
            "solution": "fn_11(fn_0(y), Sort(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 63.75366568914956,
                "explored_percent_lambda": 23.929618768328446,
                "explored_percent_none": 12.316715542521994,
                "kept_percent_concrete": 75.9601706970128,
                "kept_percent_lambda": 24.039829302987197,
                "num_examples": 5,
                "num_explored_concrete": 1087,
                "num_explored_lambda": 408,
                "num_explored_none": 210,
                "num_inputs": 2,
                "num_kept_concrete": 534,
                "num_kept_lambda": 169,
                "num_values_explored": 1705,
                "num_values_kept": 703,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4435
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.497718638041988,
            "num_unique_values": 344,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u2, u1)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 48.77450980392157,
                "explored_percent_lambda": 35.661764705882355,
                "explored_percent_none": 15.563725490196079,
                "kept_percent_concrete": 56.21301775147929,
                "kept_percent_lambda": 43.78698224852071,
                "num_examples": 3,
                "num_explored_concrete": 398,
                "num_explored_lambda": 291,
                "num_explored_none": 127,
                "num_inputs": 2,
                "num_kept_concrete": 190,
                "num_kept_lambda": 148,
                "num_values_explored": 816,
                "num_values_kept": 338,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2766
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.17139129107818,
            "num_unique_values": 268,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v2, v1)))(u1, u2)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 34.3801652892562,
                "explored_percent_lambda": 55.70247933884298,
                "explored_percent_none": 9.917355371900827,
                "kept_percent_concrete": 37.6425855513308,
                "kept_percent_lambda": 62.3574144486692,
                "num_examples": 3,
                "num_explored_concrete": 208,
                "num_explored_lambda": 337,
                "num_explored_none": 60,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 164,
                "num_values_explored": 605,
                "num_values_kept": 263,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7330
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17934969207271934,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00461194105446,
            "num_unique_values": 1975,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.75767918088737,
                "explored_percent_lambda": 9.706484641638225,
                "explored_percent_none": 11.535836177474403,
                "kept_percent_concrete": 82.73235144743525,
                "kept_percent_lambda": 17.267648552564754,
                "num_examples": 5,
                "num_explored_concrete": 5769,
                "num_explored_lambda": 711,
                "num_explored_none": 845,
                "num_inputs": 2,
                "num_kept_concrete": 1629,
                "num_kept_lambda": 340,
                "num_values_explored": 7325,
                "num_values_kept": 1969,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70188
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0077966528479,
            "num_unique_values": 1652,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.2791542781632,
                "explored_percent_lambda": 24.59530888668649,
                "explored_percent_none": 10.125536835150314,
                "kept_percent_concrete": 64.03402187120291,
                "kept_percent_lambda": 35.96597812879708,
                "num_examples": 3,
                "num_explored_concrete": 3952,
                "num_explored_lambda": 1489,
                "num_explored_none": 613,
                "num_inputs": 2,
                "num_kept_concrete": 1054,
                "num_kept_lambda": 592,
                "num_values_explored": 6054,
                "num_values_kept": 1646,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62184
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13979511614889,
            "num_unique_values": 1706,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.9469259930773,
                "explored_percent_lambda": 24.11405966705126,
                "explored_percent_none": 9.939014339871436,
                "kept_percent_concrete": 62.80164802825191,
                "kept_percent_lambda": 37.19835197174809,
                "num_examples": 3,
                "num_explored_concrete": 4001,
                "num_explored_lambda": 1463,
                "num_explored_none": 603,
                "num_inputs": 3,
                "num_kept_concrete": 1067,
                "num_kept_lambda": 632,
                "num_values_explored": 6067,
                "num_values_kept": 1699,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65550
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0465873091016,
            "num_unique_values": 1762,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.98025551684088,
                "explored_percent_lambda": 12.296747967479675,
                "explored_percent_none": 15.722996515679442,
                "kept_percent_concrete": 81.21798520204895,
                "kept_percent_lambda": 18.782014797951053,
                "num_examples": 5,
                "num_explored_concrete": 4958,
                "num_explored_lambda": 847,
                "num_explored_none": 1083,
                "num_inputs": 1,
                "num_kept_concrete": 1427,
                "num_kept_lambda": 330,
                "num_values_explored": 6888,
                "num_values_kept": 1757,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68997
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04198594205081,
            "num_unique_values": 1837,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.09475838186684,
                "explored_percent_lambda": 17.802612938769087,
                "explored_percent_none": 16.10262867936408,
                "kept_percent_concrete": 72.43449781659389,
                "kept_percent_lambda": 27.565502183406114,
                "num_examples": 3,
                "num_explored_concrete": 4199,
                "num_explored_lambda": 1131,
                "num_explored_none": 1023,
                "num_inputs": 1,
                "num_kept_concrete": 1327,
                "num_kept_lambda": 505,
                "num_values_explored": 6353,
                "num_values_kept": 1832,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62213
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44382220786065,
            "num_unique_values": 1472,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.42587939698493,
                "explored_percent_lambda": 20.540201005025125,
                "explored_percent_none": 13.03391959798995,
                "kept_percent_concrete": 65.27967257844475,
                "kept_percent_lambda": 34.720327421555254,
                "num_examples": 3,
                "num_explored_concrete": 4230,
                "num_explored_lambda": 1308,
                "num_explored_none": 830,
                "num_inputs": 2,
                "num_kept_concrete": 957,
                "num_kept_lambda": 509,
                "num_values_explored": 6368,
                "num_values_kept": 1466,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66091
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5351607019547373,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.60606398503296,
            "num_unique_values": 1271,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Square(v1)))(v1))))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 69.97137652875358,
                "explored_percent_lambda": 18.995576372625553,
                "explored_percent_none": 11.03304709862087,
                "kept_percent_concrete": 66.87747035573122,
                "kept_percent_lambda": 33.12252964426877,
                "num_examples": 3,
                "num_explored_concrete": 2689,
                "num_explored_lambda": 730,
                "num_explored_none": 424,
                "num_inputs": 2,
                "num_kept_concrete": 846,
                "num_kept_lambda": 419,
                "num_values_explored": 3843,
                "num_values_kept": 1265,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 12945
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11760701611638,
            "num_unique_values": 1571,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.43252851429418,
                "explored_percent_lambda": 9.480077025625834,
                "explored_percent_none": 10.087394460079988,
                "kept_percent_concrete": 78.14696485623003,
                "kept_percent_lambda": 21.85303514376997,
                "num_examples": 5,
                "num_explored_concrete": 5430,
                "num_explored_lambda": 640,
                "num_explored_none": 681,
                "num_inputs": 2,
                "num_kept_concrete": 1223,
                "num_kept_lambda": 342,
                "num_values_explored": 6751,
                "num_values_kept": 1565,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71897
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17697303695604,
            "num_unique_values": 1452,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.87347463070006,
                "explored_percent_lambda": 18.625561978163134,
                "explored_percent_none": 10.500963391136802,
                "kept_percent_concrete": 63.23427781617139,
                "kept_percent_lambda": 36.76572218382861,
                "num_examples": 3,
                "num_explored_concrete": 4414,
                "num_explored_lambda": 1160,
                "num_explored_none": 654,
                "num_inputs": 1,
                "num_kept_concrete": 915,
                "num_kept_lambda": 532,
                "num_values_explored": 6228,
                "num_values_kept": 1447,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58537
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 70.50668655103073,
            "num_unique_values": 1695,
            "solution": "Map((lambda u1: ((lambda v1: Min(v1, 1)))(u1)), ZipWith((lambda u1, u2: ((lambda v1: Count((lambda u1: ((lambda v1: Less(y, v1)))(v1)), fn_1(x))))(u1)), x, x))",
            "solution_weight": 16,
            "stats": {
                "explored_percent_concrete": 75.6784064665127,
                "explored_percent_lambda": 14.058891454965359,
                "explored_percent_none": 10.26270207852194,
                "kept_percent_concrete": 73.35701598579041,
                "kept_percent_lambda": 26.642984014209592,
                "num_examples": 3,
                "num_explored_concrete": 5243,
                "num_explored_lambda": 974,
                "num_explored_none": 711,
                "num_inputs": 2,
                "num_kept_concrete": 1239,
                "num_kept_lambda": 450,
                "num_values_explored": 6928,
                "num_values_kept": 1689,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 48897
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.31867620814591646,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.48614051798359,
            "num_unique_values": 344,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 19.333738971706723,
                "explored_percent_lambda": 20.900517188926074,
                "explored_percent_none": 59.765743839367204,
                "kept_percent_concrete": 52.8023598820059,
                "kept_percent_lambda": 47.1976401179941,
                "num_examples": 5,
                "num_explored_concrete": 1271,
                "num_explored_lambda": 1374,
                "num_explored_none": 3929,
                "num_inputs": 1,
                "num_kept_concrete": 179,
                "num_kept_lambda": 160,
                "num_values_explored": 6574,
                "num_values_kept": 339,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70669
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14156766911037266,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 56.082384432898834,
            "num_unique_values": 1101,
            "solution": "fn_18(x, fn_9(Add(-1, -1), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.52136752136752,
                "explored_percent_lambda": 23.17554240631164,
                "explored_percent_none": 9.303090072320842,
                "kept_percent_concrete": 63.22992700729927,
                "kept_percent_lambda": 36.77007299270073,
                "num_examples": 3,
                "num_explored_concrete": 2054,
                "num_explored_lambda": 705,
                "num_explored_none": 283,
                "num_inputs": 1,
                "num_kept_concrete": 693,
                "num_kept_lambda": 403,
                "num_values_explored": 3042,
                "num_values_kept": 1096,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 32879
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13477858901023865,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11499347584322,
            "num_unique_values": 1841,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.15423755764033,
                "explored_percent_lambda": 20.27349340117666,
                "explored_percent_none": 9.572269041183018,
                "kept_percent_concrete": 70.53376906318083,
                "kept_percent_lambda": 29.466230936819173,
                "num_examples": 3,
                "num_explored_concrete": 4412,
                "num_explored_lambda": 1275,
                "num_explored_none": 602,
                "num_inputs": 1,
                "num_kept_concrete": 1295,
                "num_kept_lambda": 541,
                "num_values_explored": 6289,
                "num_values_kept": 1836,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60379
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0393189729657,
            "num_unique_values": 1599,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.24789594491202,
                "explored_percent_lambda": 21.101759755164498,
                "explored_percent_none": 10.65034429992349,
                "kept_percent_concrete": 59.15934755332497,
                "kept_percent_lambda": 40.84065244667503,
                "num_examples": 3,
                "num_explored_concrete": 4460,
                "num_explored_lambda": 1379,
                "num_explored_none": 696,
                "num_inputs": 1,
                "num_kept_concrete": 943,
                "num_kept_lambda": 651,
                "num_values_explored": 6535,
                "num_values_kept": 1594,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65190
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21375116100535,
            "num_unique_values": 1398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.277683134582624,
                "explored_percent_lambda": 24.05451448040886,
                "explored_percent_none": 14.667802385008518,
                "kept_percent_concrete": 58.79396984924623,
                "kept_percent_lambda": 41.20603015075377,
                "num_examples": 3,
                "num_explored_concrete": 3597,
                "num_explored_lambda": 1412,
                "num_explored_none": 861,
                "num_inputs": 1,
                "num_kept_concrete": 819,
                "num_kept_lambda": 574,
                "num_values_explored": 5870,
                "num_values_kept": 1393,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57984
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09040104108863,
            "num_unique_values": 1547,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.31382885257424,
                "explored_percent_lambda": 28.624143384290985,
                "explored_percent_none": 17.062027763134775,
                "kept_percent_concrete": 58.208955223880594,
                "kept_percent_lambda": 41.791044776119406,
                "num_examples": 3,
                "num_explored_concrete": 3091,
                "num_explored_lambda": 1629,
                "num_explored_none": 971,
                "num_inputs": 2,
                "num_kept_concrete": 897,
                "num_kept_lambda": 644,
                "num_values_explored": 5691,
                "num_values_kept": 1541,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63994
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7377986509818584,
            "num_unique_values": 520,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 54.661921708185055,
                "explored_percent_lambda": 30.106761565836297,
                "explored_percent_none": 15.231316725978647,
                "kept_percent_concrete": 66.01941747572816,
                "kept_percent_lambda": 33.980582524271846,
                "num_examples": 5,
                "num_explored_concrete": 768,
                "num_explored_lambda": 423,
                "num_explored_none": 214,
                "num_inputs": 1,
                "num_kept_concrete": 340,
                "num_kept_lambda": 175,
                "num_values_explored": 1405,
                "num_values_kept": 515,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2965
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17645046696998,
            "num_unique_values": 1484,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.17817328378643,
                "explored_percent_lambda": 34.36338744377078,
                "explored_percent_none": 12.458439272442792,
                "kept_percent_concrete": 52.40027045300879,
                "kept_percent_lambda": 47.59972954699121,
                "num_examples": 3,
                "num_explored_concrete": 2719,
                "num_explored_lambda": 1757,
                "num_explored_none": 637,
                "num_inputs": 1,
                "num_kept_concrete": 775,
                "num_kept_lambda": 704,
                "num_values_explored": 5113,
                "num_values_kept": 1479,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57080
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24679961311631,
            "num_unique_values": 1552,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.622067767159,
                "explored_percent_lambda": 23.996524761077325,
                "explored_percent_none": 11.381407471763684,
                "kept_percent_concrete": 61.53846153846154,
                "kept_percent_lambda": 38.46153846153846,
                "num_examples": 3,
                "num_explored_concrete": 3719,
                "num_explored_lambda": 1381,
                "num_explored_none": 655,
                "num_inputs": 1,
                "num_kept_concrete": 952,
                "num_kept_lambda": 595,
                "num_values_explored": 5755,
                "num_values_kept": 1547,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59594
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17477623419836,
            "num_unique_values": 1860,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.79700083310192,
                "explored_percent_lambda": 8.067203554568176,
                "explored_percent_none": 11.135795612329908,
                "kept_percent_concrete": 84.08845738942826,
                "kept_percent_lambda": 15.911542610571736,
                "num_examples": 5,
                "num_explored_concrete": 5819,
                "num_explored_lambda": 581,
                "num_explored_none": 802,
                "num_inputs": 2,
                "num_kept_concrete": 1559,
                "num_kept_lambda": 295,
                "num_values_explored": 7202,
                "num_values_kept": 1854,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74410
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05229240702465,
            "num_unique_values": 1351,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.76470588235294,
                "explored_percent_lambda": 27.769758210032478,
                "explored_percent_none": 10.46553590761458,
                "kept_percent_concrete": 51.301115241635685,
                "kept_percent_lambda": 48.698884758364315,
                "num_examples": 3,
                "num_explored_concrete": 3423,
                "num_explored_lambda": 1539,
                "num_explored_none": 580,
                "num_inputs": 2,
                "num_kept_concrete": 690,
                "num_kept_lambda": 655,
                "num_values_explored": 5542,
                "num_values_kept": 1345,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62469
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98332400992513,
            "num_unique_values": 1548,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.49008905486929,
                "explored_percent_lambda": 9.278942832519391,
                "explored_percent_none": 16.23096811261132,
                "kept_percent_concrete": 84.3709468223087,
                "kept_percent_lambda": 15.62905317769131,
                "num_examples": 5,
                "num_explored_concrete": 5186,
                "num_explored_lambda": 646,
                "num_explored_none": 1130,
                "num_inputs": 2,
                "num_kept_concrete": 1301,
                "num_kept_lambda": 241,
                "num_values_explored": 6962,
                "num_values_kept": 1542,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77933
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.65447609708644,
            "num_unique_values": 1540,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.97943082558467,
                "explored_percent_lambda": 11.524373062834602,
                "explored_percent_none": 11.496196111580726,
                "kept_percent_concrete": 80.05215123859192,
                "kept_percent_lambda": 19.947848761408082,
                "num_examples": 5,
                "num_explored_concrete": 5464,
                "num_explored_lambda": 818,
                "num_explored_none": 816,
                "num_inputs": 2,
                "num_kept_concrete": 1228,
                "num_kept_lambda": 306,
                "num_values_explored": 7098,
                "num_values_kept": 1534,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74840
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 65.5672359301243,
            "num_unique_values": 794,
            "solution": "Max(fn_3(Reverse(Map((lambda u1: ((lambda v1: IntDivide(v1, n)))(u1)), x)), Last(fn_10(x))), Count((lambda u1: ((lambda v1: Less(n, v1)))(u1)), x))",
            "solution_weight": 18,
            "stats": {
                "explored_percent_concrete": 70.03289473684211,
                "explored_percent_lambda": 16.67763157894737,
                "explored_percent_none": 13.289473684210526,
                "kept_percent_concrete": 77.28426395939087,
                "kept_percent_lambda": 22.715736040609137,
                "num_examples": 5,
                "num_explored_concrete": 2129,
                "num_explored_lambda": 507,
                "num_explored_none": 404,
                "num_inputs": 2,
                "num_kept_concrete": 609,
                "num_kept_lambda": 179,
                "num_values_explored": 3040,
                "num_values_kept": 788,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 48956
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.42
}