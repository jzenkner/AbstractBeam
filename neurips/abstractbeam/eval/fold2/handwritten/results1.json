{
    "num_tasks": 50,
    "num_tasks_solved": 18,
    "results": [
        {
            "elapsed_time": 0.9112813570536673,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2405214610043913,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3337000978644937,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15567528898828,
            "num_unique_values": 1370,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.29597197898424,
                "explored_percent_lambda": 17.46059544658494,
                "explored_percent_none": 11.243432574430823,
                "kept_percent_concrete": 63.88278388278388,
                "kept_percent_lambda": 36.11721611721612,
                "num_examples": 3,
                "num_explored_concrete": 4071,
                "num_explored_lambda": 997,
                "num_explored_none": 642,
                "num_inputs": 1,
                "num_kept_concrete": 872,
                "num_kept_lambda": 493,
                "num_values_explored": 5710,
                "num_values_kept": 1365,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54039
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.399158505955711,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44275385304354,
            "num_unique_values": 1507,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.39940387481371,
                "explored_percent_lambda": 21.013412816691506,
                "explored_percent_none": 11.587183308494783,
                "kept_percent_concrete": 73.83488681757656,
                "kept_percent_lambda": 26.165113182423436,
                "num_examples": 5,
                "num_explored_concrete": 3618,
                "num_explored_lambda": 1128,
                "num_explored_none": 622,
                "num_inputs": 1,
                "num_kept_concrete": 1109,
                "num_kept_lambda": 393,
                "num_values_explored": 5368,
                "num_values_kept": 1502,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57347
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19999033608473837,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.29626268986613,
            "num_unique_values": 1337,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.77997671711292,
                "explored_percent_lambda": 15.000831531681357,
                "explored_percent_none": 14.21919175120572,
                "kept_percent_concrete": 72.97297297297297,
                "kept_percent_lambda": 27.027027027027028,
                "num_examples": 5,
                "num_explored_concrete": 4256,
                "num_explored_lambda": 902,
                "num_explored_none": 855,
                "num_inputs": 1,
                "num_kept_concrete": 972,
                "num_kept_lambda": 360,
                "num_values_explored": 6013,
                "num_values_kept": 1332,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61365
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.88659938401543,
            "num_unique_values": 1304,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.41509433962264,
                "explored_percent_lambda": 22.528301886792452,
                "explored_percent_none": 17.056603773584907,
                "kept_percent_concrete": 64.66512702078522,
                "kept_percent_lambda": 35.33487297921478,
                "num_examples": 5,
                "num_explored_concrete": 3202,
                "num_explored_lambda": 1194,
                "num_explored_none": 904,
                "num_inputs": 1,
                "num_kept_concrete": 840,
                "num_kept_lambda": 459,
                "num_values_explored": 5300,
                "num_values_kept": 1299,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59302
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.7194606710691,
            "num_unique_values": 1210,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.309057806099226,
                "explored_percent_lambda": 38.188438780154755,
                "explored_percent_none": 18.502503413746016,
                "kept_percent_concrete": 49.045643153526974,
                "kept_percent_lambda": 50.954356846473026,
                "num_examples": 3,
                "num_explored_concrete": 1903,
                "num_explored_lambda": 1678,
                "num_explored_none": 813,
                "num_inputs": 1,
                "num_kept_concrete": 591,
                "num_kept_lambda": 614,
                "num_values_explored": 4394,
                "num_values_kept": 1205,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50428
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30986595596187,
            "num_unique_values": 1619,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.87372959655066,
                "explored_percent_lambda": 8.238373883584847,
                "explored_percent_none": 11.88789651986449,
                "kept_percent_concrete": 84.43893366398017,
                "kept_percent_lambda": 15.561066336019838,
                "num_examples": 5,
                "num_explored_concrete": 5187,
                "num_explored_lambda": 535,
                "num_explored_none": 772,
                "num_inputs": 2,
                "num_kept_concrete": 1362,
                "num_kept_lambda": 251,
                "num_values_explored": 6494,
                "num_values_kept": 1613,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64952
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18510405579582,
            "num_unique_values": 1485,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.54742096505824,
                "explored_percent_lambda": 16.25623960066556,
                "explored_percent_none": 12.196339434276206,
                "kept_percent_concrete": 68.42461122379987,
                "kept_percent_lambda": 31.575388776200136,
                "num_examples": 3,
                "num_explored_concrete": 4300,
                "num_explored_lambda": 977,
                "num_explored_none": 733,
                "num_inputs": 2,
                "num_kept_concrete": 1012,
                "num_kept_lambda": 467,
                "num_values_explored": 6010,
                "num_values_kept": 1479,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62127
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.1024277419783175,
            "num_unique_values": 808,
            "solution": "Max(Min(Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x), Access(1, fn_10(Sort(x)))), Sum(Drop(Head(x), x)))",
            "solution_weight": 18,
            "stats": {
                "explored_percent_concrete": 68.1230494872938,
                "explored_percent_lambda": 16.98617922425323,
                "explored_percent_none": 14.890771288452965,
                "kept_percent_concrete": 77.21046077210461,
                "kept_percent_lambda": 22.789539227895393,
                "num_examples": 5,
                "num_explored_concrete": 1528,
                "num_explored_lambda": 381,
                "num_explored_none": 334,
                "num_inputs": 1,
                "num_kept_concrete": 620,
                "num_kept_lambda": 183,
                "num_values_explored": 2243,
                "num_values_kept": 803,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5363
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.457321064081043,
            "num_unique_values": 353,
            "solution": "fn_21(Filter((lambda u1: ((lambda v1: Equal(-1, ((lambda v1: Max(-1, v1)))(v1))))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 44.35107376283847,
                "explored_percent_lambda": 40.896358543417364,
                "explored_percent_none": 14.752567693744165,
                "kept_percent_concrete": 57.18390804597701,
                "kept_percent_lambda": 42.81609195402299,
                "num_examples": 3,
                "num_explored_concrete": 475,
                "num_explored_lambda": 438,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 199,
                "num_kept_lambda": 149,
                "num_values_explored": 1071,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4191
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95401045586914,
            "num_unique_values": 1584,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.89489900718932,
                "explored_percent_lambda": 19.650804519000342,
                "explored_percent_none": 13.45429647381034,
                "kept_percent_concrete": 70.06975269499048,
                "kept_percent_lambda": 29.930247305009512,
                "num_examples": 3,
                "num_explored_concrete": 3908,
                "num_explored_lambda": 1148,
                "num_explored_none": 786,
                "num_inputs": 3,
                "num_kept_concrete": 1105,
                "num_kept_lambda": 472,
                "num_values_explored": 5842,
                "num_values_kept": 1577,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61354
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05359377502464,
            "num_unique_values": 1837,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.70062090954858,
                "explored_percent_lambda": 13.710354086256084,
                "explored_percent_none": 10.589025004195335,
                "kept_percent_concrete": 71.2568306010929,
                "kept_percent_lambda": 28.743169398907103,
                "num_examples": 3,
                "num_explored_concrete": 4511,
                "num_explored_lambda": 817,
                "num_explored_none": 631,
                "num_inputs": 3,
                "num_kept_concrete": 1304,
                "num_kept_lambda": 526,
                "num_values_explored": 5959,
                "num_values_kept": 1830,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61777
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89265980385244,
            "num_unique_values": 1311,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.65973640245034,
                "explored_percent_lambda": 22.16447002041953,
                "explored_percent_none": 19.17579357713013,
                "kept_percent_concrete": 64.87730061349693,
                "kept_percent_lambda": 35.122699386503065,
                "num_examples": 3,
                "num_explored_concrete": 3160,
                "num_explored_lambda": 1194,
                "num_explored_none": 1033,
                "num_inputs": 3,
                "num_kept_concrete": 846,
                "num_kept_lambda": 458,
                "num_values_explored": 5387,
                "num_values_kept": 1304,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60096
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4141042639967054,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6412345650605857,
            "num_unique_values": 333,
            "solution": "fn_11(Sort(y), fn_0(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 52.546583850931675,
                "explored_percent_lambda": 35.65217391304348,
                "explored_percent_none": 11.801242236024844,
                "kept_percent_concrete": 63.91437308868502,
                "kept_percent_lambda": 36.08562691131498,
                "num_examples": 5,
                "num_explored_concrete": 423,
                "num_explored_lambda": 287,
                "num_explored_none": 95,
                "num_inputs": 2,
                "num_kept_concrete": 209,
                "num_kept_lambda": 118,
                "num_values_explored": 805,
                "num_values_kept": 327,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3535
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.69734314782545,
            "num_unique_values": 706,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u1, u2)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.95156695156695,
                "explored_percent_lambda": 20.987654320987655,
                "explored_percent_none": 12.060778727445394,
                "kept_percent_concrete": 65.14285714285714,
                "kept_percent_lambda": 34.857142857142854,
                "num_examples": 3,
                "num_explored_concrete": 1410,
                "num_explored_lambda": 442,
                "num_explored_none": 254,
                "num_inputs": 2,
                "num_kept_concrete": 456,
                "num_kept_lambda": 244,
                "num_values_explored": 2106,
                "num_values_kept": 700,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4056
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08448715694249,
            "num_unique_values": 1481,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.523594583504305,
                "explored_percent_lambda": 30.980713992613868,
                "explored_percent_none": 16.495691423881823,
                "kept_percent_concrete": 58.672086720867206,
                "kept_percent_lambda": 41.327913279132794,
                "num_examples": 3,
                "num_explored_concrete": 2560,
                "num_explored_lambda": 1510,
                "num_explored_none": 804,
                "num_inputs": 1,
                "num_kept_concrete": 866,
                "num_kept_lambda": 610,
                "num_values_explored": 4874,
                "num_values_kept": 1476,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50502
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.29905563895590603,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14493706380017,
            "num_unique_values": 1849,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.77022653721683,
                "explored_percent_lambda": 10.663430420711974,
                "explored_percent_none": 10.566343042071198,
                "kept_percent_concrete": 81.71459576776994,
                "kept_percent_lambda": 18.28540423223006,
                "num_examples": 5,
                "num_explored_concrete": 4868,
                "num_explored_lambda": 659,
                "num_explored_none": 653,
                "num_inputs": 2,
                "num_kept_concrete": 1506,
                "num_kept_lambda": 337,
                "num_values_explored": 6180,
                "num_values_kept": 1843,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63399
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1358661451377,
            "num_unique_values": 1763,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.52767007402186,
                "explored_percent_lambda": 19.351427564328517,
                "explored_percent_none": 11.12090236164963,
                "kept_percent_concrete": 69.83494593056346,
                "kept_percent_lambda": 30.16505406943654,
                "num_examples": 3,
                "num_explored_concrete": 3945,
                "num_explored_lambda": 1098,
                "num_explored_none": 631,
                "num_inputs": 2,
                "num_kept_concrete": 1227,
                "num_kept_lambda": 530,
                "num_values_explored": 5674,
                "num_values_kept": 1757,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56192
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.36605369695462,
            "num_unique_values": 1468,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.46519589197413,
                "explored_percent_lambda": 23.259794598706733,
                "explored_percent_none": 13.275009509319133,
                "kept_percent_concrete": 61.12251882272416,
                "kept_percent_lambda": 38.87748117727584,
                "num_examples": 3,
                "num_explored_concrete": 3337,
                "num_explored_lambda": 1223,
                "num_explored_none": 698,
                "num_inputs": 3,
                "num_kept_concrete": 893,
                "num_kept_lambda": 568,
                "num_values_explored": 5258,
                "num_values_kept": 1461,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58838
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10948165785521,
            "num_unique_values": 1577,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.31818181818181,
                "explored_percent_lambda": 12.873376623376624,
                "explored_percent_none": 12.808441558441558,
                "kept_percent_concrete": 78.81679389312977,
                "kept_percent_lambda": 21.18320610687023,
                "num_examples": 5,
                "num_explored_concrete": 4578,
                "num_explored_lambda": 793,
                "num_explored_none": 789,
                "num_inputs": 1,
                "num_kept_concrete": 1239,
                "num_kept_lambda": 333,
                "num_values_explored": 6160,
                "num_values_kept": 1572,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62121
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17657497595064,
            "num_unique_values": 1725,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.59571402845309,
                "explored_percent_lambda": 18.74662344678552,
                "explored_percent_none": 16.657662524761392,
                "kept_percent_concrete": 69.94186046511628,
                "kept_percent_lambda": 30.058139534883722,
                "num_examples": 3,
                "num_explored_concrete": 3587,
                "num_explored_lambda": 1041,
                "num_explored_none": 925,
                "num_inputs": 1,
                "num_kept_concrete": 1203,
                "num_kept_lambda": 517,
                "num_values_explored": 5553,
                "num_values_kept": 1720,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56378
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.50156959914602,
            "num_unique_values": 1402,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.9564841996201,
                "explored_percent_lambda": 16.56017958901744,
                "explored_percent_none": 11.48333621136246,
                "kept_percent_concrete": 68.76790830945559,
                "kept_percent_lambda": 31.23209169054441,
                "num_examples": 3,
                "num_explored_concrete": 4167,
                "num_explored_lambda": 959,
                "num_explored_none": 665,
                "num_inputs": 2,
                "num_kept_concrete": 960,
                "num_kept_lambda": 436,
                "num_values_explored": 5791,
                "num_values_kept": 1396,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59927
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.579549599904567,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 31.16133036906831,
            "num_unique_values": 1767,
            "solution": "fn_1(fn_1(Sort(Drop(Min(1, Last(r)), fn_0(c)))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 75.82899869960988,
                "explored_percent_lambda": 14.82444733420026,
                "explored_percent_none": 9.346553966189857,
                "kept_percent_concrete": 72.51561612720046,
                "kept_percent_lambda": 27.484383872799544,
                "num_examples": 3,
                "num_explored_concrete": 4665,
                "num_explored_lambda": 912,
                "num_explored_none": 575,
                "num_inputs": 2,
                "num_kept_concrete": 1277,
                "num_kept_lambda": 484,
                "num_values_explored": 6152,
                "num_values_kept": 1761,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 20454
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22065386013128,
            "num_unique_values": 1650,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.71482709616295,
                "explored_percent_lambda": 9.442602242223275,
                "explored_percent_none": 8.842570661613768,
                "kept_percent_concrete": 78.77128953771289,
                "kept_percent_lambda": 21.228710462287104,
                "num_examples": 5,
                "num_explored_concrete": 5175,
                "num_explored_lambda": 598,
                "num_explored_none": 560,
                "num_inputs": 2,
                "num_kept_concrete": 1295,
                "num_kept_lambda": 349,
                "num_values_explored": 6333,
                "num_values_kept": 1644,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65849
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18532762187533,
            "num_unique_values": 1425,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.05862002690755,
                "explored_percent_lambda": 24.293676724966364,
                "explored_percent_none": 10.647703248126081,
                "kept_percent_concrete": 59.29577464788732,
                "kept_percent_lambda": 40.70422535211268,
                "num_examples": 3,
                "num_explored_concrete": 3385,
                "num_explored_lambda": 1264,
                "num_explored_none": 554,
                "num_inputs": 1,
                "num_kept_concrete": 842,
                "num_kept_lambda": 578,
                "num_values_explored": 5203,
                "num_values_kept": 1420,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53181
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99950975901447,
            "num_unique_values": 1731,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.066034651847,
                "explored_percent_lambda": 14.367440339980385,
                "explored_percent_none": 13.566525008172606,
                "kept_percent_concrete": 75.18840579710145,
                "kept_percent_lambda": 24.81159420289855,
                "num_examples": 3,
                "num_explored_concrete": 4409,
                "num_explored_lambda": 879,
                "num_explored_none": 830,
                "num_inputs": 2,
                "num_kept_concrete": 1297,
                "num_kept_lambda": 428,
                "num_values_explored": 6118,
                "num_values_kept": 1725,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63167
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.35166382300667465,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.55755977216177,
            "num_unique_values": 262,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.656468853667526,
                "explored_percent_lambda": 21.102100995208257,
                "explored_percent_none": 65.24143015112422,
                "kept_percent_concrete": 41.63424124513619,
                "kept_percent_lambda": 58.36575875486381,
                "num_examples": 5,
                "num_explored_concrete": 741,
                "num_explored_lambda": 1145,
                "num_explored_none": 3540,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 150,
                "num_values_explored": 5426,
                "num_values_kept": 257,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60510
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15569918393157423,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.389809312997386,
            "num_unique_values": 1100,
            "solution": "fn_18(x, fn_9(Add(-1, -1), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.69796708615682,
                "explored_percent_lambda": 26.556953856082608,
                "explored_percent_none": 9.745079057760568,
                "kept_percent_concrete": 59.08675799086758,
                "kept_percent_lambda": 40.91324200913242,
                "num_examples": 3,
                "num_explored_concrete": 1974,
                "num_explored_lambda": 823,
                "num_explored_none": 302,
                "num_inputs": 1,
                "num_kept_concrete": 647,
                "num_kept_lambda": 448,
                "num_values_explored": 3099,
                "num_values_kept": 1095,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15851
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15957269887439907,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26346725295298,
            "num_unique_values": 1564,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.623924941360436,
                "explored_percent_lambda": 24.472243940578576,
                "explored_percent_none": 11.903831118060985,
                "kept_percent_concrete": 65.04169339320077,
                "kept_percent_lambda": 34.95830660679923,
                "num_examples": 3,
                "num_explored_concrete": 3255,
                "num_explored_lambda": 1252,
                "num_explored_none": 609,
                "num_inputs": 1,
                "num_kept_concrete": 1014,
                "num_kept_lambda": 545,
                "num_values_explored": 5116,
                "num_values_kept": 1559,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56195
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09304558020085,
            "num_unique_values": 1466,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.26230661040788,
                "explored_percent_lambda": 20.86849507735584,
                "explored_percent_none": 12.869198312236287,
                "kept_percent_concrete": 60.57494866529774,
                "kept_percent_lambda": 39.42505133470226,
                "num_examples": 3,
                "num_explored_concrete": 3769,
                "num_explored_lambda": 1187,
                "num_explored_none": 732,
                "num_inputs": 1,
                "num_kept_concrete": 885,
                "num_kept_lambda": 576,
                "num_values_explored": 5688,
                "num_values_kept": 1461,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58466
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.3791642289143,
            "num_unique_values": 1178,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.13766469786461,
                "explored_percent_lambda": 38.86869604725125,
                "explored_percent_none": 13.993639254884144,
                "kept_percent_concrete": 49.70161977834612,
                "kept_percent_lambda": 50.29838022165388,
                "num_examples": 3,
                "num_explored_concrete": 2075,
                "num_explored_lambda": 1711,
                "num_explored_none": 616,
                "num_inputs": 1,
                "num_kept_concrete": 583,
                "num_kept_lambda": 590,
                "num_values_explored": 4402,
                "num_values_kept": 1173,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48610
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17712165904231,
            "num_unique_values": 1613,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.716230741669655,
                "explored_percent_lambda": 25.51056968828377,
                "explored_percent_none": 12.773199570046579,
                "kept_percent_concrete": 55.756067205973864,
                "kept_percent_lambda": 44.243932794026136,
                "num_examples": 3,
                "num_explored_concrete": 3445,
                "num_explored_lambda": 1424,
                "num_explored_none": 713,
                "num_inputs": 2,
                "num_kept_concrete": 896,
                "num_kept_lambda": 711,
                "num_values_explored": 5582,
                "num_values_kept": 1607,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59052
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.3192906479816884,
            "num_unique_values": 518,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 55.81717451523546,
                "explored_percent_lambda": 29.84764542936288,
                "explored_percent_none": 14.335180055401661,
                "kept_percent_concrete": 66.47173489278752,
                "kept_percent_lambda": 33.528265107212476,
                "num_examples": 5,
                "num_explored_concrete": 806,
                "num_explored_lambda": 431,
                "num_explored_none": 207,
                "num_inputs": 1,
                "num_kept_concrete": 341,
                "num_kept_lambda": 172,
                "num_values_explored": 1444,
                "num_values_kept": 513,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3004
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22450404986739,
            "num_unique_values": 1512,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.59848337546179,
                "explored_percent_lambda": 27.61034415710675,
                "explored_percent_none": 17.791172467431462,
                "kept_percent_concrete": 61.11479761114798,
                "kept_percent_lambda": 38.88520238885202,
                "num_examples": 3,
                "num_explored_concrete": 2808,
                "num_explored_lambda": 1420,
                "num_explored_none": 915,
                "num_inputs": 1,
                "num_kept_concrete": 921,
                "num_kept_lambda": 586,
                "num_values_explored": 5143,
                "num_values_kept": 1507,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52664
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.50121979415417,
            "num_unique_values": 1431,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.05380298045287,
                "explored_percent_lambda": 22.682407586607315,
                "explored_percent_none": 11.263789432939811,
                "kept_percent_concrete": 60.16830294530154,
                "kept_percent_lambda": 39.83169705469846,
                "num_examples": 3,
                "num_explored_concrete": 3413,
                "num_explored_lambda": 1172,
                "num_explored_none": 582,
                "num_inputs": 1,
                "num_kept_concrete": 858,
                "num_kept_lambda": 568,
                "num_values_explored": 5167,
                "num_values_kept": 1426,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52886
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28097509895451,
            "num_unique_values": 1625,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.46777968481823,
                "explored_percent_lambda": 9.79872054922765,
                "explored_percent_none": 11.733499765954127,
                "kept_percent_concrete": 81.0994441012971,
                "kept_percent_lambda": 18.900555898702905,
                "num_examples": 5,
                "num_explored_concrete": 5029,
                "num_explored_lambda": 628,
                "num_explored_none": 752,
                "num_inputs": 2,
                "num_kept_concrete": 1313,
                "num_kept_lambda": 306,
                "num_values_explored": 6409,
                "num_values_kept": 1619,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67336
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.105600111885,
            "num_unique_values": 1520,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.99095628872885,
                "explored_percent_lambda": 16.37916596884944,
                "explored_percent_none": 9.629877742421705,
                "kept_percent_concrete": 62.81373844121532,
                "kept_percent_lambda": 37.18626155878468,
                "num_examples": 3,
                "num_explored_concrete": 4418,
                "num_explored_lambda": 978,
                "num_explored_none": 575,
                "num_inputs": 2,
                "num_kept_concrete": 951,
                "num_kept_lambda": 563,
                "num_values_explored": 5971,
                "num_values_kept": 1514,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57780
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04390832502395,
            "num_unique_values": 1500,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.0565927654609,
                "explored_percent_lambda": 8.124270711785298,
                "explored_percent_none": 14.819136522753793,
                "kept_percent_concrete": 86.94779116465864,
                "kept_percent_lambda": 13.052208835341366,
                "num_examples": 5,
                "num_explored_concrete": 5283,
                "num_explored_lambda": 557,
                "num_explored_none": 1016,
                "num_inputs": 2,
                "num_kept_concrete": 1299,
                "num_kept_lambda": 195,
                "num_values_explored": 6856,
                "num_values_kept": 1494,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70428
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.82352215703577,
            "num_unique_values": 1521,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.35113003603013,
                "explored_percent_lambda": 12.004585653455617,
                "explored_percent_none": 11.644284310514248,
                "kept_percent_concrete": 80.0,
                "kept_percent_lambda": 20.0,
                "num_examples": 5,
                "num_explored_concrete": 4662,
                "num_explored_lambda": 733,
                "num_explored_none": 711,
                "num_inputs": 2,
                "num_kept_concrete": 1212,
                "num_kept_lambda": 303,
                "num_values_explored": 6106,
                "num_values_kept": 1515,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66305
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.25318996794522,
            "num_unique_values": 1155,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.33380569988978,
                "explored_percent_lambda": 10.108644307982996,
                "explored_percent_none": 9.557549992127225,
                "kept_percent_concrete": 76.93646649260226,
                "kept_percent_lambda": 23.063533507397736,
                "num_examples": 5,
                "num_explored_concrete": 5102,
                "num_explored_lambda": 642,
                "num_explored_none": 607,
                "num_inputs": 2,
                "num_kept_concrete": 884,
                "num_kept_lambda": 265,
                "num_values_explored": 6351,
                "num_values_kept": 1149,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66013
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.36
}