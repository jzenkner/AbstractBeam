{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 0.7444043830037117,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23458852292969823,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.32003625691868365,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0628658819478,
            "num_unique_values": 1401,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.3119958812425,
                "explored_percent_lambda": 23.047880556032265,
                "explored_percent_none": 10.640123562725245,
                "kept_percent_concrete": 60.458452722063036,
                "kept_percent_lambda": 39.541547277936964,
                "num_examples": 3,
                "num_explored_concrete": 3864,
                "num_explored_lambda": 1343,
                "num_explored_none": 620,
                "num_inputs": 1,
                "num_kept_concrete": 844,
                "num_kept_lambda": 552,
                "num_values_explored": 5827,
                "num_values_kept": 1396,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59231
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.32865751907229424,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30794789106585,
            "num_unique_values": 1544,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.60383281017677,
                "explored_percent_lambda": 17.82587146869321,
                "explored_percent_none": 16.57029572113002,
                "kept_percent_concrete": 76.47823261858349,
                "kept_percent_lambda": 23.521767381416502,
                "num_examples": 5,
                "num_explored_concrete": 3971,
                "num_explored_lambda": 1079,
                "num_explored_none": 1003,
                "num_inputs": 1,
                "num_kept_concrete": 1177,
                "num_kept_lambda": 362,
                "num_values_explored": 6053,
                "num_values_kept": 1539,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65122
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16390425013378263,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15095378621481,
            "num_unique_values": 1286,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.67762654840189,
                "explored_percent_lambda": 14.619972472855176,
                "explored_percent_none": 13.702400978742928,
                "kept_percent_concrete": 72.83372365339578,
                "kept_percent_lambda": 27.166276346604217,
                "num_examples": 5,
                "num_explored_concrete": 4687,
                "num_explored_lambda": 956,
                "num_explored_none": 896,
                "num_inputs": 1,
                "num_kept_concrete": 933,
                "num_kept_lambda": 348,
                "num_values_explored": 6539,
                "num_values_kept": 1281,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67389
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.098453007871285,
            "num_unique_values": 533,
            "solution": "Access(fn_11(fn_1(Scanl1((lambda u1, u2: ((lambda v1: Subtract(-1, v1)))(u1)), x)), Map((lambda u1: -1), x)), Sort(x))",
            "solution_weight": 14,
            "stats": {
                "explored_percent_concrete": 52.39057239057239,
                "explored_percent_lambda": 30.707070707070706,
                "explored_percent_none": 16.902356902356903,
                "kept_percent_concrete": 55.68181818181818,
                "kept_percent_lambda": 44.31818181818182,
                "num_examples": 5,
                "num_explored_concrete": 778,
                "num_explored_lambda": 456,
                "num_explored_none": 251,
                "num_inputs": 1,
                "num_kept_concrete": 294,
                "num_kept_lambda": 234,
                "num_values_explored": 1485,
                "num_values_kept": 528,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5385
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.46493440982886,
            "num_unique_values": 1232,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.76968545492928,
                "explored_percent_lambda": 42.05193160227992,
                "explored_percent_none": 15.178382942790796,
                "kept_percent_concrete": 43.84678076609617,
                "kept_percent_lambda": 56.15321923390383,
                "num_examples": 3,
                "num_explored_concrete": 2026,
                "num_explored_lambda": 1992,
                "num_explored_none": 719,
                "num_inputs": 1,
                "num_kept_concrete": 538,
                "num_kept_lambda": 689,
                "num_values_explored": 4737,
                "num_values_kept": 1227,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51801
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14879925106652,
            "num_unique_values": 1616,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.90841949778434,
                "explored_percent_lambda": 7.75480059084195,
                "explored_percent_none": 16.336779911373707,
                "kept_percent_concrete": 84.84472049689441,
                "kept_percent_lambda": 15.15527950310559,
                "num_examples": 5,
                "num_explored_concrete": 5139,
                "num_explored_lambda": 525,
                "num_explored_none": 1106,
                "num_inputs": 2,
                "num_kept_concrete": 1366,
                "num_kept_lambda": 244,
                "num_values_explored": 6770,
                "num_values_kept": 1610,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69908
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06740509509109,
            "num_unique_values": 1522,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.5774647887324,
                "explored_percent_lambda": 19.370339685169842,
                "explored_percent_none": 11.052195526097764,
                "kept_percent_concrete": 64.44591029023746,
                "kept_percent_lambda": 35.554089709762536,
                "num_examples": 3,
                "num_explored_concrete": 4199,
                "num_explored_lambda": 1169,
                "num_explored_none": 667,
                "num_inputs": 2,
                "num_kept_concrete": 977,
                "num_kept_lambda": 539,
                "num_values_explored": 6035,
                "num_values_kept": 1516,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64187
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.03205932304263,
            "num_unique_values": 610,
            "solution": "Count((lambda u1: ((lambda v1: Equal(((lambda v1: Max(-1, v1)))(v1), -1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 64.72320376914017,
                "explored_percent_lambda": 22.14369846878681,
                "explored_percent_none": 13.133097762073026,
                "kept_percent_concrete": 70.24793388429752,
                "kept_percent_lambda": 29.75206611570248,
                "num_examples": 5,
                "num_explored_concrete": 1099,
                "num_explored_lambda": 376,
                "num_explored_none": 223,
                "num_inputs": 1,
                "num_kept_concrete": 425,
                "num_kept_lambda": 180,
                "num_values_explored": 1698,
                "num_values_kept": 605,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 25408
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.1577964241150767,
            "num_unique_values": 349,
            "solution": "fn_21(fn_1(Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.18577075098814,
                "explored_percent_lambda": 38.04347826086956,
                "explored_percent_none": 10.770750988142293,
                "kept_percent_concrete": 56.395348837209305,
                "kept_percent_lambda": 43.604651162790695,
                "num_examples": 3,
                "num_explored_concrete": 518,
                "num_explored_lambda": 385,
                "num_explored_none": 109,
                "num_inputs": 1,
                "num_kept_concrete": 194,
                "num_kept_lambda": 150,
                "num_values_explored": 1012,
                "num_values_kept": 344,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4132
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89730302314274,
            "num_unique_values": 1684,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.89612784265519,
                "explored_percent_lambda": 16.902274124154886,
                "explored_percent_none": 11.20159803318992,
                "kept_percent_concrete": 72.09302325581395,
                "kept_percent_lambda": 27.906976744186046,
                "num_examples": 3,
                "num_explored_concrete": 4679,
                "num_explored_lambda": 1100,
                "num_explored_none": 729,
                "num_inputs": 3,
                "num_kept_concrete": 1209,
                "num_kept_lambda": 468,
                "num_values_explored": 6508,
                "num_values_kept": 1677,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66138
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10809685988352,
            "num_unique_values": 1742,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.71456822676335,
                "explored_percent_lambda": 16.051417270929466,
                "explored_percent_none": 10.234014502307184,
                "kept_percent_concrete": 70.20172910662824,
                "kept_percent_lambda": 29.798270893371757,
                "num_examples": 3,
                "num_explored_concrete": 4473,
                "num_explored_lambda": 974,
                "num_explored_none": 621,
                "num_inputs": 3,
                "num_kept_concrete": 1218,
                "num_kept_lambda": 517,
                "num_values_explored": 6068,
                "num_values_kept": 1735,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65134
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86723768012598,
            "num_unique_values": 1410,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.76203872248882,
                "explored_percent_lambda": 18.864802250537814,
                "explored_percent_none": 15.373159026973358,
                "kept_percent_concrete": 70.42052744119744,
                "kept_percent_lambda": 29.579472558802564,
                "num_examples": 3,
                "num_explored_concrete": 3974,
                "num_explored_lambda": 1140,
                "num_explored_none": 929,
                "num_inputs": 3,
                "num_kept_concrete": 988,
                "num_kept_lambda": 415,
                "num_values_explored": 6043,
                "num_values_kept": 1403,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63122
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4089790307916701,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.509515549056232,
            "num_unique_values": 333,
            "solution": "fn_11(Sort(x), fn_0(y))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 50.30229746070133,
                "explored_percent_lambda": 37.726723095526,
                "explored_percent_none": 11.970979443772672,
                "kept_percent_concrete": 63.608562691131496,
                "kept_percent_lambda": 36.391437308868504,
                "num_examples": 5,
                "num_explored_concrete": 416,
                "num_explored_lambda": 312,
                "num_explored_none": 99,
                "num_inputs": 2,
                "num_kept_concrete": 208,
                "num_kept_lambda": 119,
                "num_values_explored": 827,
                "num_values_kept": 327,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10526
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.162873008986935,
            "num_unique_values": 711,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 65.85869004641567,
                "explored_percent_lambda": 21.815368746776688,
                "explored_percent_none": 12.325941206807633,
                "kept_percent_concrete": 64.25531914893617,
                "kept_percent_lambda": 35.744680851063826,
                "num_examples": 3,
                "num_explored_concrete": 1277,
                "num_explored_lambda": 423,
                "num_explored_none": 239,
                "num_inputs": 2,
                "num_kept_concrete": 453,
                "num_kept_lambda": 252,
                "num_values_explored": 1939,
                "num_values_kept": 705,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3889
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2716093179769814,
            "num_unique_values": 269,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Max(v1, v2)))(u2, u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 39.90963855421687,
                "explored_percent_lambda": 52.10843373493976,
                "explored_percent_none": 7.981927710843373,
                "kept_percent_concrete": 38.63636363636363,
                "kept_percent_lambda": 61.36363636363637,
                "num_examples": 3,
                "num_explored_concrete": 265,
                "num_explored_lambda": 346,
                "num_explored_none": 53,
                "num_inputs": 1,
                "num_kept_concrete": 102,
                "num_kept_lambda": 162,
                "num_values_explored": 664,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2614
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18278316594660282,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09311269898899,
            "num_unique_values": 1809,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.40240662603532,
                "explored_percent_lambda": 11.345522737927801,
                "explored_percent_none": 13.252070636036882,
                "kept_percent_concrete": 82.14087631724902,
                "kept_percent_lambda": 17.85912368275097,
                "num_examples": 5,
                "num_explored_concrete": 4825,
                "num_explored_lambda": 726,
                "num_explored_none": 848,
                "num_inputs": 2,
                "num_kept_concrete": 1481,
                "num_kept_lambda": 322,
                "num_values_explored": 6399,
                "num_values_kept": 1803,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69093
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04597086599097,
            "num_unique_values": 1518,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.275122660367074,
                "explored_percent_lambda": 24.768308195529713,
                "explored_percent_none": 12.956569144103216,
                "kept_percent_concrete": 64.28571428571429,
                "kept_percent_lambda": 35.714285714285715,
                "num_examples": 3,
                "num_explored_concrete": 3427,
                "num_explored_lambda": 1363,
                "num_explored_none": 713,
                "num_inputs": 2,
                "num_kept_concrete": 972,
                "num_kept_lambda": 540,
                "num_values_explored": 5503,
                "num_values_kept": 1512,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59690
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16228647506796,
            "num_unique_values": 1728,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.41862297148259,
                "explored_percent_lambda": 19.962186859933826,
                "explored_percent_none": 10.619190168583582,
                "kept_percent_concrete": 62.52178965717606,
                "kept_percent_lambda": 37.47821034282394,
                "num_examples": 3,
                "num_explored_concrete": 4406,
                "num_explored_lambda": 1267,
                "num_explored_none": 674,
                "num_inputs": 3,
                "num_kept_concrete": 1076,
                "num_kept_lambda": 645,
                "num_values_explored": 6347,
                "num_values_kept": 1721,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63774
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07585172192194,
            "num_unique_values": 1571,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.30798479087453,
                "explored_percent_lambda": 14.980988593155894,
                "explored_percent_none": 11.711026615969581,
                "kept_percent_concrete": 76.37292464878672,
                "kept_percent_lambda": 23.627075351213282,
                "num_examples": 5,
                "num_explored_concrete": 4820,
                "num_explored_lambda": 985,
                "num_explored_none": 770,
                "num_inputs": 1,
                "num_kept_concrete": 1196,
                "num_kept_lambda": 370,
                "num_values_explored": 6575,
                "num_values_kept": 1566,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68591
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18610310484655,
            "num_unique_values": 1530,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.34056587398021,
                "explored_percent_lambda": 21.03801423363999,
                "explored_percent_none": 20.621419892379794,
                "kept_percent_concrete": 67.40983606557377,
                "kept_percent_lambda": 32.59016393442623,
                "num_examples": 3,
                "num_explored_concrete": 3361,
                "num_explored_lambda": 1212,
                "num_explored_none": 1188,
                "num_inputs": 1,
                "num_kept_concrete": 1028,
                "num_kept_lambda": 497,
                "num_values_explored": 5761,
                "num_values_kept": 1525,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61305
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4549934968818,
            "num_unique_values": 1426,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.0624333790163,
                "explored_percent_lambda": 17.52702908481803,
                "explored_percent_none": 12.410537536165677,
                "kept_percent_concrete": 67.1830985915493,
                "kept_percent_lambda": 32.816901408450704,
                "num_examples": 3,
                "num_explored_concrete": 4601,
                "num_explored_lambda": 1151,
                "num_explored_none": 815,
                "num_inputs": 2,
                "num_kept_concrete": 954,
                "num_kept_lambda": 466,
                "num_values_explored": 6567,
                "num_values_kept": 1420,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66458
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4417673700954765,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.102298059966415,
            "num_unique_values": 905,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 65.74757281553399,
                "explored_percent_lambda": 22.33009708737864,
                "explored_percent_none": 11.922330097087379,
                "kept_percent_concrete": 61.84649610678532,
                "kept_percent_lambda": 38.15350389321468,
                "num_examples": 3,
                "num_explored_concrete": 1693,
                "num_explored_lambda": 575,
                "num_explored_none": 307,
                "num_inputs": 2,
                "num_kept_concrete": 556,
                "num_kept_lambda": 343,
                "num_values_explored": 2575,
                "num_values_kept": 899,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 23627
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17298613209277,
            "num_unique_values": 1768,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.20191470844212,
                "explored_percent_lambda": 8.732230925442414,
                "explored_percent_none": 9.065854366115463,
                "kept_percent_concrete": 80.0794551645857,
                "kept_percent_lambda": 19.9205448354143,
                "num_examples": 5,
                "num_explored_concrete": 5667,
                "num_explored_lambda": 602,
                "num_explored_none": 625,
                "num_inputs": 2,
                "num_kept_concrete": 1411,
                "num_kept_lambda": 351,
                "num_values_explored": 6894,
                "num_values_kept": 1762,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71408
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20288741309196,
            "num_unique_values": 1489,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.84680025856497,
                "explored_percent_lambda": 18.972204266321913,
                "explored_percent_none": 10.180995475113122,
                "kept_percent_concrete": 64.21832884097034,
                "kept_percent_lambda": 35.78167115902965,
                "num_examples": 3,
                "num_explored_concrete": 4384,
                "num_explored_lambda": 1174,
                "num_explored_none": 630,
                "num_inputs": 1,
                "num_kept_concrete": 953,
                "num_kept_lambda": 531,
                "num_values_explored": 6188,
                "num_values_kept": 1484,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59460
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99725326593034,
            "num_unique_values": 1605,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.44177342737872,
                "explored_percent_lambda": 13.847704044911472,
                "explored_percent_none": 12.710522527709802,
                "kept_percent_concrete": 71.85741088180113,
                "kept_percent_lambda": 28.142589118198874,
                "num_examples": 3,
                "num_explored_concrete": 5102,
                "num_explored_lambda": 962,
                "num_explored_none": 883,
                "num_inputs": 2,
                "num_kept_concrete": 1149,
                "num_kept_lambda": 450,
                "num_values_explored": 6947,
                "num_values_kept": 1599,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69925
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3188552630599588,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.54361290298402,
            "num_unique_values": 360,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 23.849913743530763,
                "explored_percent_lambda": 17.351926394479587,
                "explored_percent_none": 58.798159861989646,
                "kept_percent_concrete": 51.83098591549296,
                "kept_percent_lambda": 48.16901408450704,
                "num_examples": 5,
                "num_explored_concrete": 1659,
                "num_explored_lambda": 1207,
                "num_explored_none": 4090,
                "num_inputs": 1,
                "num_kept_concrete": 184,
                "num_kept_lambda": 171,
                "num_values_explored": 6956,
                "num_values_kept": 355,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69983
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14469163701869547,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.477177320979536,
            "num_unique_values": 1095,
            "solution": "fn_18(fn_9(Add(-1, -1), x, x), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.057114559260484,
                "explored_percent_lambda": 27.50082535490261,
                "explored_percent_none": 9.44206008583691,
                "kept_percent_concrete": 59.26605504587156,
                "kept_percent_lambda": 40.73394495412844,
                "num_examples": 3,
                "num_explored_concrete": 1910,
                "num_explored_lambda": 833,
                "num_explored_none": 286,
                "num_inputs": 1,
                "num_kept_concrete": 646,
                "num_kept_lambda": 444,
                "num_values_explored": 3029,
                "num_values_kept": 1090,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17406
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1351794581860304,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12366495491005,
            "num_unique_values": 1845,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.04399441340782,
                "explored_percent_lambda": 24.650837988826815,
                "explored_percent_none": 9.305167597765363,
                "kept_percent_concrete": 68.69565217391305,
                "kept_percent_lambda": 31.304347826086957,
                "num_examples": 3,
                "num_explored_concrete": 3783,
                "num_explored_lambda": 1412,
                "num_explored_none": 533,
                "num_inputs": 1,
                "num_kept_concrete": 1264,
                "num_kept_lambda": 576,
                "num_values_explored": 5728,
                "num_values_kept": 1840,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61880
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04975744104013,
            "num_unique_values": 1442,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.76666666666667,
                "explored_percent_lambda": 23.15,
                "explored_percent_none": 12.083333333333334,
                "kept_percent_concrete": 60.82115518441197,
                "kept_percent_lambda": 39.17884481558803,
                "num_examples": 3,
                "num_explored_concrete": 3886,
                "num_explored_lambda": 1389,
                "num_explored_none": 725,
                "num_inputs": 1,
                "num_kept_concrete": 874,
                "num_kept_lambda": 563,
                "num_values_explored": 6000,
                "num_values_kept": 1437,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64809
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23182887909934,
            "num_unique_values": 1261,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.55247691015953,
                "explored_percent_lambda": 46.956339210747274,
                "explored_percent_none": 15.4911838790932,
                "kept_percent_concrete": 43.710191082802545,
                "kept_percent_lambda": 56.289808917197455,
                "num_examples": 3,
                "num_explored_concrete": 1789,
                "num_explored_lambda": 2237,
                "num_explored_none": 738,
                "num_inputs": 1,
                "num_kept_concrete": 549,
                "num_kept_lambda": 707,
                "num_values_explored": 4764,
                "num_values_kept": 1256,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55736
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14679302787408,
            "num_unique_values": 1820,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.545328958729066,
                "explored_percent_lambda": 24.987048868934554,
                "explored_percent_none": 12.467622172336384,
                "kept_percent_concrete": 61.63175303197354,
                "kept_percent_lambda": 38.36824696802646,
                "num_examples": 3,
                "num_explored_concrete": 3622,
                "num_explored_lambda": 1447,
                "num_explored_none": 722,
                "num_inputs": 2,
                "num_kept_concrete": 1118,
                "num_kept_lambda": 696,
                "num_values_explored": 5791,
                "num_values_kept": 1814,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63744
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0253937758971006,
            "num_unique_values": 506,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 55.268261150614094,
                "explored_percent_lambda": 28.636069812540402,
                "explored_percent_none": 16.095669036845507,
                "kept_percent_concrete": 67.46506986027944,
                "kept_percent_lambda": 32.53493013972056,
                "num_examples": 5,
                "num_explored_concrete": 855,
                "num_explored_lambda": 443,
                "num_explored_none": 249,
                "num_inputs": 1,
                "num_kept_concrete": 338,
                "num_kept_lambda": 163,
                "num_values_explored": 1547,
                "num_values_kept": 501,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3107
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.308177519124,
            "num_unique_values": 1530,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.338063589006644,
                "explored_percent_lambda": 33.2135800251482,
                "explored_percent_none": 12.448356385845159,
                "kept_percent_concrete": 57.704918032786885,
                "kept_percent_lambda": 42.295081967213115,
                "num_examples": 3,
                "num_explored_concrete": 3025,
                "num_explored_lambda": 1849,
                "num_explored_none": 693,
                "num_inputs": 1,
                "num_kept_concrete": 880,
                "num_kept_lambda": 645,
                "num_values_explored": 5567,
                "num_values_kept": 1525,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55430
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30748991295695,
            "num_unique_values": 1439,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.17610522469857,
                "explored_percent_lambda": 24.22360248447205,
                "explored_percent_none": 11.600292290829374,
                "kept_percent_concrete": 60.80892608089261,
                "kept_percent_lambda": 39.19107391910739,
                "num_examples": 3,
                "num_explored_concrete": 3513,
                "num_explored_lambda": 1326,
                "num_explored_none": 635,
                "num_inputs": 1,
                "num_kept_concrete": 872,
                "num_kept_lambda": 562,
                "num_values_explored": 5474,
                "num_values_kept": 1434,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58367
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19430400198326,
            "num_unique_values": 1791,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.69781586950512,
                "explored_percent_lambda": 8.598285872269837,
                "explored_percent_none": 12.703898258225049,
                "kept_percent_concrete": 84.25770308123249,
                "kept_percent_lambda": 15.742296918767506,
                "num_examples": 5,
                "num_explored_concrete": 5693,
                "num_explored_lambda": 622,
                "num_explored_none": 919,
                "num_inputs": 2,
                "num_kept_concrete": 1504,
                "num_kept_lambda": 281,
                "num_values_explored": 7234,
                "num_values_kept": 1785,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75022
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08235170808621,
            "num_unique_values": 1677,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.77303619408883,
                "explored_percent_lambda": 22.206416943259047,
                "explored_percent_none": 10.020546862652125,
                "kept_percent_concrete": 59.06642728904848,
                "kept_percent_lambda": 40.93357271095152,
                "num_examples": 3,
                "num_explored_concrete": 4288,
                "num_explored_lambda": 1405,
                "num_explored_none": 634,
                "num_inputs": 2,
                "num_kept_concrete": 987,
                "num_kept_lambda": 684,
                "num_values_explored": 6327,
                "num_values_kept": 1671,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64825
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96617395500652,
            "num_unique_values": 1564,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.20172367357931,
                "explored_percent_lambda": 8.227848101265822,
                "explored_percent_none": 14.570428225154862,
                "kept_percent_concrete": 85.17329910141207,
                "kept_percent_lambda": 14.826700898587934,
                "num_examples": 5,
                "num_explored_concrete": 5733,
                "num_explored_lambda": 611,
                "num_explored_none": 1082,
                "num_inputs": 2,
                "num_kept_concrete": 1327,
                "num_kept_lambda": 231,
                "num_values_explored": 7426,
                "num_values_kept": 1558,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78527
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.60717386286706,
            "num_unique_values": 1659,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.63287056513813,
                "explored_percent_lambda": 10.180900294488852,
                "explored_percent_none": 12.186229140373019,
                "kept_percent_concrete": 80.21778584392014,
                "kept_percent_lambda": 19.782214156079856,
                "num_examples": 5,
                "num_explored_concrete": 5536,
                "num_explored_lambda": 726,
                "num_explored_none": 869,
                "num_inputs": 2,
                "num_kept_concrete": 1326,
                "num_kept_lambda": 327,
                "num_values_explored": 7131,
                "num_values_kept": 1653,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75059
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16822826489806,
            "num_unique_values": 1474,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.64625850340136,
                "explored_percent_lambda": 8.625850340136054,
                "explored_percent_none": 13.727891156462585,
                "kept_percent_concrete": 83.71934604904632,
                "kept_percent_lambda": 16.280653950953678,
                "num_examples": 5,
                "num_explored_concrete": 5707,
                "num_explored_lambda": 634,
                "num_explored_none": 1009,
                "num_inputs": 2,
                "num_kept_concrete": 1229,
                "num_kept_lambda": 239,
                "num_values_explored": 7350,
                "num_values_kept": 1468,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75109
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}