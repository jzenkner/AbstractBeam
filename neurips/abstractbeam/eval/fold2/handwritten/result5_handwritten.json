{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.7394765769131482,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2222896011080593,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3362466190010309,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02349812397733,
            "num_unique_values": 1534,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.18473433130449,
                "explored_percent_lambda": 25.34956407303833,
                "explored_percent_none": 11.46570159565718,
                "kept_percent_concrete": 57.946370176586,
                "kept_percent_lambda": 42.053629823414,
                "num_examples": 3,
                "num_explored_concrete": 3841,
                "num_explored_lambda": 1541,
                "num_explored_none": 697,
                "num_inputs": 1,
                "num_kept_concrete": 886,
                "num_kept_lambda": 643,
                "num_values_explored": 6079,
                "num_values_kept": 1529,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60585
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.310283272061497,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.31646068906412,
            "num_unique_values": 1693,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.21665941082571,
                "explored_percent_lambda": 11.203018429836018,
                "explored_percent_none": 11.580322159338268,
                "kept_percent_concrete": 80.09478672985782,
                "kept_percent_lambda": 19.90521327014218,
                "num_examples": 5,
                "num_explored_concrete": 5321,
                "num_explored_lambda": 772,
                "num_explored_none": 798,
                "num_inputs": 1,
                "num_kept_concrete": 1352,
                "num_kept_lambda": 336,
                "num_values_explored": 6891,
                "num_values_kept": 1688,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69764
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15535124484449625,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11186384805478,
            "num_unique_values": 1319,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.85654071955442,
                "explored_percent_lambda": 15.625470419990968,
                "explored_percent_none": 13.517988860454613,
                "kept_percent_concrete": 72.07001522070016,
                "kept_percent_lambda": 27.929984779299847,
                "num_examples": 5,
                "num_explored_concrete": 4707,
                "num_explored_lambda": 1038,
                "num_explored_none": 898,
                "num_inputs": 1,
                "num_kept_concrete": 947,
                "num_kept_lambda": 367,
                "num_values_explored": 6643,
                "num_values_kept": 1314,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69108
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.6271809830796,
            "num_unique_values": 1591,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.71232057416267,
                "explored_percent_lambda": 13.322368421052632,
                "explored_percent_none": 13.96531100478469,
                "kept_percent_concrete": 72.06809583858764,
                "kept_percent_lambda": 27.93190416141236,
                "num_examples": 5,
                "num_explored_concrete": 4863,
                "num_explored_lambda": 891,
                "num_explored_none": 934,
                "num_inputs": 1,
                "num_kept_concrete": 1143,
                "num_kept_lambda": 443,
                "num_values_explored": 6688,
                "num_values_kept": 1586,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67103
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.53001088486053,
            "num_unique_values": 1336,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.05911330049261,
                "explored_percent_lambda": 39.960591133004925,
                "explored_percent_none": 15.980295566502463,
                "kept_percent_concrete": 46.13072877535687,
                "kept_percent_lambda": 53.86927122464313,
                "num_examples": 3,
                "num_explored_concrete": 2236,
                "num_explored_lambda": 2028,
                "num_explored_none": 811,
                "num_inputs": 1,
                "num_kept_concrete": 614,
                "num_kept_lambda": 717,
                "num_values_explored": 5075,
                "num_values_kept": 1331,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55293
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14345340314321,
            "num_unique_values": 1646,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.27814765497855,
                "explored_percent_lambda": 7.486314543571535,
                "explored_percent_none": 12.235537801449919,
                "kept_percent_concrete": 85.73170731707317,
                "kept_percent_lambda": 14.268292682926829,
                "num_examples": 5,
                "num_explored_concrete": 5426,
                "num_explored_lambda": 506,
                "num_explored_none": 827,
                "num_inputs": 2,
                "num_kept_concrete": 1406,
                "num_kept_lambda": 234,
                "num_values_explored": 6759,
                "num_values_kept": 1640,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73262
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11341173714027,
            "num_unique_values": 1481,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.85821009300199,
                "explored_percent_lambda": 19.149260558011893,
                "explored_percent_none": 10.992529348986126,
                "kept_percent_concrete": 65.62711864406779,
                "kept_percent_lambda": 34.3728813559322,
                "num_examples": 3,
                "num_explored_concrete": 4582,
                "num_explored_lambda": 1256,
                "num_explored_none": 721,
                "num_inputs": 2,
                "num_kept_concrete": 968,
                "num_kept_lambda": 507,
                "num_values_explored": 6559,
                "num_values_kept": 1475,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68471
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.224627999821678,
            "num_unique_values": 1161,
            "solution": "Min(Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x), Last(fn_10(fn_14(x))))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 77.56441419543023,
                "explored_percent_lambda": 11.278561011181331,
                "explored_percent_none": 11.15702479338843,
                "kept_percent_concrete": 80.5363321799308,
                "kept_percent_lambda": 19.463667820069205,
                "num_examples": 5,
                "num_explored_concrete": 3191,
                "num_explored_lambda": 464,
                "num_explored_none": 459,
                "num_inputs": 1,
                "num_kept_concrete": 931,
                "num_kept_lambda": 225,
                "num_values_explored": 4114,
                "num_values_kept": 1156,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 21319
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.638830074109137,
            "num_unique_values": 724,
            "solution": "fn_21(Reverse(Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), Reverse(fn_1(x)))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.71470301850049,
                "explored_percent_lambda": 26.874391431353455,
                "explored_percent_none": 14.410905550146056,
                "kept_percent_concrete": 61.891515994436716,
                "kept_percent_lambda": 38.108484005563284,
                "num_examples": 3,
                "num_explored_concrete": 1206,
                "num_explored_lambda": 552,
                "num_explored_none": 296,
                "num_inputs": 1,
                "num_kept_concrete": 445,
                "num_kept_lambda": 274,
                "num_values_explored": 2054,
                "num_values_kept": 719,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5174
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8767669359222,
            "num_unique_values": 1702,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.09248210023867,
                "explored_percent_lambda": 16.661694510739856,
                "explored_percent_none": 13.24582338902148,
                "kept_percent_concrete": 71.74041297935104,
                "kept_percent_lambda": 28.25958702064897,
                "num_examples": 3,
                "num_explored_concrete": 4699,
                "num_explored_lambda": 1117,
                "num_explored_none": 888,
                "num_inputs": 3,
                "num_kept_concrete": 1216,
                "num_kept_lambda": 479,
                "num_values_explored": 6704,
                "num_values_kept": 1695,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67841
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13364947703667,
            "num_unique_values": 1942,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.16284085657064,
                "explored_percent_lambda": 16.037590509936834,
                "explored_percent_none": 10.799568633492528,
                "kept_percent_concrete": 68.9405684754522,
                "kept_percent_lambda": 31.059431524547804,
                "num_examples": 3,
                "num_explored_concrete": 4749,
                "num_explored_lambda": 1041,
                "num_explored_none": 701,
                "num_inputs": 3,
                "num_kept_concrete": 1334,
                "num_kept_lambda": 601,
                "num_values_explored": 6491,
                "num_values_kept": 1935,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68589
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83715755795129,
            "num_unique_values": 1425,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.96255266032142,
                "explored_percent_lambda": 18.61444843189265,
                "explored_percent_none": 21.422998907785924,
                "kept_percent_concrete": 71.29760225669958,
                "kept_percent_lambda": 28.702397743300423,
                "num_examples": 3,
                "num_explored_concrete": 3843,
                "num_explored_lambda": 1193,
                "num_explored_none": 1373,
                "num_inputs": 3,
                "num_kept_concrete": 1011,
                "num_kept_lambda": 407,
                "num_values_explored": 6409,
                "num_values_kept": 1418,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67079
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3880347970407456,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.993909657001495,
            "num_unique_values": 1700,
            "solution": "Sum(fn_18(fn_0(y), Sort(x)))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 77.62107051826678,
                "explored_percent_lambda": 11.877655055225148,
                "explored_percent_none": 10.501274426508072,
                "kept_percent_concrete": 80.814639905549,
                "kept_percent_lambda": 19.185360094451003,
                "num_examples": 5,
                "num_explored_concrete": 4568,
                "num_explored_lambda": 699,
                "num_explored_none": 618,
                "num_inputs": 2,
                "num_kept_concrete": 1369,
                "num_kept_lambda": 325,
                "num_values_explored": 5885,
                "num_values_kept": 1694,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 8615
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4423776699695736,
            "num_unique_values": 346,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 50.52023121387283,
                "explored_percent_lambda": 36.06936416184971,
                "explored_percent_none": 13.410404624277456,
                "kept_percent_concrete": 55.294117647058826,
                "kept_percent_lambda": 44.705882352941174,
                "num_examples": 3,
                "num_explored_concrete": 437,
                "num_explored_lambda": 312,
                "num_explored_none": 116,
                "num_inputs": 2,
                "num_kept_concrete": 188,
                "num_kept_lambda": 152,
                "num_values_explored": 865,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2815
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03371266298927,
            "num_unique_values": 1486,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.61077844311377,
                "explored_percent_lambda": 34.87025948103793,
                "explored_percent_none": 20.518962075848304,
                "kept_percent_concrete": 53.207292370020255,
                "kept_percent_lambda": 46.792707629979745,
                "num_examples": 3,
                "num_explored_concrete": 2235,
                "num_explored_lambda": 1747,
                "num_explored_none": 1028,
                "num_inputs": 1,
                "num_kept_concrete": 788,
                "num_kept_lambda": 693,
                "num_values_explored": 5010,
                "num_values_kept": 1481,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55341
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19801132287830114,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00730639602989,
            "num_unique_values": 2066,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.20713073005093,
                "explored_percent_lambda": 11.417657045840407,
                "explored_percent_none": 11.375212224108658,
                "kept_percent_concrete": 81.94174757281553,
                "kept_percent_lambda": 18.058252427184467,
                "num_examples": 5,
                "num_explored_concrete": 5457,
                "num_explored_lambda": 807,
                "num_explored_none": 804,
                "num_inputs": 2,
                "num_kept_concrete": 1688,
                "num_kept_lambda": 372,
                "num_values_explored": 7068,
                "num_values_kept": 2060,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70061
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04706347594038,
            "num_unique_values": 1570,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.77286848463928,
                "explored_percent_lambda": 24.853296513634795,
                "explored_percent_none": 11.373835001725924,
                "kept_percent_concrete": 64.9616368286445,
                "kept_percent_lambda": 35.0383631713555,
                "num_examples": 3,
                "num_explored_concrete": 3695,
                "num_explored_lambda": 1440,
                "num_explored_none": 659,
                "num_inputs": 2,
                "num_kept_concrete": 1016,
                "num_kept_lambda": 548,
                "num_values_explored": 5794,
                "num_values_kept": 1564,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61972
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16234473302029,
            "num_unique_values": 1557,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.12488801290091,
                "explored_percent_lambda": 24.332556889446337,
                "explored_percent_none": 12.54255509765275,
                "kept_percent_concrete": 59.354838709677416,
                "kept_percent_lambda": 40.645161290322584,
                "num_examples": 3,
                "num_explored_concrete": 3523,
                "num_explored_lambda": 1358,
                "num_explored_none": 700,
                "num_inputs": 3,
                "num_kept_concrete": 920,
                "num_kept_lambda": 630,
                "num_values_explored": 5581,
                "num_values_kept": 1550,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65407
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06791529199108,
            "num_unique_values": 1601,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.00556156341727,
                "explored_percent_lambda": 14.290128224934342,
                "explored_percent_none": 17.704310211648387,
                "kept_percent_concrete": 77.69423558897243,
                "kept_percent_lambda": 22.305764411027567,
                "num_examples": 5,
                "num_explored_concrete": 4402,
                "num_explored_lambda": 925,
                "num_explored_none": 1146,
                "num_inputs": 1,
                "num_kept_concrete": 1240,
                "num_kept_lambda": 356,
                "num_values_explored": 6473,
                "num_values_kept": 1596,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68610
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07448031799868,
            "num_unique_values": 1691,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.24959897337183,
                "explored_percent_lambda": 18.800128328521012,
                "explored_percent_none": 14.950272698107154,
                "kept_percent_concrete": 70.2846975088968,
                "kept_percent_lambda": 29.715302491103202,
                "num_examples": 3,
                "num_explored_concrete": 4130,
                "num_explored_lambda": 1172,
                "num_explored_none": 932,
                "num_inputs": 1,
                "num_kept_concrete": 1185,
                "num_kept_lambda": 501,
                "num_values_explored": 6234,
                "num_values_kept": 1686,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61349
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 54.04396754899062,
            "num_unique_values": 605,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: Less(-1, v1)))(v1), v1, y)))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.4375,
                "explored_percent_lambda": 31.25,
                "explored_percent_none": 20.3125,
                "kept_percent_concrete": 58.43071786310517,
                "kept_percent_lambda": 41.56928213689483,
                "num_examples": 3,
                "num_explored_concrete": 806,
                "num_explored_lambda": 520,
                "num_explored_none": 338,
                "num_inputs": 2,
                "num_kept_concrete": 350,
                "num_kept_lambda": 249,
                "num_values_explored": 1664,
                "num_values_kept": 599,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 35901
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.429993191966787,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.775831322185695,
            "num_unique_values": 894,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.7598881342389,
                "explored_percent_lambda": 20.974830203755495,
                "explored_percent_none": 12.265281662005593,
                "kept_percent_concrete": 64.07657657657657,
                "kept_percent_lambda": 35.92342342342342,
                "num_examples": 3,
                "num_explored_concrete": 1671,
                "num_explored_lambda": 525,
                "num_explored_none": 307,
                "num_inputs": 2,
                "num_kept_concrete": 569,
                "num_kept_lambda": 319,
                "num_values_explored": 2503,
                "num_values_kept": 888,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17503
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20098942704499,
            "num_unique_values": 1785,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.76811172534187,
                "explored_percent_lambda": 8.961303462321792,
                "explored_percent_none": 10.27058481233634,
                "kept_percent_concrete": 81.39404159640247,
                "kept_percent_lambda": 18.605958403597526,
                "num_examples": 5,
                "num_explored_concrete": 5552,
                "num_explored_lambda": 616,
                "num_explored_none": 706,
                "num_inputs": 2,
                "num_kept_concrete": 1448,
                "num_kept_lambda": 331,
                "num_values_explored": 6874,
                "num_values_kept": 1779,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72043
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05858488194644,
            "num_unique_values": 1446,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.33449593090849,
                "explored_percent_lambda": 23.75020760670985,
                "explored_percent_none": 9.915296462381663,
                "kept_percent_concrete": 60.65232477446218,
                "kept_percent_lambda": 39.34767522553782,
                "num_examples": 3,
                "num_explored_concrete": 3994,
                "num_explored_lambda": 1430,
                "num_explored_none": 597,
                "num_inputs": 1,
                "num_kept_concrete": 874,
                "num_kept_lambda": 567,
                "num_values_explored": 6021,
                "num_values_kept": 1441,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59246
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9579991758801,
            "num_unique_values": 1803,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.64739471805854,
                "explored_percent_lambda": 14.17558886509636,
                "explored_percent_none": 12.177016416845111,
                "kept_percent_concrete": 75.23650528658875,
                "kept_percent_lambda": 24.76349471341124,
                "num_examples": 3,
                "num_explored_concrete": 5159,
                "num_explored_lambda": 993,
                "num_explored_none": 853,
                "num_inputs": 2,
                "num_kept_concrete": 1352,
                "num_kept_lambda": 445,
                "num_values_explored": 7005,
                "num_values_kept": 1797,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70247
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3140688040293753,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.53165983594954,
            "num_unique_values": 353,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 25.37334660787939,
                "explored_percent_lambda": 16.89660076802731,
                "explored_percent_none": 57.730052624093304,
                "kept_percent_concrete": 60.05747126436781,
                "kept_percent_lambda": 39.94252873563219,
                "num_examples": 5,
                "num_explored_concrete": 1784,
                "num_explored_lambda": 1188,
                "num_explored_none": 4059,
                "num_inputs": 1,
                "num_kept_concrete": 209,
                "num_kept_lambda": 139,
                "num_values_explored": 7031,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70256
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14477571309544146,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.055400354089215,
            "num_unique_values": 731,
            "solution": "fn_18(fn_9(Add(-1, -1), x, x), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 60.60790273556231,
                "explored_percent_lambda": 28.996960486322187,
                "explored_percent_none": 10.395136778115502,
                "kept_percent_concrete": 61.15702479338843,
                "kept_percent_lambda": 38.84297520661157,
                "num_examples": 3,
                "num_explored_concrete": 997,
                "num_explored_lambda": 477,
                "num_explored_none": 171,
                "num_inputs": 1,
                "num_kept_concrete": 444,
                "num_kept_lambda": 282,
                "num_values_explored": 1645,
                "num_values_kept": 726,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 25701
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13235145597718656,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13036016887054,
            "num_unique_values": 1813,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.89528795811518,
                "explored_percent_lambda": 20.94240837696335,
                "explored_percent_none": 9.162303664921465,
                "kept_percent_concrete": 69.80088495575221,
                "kept_percent_lambda": 30.199115044247787,
                "num_examples": 3,
                "num_explored_concrete": 4272,
                "num_explored_lambda": 1280,
                "num_explored_none": 560,
                "num_inputs": 1,
                "num_kept_concrete": 1262,
                "num_kept_lambda": 546,
                "num_values_explored": 6112,
                "num_values_kept": 1808,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62530
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14734547398984,
            "num_unique_values": 1475,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.08381646513169,
                "explored_percent_lambda": 23.42222958423058,
                "explored_percent_none": 14.493953950637733,
                "kept_percent_concrete": 59.38775510204081,
                "kept_percent_lambda": 40.61224489795919,
                "num_examples": 3,
                "num_explored_concrete": 3748,
                "num_explored_lambda": 1414,
                "num_explored_none": 875,
                "num_inputs": 1,
                "num_kept_concrete": 873,
                "num_kept_lambda": 597,
                "num_values_explored": 6037,
                "num_values_kept": 1470,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64438
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20492425886914,
            "num_unique_values": 1303,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.92983751846381,
                "explored_percent_lambda": 31.554652880354507,
                "explored_percent_none": 13.515509601181684,
                "kept_percent_concrete": 54.77657935285054,
                "kept_percent_lambda": 45.22342064714946,
                "num_examples": 3,
                "num_explored_concrete": 2975,
                "num_explored_lambda": 1709,
                "num_explored_none": 732,
                "num_inputs": 1,
                "num_kept_concrete": 711,
                "num_kept_lambda": 587,
                "num_values_explored": 5416,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57727
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1166774451267,
            "num_unique_values": 1821,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.34027246288076,
                "explored_percent_lambda": 18.352977192713915,
                "explored_percent_none": 12.306750344405327,
                "kept_percent_concrete": 63.03030303030303,
                "kept_percent_lambda": 36.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 4530,
                "num_explored_lambda": 1199,
                "num_explored_none": 804,
                "num_inputs": 2,
                "num_kept_concrete": 1144,
                "num_kept_lambda": 671,
                "num_values_explored": 6533,
                "num_values_kept": 1815,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63305
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.694246397120878,
            "num_unique_values": 525,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 58.48506919155135,
                "explored_percent_lambda": 27.530954115076476,
                "explored_percent_none": 13.983976693372178,
                "kept_percent_concrete": 65.76923076923077,
                "kept_percent_lambda": 34.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 803,
                "num_explored_lambda": 378,
                "num_explored_none": 192,
                "num_inputs": 1,
                "num_kept_concrete": 342,
                "num_kept_lambda": 178,
                "num_values_explored": 1373,
                "num_values_kept": 520,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2933
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28020596806891,
            "num_unique_values": 1830,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.63642406114988,
                "explored_percent_lambda": 20.638085742771686,
                "explored_percent_none": 13.72549019607843,
                "kept_percent_concrete": 64.27397260273973,
                "kept_percent_lambda": 35.726027397260275,
                "num_examples": 3,
                "num_explored_concrete": 3950,
                "num_explored_lambda": 1242,
                "num_explored_none": 826,
                "num_inputs": 1,
                "num_kept_concrete": 1173,
                "num_kept_lambda": 652,
                "num_values_explored": 6018,
                "num_values_kept": 1825,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56450
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40104813897051,
            "num_unique_values": 1443,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.90358126721763,
                "explored_percent_lambda": 24.242424242424242,
                "explored_percent_none": 10.853994490358128,
                "kept_percent_concrete": 61.891515994436716,
                "kept_percent_lambda": 38.108484005563284,
                "num_examples": 3,
                "num_explored_concrete": 3534,
                "num_explored_lambda": 1320,
                "num_explored_none": 591,
                "num_inputs": 1,
                "num_kept_concrete": 890,
                "num_kept_lambda": 548,
                "num_values_explored": 5445,
                "num_values_kept": 1438,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58160
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1730117239058,
            "num_unique_values": 1775,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.38975197601526,
                "explored_percent_lambda": 8.24475333878441,
                "explored_percent_none": 11.365494685200327,
                "kept_percent_concrete": 82.9847371396269,
                "kept_percent_lambda": 17.01526286037309,
                "num_examples": 5,
                "num_explored_concrete": 5899,
                "num_explored_lambda": 605,
                "num_explored_none": 834,
                "num_inputs": 2,
                "num_kept_concrete": 1468,
                "num_kept_lambda": 301,
                "num_values_explored": 7338,
                "num_values_kept": 1769,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74729
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06235160818323,
            "num_unique_values": 1701,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.94192434468687,
                "explored_percent_lambda": 19.14927013027782,
                "explored_percent_none": 10.908805525035316,
                "kept_percent_concrete": 63.067846607669615,
                "kept_percent_lambda": 36.932153392330385,
                "num_examples": 3,
                "num_explored_concrete": 4456,
                "num_explored_lambda": 1220,
                "num_explored_none": 695,
                "num_inputs": 2,
                "num_kept_concrete": 1069,
                "num_kept_lambda": 626,
                "num_values_explored": 6371,
                "num_values_kept": 1695,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65559
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95575883099809,
            "num_unique_values": 1729,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.5083397485245,
                "explored_percent_lambda": 7.659738260200154,
                "explored_percent_none": 14.83192199127534,
                "kept_percent_concrete": 86.99941961694718,
                "kept_percent_lambda": 13.000580383052815,
                "num_examples": 5,
                "num_explored_concrete": 6041,
                "num_explored_lambda": 597,
                "num_explored_none": 1156,
                "num_inputs": 2,
                "num_kept_concrete": 1499,
                "num_kept_lambda": 224,
                "num_values_explored": 7794,
                "num_values_kept": 1723,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79349
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.60727802081965,
            "num_unique_values": 1578,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.3686263180702,
                "explored_percent_lambda": 11.916799075545283,
                "explored_percent_none": 11.714574606384515,
                "kept_percent_concrete": 79.77099236641222,
                "kept_percent_lambda": 20.229007633587788,
                "num_examples": 5,
                "num_explored_concrete": 5287,
                "num_explored_lambda": 825,
                "num_explored_none": 811,
                "num_inputs": 2,
                "num_kept_concrete": 1254,
                "num_kept_lambda": 318,
                "num_values_explored": 6923,
                "num_values_kept": 1572,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75306
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16161917406134,
            "num_unique_values": 1354,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.73722427729825,
                "explored_percent_lambda": 8.535415810384984,
                "explored_percent_none": 9.727359912316755,
                "kept_percent_concrete": 83.38278931750742,
                "kept_percent_lambda": 16.617210682492583,
                "num_examples": 5,
                "num_explored_concrete": 5966,
                "num_explored_lambda": 623,
                "num_explored_none": 710,
                "num_inputs": 2,
                "num_kept_concrete": 1124,
                "num_kept_lambda": 224,
                "num_values_explored": 7299,
                "num_values_kept": 1348,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74525
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}