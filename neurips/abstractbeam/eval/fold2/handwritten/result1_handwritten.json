{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 0.7639459779020399,
            "num_unique_values": 381,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.16694772344014,
                "explored_percent_lambda": 37.94266441821248,
                "explored_percent_none": 4.8903878583473865,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 225,
                "num_explored_none": 29,
                "num_inputs": 1,
                "num_kept_concrete": 200,
                "num_kept_lambda": 176,
                "num_values_explored": 593,
                "num_values_kept": 376,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23358996585011482,
            "num_unique_values": 108,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.806615776081426,
                "explored_percent_lambda": 10.94147582697201,
                "explored_percent_none": 57.25190839694657,
                "kept_percent_concrete": 75.49019607843137,
                "kept_percent_lambda": 24.50980392156863,
                "num_examples": 5,
                "num_explored_concrete": 250,
                "num_explored_lambda": 86,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 77,
                "num_kept_lambda": 25,
                "num_values_explored": 786,
                "num_values_kept": 102,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 786
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3376169498078525,
            "num_unique_values": 269,
            "solution": "fn_18(x, fn_9(1, x, x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.66016713091922,
                "explored_percent_lambda": 38.71866295264624,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 139,
                "num_explored_none": 13,
                "num_inputs": 1,
                "num_kept_concrete": 140,
                "num_kept_lambda": 124,
                "num_values_explored": 359,
                "num_values_kept": 264,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05725342198275,
            "num_unique_values": 1464,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.27649292371419,
                "explored_percent_lambda": 21.021746634449432,
                "explored_percent_none": 11.701760441836383,
                "kept_percent_concrete": 62.85126799177519,
                "kept_percent_lambda": 37.14873200822481,
                "num_examples": 3,
                "num_explored_concrete": 3898,
                "num_explored_lambda": 1218,
                "num_explored_none": 678,
                "num_inputs": 1,
                "num_kept_concrete": 917,
                "num_kept_lambda": 542,
                "num_values_explored": 5794,
                "num_values_kept": 1459,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57658
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3363121128641069,
            "num_unique_values": 298,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 62.292051756007396,
                "explored_percent_lambda": 29.02033271719039,
                "explored_percent_none": 8.687615526802219,
                "kept_percent_concrete": 60.61643835616438,
                "kept_percent_lambda": 39.38356164383562,
                "num_examples": 3,
                "num_explored_concrete": 337,
                "num_explored_lambda": 157,
                "num_explored_none": 47,
                "num_inputs": 2,
                "num_kept_concrete": 177,
                "num_kept_lambda": 115,
                "num_values_explored": 541,
                "num_values_kept": 292,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.31027737283148,
            "num_unique_values": 1552,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.5525487728131,
                "explored_percent_lambda": 14.018250471994966,
                "explored_percent_none": 12.429200755191944,
                "kept_percent_concrete": 77.24628312863607,
                "kept_percent_lambda": 22.75371687136393,
                "num_examples": 5,
                "num_explored_concrete": 4675,
                "num_explored_lambda": 891,
                "num_explored_none": 790,
                "num_inputs": 1,
                "num_kept_concrete": 1195,
                "num_kept_lambda": 352,
                "num_values_explored": 6356,
                "num_values_kept": 1547,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63203
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16229601087979972,
            "num_unique_values": 114,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 26.54320987654321,
                "explored_percent_lambda": 67.90123456790124,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 13.761467889908257,
                "kept_percent_lambda": 86.23853211009174,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 110,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 94,
                "num_values_explored": 162,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24315204611048,
            "num_unique_values": 1297,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.08667633317222,
                "explored_percent_lambda": 17.64137264378927,
                "explored_percent_none": 16.271951023038504,
                "kept_percent_concrete": 70.27863777089783,
                "kept_percent_lambda": 29.721362229102166,
                "num_examples": 5,
                "num_explored_concrete": 4102,
                "num_explored_lambda": 1095,
                "num_explored_none": 1010,
                "num_inputs": 1,
                "num_kept_concrete": 908,
                "num_kept_lambda": 384,
                "num_values_explored": 6207,
                "num_values_kept": 1292,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64727
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.12006845395081,
            "num_unique_values": 532,
            "solution": "Access(fn_11(Map((lambda u1: 1), x), fn_1(Scanl1((lambda u1, u2: ((lambda v1: Subtract(1, v1)))(u1)), x))), fn_0(x))",
            "solution_weight": 14,
            "stats": {
                "explored_percent_concrete": 53.83580080753701,
                "explored_percent_lambda": 29.475100942126513,
                "explored_percent_none": 16.689098250336475,
                "kept_percent_concrete": 59.20303605313093,
                "kept_percent_lambda": 40.79696394686907,
                "num_examples": 5,
                "num_explored_concrete": 800,
                "num_explored_lambda": 438,
                "num_explored_none": 248,
                "num_inputs": 1,
                "num_kept_concrete": 312,
                "num_kept_lambda": 215,
                "num_values_explored": 1486,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 28486
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.48922870098613,
            "num_unique_values": 1478,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.4755624515128,
                "explored_percent_lambda": 30.21722265321955,
                "explored_percent_none": 11.307214895267649,
                "kept_percent_concrete": 56.61914460285132,
                "kept_percent_lambda": 43.38085539714868,
                "num_examples": 3,
                "num_explored_concrete": 3015,
                "num_explored_lambda": 1558,
                "num_explored_none": 583,
                "num_inputs": 1,
                "num_kept_concrete": 834,
                "num_kept_lambda": 639,
                "num_values_explored": 5156,
                "num_values_kept": 1473,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51863
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24365607299842,
            "num_unique_values": 1700,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.96570728720147,
                "explored_percent_lambda": 8.0526638089406,
                "explored_percent_none": 9.98162890385793,
                "kept_percent_concrete": 84.17945690672964,
                "kept_percent_lambda": 15.820543093270366,
                "num_examples": 5,
                "num_explored_concrete": 5354,
                "num_explored_lambda": 526,
                "num_explored_none": 652,
                "num_inputs": 2,
                "num_kept_concrete": 1426,
                "num_kept_lambda": 268,
                "num_values_explored": 6532,
                "num_values_kept": 1694,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68520
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17842249083333,
            "num_unique_values": 1571,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.456723091664,
                "explored_percent_lambda": 19.466624081763015,
                "explored_percent_none": 10.07665282657298,
                "kept_percent_concrete": 65.49520766773163,
                "kept_percent_lambda": 34.50479233226837,
                "num_examples": 3,
                "num_explored_concrete": 4412,
                "num_explored_lambda": 1219,
                "num_explored_none": 631,
                "num_inputs": 2,
                "num_kept_concrete": 1025,
                "num_kept_lambda": 540,
                "num_values_explored": 6262,
                "num_values_kept": 1565,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63313
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.52205229899846,
            "num_unique_values": 854,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.73290683726509,
                "explored_percent_lambda": 19.312275089964015,
                "explored_percent_none": 12.954818072770891,
                "kept_percent_concrete": 73.14487632508833,
                "kept_percent_lambda": 26.85512367491166,
                "num_examples": 5,
                "num_explored_concrete": 1694,
                "num_explored_lambda": 483,
                "num_explored_none": 324,
                "num_inputs": 1,
                "num_kept_concrete": 621,
                "num_kept_lambda": 228,
                "num_values_explored": 2501,
                "num_values_kept": 849,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 40020
            },
            "success": false,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.90064792893827,
            "num_unique_values": 349,
            "solution": "fn_21(fn_1(Filter((lambda u1: ((lambda v1: Less(v1, 1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 53.85427666314678,
                "explored_percent_lambda": 32.312565997888065,
                "explored_percent_none": 13.833157338965153,
                "kept_percent_concrete": 57.55813953488372,
                "kept_percent_lambda": 42.44186046511628,
                "num_examples": 3,
                "num_explored_concrete": 510,
                "num_explored_lambda": 306,
                "num_explored_none": 131,
                "num_inputs": 1,
                "num_kept_concrete": 198,
                "num_kept_lambda": 146,
                "num_values_explored": 947,
                "num_values_kept": 344,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4067
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44297877489589,
            "num_unique_values": 822,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.53846153846154,
                "explored_percent_lambda": 21.225832990538873,
                "explored_percent_none": 17.235705470999587,
                "kept_percent_concrete": 70.1840490797546,
                "kept_percent_lambda": 29.8159509202454,
                "num_examples": 3,
                "num_explored_concrete": 1496,
                "num_explored_lambda": 516,
                "num_explored_none": 419,
                "num_inputs": 3,
                "num_kept_concrete": 572,
                "num_kept_lambda": 243,
                "num_values_explored": 2431,
                "num_values_kept": 815,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26985
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.52988804900087,
            "num_unique_values": 882,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.36334913112164,
                "explored_percent_lambda": 21.721958925750396,
                "explored_percent_none": 12.914691943127963,
                "kept_percent_concrete": 62.4,
                "kept_percent_lambda": 37.6,
                "num_examples": 3,
                "num_explored_concrete": 1655,
                "num_explored_lambda": 550,
                "num_explored_none": 327,
                "num_inputs": 3,
                "num_kept_concrete": 546,
                "num_kept_lambda": 329,
                "num_values_explored": 2532,
                "num_values_kept": 875,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27481
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.48502044798806,
            "num_unique_values": 693,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.89868667917448,
                "explored_percent_lambda": 21.76360225140713,
                "explored_percent_none": 20.337711069418386,
                "kept_percent_concrete": 70.84548104956268,
                "kept_percent_lambda": 29.154518950437318,
                "num_examples": 3,
                "num_explored_concrete": 1543,
                "num_explored_lambda": 580,
                "num_explored_none": 542,
                "num_inputs": 3,
                "num_kept_concrete": 486,
                "num_kept_lambda": 200,
                "num_values_explored": 2665,
                "num_values_kept": 686,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27126
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4085570538882166,
            "num_unique_values": 359,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.32773109243698,
                "explored_percent_lambda": 36.134453781512605,
                "explored_percent_none": 4.53781512605042,
                "kept_percent_concrete": 51.274787535410766,
                "kept_percent_lambda": 48.725212464589234,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 215,
                "num_explored_none": 27,
                "num_inputs": 2,
                "num_kept_concrete": 181,
                "num_kept_lambda": 172,
                "num_values_explored": 595,
                "num_values_kept": 353,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 595
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.626048616832122,
            "num_unique_values": 333,
            "solution": "fn_11(Sort(x), fn_0(y))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 47.04463208685163,
                "explored_percent_lambda": 40.41013268998794,
                "explored_percent_none": 12.545235223160434,
                "kept_percent_concrete": 62.691131498470945,
                "kept_percent_lambda": 37.308868501529055,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 335,
                "num_explored_none": 104,
                "num_inputs": 2,
                "num_kept_concrete": 205,
                "num_kept_lambda": 122,
                "num_values_explored": 829,
                "num_values_kept": 327,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3559
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.790442107943818,
            "num_unique_values": 712,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u1, u2)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 57.75721284703321,
                "explored_percent_lambda": 29.55906369080022,
                "explored_percent_none": 12.683723462166576,
                "kept_percent_concrete": 54.95750708215297,
                "kept_percent_lambda": 45.04249291784703,
                "num_examples": 3,
                "num_explored_concrete": 1061,
                "num_explored_lambda": 543,
                "num_explored_none": 233,
                "num_inputs": 2,
                "num_kept_concrete": 388,
                "num_kept_lambda": 318,
                "num_values_explored": 1837,
                "num_values_kept": 706,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3787
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.04357303096913,
            "num_unique_values": 814,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.60260586319218,
                "explored_percent_lambda": 39.32061423918101,
                "explored_percent_none": 15.076779897626803,
                "kept_percent_concrete": 51.79233621755253,
                "kept_percent_lambda": 48.20766378244747,
                "num_examples": 3,
                "num_explored_concrete": 980,
                "num_explored_lambda": 845,
                "num_explored_none": 324,
                "num_inputs": 1,
                "num_kept_concrete": 419,
                "num_kept_lambda": 390,
                "num_values_explored": 2149,
                "num_values_kept": 809,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 22975
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6656171299982816,
            "num_unique_values": 155,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.21487603305785,
                "explored_percent_lambda": 49.17355371900826,
                "explored_percent_none": 6.6115702479338845,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 119,
                "num_explored_none": 16,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 100,
                "num_values_explored": 242,
                "num_values_kept": 150,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 242
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.84436659794301,
            "num_unique_values": 927,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.56997971602434,
                "explored_percent_lambda": 21.21703853955375,
                "explored_percent_none": 15.212981744421906,
                "kept_percent_concrete": 75.2442996742671,
                "kept_percent_lambda": 24.7557003257329,
                "num_examples": 5,
                "num_explored_concrete": 1567,
                "num_explored_lambda": 523,
                "num_explored_none": 375,
                "num_inputs": 2,
                "num_kept_concrete": 693,
                "num_kept_lambda": 228,
                "num_values_explored": 2465,
                "num_values_kept": 921,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27864
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.56063111498952,
            "num_unique_values": 877,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.267471958584984,
                "explored_percent_lambda": 27.049180327868854,
                "explored_percent_none": 12.68334771354616,
                "kept_percent_concrete": 61.079219288174514,
                "kept_percent_lambda": 38.920780711825486,
                "num_examples": 3,
                "num_explored_concrete": 1397,
                "num_explored_lambda": 627,
                "num_explored_none": 294,
                "num_inputs": 2,
                "num_kept_concrete": 532,
                "num_kept_lambda": 339,
                "num_values_explored": 2318,
                "num_values_kept": 871,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25835
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.27849015197717,
            "num_unique_values": 832,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.6052968816745,
                "explored_percent_lambda": 23.366082870568132,
                "explored_percent_none": 13.028620247757368,
                "kept_percent_concrete": 61.21212121212121,
                "kept_percent_lambda": 38.78787878787879,
                "num_examples": 3,
                "num_explored_concrete": 1489,
                "num_explored_lambda": 547,
                "num_explored_none": 305,
                "num_inputs": 3,
                "num_kept_concrete": 505,
                "num_kept_lambda": 320,
                "num_values_explored": 2341,
                "num_values_kept": 825,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26431
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.84481277293526,
            "num_unique_values": 837,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.56428276147169,
                "explored_percent_lambda": 20.587019429516328,
                "explored_percent_none": 13.848697809011988,
                "kept_percent_concrete": 73.5576923076923,
                "kept_percent_lambda": 26.442307692307693,
                "num_examples": 5,
                "num_explored_concrete": 1586,
                "num_explored_lambda": 498,
                "num_explored_none": 335,
                "num_inputs": 1,
                "num_kept_concrete": 612,
                "num_kept_lambda": 220,
                "num_values_explored": 2419,
                "num_values_kept": 832,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26572
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.76213951897807,
            "num_unique_values": 902,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.604609929078016,
                "explored_percent_lambda": 28.19148936170213,
                "explored_percent_none": 15.203900709219859,
                "kept_percent_concrete": 60.53511705685619,
                "kept_percent_lambda": 39.46488294314381,
                "num_examples": 3,
                "num_explored_concrete": 1277,
                "num_explored_lambda": 636,
                "num_explored_none": 343,
                "num_inputs": 1,
                "num_kept_concrete": 543,
                "num_kept_lambda": 354,
                "num_values_explored": 2256,
                "num_values_kept": 897,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25553
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.807947128079832,
            "num_unique_values": 590,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: Greater(-1, v1)))(v1), y, v1)))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.812324929971986,
                "explored_percent_lambda": 29.29971988795518,
                "explored_percent_none": 19.88795518207283,
                "kept_percent_concrete": 62.842465753424655,
                "kept_percent_lambda": 37.157534246575345,
                "num_examples": 3,
                "num_explored_concrete": 907,
                "num_explored_lambda": 523,
                "num_explored_none": 355,
                "num_inputs": 2,
                "num_kept_concrete": 367,
                "num_kept_lambda": 217,
                "num_values_explored": 1785,
                "num_values_kept": 584,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4905
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1090044148731977,
            "num_unique_values": 390,
            "solution": "fn_10(fn_14(Scanl1((lambda u1, u2: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.07172995780591,
                "explored_percent_lambda": 34.177215189873415,
                "explored_percent_none": 6.751054852320675,
                "kept_percent_concrete": 52.467532467532465,
                "kept_percent_lambda": 47.532467532467535,
                "num_examples": 3,
                "num_explored_concrete": 420,
                "num_explored_lambda": 243,
                "num_explored_none": 48,
                "num_inputs": 1,
                "num_kept_concrete": 202,
                "num_kept_lambda": 183,
                "num_values_explored": 711,
                "num_values_kept": 385,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 711
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.252109568100423,
            "num_unique_values": 897,
            "solution": "Take(Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), fn_10(c)), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.20742441637964,
                "explored_percent_lambda": 22.273249138920782,
                "explored_percent_none": 11.51932644469958,
                "kept_percent_concrete": 62.62626262626262,
                "kept_percent_lambda": 37.37373737373738,
                "num_examples": 3,
                "num_explored_concrete": 1730,
                "num_explored_lambda": 582,
                "num_explored_none": 301,
                "num_inputs": 2,
                "num_kept_concrete": 558,
                "num_kept_lambda": 333,
                "num_values_explored": 2613,
                "num_values_kept": 891,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5343
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.70948576717637,
            "num_unique_values": 1653,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.33023975251353,
                "explored_percent_lambda": 10.193348801237432,
                "explored_percent_none": 8.476411446249033,
                "kept_percent_concrete": 80.20643594414086,
                "kept_percent_lambda": 19.79356405585914,
                "num_examples": 5,
                "num_explored_concrete": 5258,
                "num_explored_lambda": 659,
                "num_explored_none": 548,
                "num_inputs": 2,
                "num_kept_concrete": 1321,
                "num_kept_lambda": 326,
                "num_values_explored": 6465,
                "num_values_kept": 1647,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46978
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09880104288459,
            "num_unique_values": 1475,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.31102145607922,
                "explored_percent_lambda": 21.346048046946635,
                "explored_percent_none": 10.342930496974143,
                "kept_percent_concrete": 61.70068027210884,
                "kept_percent_lambda": 38.29931972789116,
                "num_examples": 3,
                "num_explored_concrete": 3725,
                "num_explored_lambda": 1164,
                "num_explored_none": 564,
                "num_inputs": 1,
                "num_kept_concrete": 907,
                "num_kept_lambda": 563,
                "num_values_explored": 5453,
                "num_values_kept": 1470,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56323
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01030155504122,
            "num_unique_values": 1739,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.793255594075,
                "explored_percent_lambda": 15.568862275449101,
                "explored_percent_none": 12.63788213047589,
                "kept_percent_concrete": 74.72590882862089,
                "kept_percent_lambda": 25.274091171379112,
                "num_examples": 3,
                "num_explored_concrete": 4556,
                "num_explored_lambda": 988,
                "num_explored_none": 802,
                "num_inputs": 2,
                "num_kept_concrete": 1295,
                "num_kept_lambda": 438,
                "num_values_explored": 6346,
                "num_values_kept": 1733,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65242
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.33467445289716125,
            "num_unique_values": 354,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.1444866920152,
                "explored_percent_lambda": 21.102661596958175,
                "explored_percent_none": 4.752851711026616,
                "kept_percent_concrete": 72.1264367816092,
                "kept_percent_lambda": 27.873563218390803,
                "num_examples": 5,
                "num_explored_concrete": 390,
                "num_explored_lambda": 111,
                "num_explored_none": 25,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 97,
                "num_values_explored": 526,
                "num_values_kept": 348,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 526
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.51370578398928,
            "num_unique_values": 260,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.121887287024903,
                "explored_percent_lambda": 21.00262123197903,
                "explored_percent_none": 64.87549148099608,
                "kept_percent_concrete": 40.78431372549019,
                "kept_percent_lambda": 59.21568627450981,
                "num_examples": 5,
                "num_explored_concrete": 862,
                "num_explored_lambda": 1282,
                "num_explored_none": 3960,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 151,
                "num_values_explored": 6104,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65291
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24282269785180688,
            "num_unique_values": 142,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 53.96825396825397,
                "explored_percent_lambda": 25.396825396825395,
                "explored_percent_none": 20.634920634920636,
                "kept_percent_concrete": 58.088235294117645,
                "kept_percent_lambda": 41.911764705882355,
                "num_examples": 5,
                "num_explored_concrete": 136,
                "num_explored_lambda": 64,
                "num_explored_none": 52,
                "num_inputs": 2,
                "num_kept_concrete": 79,
                "num_kept_lambda": 57,
                "num_values_explored": 252,
                "num_values_kept": 136,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 252
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4680897870566696,
            "num_unique_values": 352,
            "solution": "fn_18(fn_9(Add(-1, -1), x, x), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 42.363112391930834,
                "explored_percent_lambda": 47.694524495677236,
                "explored_percent_none": 9.94236311239193,
                "kept_percent_concrete": 49.56772334293948,
                "kept_percent_lambda": 50.43227665706052,
                "num_examples": 3,
                "num_explored_concrete": 294,
                "num_explored_lambda": 331,
                "num_explored_none": 69,
                "num_inputs": 1,
                "num_kept_concrete": 172,
                "num_kept_lambda": 175,
                "num_values_explored": 694,
                "num_values_kept": 347,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3034
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1328043427783996,
            "num_unique_values": 86,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 33.08457711442786,
                "explored_percent_lambda": 8.706467661691542,
                "explored_percent_none": 58.208955223880594,
                "kept_percent_concrete": 76.25,
                "kept_percent_lambda": 23.75,
                "num_examples": 5,
                "num_explored_concrete": 133,
                "num_explored_lambda": 35,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 61,
                "num_kept_lambda": 19,
                "num_values_explored": 402,
                "num_values_kept": 80,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 402
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17207515006885,
            "num_unique_values": 1568,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.02629601803156,
                "explored_percent_lambda": 25.225394440270474,
                "explored_percent_none": 9.74830954169797,
                "kept_percent_concrete": 64.55534229046705,
                "kept_percent_lambda": 35.44465770953295,
                "num_examples": 3,
                "num_explored_concrete": 3462,
                "num_explored_lambda": 1343,
                "num_explored_none": 519,
                "num_inputs": 1,
                "num_kept_concrete": 1009,
                "num_kept_lambda": 554,
                "num_values_explored": 5324,
                "num_values_kept": 1563,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55833
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0968695380725,
            "num_unique_values": 1398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.48251501236312,
                "explored_percent_lambda": 23.896149770399152,
                "explored_percent_none": 11.621335217237725,
                "kept_percent_concrete": 61.01938262742283,
                "kept_percent_lambda": 38.98061737257717,
                "num_examples": 3,
                "num_explored_concrete": 3651,
                "num_explored_lambda": 1353,
                "num_explored_none": 658,
                "num_inputs": 1,
                "num_kept_concrete": 850,
                "num_kept_lambda": 543,
                "num_values_explored": 5662,
                "num_values_kept": 1393,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60571
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27042713901028,
            "num_unique_values": 1206,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.088633993743485,
                "explored_percent_lambda": 38.581856100104275,
                "explored_percent_none": 16.329509906152243,
                "kept_percent_concrete": 48.5428809325562,
                "kept_percent_lambda": 51.4571190674438,
                "num_examples": 3,
                "num_explored_concrete": 2162,
                "num_explored_lambda": 1850,
                "num_explored_none": 783,
                "num_inputs": 1,
                "num_kept_concrete": 583,
                "num_kept_lambda": 618,
                "num_values_explored": 4795,
                "num_values_kept": 1201,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51587
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.25674690213054,
            "num_unique_values": 1659,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.05020620405236,
                "explored_percent_lambda": 26.62721893491124,
                "explored_percent_none": 13.322574861036399,
                "kept_percent_concrete": 60.254083484573506,
                "kept_percent_lambda": 39.745916515426494,
                "num_examples": 3,
                "num_explored_concrete": 3349,
                "num_explored_lambda": 1485,
                "num_explored_none": 743,
                "num_inputs": 2,
                "num_kept_concrete": 996,
                "num_kept_lambda": 657,
                "num_values_explored": 5577,
                "num_values_kept": 1653,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59469
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9548563500866294,
            "num_unique_values": 519,
            "solution": "Last(fn_22(x))",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 53.11572700296736,
                "explored_percent_lambda": 31.75074183976261,
                "explored_percent_none": 15.13353115727003,
                "kept_percent_concrete": 63.2295719844358,
                "kept_percent_lambda": 36.7704280155642,
                "num_examples": 5,
                "num_explored_concrete": 716,
                "num_explored_lambda": 428,
                "num_explored_none": 204,
                "num_inputs": 1,
                "num_kept_concrete": 325,
                "num_kept_lambda": 189,
                "num_values_explored": 1348,
                "num_values_kept": 514,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2908
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21346559701487,
            "num_unique_values": 1374,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.80045072730998,
                "explored_percent_lambda": 34.05039950829748,
                "explored_percent_none": 12.149149764392542,
                "kept_percent_concrete": 55.14974433893353,
                "kept_percent_lambda": 44.85025566106647,
                "num_examples": 3,
                "num_explored_concrete": 2626,
                "num_explored_lambda": 1662,
                "num_explored_none": 593,
                "num_inputs": 1,
                "num_kept_concrete": 755,
                "num_kept_lambda": 614,
                "num_values_explored": 4881,
                "num_values_kept": 1369,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52182
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2979030709248,
            "num_unique_values": 1437,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.47545219638243,
                "explored_percent_lambda": 20.57954964931709,
                "explored_percent_none": 10.94499815430048,
                "kept_percent_concrete": 64.17597765363128,
                "kept_percent_lambda": 35.824022346368714,
                "num_examples": 3,
                "num_explored_concrete": 3710,
                "num_explored_lambda": 1115,
                "num_explored_none": 593,
                "num_inputs": 1,
                "num_kept_concrete": 919,
                "num_kept_lambda": 513,
                "num_values_explored": 5418,
                "num_values_kept": 1432,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54750
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24923282605596,
            "num_unique_values": 1782,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.32140691328078,
                "explored_percent_lambda": 8.793208004851426,
                "explored_percent_none": 10.885385081867799,
                "kept_percent_concrete": 82.48873873873873,
                "kept_percent_lambda": 17.51126126126126,
                "num_examples": 5,
                "num_explored_concrete": 5298,
                "num_explored_lambda": 580,
                "num_explored_none": 718,
                "num_inputs": 2,
                "num_kept_concrete": 1465,
                "num_kept_lambda": 311,
                "num_values_explored": 6596,
                "num_values_kept": 1776,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67902
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11448996607214,
            "num_unique_values": 1522,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.59128425222846,
                "explored_percent_lambda": 18.38890723010895,
                "explored_percent_none": 10.019808517662595,
                "kept_percent_concrete": 62.99472295514512,
                "kept_percent_lambda": 37.00527704485488,
                "num_examples": 3,
                "num_explored_concrete": 4337,
                "num_explored_lambda": 1114,
                "num_explored_none": 607,
                "num_inputs": 2,
                "num_kept_concrete": 955,
                "num_kept_lambda": 561,
                "num_values_explored": 6058,
                "num_values_kept": 1516,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60928
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09553759498522,
            "num_unique_values": 1465,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.08081378920599,
                "explored_percent_lambda": 7.88358293303193,
                "explored_percent_none": 16.03560327776208,
                "kept_percent_concrete": 86.4290610006854,
                "kept_percent_lambda": 13.570938999314599,
                "num_examples": 5,
                "num_explored_concrete": 5385,
                "num_explored_lambda": 558,
                "num_explored_none": 1135,
                "num_inputs": 2,
                "num_kept_concrete": 1261,
                "num_kept_lambda": 198,
                "num_values_explored": 7078,
                "num_values_kept": 1459,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71648
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.72822480089962,
            "num_unique_values": 1542,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.71317225253313,
                "explored_percent_lambda": 11.987529228371006,
                "explored_percent_none": 12.299298519095869,
                "kept_percent_concrete": 80.859375,
                "kept_percent_lambda": 19.140625,
                "num_examples": 5,
                "num_explored_concrete": 4857,
                "num_explored_lambda": 769,
                "num_explored_none": 789,
                "num_inputs": 2,
                "num_kept_concrete": 1242,
                "num_kept_lambda": 294,
                "num_values_explored": 6415,
                "num_values_kept": 1536,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68191
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.343598426086828,
            "num_unique_values": 738,
            "solution": "Add(1, fn_3(Drop(1, Take(Maximum(fn_10(x)), Map((lambda u1: ((lambda v1: IntDivide(v1, n)))(u1)), x))), Last(fn_10(x))))",
            "solution_weight": 18,
            "stats": {
                "explored_percent_concrete": 64.08959537572254,
                "explored_percent_lambda": 16.4378612716763,
                "explored_percent_none": 19.472543352601157,
                "kept_percent_concrete": 76.77595628415301,
                "kept_percent_lambda": 23.224043715846996,
                "num_examples": 5,
                "num_explored_concrete": 1774,
                "num_explored_lambda": 455,
                "num_explored_none": 539,
                "num_inputs": 2,
                "num_kept_concrete": 562,
                "num_kept_lambda": 170,
                "num_values_explored": 2768,
                "num_values_kept": 732,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18724
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}