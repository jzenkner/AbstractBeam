{
    "num_tasks": 50,
    "num_tasks_solved": 20,
    "results": [
        {
            "elapsed_time": 0.7674557799473405,
            "num_unique_values": 377,
            "solution": "Reverse(fn_0(fn_18(x, x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 50.62166962699823,
                "explored_percent_lambda": 44.760213143872114,
                "explored_percent_none": 4.618117229129663,
                "kept_percent_concrete": 47.31182795698925,
                "kept_percent_lambda": 52.68817204301075,
                "num_examples": 3,
                "num_explored_concrete": 285,
                "num_explored_lambda": 252,
                "num_explored_none": 26,
                "num_inputs": 1,
                "num_kept_concrete": 176,
                "num_kept_lambda": 196,
                "num_values_explored": 563,
                "num_values_kept": 372,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 563
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20947452494874597,
            "num_unique_values": 90,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 36.149584487534625,
                "explored_percent_lambda": 9.141274238227147,
                "explored_percent_none": 54.70914127423823,
                "kept_percent_concrete": 84.52380952380952,
                "kept_percent_lambda": 15.476190476190476,
                "num_examples": 5,
                "num_explored_concrete": 261,
                "num_explored_lambda": 66,
                "num_explored_none": 395,
                "num_inputs": 2,
                "num_kept_concrete": 71,
                "num_kept_lambda": 13,
                "num_values_explored": 722,
                "num_values_kept": 84,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 722
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5713015759829432,
            "num_unique_values": 410,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 38.27993254637437,
                "explored_percent_lambda": 55.48060708263069,
                "explored_percent_none": 6.239460370994941,
                "kept_percent_concrete": 38.02469135802469,
                "kept_percent_lambda": 61.97530864197531,
                "num_examples": 3,
                "num_explored_concrete": 227,
                "num_explored_lambda": 329,
                "num_explored_none": 37,
                "num_inputs": 1,
                "num_kept_concrete": 154,
                "num_kept_lambda": 251,
                "num_values_explored": 593,
                "num_values_kept": 405,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 593
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.51977106695995,
            "num_unique_values": 1242,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.951908228546216,
                "explored_percent_lambda": 37.1277299801456,
                "explored_percent_none": 16.920361791308185,
                "kept_percent_concrete": 54.729183508488276,
                "kept_percent_lambda": 45.270816491511724,
                "num_examples": 3,
                "num_explored_concrete": 2083,
                "num_explored_lambda": 1683,
                "num_explored_none": 767,
                "num_inputs": 1,
                "num_kept_concrete": 677,
                "num_kept_lambda": 560,
                "num_values_explored": 4533,
                "num_values_kept": 1237,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51544
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.32395726814866066,
            "num_unique_values": 290,
            "solution": "Take(k, fn_0(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 65.75342465753425,
                "explored_percent_lambda": 27.201565557729943,
                "explored_percent_none": 7.045009784735812,
                "kept_percent_concrete": 66.54929577464789,
                "kept_percent_lambda": 33.45070422535211,
                "num_examples": 3,
                "num_explored_concrete": 336,
                "num_explored_lambda": 139,
                "num_explored_none": 36,
                "num_inputs": 2,
                "num_kept_concrete": 189,
                "num_kept_lambda": 95,
                "num_values_explored": 511,
                "num_values_kept": 284,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 511
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.5134163168259,
            "num_unique_values": 1630,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.66204287515762,
                "explored_percent_lambda": 16.231309673932625,
                "explored_percent_none": 8.106647450909746,
                "kept_percent_concrete": 77.6,
                "kept_percent_lambda": 22.4,
                "num_examples": 5,
                "num_explored_concrete": 4200,
                "num_explored_lambda": 901,
                "num_explored_none": 450,
                "num_inputs": 1,
                "num_kept_concrete": 1261,
                "num_kept_lambda": 364,
                "num_values_explored": 5551,
                "num_values_kept": 1625,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57893
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16610208619385958,
            "num_unique_values": 119,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 25.308641975308642,
                "explored_percent_lambda": 69.1358024691358,
                "explored_percent_none": 5.555555555555555,
                "kept_percent_concrete": 14.035087719298245,
                "kept_percent_lambda": 85.96491228070175,
                "num_examples": 3,
                "num_explored_concrete": 41,
                "num_explored_lambda": 112,
                "num_explored_none": 9,
                "num_inputs": 1,
                "num_kept_concrete": 16,
                "num_kept_lambda": 98,
                "num_values_explored": 162,
                "num_values_kept": 114,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 162
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11805308889598,
            "num_unique_values": 1334,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.79529907033854,
                "explored_percent_lambda": 17.225048237151377,
                "explored_percent_none": 15.979652692510086,
                "kept_percent_concrete": 73.51392024078254,
                "kept_percent_lambda": 26.486079759217457,
                "num_examples": 5,
                "num_explored_concrete": 3808,
                "num_explored_lambda": 982,
                "num_explored_none": 911,
                "num_inputs": 1,
                "num_kept_concrete": 977,
                "num_kept_lambda": 352,
                "num_values_explored": 5701,
                "num_values_kept": 1329,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57583
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.96825386607088,
            "num_unique_values": 1357,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.36621910877603,
                "explored_percent_lambda": 17.53259388986184,
                "explored_percent_none": 20.10118700136213,
                "kept_percent_concrete": 68.86094674556213,
                "kept_percent_lambda": 31.13905325443787,
                "num_examples": 5,
                "num_explored_concrete": 3205,
                "num_explored_lambda": 901,
                "num_explored_none": 1033,
                "num_inputs": 1,
                "num_kept_concrete": 931,
                "num_kept_lambda": 421,
                "num_values_explored": 5139,
                "num_values_kept": 1352,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58279
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28469597897492,
            "num_unique_values": 1315,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.42965130455986,
                "explored_percent_lambda": 47.69568397951719,
                "explored_percent_none": 13.874664715922945,
                "kept_percent_concrete": 43.20610687022901,
                "kept_percent_lambda": 56.79389312977099,
                "num_examples": 3,
                "num_explored_concrete": 1576,
                "num_explored_lambda": 1956,
                "num_explored_none": 569,
                "num_inputs": 1,
                "num_kept_concrete": 566,
                "num_kept_lambda": 744,
                "num_values_explored": 4101,
                "num_values_kept": 1310,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45253
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40209858282469,
            "num_unique_values": 1504,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.19629188637523,
                "explored_percent_lambda": 11.02228270113965,
                "explored_percent_none": 14.781425412485117,
                "kept_percent_concrete": 82.1762349799733,
                "kept_percent_lambda": 17.823765020026702,
                "num_examples": 5,
                "num_explored_concrete": 4362,
                "num_explored_lambda": 648,
                "num_explored_none": 869,
                "num_inputs": 2,
                "num_kept_concrete": 1231,
                "num_kept_lambda": 267,
                "num_values_explored": 5879,
                "num_values_kept": 1498,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60046
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0426703072153,
            "num_unique_values": 1464,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.27986224397317,
                "explored_percent_lambda": 23.83541779952873,
                "explored_percent_none": 7.884719956498097,
                "kept_percent_concrete": 64.74622770919068,
                "kept_percent_lambda": 35.25377229080933,
                "num_examples": 3,
                "num_explored_concrete": 3767,
                "num_explored_lambda": 1315,
                "num_explored_none": 435,
                "num_inputs": 2,
                "num_kept_concrete": 944,
                "num_kept_lambda": 514,
                "num_values_explored": 5517,
                "num_values_kept": 1458,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58541
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.681919031077996,
            "num_unique_values": 754,
            "solution": "Max(If(IsEven(Access(1, x)), Count((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x), 1), Sum(Drop(Head(x), x)))",
            "solution_weight": 18,
            "stats": {
                "explored_percent_concrete": 59.168336673346694,
                "explored_percent_lambda": 19.589178356713425,
                "explored_percent_none": 21.24248496993988,
                "kept_percent_concrete": 74.49933244325767,
                "kept_percent_lambda": 25.50066755674232,
                "num_examples": 5,
                "num_explored_concrete": 1181,
                "num_explored_lambda": 391,
                "num_explored_none": 424,
                "num_inputs": 1,
                "num_kept_concrete": 558,
                "num_kept_lambda": 191,
                "num_values_explored": 1996,
                "num_values_kept": 749,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9569
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.291932093910873,
            "num_unique_values": 590,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Filter((lambda u1: ((lambda v1: Greater(1, v1)))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 44.976452119309265,
                "explored_percent_lambda": 37.04866562009419,
                "explored_percent_none": 17.974882260596548,
                "kept_percent_concrete": 51.111111111111114,
                "kept_percent_lambda": 48.888888888888886,
                "num_examples": 3,
                "num_explored_concrete": 573,
                "num_explored_lambda": 472,
                "num_explored_none": 229,
                "num_inputs": 1,
                "num_kept_concrete": 299,
                "num_kept_lambda": 286,
                "num_values_explored": 1274,
                "num_values_kept": 585,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7993
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.67315414198674,
            "num_unique_values": 1693,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.32524707996406,
                "explored_percent_lambda": 19.982030548068284,
                "explored_percent_none": 13.692722371967655,
                "kept_percent_concrete": 70.22538552787663,
                "kept_percent_lambda": 29.774614472123368,
                "num_examples": 3,
                "num_explored_concrete": 3691,
                "num_explored_lambda": 1112,
                "num_explored_none": 762,
                "num_inputs": 3,
                "num_kept_concrete": 1184,
                "num_kept_lambda": 502,
                "num_values_explored": 5565,
                "num_values_kept": 1686,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57390
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32515157479793,
            "num_unique_values": 1732,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.02656546489564,
                "explored_percent_lambda": 22.82732447817837,
                "explored_percent_none": 9.146110056925997,
                "kept_percent_concrete": 65.44927536231884,
                "kept_percent_lambda": 34.55072463768116,
                "num_examples": 3,
                "num_explored_concrete": 3585,
                "num_explored_lambda": 1203,
                "num_explored_none": 482,
                "num_inputs": 3,
                "num_kept_concrete": 1129,
                "num_kept_lambda": 596,
                "num_values_explored": 5270,
                "num_values_kept": 1725,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58514
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15477735502645,
            "num_unique_values": 1335,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.46345741570844,
                "explored_percent_lambda": 22.78308321964529,
                "explored_percent_none": 14.753459364646268,
                "kept_percent_concrete": 68.67469879518072,
                "kept_percent_lambda": 31.325301204819276,
                "num_examples": 3,
                "num_explored_concrete": 3205,
                "num_explored_lambda": 1169,
                "num_explored_none": 757,
                "num_inputs": 3,
                "num_kept_concrete": 912,
                "num_kept_lambda": 416,
                "num_values_explored": 5131,
                "num_values_kept": 1328,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55076
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5201424797996879,
            "num_unique_values": 344,
            "solution": "Reverse(fn_0(ZipWith((lambda u1, u2: ((lambda v1, v2: IntDivide(v1, v2)))(u2, u1)), n, m)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 61.06194690265487,
                "explored_percent_lambda": 32.743362831858406,
                "explored_percent_none": 6.1946902654867255,
                "kept_percent_concrete": 55.02958579881657,
                "kept_percent_lambda": 44.97041420118343,
                "num_examples": 3,
                "num_explored_concrete": 345,
                "num_explored_lambda": 185,
                "num_explored_none": 35,
                "num_inputs": 2,
                "num_kept_concrete": 186,
                "num_kept_lambda": 152,
                "num_values_explored": 565,
                "num_values_kept": 338,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 565
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.809785408899188,
            "num_unique_values": 1355,
            "solution": "fn_11(Sort(y), fn_0(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 80.93162000917852,
                "explored_percent_lambda": 9.729233593391465,
                "explored_percent_none": 9.339146397430014,
                "kept_percent_concrete": 79.3921423276501,
                "kept_percent_lambda": 20.60785767234989,
                "num_examples": 5,
                "num_explored_concrete": 3527,
                "num_explored_lambda": 424,
                "num_explored_none": 407,
                "num_inputs": 2,
                "num_kept_concrete": 1071,
                "num_kept_lambda": 278,
                "num_values_explored": 4358,
                "num_values_kept": 1349,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6518
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6517861920874566,
            "num_unique_values": 349,
            "solution": "fn_14(ZipWith((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u1, u2)), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 44.827586206896555,
                "explored_percent_lambda": 40.185676392572944,
                "explored_percent_none": 14.986737400530505,
                "kept_percent_concrete": 50.14577259475219,
                "kept_percent_lambda": 49.85422740524781,
                "num_examples": 3,
                "num_explored_concrete": 338,
                "num_explored_lambda": 303,
                "num_explored_none": 113,
                "num_inputs": 2,
                "num_kept_concrete": 172,
                "num_kept_lambda": 171,
                "num_values_explored": 754,
                "num_values_kept": 343,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2554
            },
            "success": true,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.50208698119968,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.086732301922176,
                "explored_percent_lambda": 32.51289263947492,
                "explored_percent_none": 12.400375058602906,
                "kept_percent_concrete": 57.04022988505747,
                "kept_percent_lambda": 42.95977011494253,
                "num_examples": 3,
                "num_explored_concrete": 2350,
                "num_explored_lambda": 1387,
                "num_explored_none": 529,
                "num_inputs": 1,
                "num_kept_concrete": 794,
                "num_kept_lambda": 598,
                "num_values_explored": 4266,
                "num_values_kept": 1392,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43664
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2144607959780842,
            "num_unique_values": 157,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.49180327868852,
                "explored_percent_lambda": 47.131147540983605,
                "explored_percent_none": 7.377049180327869,
                "kept_percent_concrete": 34.21052631578947,
                "kept_percent_lambda": 65.78947368421052,
                "num_examples": 3,
                "num_explored_concrete": 111,
                "num_explored_lambda": 115,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 52,
                "num_kept_lambda": 100,
                "num_values_explored": 244,
                "num_values_kept": 152,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40155721688643,
            "num_unique_values": 1808,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.8781796158505,
                "explored_percent_lambda": 11.870565841841149,
                "explored_percent_none": 12.251254542308358,
                "kept_percent_concrete": 82.63041065482797,
                "kept_percent_lambda": 17.36958934517203,
                "num_examples": 5,
                "num_explored_concrete": 4385,
                "num_explored_lambda": 686,
                "num_explored_none": 708,
                "num_inputs": 2,
                "num_kept_concrete": 1489,
                "num_kept_lambda": 313,
                "num_values_explored": 5779,
                "num_values_kept": 1802,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57883
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.36096600699238,
            "num_unique_values": 1388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.303491495076095,
                "explored_percent_lambda": 28.312444046553267,
                "explored_percent_none": 13.384064458370636,
                "kept_percent_concrete": 63.67583212735166,
                "kept_percent_lambda": 36.32416787264834,
                "num_examples": 3,
                "num_explored_concrete": 2605,
                "num_explored_lambda": 1265,
                "num_explored_none": 598,
                "num_inputs": 2,
                "num_kept_concrete": 880,
                "num_kept_lambda": 502,
                "num_values_explored": 4468,
                "num_values_kept": 1382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48299
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.3662683730945,
            "num_unique_values": 1468,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.23387790197764,
                "explored_percent_lambda": 28.48237317282889,
                "explored_percent_none": 15.283748925193466,
                "kept_percent_concrete": 60.57494866529774,
                "kept_percent_lambda": 39.42505133470226,
                "num_examples": 3,
                "num_explored_concrete": 2616,
                "num_explored_lambda": 1325,
                "num_explored_none": 711,
                "num_inputs": 3,
                "num_kept_concrete": 885,
                "num_kept_lambda": 576,
                "num_values_explored": 4652,
                "num_values_kept": 1461,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48549
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.43417299399152,
            "num_unique_values": 1486,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.98696461824953,
                "explored_percent_lambda": 16.945996275605214,
                "explored_percent_none": 12.067039106145252,
                "kept_percent_concrete": 76.70492910195814,
                "kept_percent_lambda": 23.295070898041864,
                "num_examples": 5,
                "num_explored_concrete": 3812,
                "num_explored_lambda": 910,
                "num_explored_none": 648,
                "num_inputs": 1,
                "num_kept_concrete": 1136,
                "num_kept_lambda": 345,
                "num_values_explored": 5370,
                "num_values_kept": 1481,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54420
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.37792594009079,
            "num_unique_values": 1533,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.7035490605428,
                "explored_percent_lambda": 25.782881002087684,
                "explored_percent_none": 6.51356993736952,
                "kept_percent_concrete": 68.1282722513089,
                "kept_percent_lambda": 31.8717277486911,
                "num_examples": 3,
                "num_explored_concrete": 3243,
                "num_explored_lambda": 1235,
                "num_explored_none": 312,
                "num_inputs": 1,
                "num_kept_concrete": 1041,
                "num_kept_lambda": 487,
                "num_values_explored": 4790,
                "num_values_kept": 1528,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49972
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.38179108896293,
            "num_unique_values": 217,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: Less(v1, 1)))(v1), y, v1)))(u1)), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 20.684736091298145,
                "explored_percent_lambda": 49.64336661911555,
                "explored_percent_none": 29.671897289586305,
                "kept_percent_concrete": 42.18009478672986,
                "kept_percent_lambda": 57.81990521327014,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 348,
                "num_explored_none": 208,
                "num_inputs": 2,
                "num_kept_concrete": 89,
                "num_kept_lambda": 122,
                "num_values_explored": 701,
                "num_values_kept": 211,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 27343
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5337780099362135,
            "num_unique_values": 367,
            "solution": "fn_10(fn_14(Map((lambda u1: 1), x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.268722466960355,
                "explored_percent_lambda": 34.36123348017621,
                "explored_percent_none": 8.370044052863436,
                "kept_percent_concrete": 53.03867403314917,
                "kept_percent_lambda": 46.96132596685083,
                "num_examples": 3,
                "num_explored_concrete": 390,
                "num_explored_lambda": 234,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 192,
                "num_kept_lambda": 170,
                "num_values_explored": 681,
                "num_values_kept": 362,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 681
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.121069964021444,
            "num_unique_values": 851,
            "solution": "Take(Count((lambda u1: ((lambda v1: Greater(v1, ((lambda v1: IsEven(v1)))(v1))))(u1)), r), Sort(c))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 61.62528216704289,
                "explored_percent_lambda": 23.47629796839729,
                "explored_percent_none": 14.89841986455982,
                "kept_percent_concrete": 65.56213017751479,
                "kept_percent_lambda": 34.437869822485204,
                "num_examples": 3,
                "num_explored_concrete": 1365,
                "num_explored_lambda": 520,
                "num_explored_none": 330,
                "num_inputs": 2,
                "num_kept_concrete": 554,
                "num_kept_lambda": 291,
                "num_values_explored": 2215,
                "num_values_kept": 845,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4015
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.3206521270331,
            "num_unique_values": 1621,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 83.54652181531452,
                "explored_percent_lambda": 9.900122656386893,
                "explored_percent_none": 6.553355528298581,
                "kept_percent_concrete": 80.43343653250774,
                "kept_percent_lambda": 19.56656346749226,
                "num_examples": 5,
                "num_explored_concrete": 4768,
                "num_explored_lambda": 565,
                "num_explored_none": 374,
                "num_inputs": 2,
                "num_kept_concrete": 1299,
                "num_kept_lambda": 316,
                "num_values_explored": 5707,
                "num_values_kept": 1615,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59992
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14769713813439,
            "num_unique_values": 1221,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.425619834710744,
                "explored_percent_lambda": 46.35847107438016,
                "explored_percent_none": 12.215909090909092,
                "kept_percent_concrete": 49.0953947368421,
                "kept_percent_lambda": 50.9046052631579,
                "num_examples": 3,
                "num_explored_concrete": 1604,
                "num_explored_lambda": 1795,
                "num_explored_none": 473,
                "num_inputs": 1,
                "num_kept_concrete": 597,
                "num_kept_lambda": 619,
                "num_values_explored": 3872,
                "num_values_kept": 1216,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44914
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22369476407766,
            "num_unique_values": 1504,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.545671167593326,
                "explored_percent_lambda": 26.270849880857824,
                "explored_percent_none": 16.18347895154885,
                "kept_percent_concrete": 64.88651535380508,
                "kept_percent_lambda": 35.11348464619493,
                "num_examples": 3,
                "num_explored_concrete": 2898,
                "num_explored_lambda": 1323,
                "num_explored_none": 815,
                "num_inputs": 2,
                "num_kept_concrete": 972,
                "num_kept_lambda": 526,
                "num_values_explored": 5036,
                "num_values_kept": 1498,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48979
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.78152017504908,
            "num_unique_values": 493,
            "solution": "Head(fn_0(ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 57.15896279594138,
                "explored_percent_lambda": 25.93010146561443,
                "explored_percent_none": 16.910935738444195,
                "kept_percent_concrete": 63.860369609856264,
                "kept_percent_lambda": 36.139630390143736,
                "num_examples": 5,
                "num_explored_concrete": 507,
                "num_explored_lambda": 230,
                "num_explored_none": 150,
                "num_inputs": 2,
                "num_kept_concrete": 311,
                "num_kept_lambda": 176,
                "num_values_explored": 887,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 19098
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72928276797757,
            "num_unique_values": 254,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 16.893342877594847,
                "explored_percent_lambda": 20.758768790264853,
                "explored_percent_none": 62.3478883321403,
                "kept_percent_concrete": 53.01204819277108,
                "kept_percent_lambda": 46.98795180722892,
                "num_examples": 5,
                "num_explored_concrete": 944,
                "num_explored_lambda": 1160,
                "num_explored_none": 3484,
                "num_inputs": 1,
                "num_kept_concrete": 132,
                "num_kept_lambda": 117,
                "num_values_explored": 5588,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56363
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19799682800658047,
            "num_unique_values": 166,
            "solution": "Count((lambda u1: ((lambda v1: Greater(q, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.73122529644269,
                "explored_percent_lambda": 30.8300395256917,
                "explored_percent_none": 13.438735177865613,
                "kept_percent_concrete": 55.625,
                "kept_percent_lambda": 44.375,
                "num_examples": 5,
                "num_explored_concrete": 141,
                "num_explored_lambda": 78,
                "num_explored_none": 34,
                "num_inputs": 2,
                "num_kept_concrete": 89,
                "num_kept_lambda": 71,
                "num_values_explored": 253,
                "num_values_kept": 160,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 253
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.23312670295127,
            "num_unique_values": 354,
            "solution": "fn_18(fn_9(Add(-1, -1), x, x), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 35.8768406961178,
                "explored_percent_lambda": 47.12182061579652,
                "explored_percent_none": 17.001338688085674,
                "kept_percent_concrete": 43.26647564469914,
                "kept_percent_lambda": 56.73352435530086,
                "num_examples": 3,
                "num_explored_concrete": 268,
                "num_explored_lambda": 352,
                "num_explored_none": 127,
                "num_inputs": 1,
                "num_kept_concrete": 151,
                "num_kept_lambda": 198,
                "num_values_explored": 747,
                "num_values_kept": 349,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 19536
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14818024495616555,
            "num_unique_values": 88,
            "solution": "Subtract(Multiply(y, Add(x, -1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 35.294117647058826,
                "explored_percent_lambda": 11.229946524064172,
                "explored_percent_none": 53.475935828877006,
                "kept_percent_concrete": 73.17073170731707,
                "kept_percent_lambda": 26.829268292682926,
                "num_examples": 5,
                "num_explored_concrete": 132,
                "num_explored_lambda": 42,
                "num_explored_none": 200,
                "num_inputs": 2,
                "num_kept_concrete": 60,
                "num_kept_lambda": 22,
                "num_values_explored": 374,
                "num_values_kept": 82,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 374
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2238406620454,
            "num_unique_values": 1476,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.12091791703442,
                "explored_percent_lambda": 27.93468667255075,
                "explored_percent_none": 10.944395410414828,
                "kept_percent_concrete": 61.65873555404487,
                "kept_percent_lambda": 38.34126444595513,
                "num_examples": 3,
                "num_explored_concrete": 2770,
                "num_explored_lambda": 1266,
                "num_explored_none": 496,
                "num_inputs": 1,
                "num_kept_concrete": 907,
                "num_kept_lambda": 564,
                "num_values_explored": 4532,
                "num_values_kept": 1471,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51574
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17402154300362,
            "num_unique_values": 1321,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.313559322033896,
                "explored_percent_lambda": 28.008474576271187,
                "explored_percent_none": 10.677966101694915,
                "kept_percent_concrete": 59.19452887537994,
                "kept_percent_lambda": 40.80547112462006,
                "num_examples": 3,
                "num_explored_concrete": 2894,
                "num_explored_lambda": 1322,
                "num_explored_none": 504,
                "num_inputs": 1,
                "num_kept_concrete": 779,
                "num_kept_lambda": 537,
                "num_values_explored": 4720,
                "num_values_kept": 1316,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49425
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.330367106013,
            "num_unique_values": 1016,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.891632373113854,
                "explored_percent_lambda": 47.02331961591221,
                "explored_percent_none": 22.08504801097394,
                "kept_percent_concrete": 40.94955489614243,
                "kept_percent_lambda": 59.05044510385757,
                "num_examples": 3,
                "num_explored_concrete": 1126,
                "num_explored_lambda": 1714,
                "num_explored_none": 805,
                "num_inputs": 1,
                "num_kept_concrete": 414,
                "num_kept_lambda": 597,
                "num_values_explored": 3645,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41811
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4587665409781,
            "num_unique_values": 1494,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.64495559098155,
                "explored_percent_lambda": 37.71350489637896,
                "explored_percent_none": 13.64153951263949,
                "kept_percent_concrete": 53.225806451612904,
                "kept_percent_lambda": 46.774193548387096,
                "num_examples": 3,
                "num_explored_concrete": 2136,
                "num_explored_lambda": 1656,
                "num_explored_none": 599,
                "num_inputs": 2,
                "num_kept_concrete": 792,
                "num_kept_lambda": 696,
                "num_values_explored": 4391,
                "num_values_kept": 1488,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47845
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2311742559541017,
            "num_unique_values": 505,
            "solution": "Last(Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.8220640569395,
                "explored_percent_lambda": 33.89679715302491,
                "explored_percent_none": 16.281138790035588,
                "kept_percent_concrete": 59.6,
                "kept_percent_lambda": 40.4,
                "num_examples": 5,
                "num_explored_concrete": 560,
                "num_explored_lambda": 381,
                "num_explored_none": 183,
                "num_inputs": 1,
                "num_kept_concrete": 298,
                "num_kept_lambda": 202,
                "num_values_explored": 1124,
                "num_values_kept": 500,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2924
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27468590205535,
            "num_unique_values": 1312,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.64464415836775,
                "explored_percent_lambda": 45.7128977410736,
                "explored_percent_none": 15.64245810055866,
                "kept_percent_concrete": 48.04896710022953,
                "kept_percent_lambda": 51.95103289977047,
                "num_examples": 3,
                "num_explored_concrete": 1591,
                "num_explored_lambda": 1882,
                "num_explored_none": 644,
                "num_inputs": 1,
                "num_kept_concrete": 628,
                "num_kept_lambda": 679,
                "num_values_explored": 4117,
                "num_values_kept": 1307,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43356
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.48301670514047,
            "num_unique_values": 1530,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.156946826758144,
                "explored_percent_lambda": 29.4811320754717,
                "explored_percent_none": 8.361921097770155,
                "kept_percent_concrete": 55.9344262295082,
                "kept_percent_lambda": 44.0655737704918,
                "num_examples": 3,
                "num_explored_concrete": 2899,
                "num_explored_lambda": 1375,
                "num_explored_none": 390,
                "num_inputs": 1,
                "num_kept_concrete": 853,
                "num_kept_lambda": 672,
                "num_values_explored": 4664,
                "num_values_kept": 1525,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49083
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27724550594576,
            "num_unique_values": 1437,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.53990437660904,
                "explored_percent_lambda": 10.463405663847002,
                "explored_percent_none": 10.99668995954395,
                "kept_percent_concrete": 78.96575821104123,
                "kept_percent_lambda": 21.03424178895877,
                "num_examples": 5,
                "num_explored_concrete": 4271,
                "num_explored_lambda": 569,
                "num_explored_none": 598,
                "num_inputs": 2,
                "num_kept_concrete": 1130,
                "num_kept_lambda": 301,
                "num_values_explored": 5438,
                "num_values_kept": 1431,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56017
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19985907105729,
            "num_unique_values": 1390,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.69809610154125,
                "explored_percent_lambda": 27.17588395285585,
                "explored_percent_none": 12.1260199456029,
                "kept_percent_concrete": 59.46531791907515,
                "kept_percent_lambda": 40.53468208092485,
                "num_examples": 3,
                "num_explored_concrete": 2678,
                "num_explored_lambda": 1199,
                "num_explored_none": 535,
                "num_inputs": 2,
                "num_kept_concrete": 823,
                "num_kept_lambda": 561,
                "num_values_explored": 4412,
                "num_values_kept": 1384,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50540
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16917524300516,
            "num_unique_values": 1507,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.86278163645603,
                "explored_percent_lambda": 12.756225647975606,
                "explored_percent_none": 17.380992715568354,
                "kept_percent_concrete": 79.3471019320453,
                "kept_percent_lambda": 20.6528980679547,
                "num_examples": 5,
                "num_explored_concrete": 4124,
                "num_explored_lambda": 753,
                "num_explored_none": 1026,
                "num_inputs": 2,
                "num_kept_concrete": 1191,
                "num_kept_lambda": 310,
                "num_values_explored": 5903,
                "num_values_kept": 1501,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60371
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28118350286968,
            "num_unique_values": 1422,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.19047619047619,
                "explored_percent_lambda": 13.813025210084033,
                "explored_percent_none": 9.996498599439775,
                "kept_percent_concrete": 80.29661016949153,
                "kept_percent_lambda": 19.703389830508474,
                "num_examples": 5,
                "num_explored_concrete": 4352,
                "num_explored_lambda": 789,
                "num_explored_none": 571,
                "num_inputs": 2,
                "num_kept_concrete": 1137,
                "num_kept_lambda": 279,
                "num_values_explored": 5712,
                "num_values_kept": 1416,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60629
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.303016616031528,
            "num_unique_values": 939,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.850931677018636,
                "explored_percent_lambda": 18.043478260869566,
                "explored_percent_none": 18.1055900621118,
                "kept_percent_concrete": 73.84780278670954,
                "kept_percent_lambda": 26.15219721329046,
                "num_examples": 5,
                "num_explored_concrete": 2056,
                "num_explored_lambda": 581,
                "num_explored_none": 583,
                "num_inputs": 2,
                "num_kept_concrete": 689,
                "num_kept_lambda": 244,
                "num_values_explored": 3220,
                "num_values_kept": 933,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17557
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.4
}