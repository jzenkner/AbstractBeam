{
    "num_tasks": 50,
    "num_tasks_solved": 12,
    "results": [
        {
            "elapsed_time": 0.8076943790074438,
            "num_unique_values": 284,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.742802303262955,
                "explored_percent_lambda": 35.31669865642994,
                "explored_percent_none": 10.940499040307103,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 184,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 521,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16555771604180336,
            "num_unique_values": 83,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11764705882353,
                "explored_percent_lambda": 5.882352941176471,
                "explored_percent_none": 45.0,
                "kept_percent_concrete": 95.89041095890411,
                "kept_percent_lambda": 4.109589041095891,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 20,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 3,
                "num_values_explored": 340,
                "num_values_kept": 73,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 340
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 88.69392412598245,
            "num_unique_values": 517,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 37.30542136339238,
                "explored_percent_lambda": 36.12453032742888,
                "explored_percent_none": 26.570048309178745,
                "kept_percent_concrete": 51.968503937007874,
                "kept_percent_lambda": 48.031496062992126,
                "num_examples": 3,
                "num_explored_concrete": 695,
                "num_explored_lambda": 673,
                "num_explored_none": 495,
                "num_inputs": 1,
                "num_kept_concrete": 264,
                "num_kept_lambda": 244,
                "num_values_explored": 1863,
                "num_values_kept": 508,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 23332
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18749151309021,
            "num_unique_values": 677,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.65187419215855,
                "explored_percent_lambda": 35.67427832830676,
                "explored_percent_none": 16.673847479534682,
                "kept_percent_concrete": 48.952095808383234,
                "kept_percent_lambda": 51.047904191616766,
                "num_examples": 3,
                "num_explored_concrete": 1106,
                "num_explored_lambda": 828,
                "num_explored_none": 387,
                "num_inputs": 1,
                "num_kept_concrete": 327,
                "num_kept_lambda": 341,
                "num_values_explored": 2321,
                "num_values_kept": 668,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 24748
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5566270151175559,
            "num_unique_values": 312,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.92996108949416,
                "explored_percent_lambda": 23.994811932555123,
                "explored_percent_none": 2.0752269779507135,
                "kept_percent_concrete": 74.17218543046357,
                "kept_percent_lambda": 25.827814569536425,
                "num_examples": 3,
                "num_explored_concrete": 570,
                "num_explored_lambda": 185,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 78,
                "num_values_explored": 771,
                "num_values_kept": 302,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2959185668733,
            "num_unique_values": 672,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.25813864419763,
                "explored_percent_lambda": 19.724243584833395,
                "explored_percent_none": 14.017617770968977,
                "kept_percent_concrete": 72.85067873303167,
                "kept_percent_lambda": 27.149321266968325,
                "num_examples": 5,
                "num_explored_concrete": 1730,
                "num_explored_lambda": 515,
                "num_explored_none": 366,
                "num_inputs": 1,
                "num_kept_concrete": 483,
                "num_kept_lambda": 180,
                "num_values_explored": 2611,
                "num_values_kept": 663,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27767
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3825411209836602,
            "num_unique_values": 213,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 52.577319587628864,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 6.185567010309279,
                "kept_percent_concrete": 48.529411764705884,
                "kept_percent_lambda": 51.470588235294116,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 120,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 105,
                "num_values_explored": 291,
                "num_values_kept": 204,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14617181499489,
            "num_unique_values": 621,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.944154278826836,
                "explored_percent_lambda": 26.717557251908396,
                "explored_percent_none": 22.338288469264764,
                "kept_percent_concrete": 63.888888888888886,
                "kept_percent_lambda": 36.111111111111114,
                "num_examples": 5,
                "num_explored_concrete": 1268,
                "num_explored_lambda": 665,
                "num_explored_none": 556,
                "num_inputs": 1,
                "num_kept_concrete": 391,
                "num_kept_lambda": 221,
                "num_values_explored": 2489,
                "num_values_kept": 612,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27383
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1676979509648,
            "num_unique_values": 615,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.822057460611674,
                "explored_percent_lambda": 24.976830398517144,
                "explored_percent_none": 27.201112140871178,
                "kept_percent_concrete": 59.57095709570957,
                "kept_percent_lambda": 40.42904290429043,
                "num_examples": 5,
                "num_explored_concrete": 1032,
                "num_explored_lambda": 539,
                "num_explored_none": 587,
                "num_inputs": 1,
                "num_kept_concrete": 361,
                "num_kept_lambda": 245,
                "num_values_explored": 2158,
                "num_values_kept": 606,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27116
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 63.930985260987654,
            "num_unique_values": 269,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 33.021806853582554,
                "explored_percent_lambda": 52.80373831775701,
                "explored_percent_none": 14.174454828660435,
                "kept_percent_concrete": 42.69230769230769,
                "kept_percent_lambda": 57.30769230769231,
                "num_examples": 3,
                "num_explored_concrete": 212,
                "num_explored_lambda": 339,
                "num_explored_none": 91,
                "num_inputs": 1,
                "num_kept_concrete": 111,
                "num_kept_lambda": 149,
                "num_values_explored": 642,
                "num_values_kept": 260,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 16817
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85193443880416,
            "num_unique_values": 677,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.37580437580438,
                "explored_percent_lambda": 6.563706563706564,
                "explored_percent_none": 14.060489060489061,
                "kept_percent_concrete": 91.75412293853073,
                "kept_percent_lambda": 8.245877061469265,
                "num_examples": 5,
                "num_explored_concrete": 2467,
                "num_explored_lambda": 204,
                "num_explored_none": 437,
                "num_inputs": 2,
                "num_kept_concrete": 612,
                "num_kept_lambda": 55,
                "num_values_explored": 3108,
                "num_values_kept": 667,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 32256
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06943145208061,
            "num_unique_values": 866,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.85339506172839,
                "explored_percent_lambda": 28.703703703703702,
                "explored_percent_none": 6.442901234567901,
                "kept_percent_concrete": 58.41121495327103,
                "kept_percent_lambda": 41.58878504672897,
                "num_examples": 3,
                "num_explored_concrete": 1681,
                "num_explored_lambda": 744,
                "num_explored_none": 167,
                "num_inputs": 2,
                "num_kept_concrete": 500,
                "num_kept_lambda": 356,
                "num_values_explored": 2592,
                "num_values_kept": 856,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28573
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.51799909514375,
            "num_unique_values": 429,
            "solution": "If(IsEven(Access(1, x)), fn_0(1, x), Last(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.755102040816325,
                "explored_percent_lambda": 27.836734693877553,
                "explored_percent_none": 12.408163265306122,
                "kept_percent_concrete": 66.42857142857143,
                "kept_percent_lambda": 33.57142857142857,
                "num_examples": 5,
                "num_explored_concrete": 732,
                "num_explored_lambda": 341,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 279,
                "num_kept_lambda": 141,
                "num_values_explored": 1225,
                "num_values_kept": 420,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2775
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.710541942156851,
            "num_unique_values": 228,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(0, v1)))(v1))))(u1)), Take(Square(3), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 30.18867924528302,
                "explored_percent_lambda": 58.086253369272235,
                "explored_percent_none": 11.725067385444744,
                "kept_percent_concrete": 40.63926940639269,
                "kept_percent_lambda": 59.36073059360731,
                "num_examples": 3,
                "num_explored_concrete": 224,
                "num_explored_lambda": 431,
                "num_explored_none": 87,
                "num_inputs": 1,
                "num_kept_concrete": 89,
                "num_kept_lambda": 130,
                "num_values_explored": 742,
                "num_values_kept": 219,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 4932
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92227946291678,
            "num_unique_values": 1059,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.60322952710496,
                "explored_percent_lambda": 9.976931949250288,
                "explored_percent_none": 8.419838523644753,
                "kept_percent_concrete": 80.8206106870229,
                "kept_percent_lambda": 19.1793893129771,
                "num_examples": 3,
                "num_explored_concrete": 4245,
                "num_explored_lambda": 519,
                "num_explored_none": 438,
                "num_inputs": 3,
                "num_kept_concrete": 847,
                "num_kept_lambda": 201,
                "num_values_explored": 5202,
                "num_values_kept": 1048,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 33880
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73292262805626,
            "num_unique_values": 666,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.926940639269404,
                "explored_percent_lambda": 18.395303326810176,
                "explored_percent_none": 17.677756033920417,
                "kept_percent_concrete": 70.07633587786259,
                "kept_percent_lambda": 29.923664122137403,
                "num_examples": 3,
                "num_explored_concrete": 1960,
                "num_explored_lambda": 564,
                "num_explored_none": 542,
                "num_inputs": 3,
                "num_kept_concrete": 459,
                "num_kept_lambda": 196,
                "num_values_explored": 3066,
                "num_values_kept": 655,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 35229
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 68.31209146184847,
            "num_unique_values": 592,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 69.49860724233983,
                "explored_percent_lambda": 18.43082636954503,
                "explored_percent_none": 12.070566388115134,
                "kept_percent_concrete": 77.79690189328744,
                "kept_percent_lambda": 22.203098106712563,
                "num_examples": 3,
                "num_explored_concrete": 1497,
                "num_explored_lambda": 397,
                "num_explored_none": 260,
                "num_inputs": 3,
                "num_kept_concrete": 452,
                "num_kept_lambda": 129,
                "num_values_explored": 2154,
                "num_values_kept": 581,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 22207
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88174529187381,
            "num_unique_values": 729,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.595029239766085,
                "explored_percent_lambda": 29.89766081871345,
                "explored_percent_none": 17.507309941520468,
                "kept_percent_concrete": 52.43393602225313,
                "kept_percent_lambda": 47.56606397774687,
                "num_examples": 3,
                "num_explored_concrete": 1439,
                "num_explored_lambda": 818,
                "num_explored_none": 479,
                "num_inputs": 2,
                "num_kept_concrete": 377,
                "num_kept_lambda": 342,
                "num_values_explored": 2736,
                "num_values_kept": 719,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27933
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88065308216028,
            "num_unique_values": 731,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.9866220735786,
                "explored_percent_lambda": 12.74247491638796,
                "explored_percent_none": 21.270903010033443,
                "kept_percent_concrete": 78.91816920943134,
                "kept_percent_lambda": 21.081830790568656,
                "num_examples": 5,
                "num_explored_concrete": 1973,
                "num_explored_lambda": 381,
                "num_explored_none": 636,
                "num_inputs": 2,
                "num_kept_concrete": 569,
                "num_kept_lambda": 152,
                "num_values_explored": 2990,
                "num_values_kept": 721,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30999
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20967392879538,
            "num_unique_values": 708,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.174698795180724,
                "explored_percent_lambda": 23.606927710843372,
                "explored_percent_none": 20.218373493975903,
                "kept_percent_concrete": 59.16905444126075,
                "kept_percent_lambda": 40.83094555873925,
                "num_examples": 3,
                "num_explored_concrete": 1492,
                "num_explored_lambda": 627,
                "num_explored_none": 537,
                "num_inputs": 2,
                "num_kept_concrete": 413,
                "num_kept_lambda": 285,
                "num_values_explored": 2656,
                "num_values_kept": 698,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29270
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.41123789502308,
            "num_unique_values": 837,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.53475935828877,
                "explored_percent_lambda": 29.16221033868093,
                "explored_percent_none": 10.303030303030303,
                "kept_percent_concrete": 56.28019323671498,
                "kept_percent_lambda": 43.71980676328502,
                "num_examples": 3,
                "num_explored_concrete": 1698,
                "num_explored_lambda": 818,
                "num_explored_none": 289,
                "num_inputs": 1,
                "num_kept_concrete": 466,
                "num_kept_lambda": 362,
                "num_values_explored": 2805,
                "num_values_kept": 828,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28298
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2501470260322094,
            "num_unique_values": 165,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.59016393442623,
                "explored_percent_lambda": 43.442622950819676,
                "explored_percent_none": 6.967213114754099,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 121,
                "num_explored_lambda": 106,
                "num_explored_none": 17,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 91,
                "num_values_explored": 244,
                "num_values_kept": 156,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11169801093638,
            "num_unique_values": 781,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.74937965260546,
                "explored_percent_lambda": 17.29883020205601,
                "explored_percent_none": 15.951790145338533,
                "kept_percent_concrete": 82.7496757457847,
                "kept_percent_lambda": 17.250324254215304,
                "num_examples": 5,
                "num_explored_concrete": 1883,
                "num_explored_lambda": 488,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 638,
                "num_kept_lambda": 133,
                "num_values_explored": 2821,
                "num_values_kept": 771,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29904
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8804616627749,
            "num_unique_values": 781,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.15837104072398,
                "explored_percent_lambda": 29.374057315233784,
                "explored_percent_none": 5.467571644042232,
                "kept_percent_concrete": 59.40337224383917,
                "kept_percent_lambda": 40.59662775616083,
                "num_examples": 3,
                "num_explored_concrete": 1728,
                "num_explored_lambda": 779,
                "num_explored_none": 145,
                "num_inputs": 2,
                "num_kept_concrete": 458,
                "num_kept_lambda": 313,
                "num_values_explored": 2652,
                "num_values_kept": 771,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28201
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13258417905308,
            "num_unique_values": 779,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.23045822102426,
                "explored_percent_lambda": 19.54177897574124,
                "explored_percent_none": 18.2277628032345,
                "kept_percent_concrete": 65.88541666666667,
                "kept_percent_lambda": 34.114583333333336,
                "num_examples": 3,
                "num_explored_concrete": 1847,
                "num_explored_lambda": 580,
                "num_explored_none": 541,
                "num_inputs": 3,
                "num_kept_concrete": 506,
                "num_kept_lambda": 262,
                "num_values_explored": 2968,
                "num_values_kept": 768,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29933
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18652969482355,
            "num_unique_values": 722,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.32993073277433,
                "explored_percent_lambda": 19.10317170980678,
                "explored_percent_none": 15.566897557418885,
                "kept_percent_concrete": 71.38849929873773,
                "kept_percent_lambda": 28.611500701262273,
                "num_examples": 5,
                "num_explored_concrete": 1792,
                "num_explored_lambda": 524,
                "num_explored_none": 427,
                "num_inputs": 1,
                "num_kept_concrete": 509,
                "num_kept_lambda": 204,
                "num_values_explored": 2743,
                "num_values_kept": 713,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28630
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17500506807119,
            "num_unique_values": 828,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.6609907120743,
                "explored_percent_lambda": 27.39938080495356,
                "explored_percent_none": 8.939628482972136,
                "kept_percent_concrete": 56.043956043956044,
                "kept_percent_lambda": 43.956043956043956,
                "num_examples": 3,
                "num_explored_concrete": 1645,
                "num_explored_lambda": 708,
                "num_explored_none": 231,
                "num_inputs": 1,
                "num_kept_concrete": 459,
                "num_kept_lambda": 360,
                "num_values_explored": 2584,
                "num_values_kept": 819,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27970
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15970360301435,
            "num_unique_values": 717,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.343122102009275,
                "explored_percent_lambda": 28.323029366306027,
                "explored_percent_none": 22.333848531684698,
                "kept_percent_concrete": 56.43564356435643,
                "kept_percent_lambda": 43.56435643564357,
                "num_examples": 3,
                "num_explored_concrete": 1277,
                "num_explored_lambda": 733,
                "num_explored_none": 578,
                "num_inputs": 2,
                "num_kept_concrete": 399,
                "num_kept_lambda": 308,
                "num_values_explored": 2588,
                "num_values_kept": 707,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27330
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24606010806747,
            "num_unique_values": 641,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.56301209520094,
                "explored_percent_lambda": 32.42294186500195,
                "explored_percent_none": 28.014046039797112,
                "kept_percent_concrete": 48.25949367088607,
                "kept_percent_lambda": 51.74050632911393,
                "num_examples": 3,
                "num_explored_concrete": 1014,
                "num_explored_lambda": 831,
                "num_explored_none": 718,
                "num_inputs": 1,
                "num_kept_concrete": 305,
                "num_kept_lambda": 327,
                "num_values_explored": 2563,
                "num_values_kept": 632,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26018
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.309585029026493,
            "num_unique_values": 573,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 2)))(u2)), fn_2(0, r), Sort(c))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 63.06937631394534,
                "explored_percent_lambda": 32.58584442887176,
                "explored_percent_none": 4.344779257182902,
                "kept_percent_concrete": 60.746003552397866,
                "kept_percent_lambda": 39.253996447602134,
                "num_examples": 3,
                "num_explored_concrete": 900,
                "num_explored_lambda": 465,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 342,
                "num_kept_lambda": 221,
                "num_values_explored": 1427,
                "num_values_kept": 563,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 8849
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9752674610354,
            "num_unique_values": 846,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.84551217884551,
                "explored_percent_lambda": 11.778445111778446,
                "explored_percent_none": 9.376042709376042,
                "kept_percent_concrete": 82.17703349282297,
                "kept_percent_lambda": 17.822966507177032,
                "num_examples": 5,
                "num_explored_concrete": 2363,
                "num_explored_lambda": 353,
                "num_explored_none": 281,
                "num_inputs": 2,
                "num_kept_concrete": 687,
                "num_kept_lambda": 149,
                "num_values_explored": 2997,
                "num_values_kept": 836,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31083
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30505380500108,
            "num_unique_values": 749,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.26499801350815,
                "explored_percent_lambda": 29.996027016289233,
                "explored_percent_none": 20.738974970202623,
                "kept_percent_concrete": 48.648648648648646,
                "kept_percent_lambda": 51.351351351351354,
                "num_examples": 3,
                "num_explored_concrete": 1240,
                "num_explored_lambda": 755,
                "num_explored_none": 522,
                "num_inputs": 1,
                "num_kept_concrete": 360,
                "num_kept_lambda": 380,
                "num_values_explored": 2517,
                "num_values_kept": 740,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27084
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00180797209032,
            "num_unique_values": 758,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.8216704288939,
                "explored_percent_lambda": 33.03235515425132,
                "explored_percent_none": 14.145974416854777,
                "kept_percent_concrete": 56.55080213903744,
                "kept_percent_lambda": 43.44919786096256,
                "num_examples": 3,
                "num_explored_concrete": 1404,
                "num_explored_lambda": 878,
                "num_explored_none": 376,
                "num_inputs": 2,
                "num_kept_concrete": 423,
                "num_kept_lambda": 325,
                "num_values_explored": 2658,
                "num_values_kept": 748,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28655
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99090030812658,
            "num_unique_values": 947,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.96713454296474,
                "explored_percent_lambda": 13.077713111947963,
                "explored_percent_none": 10.9551523450873,
                "kept_percent_concrete": 83.35112059765208,
                "kept_percent_lambda": 16.64887940234792,
                "num_examples": 5,
                "num_explored_concrete": 2219,
                "num_explored_lambda": 382,
                "num_explored_none": 320,
                "num_inputs": 2,
                "num_kept_concrete": 781,
                "num_kept_lambda": 156,
                "num_values_explored": 2921,
                "num_values_kept": 937,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30805
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.61768287001178,
            "num_unique_values": 243,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 33.28434974283615,
                "explored_percent_lambda": 15.319617927994122,
                "explored_percent_none": 51.39603232916973,
                "kept_percent_concrete": 65.8119658119658,
                "kept_percent_lambda": 34.18803418803419,
                "num_examples": 5,
                "num_explored_concrete": 906,
                "num_explored_lambda": 417,
                "num_explored_none": 1399,
                "num_inputs": 1,
                "num_kept_concrete": 154,
                "num_kept_lambda": 80,
                "num_values_explored": 2722,
                "num_values_kept": 234,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28605
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19156047701835632,
            "num_unique_values": 185,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 87.54448398576513,
                "explored_percent_lambda": 3.9145907473309607,
                "explored_percent_none": 8.540925266903914,
                "kept_percent_concrete": 96.0,
                "kept_percent_lambda": 4.0,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 11,
                "num_explored_none": 24,
                "num_inputs": 2,
                "num_kept_concrete": 168,
                "num_kept_lambda": 7,
                "num_values_explored": 281,
                "num_values_kept": 175,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90457276394591,
            "num_unique_values": 697,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.82082324455206,
                "explored_percent_lambda": 29.943502824858758,
                "explored_percent_none": 22.235673930589186,
                "kept_percent_concrete": 54.36046511627907,
                "kept_percent_lambda": 45.63953488372093,
                "num_examples": 3,
                "num_explored_concrete": 1185,
                "num_explored_lambda": 742,
                "num_explored_none": 551,
                "num_inputs": 1,
                "num_kept_concrete": 374,
                "num_kept_lambda": 314,
                "num_values_explored": 2478,
                "num_values_kept": 688,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25889
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.54758294299245,
            "num_unique_values": 227,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.106951871657756,
                "explored_percent_lambda": 5.599245045611828,
                "explored_percent_none": 54.29380308273042,
                "kept_percent_concrete": 88.94009216589862,
                "kept_percent_lambda": 11.059907834101383,
                "num_examples": 5,
                "num_explored_concrete": 1275,
                "num_explored_lambda": 178,
                "num_explored_none": 1726,
                "num_inputs": 2,
                "num_kept_concrete": 193,
                "num_kept_lambda": 24,
                "num_values_explored": 3179,
                "num_values_kept": 217,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 33153
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9698377060704,
            "num_unique_values": 631,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.80268350434096,
                "explored_percent_lambda": 27.387529597474348,
                "explored_percent_none": 22.809786898184687,
                "kept_percent_concrete": 59.80707395498392,
                "kept_percent_lambda": 40.19292604501608,
                "num_examples": 3,
                "num_explored_concrete": 1262,
                "num_explored_lambda": 694,
                "num_explored_none": 578,
                "num_inputs": 1,
                "num_kept_concrete": 372,
                "num_kept_lambda": 250,
                "num_values_explored": 2534,
                "num_values_kept": 622,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26336
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28017067513429,
            "num_unique_values": 834,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.17120622568093,
                "explored_percent_lambda": 37.782101167315176,
                "explored_percent_none": 4.046692607003891,
                "kept_percent_concrete": 54.06060606060606,
                "kept_percent_lambda": 45.93939393939394,
                "num_examples": 3,
                "num_explored_concrete": 1495,
                "num_explored_lambda": 971,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 446,
                "num_kept_lambda": 379,
                "num_values_explored": 2570,
                "num_values_kept": 825,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28046
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93043592316099,
            "num_unique_values": 746,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.11494252873563,
                "explored_percent_lambda": 32.60536398467433,
                "explored_percent_none": 7.2796934865900385,
                "kept_percent_concrete": 53.05291723202171,
                "kept_percent_lambda": 46.94708276797829,
                "num_examples": 3,
                "num_explored_concrete": 1569,
                "num_explored_lambda": 851,
                "num_explored_none": 190,
                "num_inputs": 1,
                "num_kept_concrete": 391,
                "num_kept_lambda": 346,
                "num_values_explored": 2610,
                "num_values_kept": 737,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27993
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92805542284623,
            "num_unique_values": 821,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.90798376184033,
                "explored_percent_lambda": 24.72936400541272,
                "explored_percent_none": 13.362652232746955,
                "kept_percent_concrete": 63.00863131935882,
                "kept_percent_lambda": 36.99136868064118,
                "num_examples": 3,
                "num_explored_concrete": 1830,
                "num_explored_lambda": 731,
                "num_explored_none": 395,
                "num_inputs": 2,
                "num_kept_concrete": 511,
                "num_kept_lambda": 300,
                "num_values_explored": 2956,
                "num_values_kept": 811,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30524
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23970876890235,
            "num_unique_values": 640,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.765973826020016,
                "explored_percent_lambda": 21.401077752117015,
                "explored_percent_none": 32.83294842186297,
                "kept_percent_concrete": 72.74167987321711,
                "kept_percent_lambda": 27.258320126782884,
                "num_examples": 5,
                "num_explored_concrete": 1189,
                "num_explored_lambda": 556,
                "num_explored_none": 853,
                "num_inputs": 1,
                "num_kept_concrete": 459,
                "num_kept_lambda": 172,
                "num_values_explored": 2598,
                "num_values_kept": 631,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28929
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.57500991108827,
            "num_unique_values": 677,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.32955923978973,
                "explored_percent_lambda": 35.058633238980995,
                "explored_percent_none": 19.611807521229277,
                "kept_percent_concrete": 49.40119760479042,
                "kept_percent_lambda": 50.59880239520958,
                "num_examples": 3,
                "num_explored_concrete": 1121,
                "num_explored_lambda": 867,
                "num_explored_none": 485,
                "num_inputs": 1,
                "num_kept_concrete": 330,
                "num_kept_lambda": 338,
                "num_values_explored": 2473,
                "num_values_kept": 668,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27539
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15286322007887,
            "num_unique_values": 692,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.773497688751924,
                "explored_percent_lambda": 29.42989214175655,
                "explored_percent_none": 17.796610169491526,
                "kept_percent_concrete": 55.92972181551976,
                "kept_percent_lambda": 44.07027818448024,
                "num_examples": 3,
                "num_explored_concrete": 1370,
                "num_explored_lambda": 764,
                "num_explored_none": 462,
                "num_inputs": 1,
                "num_kept_concrete": 382,
                "num_kept_lambda": 301,
                "num_values_explored": 2596,
                "num_values_kept": 683,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27417
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95536695583723,
            "num_unique_values": 740,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.1831955922865,
                "explored_percent_lambda": 14.049586776859504,
                "explored_percent_none": 18.767217630853995,
                "kept_percent_concrete": 78.21917808219177,
                "kept_percent_lambda": 21.78082191780822,
                "num_examples": 5,
                "num_explored_concrete": 1951,
                "num_explored_lambda": 408,
                "num_explored_none": 545,
                "num_inputs": 2,
                "num_kept_concrete": 571,
                "num_kept_lambda": 159,
                "num_values_explored": 2904,
                "num_values_kept": 730,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 34796
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78687818790786,
            "num_unique_values": 823,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.68683142751752,
                "explored_percent_lambda": 25.599409811877536,
                "explored_percent_none": 15.713758760604943,
                "kept_percent_concrete": 59.65559655596556,
                "kept_percent_lambda": 40.34440344403444,
                "num_examples": 3,
                "num_explored_concrete": 1591,
                "num_explored_lambda": 694,
                "num_explored_none": 426,
                "num_inputs": 2,
                "num_kept_concrete": 485,
                "num_kept_lambda": 328,
                "num_values_explored": 2711,
                "num_values_kept": 813,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30931
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9519425088074,
            "num_unique_values": 658,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.31641348647647,
                "explored_percent_lambda": 17.339755464987032,
                "explored_percent_none": 28.343831048536494,
                "kept_percent_concrete": 79.78395061728395,
                "kept_percent_lambda": 20.21604938271605,
                "num_examples": 5,
                "num_explored_concrete": 1466,
                "num_explored_lambda": 468,
                "num_explored_none": 765,
                "num_inputs": 2,
                "num_kept_concrete": 517,
                "num_kept_lambda": 131,
                "num_values_explored": 2699,
                "num_values_kept": 648,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28607
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91028913506307,
            "num_unique_values": 712,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.5828729281768,
                "explored_percent_lambda": 14.537292817679559,
                "explored_percent_none": 12.879834254143647,
                "kept_percent_concrete": 80.76923076923077,
                "kept_percent_lambda": 19.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 2102,
                "num_explored_lambda": 421,
                "num_explored_none": 373,
                "num_inputs": 2,
                "num_kept_concrete": 567,
                "num_kept_lambda": 135,
                "num_values_explored": 2896,
                "num_values_kept": 702,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31038
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86193186999299,
            "num_unique_values": 620,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.55127367733508,
                "explored_percent_lambda": 8.817766165904638,
                "explored_percent_none": 14.630960156760288,
                "kept_percent_concrete": 90.65573770491804,
                "kept_percent_lambda": 9.344262295081966,
                "num_examples": 5,
                "num_explored_concrete": 2344,
                "num_explored_lambda": 270,
                "num_explored_none": 448,
                "num_inputs": 2,
                "num_kept_concrete": 553,
                "num_kept_lambda": 57,
                "num_values_explored": 3062,
                "num_values_kept": 610,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31944
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.24
}