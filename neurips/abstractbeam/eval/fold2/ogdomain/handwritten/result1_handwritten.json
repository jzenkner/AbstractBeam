{
    "num_tasks": 50,
    "num_tasks_solved": 19,
    "results": [
        {
            "elapsed_time": 0.693152257008478,
            "num_unique_values": 284,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.742802303262955,
                "explored_percent_lambda": 35.31669865642994,
                "explored_percent_none": 10.940499040307103,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 184,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 521,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.09753597690723836,
            "num_unique_values": 83,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11764705882353,
                "explored_percent_lambda": 5.882352941176471,
                "explored_percent_none": 45.0,
                "kept_percent_concrete": 95.89041095890411,
                "kept_percent_lambda": 4.109589041095891,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 20,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 3,
                "num_values_explored": 340,
                "num_values_kept": 73,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 340
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.80105595709756,
            "num_unique_values": 512,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 36.890574214517876,
                "explored_percent_lambda": 33.58613217768147,
                "explored_percent_none": 29.52329360780065,
                "kept_percent_concrete": 55.864811133200796,
                "kept_percent_lambda": 44.135188866799204,
                "num_examples": 3,
                "num_explored_concrete": 681,
                "num_explored_lambda": 620,
                "num_explored_none": 545,
                "num_inputs": 1,
                "num_kept_concrete": 281,
                "num_kept_lambda": 222,
                "num_values_explored": 1846,
                "num_values_kept": 503,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15892
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89462817111053,
            "num_unique_values": 1242,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.41415961088092,
                "explored_percent_lambda": 33.11115114393803,
                "explored_percent_none": 15.474689245181048,
                "kept_percent_concrete": 48.661800486618006,
                "kept_percent_lambda": 51.338199513381994,
                "num_examples": 3,
                "num_explored_concrete": 2854,
                "num_explored_lambda": 1838,
                "num_explored_none": 859,
                "num_inputs": 1,
                "num_kept_concrete": 600,
                "num_kept_lambda": 633,
                "num_values_explored": 5551,
                "num_values_kept": 1233,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56862
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3533910249825567,
            "num_unique_values": 312,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.92996108949416,
                "explored_percent_lambda": 23.994811932555123,
                "explored_percent_none": 2.0752269779507135,
                "kept_percent_concrete": 74.17218543046357,
                "kept_percent_lambda": 25.827814569536425,
                "num_examples": 3,
                "num_explored_concrete": 570,
                "num_explored_lambda": 185,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 78,
                "num_values_explored": 771,
                "num_values_kept": 302,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83949704491533,
            "num_unique_values": 1216,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.2437518376948,
                "explored_percent_lambda": 12.937371361364304,
                "explored_percent_none": 15.818876800940899,
                "kept_percent_concrete": 74.8135874067937,
                "kept_percent_lambda": 25.186412593206295,
                "num_examples": 5,
                "num_explored_concrete": 4846,
                "num_explored_lambda": 880,
                "num_explored_none": 1076,
                "num_inputs": 1,
                "num_kept_concrete": 903,
                "num_kept_lambda": 304,
                "num_values_explored": 6802,
                "num_values_kept": 1207,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70858
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3150622209068388,
            "num_unique_values": 213,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 52.577319587628864,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 6.185567010309279,
                "kept_percent_concrete": 48.529411764705884,
                "kept_percent_lambda": 51.470588235294116,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 120,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 105,
                "num_values_explored": 291,
                "num_values_kept": 204,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8471111159306,
            "num_unique_values": 1264,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.15953425071828,
                "explored_percent_lambda": 16.633902918493877,
                "explored_percent_none": 18.206562830787842,
                "kept_percent_concrete": 71.07569721115537,
                "kept_percent_lambda": 28.92430278884462,
                "num_examples": 5,
                "num_explored_concrete": 4309,
                "num_explored_lambda": 1100,
                "num_explored_none": 1204,
                "num_inputs": 1,
                "num_kept_concrete": 892,
                "num_kept_lambda": 363,
                "num_values_explored": 6613,
                "num_values_kept": 1255,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66220
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 70.39532582904212,
            "num_unique_values": 1220,
            "solution": "Max(Minimum(fn_2(Access(IntDivide(Last(fn_1(x)), Last(x)), x), x)), Last(fn_1(Sort(fn_1(Reverse(Take(4, x)))))))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 67.07948243992607,
                "explored_percent_lambda": 18.798521256931608,
                "explored_percent_none": 14.121996303142328,
                "kept_percent_concrete": 69.61189099917424,
                "kept_percent_lambda": 30.388109000825764,
                "num_examples": 5,
                "num_explored_concrete": 3629,
                "num_explored_lambda": 1017,
                "num_explored_none": 764,
                "num_inputs": 1,
                "num_kept_concrete": 843,
                "num_kept_lambda": 368,
                "num_values_explored": 5410,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 45749
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.167195471003652,
            "num_unique_values": 568,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.43454345434544,
                "explored_percent_lambda": 39.21892189218922,
                "explored_percent_none": 15.346534653465346,
                "kept_percent_concrete": 45.61717352415027,
                "kept_percent_lambda": 54.38282647584973,
                "num_examples": 3,
                "num_explored_concrete": 826,
                "num_explored_lambda": 713,
                "num_explored_none": 279,
                "num_inputs": 1,
                "num_kept_concrete": 255,
                "num_kept_lambda": 304,
                "num_values_explored": 1818,
                "num_values_kept": 559,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8724
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69885761407204,
            "num_unique_values": 1367,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.2031306880233,
                "explored_percent_lambda": 3.2034947215143794,
                "explored_percent_none": 10.593374590462323,
                "kept_percent_concrete": 94.03095062638172,
                "kept_percent_lambda": 5.969049373618276,
                "num_examples": 5,
                "num_explored_concrete": 7104,
                "num_explored_lambda": 264,
                "num_explored_none": 873,
                "num_inputs": 2,
                "num_kept_concrete": 1276,
                "num_kept_lambda": 81,
                "num_values_explored": 8241,
                "num_values_kept": 1357,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 81155
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94387164292857,
            "num_unique_values": 1612,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.2,
                "explored_percent_lambda": 26.56923076923077,
                "explored_percent_none": 7.230769230769231,
                "kept_percent_concrete": 55.36828963795256,
                "kept_percent_lambda": 44.63171036204744,
                "num_examples": 3,
                "num_explored_concrete": 4303,
                "num_explored_lambda": 1727,
                "num_explored_none": 470,
                "num_inputs": 2,
                "num_kept_concrete": 887,
                "num_kept_lambda": 715,
                "num_values_explored": 6500,
                "num_values_kept": 1602,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67394
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4039490481372923,
            "num_unique_values": 426,
            "solution": "If(IsOdd(Minimum(fn_1(x))), fn_0(-1, x), fn_0(3, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.224489795918366,
                "explored_percent_lambda": 30.285714285714285,
                "explored_percent_none": 12.489795918367347,
                "kept_percent_concrete": 64.98800959232614,
                "kept_percent_lambda": 35.01199040767386,
                "num_examples": 5,
                "num_explored_concrete": 701,
                "num_explored_lambda": 371,
                "num_explored_none": 153,
                "num_inputs": 1,
                "num_kept_concrete": 271,
                "num_kept_lambda": 146,
                "num_values_explored": 1225,
                "num_values_kept": 417,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2775
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.364619632950053,
            "num_unique_values": 847,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 61.35728542914172,
                "explored_percent_lambda": 29.42115768463074,
                "explored_percent_none": 9.221556886227544,
                "kept_percent_concrete": 54.5346062052506,
                "kept_percent_lambda": 45.4653937947494,
                "num_examples": 3,
                "num_explored_concrete": 1537,
                "num_explored_lambda": 737,
                "num_explored_none": 231,
                "num_inputs": 1,
                "num_kept_concrete": 457,
                "num_kept_lambda": 381,
                "num_values_explored": 2505,
                "num_values_kept": 838,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10471
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77987985196523,
            "num_unique_values": 1376,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.3791594856158,
                "explored_percent_lambda": 11.5736444385523,
                "explored_percent_none": 8.047196075831897,
                "kept_percent_concrete": 78.53479853479854,
                "kept_percent_lambda": 21.465201465201464,
                "num_examples": 3,
                "num_explored_concrete": 6063,
                "num_explored_lambda": 873,
                "num_explored_none": 607,
                "num_inputs": 3,
                "num_kept_concrete": 1072,
                "num_kept_lambda": 293,
                "num_values_explored": 7543,
                "num_values_kept": 1365,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79247
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76638411614113,
            "num_unique_values": 1230,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.14587426326129,
                "explored_percent_lambda": 10.363457760314342,
                "explored_percent_none": 16.490667976424362,
                "kept_percent_concrete": 77.68662838392125,
                "kept_percent_lambda": 22.313371616078754,
                "num_examples": 3,
                "num_explored_concrete": 5957,
                "num_explored_lambda": 844,
                "num_explored_none": 1343,
                "num_inputs": 3,
                "num_kept_concrete": 947,
                "num_kept_lambda": 272,
                "num_values_explored": 8144,
                "num_values_kept": 1219,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82601
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.99760613683611,
            "num_unique_values": 1382,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 82.10684110111747,
                "explored_percent_lambda": 11.706186971926956,
                "explored_percent_none": 6.186971926955573,
                "kept_percent_concrete": 77.6075857038658,
                "kept_percent_lambda": 22.39241429613421,
                "num_examples": 3,
                "num_explored_concrete": 6025,
                "num_explored_lambda": 859,
                "num_explored_none": 454,
                "num_inputs": 3,
                "num_kept_concrete": 1064,
                "num_kept_lambda": 307,
                "num_values_explored": 7338,
                "num_values_kept": 1371,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 40130
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72418864490464,
            "num_unique_values": 1272,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.792682926829265,
                "explored_percent_lambda": 25.274390243902438,
                "explored_percent_none": 18.932926829268293,
                "kept_percent_concrete": 55.62599049128368,
                "kept_percent_lambda": 44.37400950871632,
                "num_examples": 3,
                "num_explored_concrete": 3660,
                "num_explored_lambda": 1658,
                "num_explored_none": 1242,
                "num_inputs": 2,
                "num_kept_concrete": 702,
                "num_kept_lambda": 560,
                "num_values_explored": 6560,
                "num_values_kept": 1262,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68096
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.65635864017531,
            "num_unique_values": 1453,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.49397590361446,
                "explored_percent_lambda": 6.048192771084337,
                "explored_percent_none": 20.457831325301203,
                "kept_percent_concrete": 87.17948717948718,
                "kept_percent_lambda": 12.820512820512821,
                "num_examples": 5,
                "num_explored_concrete": 6100,
                "num_explored_lambda": 502,
                "num_explored_none": 1698,
                "num_inputs": 2,
                "num_kept_concrete": 1258,
                "num_kept_lambda": 185,
                "num_values_explored": 8300,
                "num_values_kept": 1443,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 83861
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88900592387654,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.09550561797753,
                "explored_percent_lambda": 15.084269662921349,
                "explored_percent_none": 23.820224719101123,
                "kept_percent_concrete": 67.53926701570681,
                "kept_percent_lambda": 32.460732984293195,
                "num_examples": 3,
                "num_explored_concrete": 4350,
                "num_explored_lambda": 1074,
                "num_explored_none": 1696,
                "num_inputs": 2,
                "num_kept_concrete": 903,
                "num_kept_lambda": 434,
                "num_values_explored": 7120,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72198
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97420172696002,
            "num_unique_values": 1470,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.18347001125583,
                "explored_percent_lambda": 26.901431098247308,
                "explored_percent_none": 11.915098890496864,
                "kept_percent_concrete": 55.167693360711844,
                "kept_percent_lambda": 44.832306639288156,
                "num_examples": 3,
                "num_explored_concrete": 3805,
                "num_explored_lambda": 1673,
                "num_explored_none": 741,
                "num_inputs": 1,
                "num_kept_concrete": 806,
                "num_kept_lambda": 655,
                "num_values_explored": 6219,
                "num_values_kept": 1461,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64132
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18483855086378753,
            "num_unique_values": 165,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.59016393442623,
                "explored_percent_lambda": 43.442622950819676,
                "explored_percent_none": 6.967213114754099,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 121,
                "num_explored_lambda": 106,
                "num_explored_none": 17,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 91,
                "num_values_explored": 244,
                "num_values_kept": 156,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 79.35604723892175,
            "num_unique_values": 1449,
            "solution": "Max(Max(Add(3, IntDivide(Maximum(y), 4)), Count((lambda u1: IsEven(Minimum(x))), Reverse(fn_1(y)))), Min(4, Maximum(x)))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 74.80024585125999,
                "explored_percent_lambda": 9.035033804548249,
                "explored_percent_none": 16.164720344191764,
                "kept_percent_concrete": 88.39471855455177,
                "kept_percent_lambda": 11.605281445448227,
                "num_examples": 5,
                "num_explored_concrete": 4868,
                "num_explored_lambda": 588,
                "num_explored_none": 1052,
                "num_inputs": 2,
                "num_kept_concrete": 1272,
                "num_kept_lambda": 167,
                "num_values_explored": 6508,
                "num_values_kept": 1439,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 62743
            },
            "success": true,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81184929399751,
            "num_unique_values": 1593,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.17088512805152,
                "explored_percent_lambda": 27.85682192601468,
                "explored_percent_none": 4.972292945933803,
                "kept_percent_concrete": 57.73847125710676,
                "kept_percent_lambda": 42.26152874289324,
                "num_examples": 3,
                "num_explored_concrete": 4485,
                "num_explored_lambda": 1860,
                "num_explored_none": 332,
                "num_inputs": 2,
                "num_kept_concrete": 914,
                "num_kept_lambda": 669,
                "num_values_explored": 6677,
                "num_values_kept": 1583,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65991
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82763690198772,
            "num_unique_values": 1494,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.33117330759686,
                "explored_percent_lambda": 15.386736522818143,
                "explored_percent_none": 18.282090169585,
                "kept_percent_concrete": 68.57720836142954,
                "kept_percent_lambda": 31.422791638570466,
                "num_examples": 3,
                "num_explored_concrete": 4811,
                "num_explored_lambda": 1116,
                "num_explored_none": 1326,
                "num_inputs": 3,
                "num_kept_concrete": 1017,
                "num_kept_lambda": 466,
                "num_values_explored": 7253,
                "num_values_kept": 1483,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75346
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.557488260092214,
            "num_unique_values": 1450,
            "solution": "Max(Max(Max(3, Min(4, Head(x))), Max(1, Sum(fn_1(fn_2(2, x))))), Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 74.6639231824417,
                "explored_percent_lambda": 10.576131687242798,
                "explored_percent_none": 14.7599451303155,
                "kept_percent_concrete": 81.19361554476059,
                "kept_percent_lambda": 18.806384455239417,
                "num_examples": 5,
                "num_explored_concrete": 5443,
                "num_explored_lambda": 771,
                "num_explored_none": 1076,
                "num_inputs": 1,
                "num_kept_concrete": 1170,
                "num_kept_lambda": 271,
                "num_values_explored": 7290,
                "num_values_kept": 1441,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 16483
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99351381603628,
            "num_unique_values": 1382,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.888746393074705,
                "explored_percent_lambda": 22.170567489579994,
                "explored_percent_none": 14.940686117345303,
                "kept_percent_concrete": 55.1347414420976,
                "kept_percent_lambda": 44.8652585579024,
                "num_examples": 3,
                "num_explored_concrete": 3923,
                "num_explored_lambda": 1383,
                "num_explored_none": 932,
                "num_inputs": 1,
                "num_kept_concrete": 757,
                "num_kept_lambda": 616,
                "num_values_explored": 6238,
                "num_values_kept": 1373,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64073
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86779410787858,
            "num_unique_values": 1341,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.48418053681212,
                "explored_percent_lambda": 21.15759484180537,
                "explored_percent_none": 19.358224621382515,
                "kept_percent_concrete": 62.88504883546206,
                "kept_percent_lambda": 37.11495116453794,
                "num_examples": 3,
                "num_explored_concrete": 3967,
                "num_explored_lambda": 1411,
                "num_explored_none": 1291,
                "num_inputs": 2,
                "num_kept_concrete": 837,
                "num_kept_lambda": 494,
                "num_values_explored": 6669,
                "num_values_kept": 1331,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66566
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.986929849023,
            "num_unique_values": 789,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Subtract(v1, -1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 45.745491490982985,
                "explored_percent_lambda": 26.898653797307595,
                "explored_percent_none": 27.355854711709423,
                "kept_percent_concrete": 48.07692307692308,
                "kept_percent_lambda": 51.92307692307692,
                "num_examples": 3,
                "num_explored_concrete": 1801,
                "num_explored_lambda": 1059,
                "num_explored_none": 1077,
                "num_inputs": 1,
                "num_kept_concrete": 375,
                "num_kept_lambda": 405,
                "num_values_explored": 3937,
                "num_values_kept": 780,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 18173
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.1390019368846,
            "num_unique_values": 758,
            "solution": "Take(fn_0(Sum(r), ZipWith((lambda u1, u2: ((lambda v1: Subtract(Sum(r), v1)))(u1)), fn_2(0, r), fn_2(0, r))), fn_1(Sort(c)))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 62.9867351305092,
                "explored_percent_lambda": 31.151048352588788,
                "explored_percent_none": 5.862216516902011,
                "kept_percent_concrete": 55.88235294117647,
                "kept_percent_lambda": 44.11764705882353,
                "num_examples": 3,
                "num_explored_concrete": 1472,
                "num_explored_lambda": 728,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 418,
                "num_kept_lambda": 330,
                "num_values_explored": 2337,
                "num_values_kept": 748,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 30455
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7269937118981,
            "num_unique_values": 1723,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.24250924391177,
                "explored_percent_lambda": 6.75761825831952,
                "explored_percent_none": 6.999872497768711,
                "kept_percent_concrete": 87.974314068885,
                "kept_percent_lambda": 12.025685931115003,
                "num_examples": 5,
                "num_explored_concrete": 6764,
                "num_explored_lambda": 530,
                "num_explored_none": 549,
                "num_inputs": 2,
                "num_kept_concrete": 1507,
                "num_kept_lambda": 206,
                "num_values_explored": 7843,
                "num_values_kept": 1713,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80281
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95025606406853,
            "num_unique_values": 1254,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 44.554794520547944,
                "explored_percent_lambda": 36.215753424657535,
                "explored_percent_none": 19.22945205479452,
                "kept_percent_concrete": 48.5140562248996,
                "kept_percent_lambda": 51.4859437751004,
                "num_examples": 3,
                "num_explored_concrete": 2602,
                "num_explored_lambda": 2115,
                "num_explored_none": 1123,
                "num_inputs": 1,
                "num_kept_concrete": 604,
                "num_kept_lambda": 641,
                "num_values_explored": 5840,
                "num_values_kept": 1245,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64783
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75415077502839,
            "num_unique_values": 1225,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.347133757961785,
                "explored_percent_lambda": 28.598726114649683,
                "explored_percent_none": 12.054140127388536,
                "kept_percent_concrete": 54.32098765432099,
                "kept_percent_lambda": 45.67901234567901,
                "num_examples": 3,
                "num_explored_concrete": 3727,
                "num_explored_lambda": 1796,
                "num_explored_none": 757,
                "num_inputs": 2,
                "num_kept_concrete": 660,
                "num_kept_lambda": 555,
                "num_values_explored": 6280,
                "num_values_kept": 1215,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65117
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 48.837925605941564,
            "num_unique_values": 1454,
            "solution": "Min(Maximum(Drop(Access(2, i), fn_1(x))), Maximum(Drop(4, x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 82.96330558125193,
                "explored_percent_lambda": 7.724329324699353,
                "explored_percent_none": 9.31236509404872,
                "kept_percent_concrete": 87.46537396121883,
                "kept_percent_lambda": 12.534626038781163,
                "num_examples": 5,
                "num_explored_concrete": 5381,
                "num_explored_lambda": 501,
                "num_explored_none": 604,
                "num_inputs": 2,
                "num_kept_concrete": 1263,
                "num_kept_lambda": 181,
                "num_values_explored": 6486,
                "num_values_kept": 1444,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 40145
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.45107023697346,
            "num_unique_values": 421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 32.04419889502763,
                "explored_percent_lambda": 12.771424900424002,
                "explored_percent_none": 55.18437620454837,
                "kept_percent_concrete": 80.09708737864078,
                "kept_percent_lambda": 19.902912621359224,
                "num_examples": 5,
                "num_explored_concrete": 2494,
                "num_explored_lambda": 994,
                "num_explored_none": 4295,
                "num_inputs": 1,
                "num_kept_concrete": 330,
                "num_kept_lambda": 82,
                "num_values_explored": 7783,
                "num_values_kept": 412,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75021
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.12858427595347166,
            "num_unique_values": 185,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 87.54448398576513,
                "explored_percent_lambda": 3.9145907473309607,
                "explored_percent_none": 8.540925266903914,
                "kept_percent_concrete": 96.0,
                "kept_percent_lambda": 4.0,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 11,
                "num_explored_none": 24,
                "num_inputs": 2,
                "num_kept_concrete": 168,
                "num_kept_lambda": 7,
                "num_values_explored": 281,
                "num_values_kept": 175,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.790811917046085,
            "num_unique_values": 812,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(((lambda v1: Add(2, v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 48.86759581881533,
                "explored_percent_lambda": 27.177700348432055,
                "explored_percent_none": 23.954703832752614,
                "kept_percent_concrete": 56.413449564134496,
                "kept_percent_lambda": 43.586550435865504,
                "num_examples": 3,
                "num_explored_concrete": 1683,
                "num_explored_lambda": 936,
                "num_explored_none": 825,
                "num_inputs": 1,
                "num_kept_concrete": 453,
                "num_kept_lambda": 350,
                "num_values_explored": 3444,
                "num_values_kept": 803,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 24492
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.33229081216268,
            "num_unique_values": 397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 32.780082987551864,
                "explored_percent_lambda": 6.721991701244813,
                "explored_percent_none": 60.49792531120332,
                "kept_percent_concrete": 89.92248062015504,
                "kept_percent_lambda": 10.077519379844961,
                "num_examples": 5,
                "num_explored_concrete": 2765,
                "num_explored_lambda": 567,
                "num_explored_none": 5103,
                "num_inputs": 2,
                "num_kept_concrete": 348,
                "num_kept_lambda": 39,
                "num_values_explored": 8435,
                "num_values_kept": 387,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 87390
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72221518587321,
            "num_unique_values": 1202,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.591990713871155,
                "explored_percent_lambda": 20.66163668020894,
                "explored_percent_none": 18.746372605919905,
                "kept_percent_concrete": 59.59765297569153,
                "kept_percent_lambda": 40.40234702430847,
                "num_examples": 3,
                "num_explored_concrete": 4176,
                "num_explored_lambda": 1424,
                "num_explored_none": 1292,
                "num_inputs": 1,
                "num_kept_concrete": 711,
                "num_kept_lambda": 482,
                "num_values_explored": 6892,
                "num_values_kept": 1193,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71101
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93719925894402,
            "num_unique_values": 1409,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.41692998503243,
                "explored_percent_lambda": 33.24463662065525,
                "explored_percent_none": 5.338433394312323,
                "kept_percent_concrete": 56.285714285714285,
                "kept_percent_lambda": 43.714285714285715,
                "num_examples": 3,
                "num_explored_concrete": 3693,
                "num_explored_lambda": 1999,
                "num_explored_none": 321,
                "num_inputs": 1,
                "num_kept_concrete": 788,
                "num_kept_lambda": 612,
                "num_values_explored": 6013,
                "num_values_kept": 1400,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62655
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7391362071503,
            "num_unique_values": 1448,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.31136638452237,
                "explored_percent_lambda": 25.922007255139057,
                "explored_percent_none": 8.766626360338574,
                "kept_percent_concrete": 57.400972897845726,
                "kept_percent_lambda": 42.599027102154274,
                "num_examples": 3,
                "num_explored_concrete": 4321,
                "num_explored_lambda": 1715,
                "num_explored_none": 580,
                "num_inputs": 1,
                "num_kept_concrete": 826,
                "num_kept_lambda": 613,
                "num_values_explored": 6616,
                "num_values_kept": 1439,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66151
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7327165401075,
            "num_unique_values": 1546,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.24597364568082,
                "explored_percent_lambda": 24.24597364568082,
                "explored_percent_none": 11.50805270863836,
                "kept_percent_concrete": 59.895833333333336,
                "kept_percent_lambda": 40.104166666666664,
                "num_examples": 3,
                "num_explored_concrete": 4388,
                "num_explored_lambda": 1656,
                "num_explored_none": 786,
                "num_inputs": 2,
                "num_kept_concrete": 920,
                "num_kept_lambda": 616,
                "num_values_explored": 6830,
                "num_values_kept": 1536,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68407
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86300874291919,
            "num_unique_values": 1247,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.00774262448271,
                "explored_percent_lambda": 11.240154852489654,
                "explored_percent_none": 26.752102523027634,
                "kept_percent_concrete": 79.72536348949919,
                "kept_percent_lambda": 20.27463651050081,
                "num_examples": 5,
                "num_explored_concrete": 4645,
                "num_explored_lambda": 842,
                "num_explored_none": 2004,
                "num_inputs": 1,
                "num_kept_concrete": 987,
                "num_kept_lambda": 251,
                "num_values_explored": 7491,
                "num_values_kept": 1238,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74338
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12804195587523,
            "num_unique_values": 1247,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.49154789526019,
                "explored_percent_lambda": 33.95757374875704,
                "explored_percent_none": 14.550878355982764,
                "kept_percent_concrete": 51.21163166397415,
                "kept_percent_lambda": 48.78836833602585,
                "num_examples": 3,
                "num_explored_concrete": 3107,
                "num_explored_lambda": 2049,
                "num_explored_none": 878,
                "num_inputs": 1,
                "num_kept_concrete": 634,
                "num_kept_lambda": 604,
                "num_values_explored": 6034,
                "num_values_kept": 1238,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64904
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85717818606645,
            "num_unique_values": 1372,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.787146691931156,
                "explored_percent_lambda": 29.27522501184273,
                "explored_percent_none": 14.937628296226118,
                "kept_percent_concrete": 48.789435069699195,
                "kept_percent_lambda": 51.210564930300805,
                "num_examples": 3,
                "num_explored_concrete": 3533,
                "num_explored_lambda": 1854,
                "num_explored_none": 946,
                "num_inputs": 1,
                "num_kept_concrete": 665,
                "num_kept_lambda": 698,
                "num_values_explored": 6333,
                "num_values_kept": 1363,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69295
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75045197410509,
            "num_unique_values": 1613,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.80952380952381,
                "explored_percent_lambda": 6.642857142857143,
                "explored_percent_none": 17.547619047619047,
                "kept_percent_concrete": 87.02432938240798,
                "kept_percent_lambda": 12.975670617592016,
                "num_examples": 5,
                "num_explored_concrete": 6368,
                "num_explored_lambda": 558,
                "num_explored_none": 1474,
                "num_inputs": 2,
                "num_kept_concrete": 1395,
                "num_kept_lambda": 208,
                "num_values_explored": 8400,
                "num_values_kept": 1603,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 85281
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82651021401398,
            "num_unique_values": 1568,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.52676659528908,
                "explored_percent_lambda": 21.7558886509636,
                "explored_percent_none": 15.717344753747323,
                "kept_percent_concrete": 60.526315789473685,
                "kept_percent_lambda": 39.473684210526315,
                "num_examples": 3,
                "num_explored_concrete": 4380,
                "num_explored_lambda": 1524,
                "num_explored_none": 1101,
                "num_inputs": 2,
                "num_kept_concrete": 943,
                "num_kept_lambda": 615,
                "num_values_explored": 7005,
                "num_values_kept": 1558,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70081
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70915558608249,
            "num_unique_values": 1364,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.37323943661971,
                "explored_percent_lambda": 7.67102615694165,
                "explored_percent_none": 25.955734406438633,
                "kept_percent_concrete": 87.37075332348597,
                "kept_percent_lambda": 12.629246676514033,
                "num_examples": 5,
                "num_explored_concrete": 5278,
                "num_explored_lambda": 610,
                "num_explored_none": 2064,
                "num_inputs": 2,
                "num_kept_concrete": 1183,
                "num_kept_lambda": 171,
                "num_values_explored": 7952,
                "num_values_kept": 1354,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79366
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78080497705378,
            "num_unique_values": 1591,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.54151624548736,
                "explored_percent_lambda": 7.304452466907341,
                "explored_percent_none": 12.154031287605294,
                "kept_percent_concrete": 87.7292852624921,
                "kept_percent_lambda": 12.270714737507907,
                "num_examples": 5,
                "num_explored_concrete": 6693,
                "num_explored_lambda": 607,
                "num_explored_none": 1010,
                "num_inputs": 2,
                "num_kept_concrete": 1387,
                "num_kept_lambda": 194,
                "num_values_explored": 8310,
                "num_values_kept": 1581,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 84108
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.45164126297459,
            "num_unique_values": 1155,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), fn_2(Minimum(x), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 79.25659472422062,
                "explored_percent_lambda": 6.270983213429257,
                "explored_percent_none": 14.47242206235012,
                "kept_percent_concrete": 89.95633187772926,
                "kept_percent_lambda": 10.043668122270743,
                "num_examples": 5,
                "num_explored_concrete": 6610,
                "num_explored_lambda": 523,
                "num_explored_none": 1207,
                "num_inputs": 2,
                "num_kept_concrete": 1030,
                "num_kept_lambda": 115,
                "num_values_explored": 8340,
                "num_values_kept": 1145,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 52469
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.38
}