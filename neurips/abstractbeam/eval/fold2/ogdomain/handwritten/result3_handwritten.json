{
    "num_tasks": 50,
    "num_tasks_solved": 16,
    "results": [
        {
            "elapsed_time": 0.6473591309040785,
            "num_unique_values": 284,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.742802303262955,
                "explored_percent_lambda": 35.31669865642994,
                "explored_percent_none": 10.940499040307103,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 184,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 521,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.09103735396638513,
            "num_unique_values": 83,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11764705882353,
                "explored_percent_lambda": 5.882352941176471,
                "explored_percent_none": 45.0,
                "kept_percent_concrete": 95.89041095890411,
                "kept_percent_lambda": 4.109589041095891,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 20,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 3,
                "num_values_explored": 340,
                "num_values_kept": 73,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 340
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.775128726148978,
            "num_unique_values": 518,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 37.565582371458554,
                "explored_percent_lambda": 33.42077649527807,
                "explored_percent_none": 29.01364113326338,
                "kept_percent_concrete": 55.20628683693517,
                "kept_percent_lambda": 44.79371316306483,
                "num_examples": 3,
                "num_explored_concrete": 716,
                "num_explored_lambda": 637,
                "num_explored_none": 553,
                "num_inputs": 1,
                "num_kept_concrete": 281,
                "num_kept_lambda": 228,
                "num_values_explored": 1906,
                "num_values_kept": 509,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10704
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8788811978884,
            "num_unique_values": 1261,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.820598006644516,
                "explored_percent_lambda": 31.943521594684384,
                "explored_percent_none": 14.235880398671096,
                "kept_percent_concrete": 52.79552715654952,
                "kept_percent_lambda": 47.20447284345048,
                "num_examples": 3,
                "num_explored_concrete": 3240,
                "num_explored_lambda": 1923,
                "num_explored_none": 857,
                "num_inputs": 1,
                "num_kept_concrete": 661,
                "num_kept_lambda": 591,
                "num_values_explored": 6020,
                "num_values_kept": 1252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59084
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3420512501616031,
            "num_unique_values": 312,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.92996108949416,
                "explored_percent_lambda": 23.994811932555123,
                "explored_percent_none": 2.0752269779507135,
                "kept_percent_concrete": 74.17218543046357,
                "kept_percent_lambda": 25.827814569536425,
                "num_examples": 3,
                "num_explored_concrete": 570,
                "num_explored_lambda": 185,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 78,
                "num_values_explored": 771,
                "num_values_kept": 302,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87946212198585,
            "num_unique_values": 1279,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.09786216969857,
                "explored_percent_lambda": 11.074226530341257,
                "explored_percent_none": 15.827911299960165,
                "kept_percent_concrete": 78.81889763779527,
                "kept_percent_lambda": 21.181102362204726,
                "num_examples": 5,
                "num_explored_concrete": 5505,
                "num_explored_lambda": 834,
                "num_explored_none": 1192,
                "num_inputs": 1,
                "num_kept_concrete": 1001,
                "num_kept_lambda": 269,
                "num_values_explored": 7531,
                "num_values_kept": 1270,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75878
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3162768508773297,
            "num_unique_values": 213,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 52.577319587628864,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 6.185567010309279,
                "kept_percent_concrete": 48.529411764705884,
                "kept_percent_lambda": 51.470588235294116,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 120,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 105,
                "num_values_explored": 291,
                "num_values_kept": 204,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8233147780411,
            "num_unique_values": 1207,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.3241012729053,
                "explored_percent_lambda": 16.281997482165337,
                "explored_percent_none": 16.39390124492936,
                "kept_percent_concrete": 71.86978297161937,
                "kept_percent_lambda": 28.130217028380635,
                "num_examples": 5,
                "num_explored_concrete": 4813,
                "num_explored_lambda": 1164,
                "num_explored_none": 1172,
                "num_inputs": 1,
                "num_kept_concrete": 861,
                "num_kept_lambda": 337,
                "num_values_explored": 7149,
                "num_values_kept": 1198,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70487
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85612119711004,
            "num_unique_values": 1391,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.61027190332327,
                "explored_percent_lambda": 14.138972809667674,
                "explored_percent_none": 17.250755287009063,
                "kept_percent_concrete": 74.52966714905934,
                "kept_percent_lambda": 25.470332850940665,
                "num_examples": 5,
                "num_explored_concrete": 4542,
                "num_explored_lambda": 936,
                "num_explored_none": 1142,
                "num_inputs": 1,
                "num_kept_concrete": 1030,
                "num_kept_lambda": 352,
                "num_values_explored": 6620,
                "num_values_kept": 1382,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66445
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 92.22392453998327,
            "num_unique_values": 265,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 32.77074542897328,
                "explored_percent_lambda": 53.867791842475384,
                "explored_percent_none": 13.361462728551336,
                "kept_percent_concrete": 44.140625,
                "kept_percent_lambda": 55.859375,
                "num_examples": 3,
                "num_explored_concrete": 233,
                "num_explored_lambda": 383,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 143,
                "num_values_explored": 711,
                "num_values_kept": 256,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52930
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69692468293943,
            "num_unique_values": 1350,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 85.50030693677103,
                "explored_percent_lambda": 2.8729281767955803,
                "explored_percent_none": 11.626764886433394,
                "kept_percent_concrete": 95.07462686567165,
                "kept_percent_lambda": 4.925373134328358,
                "num_examples": 5,
                "num_explored_concrete": 6964,
                "num_explored_lambda": 234,
                "num_explored_none": 947,
                "num_inputs": 2,
                "num_kept_concrete": 1274,
                "num_kept_lambda": 66,
                "num_values_explored": 8145,
                "num_values_kept": 1340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79585
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87657358916476,
            "num_unique_values": 1606,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.97932187927627,
                "explored_percent_lambda": 25.467538391363842,
                "explored_percent_none": 6.5531397293598905,
                "kept_percent_concrete": 58.39598997493734,
                "kept_percent_lambda": 41.60401002506266,
                "num_examples": 3,
                "num_explored_concrete": 4471,
                "num_explored_lambda": 1675,
                "num_explored_none": 431,
                "num_inputs": 2,
                "num_kept_concrete": 932,
                "num_kept_lambda": 664,
                "num_values_explored": 6577,
                "num_values_kept": 1596,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65582
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.8018839929718524,
            "num_unique_values": 658,
            "solution": "Min(Minimum(fn_2(1, x)), fn_0(1, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.994307400379505,
                "explored_percent_lambda": 19.259962049335865,
                "explored_percent_none": 16.74573055028463,
                "kept_percent_concrete": 78.42835130970724,
                "kept_percent_lambda": 21.571648690292758,
                "num_examples": 5,
                "num_explored_concrete": 1349,
                "num_explored_lambda": 406,
                "num_explored_none": 353,
                "num_inputs": 1,
                "num_kept_concrete": 509,
                "num_kept_lambda": 140,
                "num_values_explored": 2108,
                "num_values_kept": 649,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3658
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7938514268025756,
            "num_unique_values": 239,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 32.27206946454414,
                "explored_percent_lambda": 54.41389290882778,
                "explored_percent_none": 13.314037626628075,
                "kept_percent_concrete": 42.608695652173914,
                "kept_percent_lambda": 57.391304347826086,
                "num_examples": 3,
                "num_explored_concrete": 223,
                "num_explored_lambda": 376,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 98,
                "num_kept_lambda": 132,
                "num_values_explored": 691,
                "num_values_kept": 230,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2241
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67977078119293,
            "num_unique_values": 1330,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.1073649302197,
                "explored_percent_lambda": 12.836810833218184,
                "explored_percent_none": 8.055824236562112,
                "kept_percent_concrete": 75.96664139499622,
                "kept_percent_lambda": 24.03335860500379,
                "num_examples": 3,
                "num_explored_concrete": 5725,
                "num_explored_lambda": 929,
                "num_explored_none": 583,
                "num_inputs": 3,
                "num_kept_concrete": 1002,
                "num_kept_lambda": 317,
                "num_values_explored": 7237,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77454
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7799720868934,
            "num_unique_values": 1226,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.9148430661498,
                "explored_percent_lambda": 9.60360135050644,
                "explored_percent_none": 17.481555583343752,
                "kept_percent_concrete": 78.18930041152264,
                "kept_percent_lambda": 21.810699588477366,
                "num_examples": 3,
                "num_explored_concrete": 5831,
                "num_explored_lambda": 768,
                "num_explored_none": 1398,
                "num_inputs": 3,
                "num_kept_concrete": 950,
                "num_kept_lambda": 265,
                "num_values_explored": 7997,
                "num_values_kept": 1215,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80534
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.126263425918296,
            "num_unique_values": 287,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.24528301886792,
                "explored_percent_lambda": 30.0,
                "explored_percent_none": 20.754716981132077,
                "kept_percent_concrete": 74.27536231884058,
                "kept_percent_lambda": 25.72463768115942,
                "num_examples": 3,
                "num_explored_concrete": 522,
                "num_explored_lambda": 318,
                "num_explored_none": 220,
                "num_inputs": 3,
                "num_kept_concrete": 205,
                "num_kept_lambda": 71,
                "num_values_explored": 1060,
                "num_values_kept": 276,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2920
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68852508300915,
            "num_unique_values": 1307,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.165936130244205,
                "explored_percent_lambda": 26.50281778334377,
                "explored_percent_none": 18.331246086412023,
                "kept_percent_concrete": 54.279105628373166,
                "kept_percent_lambda": 45.720894371626834,
                "num_examples": 3,
                "num_explored_concrete": 3524,
                "num_explored_lambda": 1693,
                "num_explored_none": 1171,
                "num_inputs": 2,
                "num_kept_concrete": 704,
                "num_kept_lambda": 593,
                "num_values_explored": 6388,
                "num_values_kept": 1297,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65899
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.62432438484393,
            "num_unique_values": 1421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.38644574560857,
                "explored_percent_lambda": 6.7148374236950295,
                "explored_percent_none": 18.8987168306964,
                "kept_percent_concrete": 87.31396172927002,
                "kept_percent_lambda": 12.686038270729979,
                "num_examples": 5,
                "num_explored_concrete": 5971,
                "num_explored_lambda": 539,
                "num_explored_none": 1517,
                "num_inputs": 2,
                "num_kept_concrete": 1232,
                "num_kept_lambda": 179,
                "num_values_explored": 8027,
                "num_values_kept": 1411,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 79936
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87699866294861,
            "num_unique_values": 1329,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.57527189467659,
                "explored_percent_lambda": 15.698340011448197,
                "explored_percent_none": 23.726388093875215,
                "kept_percent_concrete": 65.95905989385898,
                "kept_percent_lambda": 34.040940106141015,
                "num_examples": 3,
                "num_explored_concrete": 4233,
                "num_explored_lambda": 1097,
                "num_explored_none": 1658,
                "num_inputs": 2,
                "num_kept_concrete": 870,
                "num_kept_lambda": 449,
                "num_values_explored": 6988,
                "num_values_kept": 1319,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70349
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96084309392609,
            "num_unique_values": 1362,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.42051683633516,
                "explored_percent_lambda": 30.13312451057165,
                "explored_percent_none": 10.446358653093187,
                "kept_percent_concrete": 54.175905395417594,
                "kept_percent_lambda": 45.824094604582406,
                "num_examples": 3,
                "num_explored_concrete": 3794,
                "num_explored_lambda": 1924,
                "num_explored_none": 667,
                "num_inputs": 1,
                "num_kept_concrete": 733,
                "num_kept_lambda": 620,
                "num_values_explored": 6385,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63905
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18860630597919226,
            "num_unique_values": 165,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.59016393442623,
                "explored_percent_lambda": 43.442622950819676,
                "explored_percent_none": 6.967213114754099,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 121,
                "num_explored_lambda": 106,
                "num_explored_none": 17,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 91,
                "num_values_explored": 244,
                "num_values_kept": 156,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96448389603756,
            "num_unique_values": 1466,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.15858558799893,
                "explored_percent_lambda": 8.813286900616127,
                "explored_percent_none": 15.028127511384945,
                "kept_percent_concrete": 86.81318681318682,
                "kept_percent_lambda": 13.186813186813186,
                "num_examples": 5,
                "num_explored_concrete": 5686,
                "num_explored_lambda": 658,
                "num_explored_none": 1122,
                "num_inputs": 2,
                "num_kept_concrete": 1264,
                "num_kept_lambda": 192,
                "num_values_explored": 7466,
                "num_values_kept": 1456,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77052
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94161186600104,
            "num_unique_values": 1423,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.3712289615751,
                "explored_percent_lambda": 26.230549380755797,
                "explored_percent_none": 4.398221657669101,
                "kept_percent_concrete": 59.518754423213025,
                "kept_percent_lambda": 40.481245576786975,
                "num_examples": 3,
                "num_explored_concrete": 4369,
                "num_explored_lambda": 1652,
                "num_explored_none": 277,
                "num_inputs": 2,
                "num_kept_concrete": 841,
                "num_kept_lambda": 572,
                "num_values_explored": 6298,
                "num_values_kept": 1413,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63891
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86948365112767,
            "num_unique_values": 1501,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.53932584269663,
                "explored_percent_lambda": 14.484905915798024,
                "explored_percent_none": 16.975768241505346,
                "kept_percent_concrete": 69.86577181208054,
                "kept_percent_lambda": 30.13422818791946,
                "num_examples": 3,
                "num_explored_concrete": 5063,
                "num_explored_lambda": 1070,
                "num_explored_none": 1254,
                "num_inputs": 3,
                "num_kept_concrete": 1041,
                "num_kept_lambda": 449,
                "num_values_explored": 7387,
                "num_values_kept": 1490,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73708
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 79.11539213592187,
            "num_unique_values": 1168,
            "solution": "Max(Max(3, Count((lambda u1: ((lambda v1: IsEven(v1)))(u1)), x)), Max(1, Sum(fn_1(fn_2(2, x)))))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 71.60211267605634,
                "explored_percent_lambda": 11.602112676056338,
                "explored_percent_none": 16.795774647887324,
                "kept_percent_concrete": 79.55133735979292,
                "kept_percent_lambda": 20.448662640207075,
                "num_examples": 5,
                "num_explored_concrete": 4067,
                "num_explored_lambda": 659,
                "num_explored_none": 954,
                "num_inputs": 1,
                "num_kept_concrete": 922,
                "num_kept_lambda": 237,
                "num_values_explored": 5680,
                "num_values_kept": 1159,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 56771
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1232005089987,
            "num_unique_values": 1484,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.032502366677186,
                "explored_percent_lambda": 23.729883243925528,
                "explored_percent_none": 13.237614389397287,
                "kept_percent_concrete": 55.45762711864407,
                "kept_percent_lambda": 44.54237288135593,
                "num_examples": 3,
                "num_explored_concrete": 3995,
                "num_explored_lambda": 1504,
                "num_explored_none": 839,
                "num_inputs": 1,
                "num_kept_concrete": 818,
                "num_kept_lambda": 657,
                "num_values_explored": 6338,
                "num_values_kept": 1475,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63676
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90773798292503,
            "num_unique_values": 1363,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.7439659252248,
                "explored_percent_lambda": 22.13282852184887,
                "explored_percent_none": 21.12320555292633,
                "kept_percent_concrete": 62.158167036215815,
                "kept_percent_lambda": 37.841832963784185,
                "num_examples": 3,
                "num_explored_concrete": 3597,
                "num_explored_lambda": 1403,
                "num_explored_none": 1339,
                "num_inputs": 2,
                "num_kept_concrete": 841,
                "num_kept_lambda": 512,
                "num_values_explored": 6339,
                "num_values_kept": 1353,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63577
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.64153082598932,
            "num_unique_values": 245,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Add(1, v1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 21.62426614481409,
                "explored_percent_lambda": 47.84735812133072,
                "explored_percent_none": 30.528375733855185,
                "kept_percent_concrete": 40.25423728813559,
                "kept_percent_lambda": 59.74576271186441,
                "num_examples": 3,
                "num_explored_concrete": 221,
                "num_explored_lambda": 489,
                "num_explored_none": 312,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 141,
                "num_values_explored": 1022,
                "num_values_kept": 236,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13570
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 37.196599217131734,
            "num_unique_values": 1040,
            "solution": "Take(Sum(Map((lambda u1: 1), fn_2(0, r))), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 64.34892541087231,
                "explored_percent_lambda": 30.82174462705436,
                "explored_percent_none": 4.8293299620733245,
                "kept_percent_concrete": 54.66019417475728,
                "kept_percent_lambda": 45.33980582524272,
                "num_examples": 3,
                "num_explored_concrete": 2545,
                "num_explored_lambda": 1219,
                "num_explored_none": 191,
                "num_inputs": 2,
                "num_kept_concrete": 563,
                "num_kept_lambda": 467,
                "num_values_explored": 3955,
                "num_values_kept": 1030,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 25224
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81325779203326,
            "num_unique_values": 1593,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.31265887137774,
                "explored_percent_lambda": 7.308083375699034,
                "explored_percent_none": 12.379257752923234,
                "kept_percent_concrete": 86.8603916614024,
                "kept_percent_lambda": 13.139608338597599,
                "num_examples": 5,
                "num_explored_concrete": 6319,
                "num_explored_lambda": 575,
                "num_explored_none": 974,
                "num_inputs": 2,
                "num_kept_concrete": 1375,
                "num_kept_lambda": 208,
                "num_values_explored": 7868,
                "num_values_kept": 1583,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78956
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98381629702635,
            "num_unique_values": 1368,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.63323376827543,
                "explored_percent_lambda": 25.027511397578998,
                "explored_percent_none": 22.339254834145574,
                "kept_percent_concrete": 54.81972038263429,
                "kept_percent_lambda": 45.18027961736571,
                "num_examples": 3,
                "num_explored_concrete": 3348,
                "num_explored_lambda": 1592,
                "num_explored_none": 1421,
                "num_inputs": 1,
                "num_kept_concrete": 745,
                "num_kept_lambda": 614,
                "num_values_explored": 6361,
                "num_values_kept": 1359,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62968
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75714287883602,
            "num_unique_values": 1263,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.4182845040593,
                "explored_percent_lambda": 30.780091775503,
                "explored_percent_none": 13.801623720437698,
                "kept_percent_concrete": 52.513966480446925,
                "kept_percent_lambda": 47.486033519553075,
                "num_examples": 3,
                "num_explored_concrete": 3140,
                "num_explored_lambda": 1744,
                "num_explored_none": 782,
                "num_inputs": 2,
                "num_kept_concrete": 658,
                "num_kept_lambda": 595,
                "num_values_explored": 5666,
                "num_values_kept": 1253,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60875
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81768004293554,
            "num_unique_values": 1655,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 85.21844009648888,
                "explored_percent_lambda": 7.1696596086839985,
                "explored_percent_none": 7.611900294827124,
                "kept_percent_concrete": 88.57142857142857,
                "kept_percent_lambda": 11.428571428571429,
                "num_examples": 5,
                "num_explored_concrete": 6359,
                "num_explored_lambda": 535,
                "num_explored_none": 568,
                "num_inputs": 2,
                "num_kept_concrete": 1457,
                "num_kept_lambda": 188,
                "num_values_explored": 7462,
                "num_values_kept": 1645,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77390
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.46257344889455,
            "num_unique_values": 353,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 27.687104837523894,
                "explored_percent_lambda": 16.93868548742832,
                "explored_percent_none": 55.37420967504779,
                "kept_percent_concrete": 72.38372093023256,
                "kept_percent_lambda": 27.61627906976744,
                "num_examples": 5,
                "num_explored_concrete": 1883,
                "num_explored_lambda": 1152,
                "num_explored_none": 3766,
                "num_inputs": 1,
                "num_kept_concrete": 249,
                "num_kept_lambda": 95,
                "num_values_explored": 6801,
                "num_values_kept": 344,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70503
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13766106497496367,
            "num_unique_values": 185,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 87.54448398576513,
                "explored_percent_lambda": 3.9145907473309607,
                "explored_percent_none": 8.540925266903914,
                "kept_percent_concrete": 96.0,
                "kept_percent_lambda": 4.0,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 11,
                "num_explored_none": 24,
                "num_inputs": 2,
                "num_kept_concrete": 168,
                "num_kept_lambda": 7,
                "num_values_explored": 281,
                "num_values_kept": 175,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.277364377863705,
            "num_unique_values": 1095,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.78927911275416,
                "explored_percent_lambda": 23.803655781474635,
                "explored_percent_none": 22.407065105771206,
                "kept_percent_concrete": 60.03683241252302,
                "kept_percent_lambda": 39.96316758747698,
                "num_examples": 3,
                "num_explored_concrete": 2619,
                "num_explored_lambda": 1159,
                "num_explored_none": 1091,
                "num_inputs": 1,
                "num_kept_concrete": 652,
                "num_kept_lambda": 434,
                "num_values_explored": 4869,
                "num_values_kept": 1086,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 12068
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.35905895195901,
            "num_unique_values": 398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 33.00661313179027,
                "explored_percent_lambda": 5.904581955597544,
                "explored_percent_none": 61.08880491261219,
                "kept_percent_concrete": 90.97938144329896,
                "kept_percent_lambda": 9.02061855670103,
                "num_examples": 5,
                "num_explored_concrete": 2795,
                "num_explored_lambda": 500,
                "num_explored_none": 5173,
                "num_inputs": 2,
                "num_kept_concrete": 353,
                "num_kept_lambda": 35,
                "num_values_explored": 8468,
                "num_values_kept": 388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82691
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83334653801285,
            "num_unique_values": 1234,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.24813062719365,
                "explored_percent_lambda": 20.982755989623072,
                "explored_percent_none": 20.769113383183274,
                "kept_percent_concrete": 58.44897959183673,
                "kept_percent_lambda": 41.55102040816327,
                "num_examples": 3,
                "num_explored_concrete": 3817,
                "num_explored_lambda": 1375,
                "num_explored_none": 1361,
                "num_inputs": 1,
                "num_kept_concrete": 716,
                "num_kept_lambda": 509,
                "num_values_explored": 6553,
                "num_values_kept": 1225,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65957
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09752455097623,
            "num_unique_values": 1359,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.95350803043111,
                "explored_percent_lambda": 29.45054945054945,
                "explored_percent_none": 5.5959425190194425,
                "kept_percent_concrete": 55.03703703703704,
                "kept_percent_lambda": 44.96296296296296,
                "num_examples": 3,
                "num_explored_concrete": 3842,
                "num_explored_lambda": 1742,
                "num_explored_none": 331,
                "num_inputs": 1,
                "num_kept_concrete": 743,
                "num_kept_lambda": 607,
                "num_values_explored": 5915,
                "num_values_kept": 1350,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60201
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83888590009883,
            "num_unique_values": 1347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.264353508635445,
                "explored_percent_lambda": 26.357554068772366,
                "explored_percent_none": 10.37809242259219,
                "kept_percent_concrete": 56.95067264573991,
                "kept_percent_lambda": 43.04932735426009,
                "num_examples": 3,
                "num_explored_concrete": 4066,
                "num_explored_lambda": 1694,
                "num_explored_none": 667,
                "num_inputs": 1,
                "num_kept_concrete": 762,
                "num_kept_lambda": 576,
                "num_values_explored": 6427,
                "num_values_kept": 1338,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62488
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79434088082053,
            "num_unique_values": 1507,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.93297825122059,
                "explored_percent_lambda": 20.905459387483354,
                "explored_percent_none": 12.161562361296049,
                "kept_percent_concrete": 63.66065464261857,
                "kept_percent_lambda": 36.33934535738143,
                "num_examples": 3,
                "num_explored_concrete": 4524,
                "num_explored_lambda": 1413,
                "num_explored_none": 822,
                "num_inputs": 2,
                "num_kept_concrete": 953,
                "num_kept_lambda": 544,
                "num_values_explored": 6759,
                "num_values_kept": 1497,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66404
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96138604497537,
            "num_unique_values": 1185,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.11189701513651,
                "explored_percent_lambda": 11.585797142452964,
                "explored_percent_none": 27.302305842410526,
                "kept_percent_concrete": 78.8265306122449,
                "kept_percent_lambda": 21.1734693877551,
                "num_examples": 5,
                "num_explored_concrete": 4320,
                "num_explored_lambda": 819,
                "num_explored_none": 1930,
                "num_inputs": 1,
                "num_kept_concrete": 927,
                "num_kept_lambda": 249,
                "num_values_explored": 7069,
                "num_values_kept": 1176,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70863
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22892254008912,
            "num_unique_values": 1251,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.13596784996651,
                "explored_percent_lambda": 28.231748158071,
                "explored_percent_none": 17.632283991962492,
                "kept_percent_concrete": 50.64412238325282,
                "kept_percent_lambda": 49.35587761674718,
                "num_examples": 3,
                "num_explored_concrete": 3233,
                "num_explored_lambda": 1686,
                "num_explored_none": 1053,
                "num_inputs": 1,
                "num_kept_concrete": 629,
                "num_kept_lambda": 613,
                "num_values_explored": 5972,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59676
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9937978850212,
            "num_unique_values": 1280,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.6231884057971,
                "explored_percent_lambda": 30.307971014492754,
                "explored_percent_none": 16.068840579710145,
                "kept_percent_concrete": 49.409913453973246,
                "kept_percent_lambda": 50.590086546026754,
                "num_examples": 3,
                "num_explored_concrete": 2960,
                "num_explored_lambda": 1673,
                "num_explored_none": 887,
                "num_inputs": 1,
                "num_kept_concrete": 628,
                "num_kept_lambda": 643,
                "num_values_explored": 5520,
                "num_values_kept": 1271,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64757
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00435363408178,
            "num_unique_values": 1449,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.19876110961486,
                "explored_percent_lambda": 8.402908699165096,
                "explored_percent_none": 17.398330191220037,
                "kept_percent_concrete": 86.79638637943016,
                "kept_percent_lambda": 13.20361362056984,
                "num_examples": 5,
                "num_explored_concrete": 5510,
                "num_explored_lambda": 624,
                "num_explored_none": 1292,
                "num_inputs": 2,
                "num_kept_concrete": 1249,
                "num_kept_lambda": 190,
                "num_values_explored": 7426,
                "num_values_kept": 1439,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80084
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00445230002515,
            "num_unique_values": 1415,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.570977917981075,
                "explored_percent_lambda": 21.782334384858043,
                "explored_percent_none": 15.646687697160884,
                "kept_percent_concrete": 62.27758007117438,
                "kept_percent_lambda": 37.72241992882562,
                "num_examples": 3,
                "num_explored_concrete": 3967,
                "num_explored_lambda": 1381,
                "num_explored_none": 992,
                "num_inputs": 2,
                "num_kept_concrete": 875,
                "num_kept_lambda": 530,
                "num_values_explored": 6340,
                "num_values_kept": 1405,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63838
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81231826799922,
            "num_unique_values": 1180,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.0444929712024,
                "explored_percent_lambda": 7.943223693189573,
                "explored_percent_none": 30.012283335608025,
                "kept_percent_concrete": 86.06837606837607,
                "kept_percent_lambda": 13.931623931623932,
                "num_examples": 5,
                "num_explored_concrete": 4546,
                "num_explored_lambda": 582,
                "num_explored_none": 2199,
                "num_inputs": 2,
                "num_kept_concrete": 1007,
                "num_kept_lambda": 163,
                "num_values_explored": 7327,
                "num_values_kept": 1170,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73629
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75941056199372,
            "num_unique_values": 1397,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.83424507658643,
                "explored_percent_lambda": 7.809080962800875,
                "explored_percent_none": 16.356673960612692,
                "kept_percent_concrete": 87.23864455659697,
                "kept_percent_lambda": 12.761355443403028,
                "num_examples": 5,
                "num_explored_concrete": 5545,
                "num_explored_lambda": 571,
                "num_explored_none": 1196,
                "num_inputs": 2,
                "num_kept_concrete": 1210,
                "num_kept_lambda": 177,
                "num_values_explored": 7312,
                "num_values_kept": 1387,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75908
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 88.73829186102375,
            "num_unique_values": 970,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), fn_2(Count((lambda u1: IsEven(fn_0(n, Drop(3, x)))), Drop(1, x)), x))",
            "solution_weight": 17,
            "stats": {
                "explored_percent_concrete": 80.7079081632653,
                "explored_percent_lambda": 6.074617346938775,
                "explored_percent_none": 13.217474489795919,
                "kept_percent_concrete": 90.20833333333333,
                "kept_percent_lambda": 9.791666666666666,
                "num_examples": 5,
                "num_explored_concrete": 5062,
                "num_explored_lambda": 381,
                "num_explored_none": 829,
                "num_inputs": 2,
                "num_kept_concrete": 866,
                "num_kept_lambda": 94,
                "num_values_explored": 6272,
                "num_values_kept": 960,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 69289
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.32
}