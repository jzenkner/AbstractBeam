{
    "num_tasks": 50,
    "num_tasks_solved": 17,
    "results": [
        {
            "elapsed_time": 0.6513413018546999,
            "num_unique_values": 284,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.742802303262955,
                "explored_percent_lambda": 35.31669865642994,
                "explored_percent_none": 10.940499040307103,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 184,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 521,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.09241323382593691,
            "num_unique_values": 83,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11764705882353,
                "explored_percent_lambda": 5.882352941176471,
                "explored_percent_none": 45.0,
                "kept_percent_concrete": 95.89041095890411,
                "kept_percent_lambda": 4.109589041095891,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 20,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 3,
                "num_values_explored": 340,
                "num_values_kept": 73,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 340
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 85.72445005713962,
            "num_unique_values": 795,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 44.42670073458959,
                "explored_percent_lambda": 28.936442031299904,
                "explored_percent_none": 26.636857234110508,
                "kept_percent_concrete": 57.76081424936387,
                "kept_percent_lambda": 42.23918575063613,
                "num_examples": 3,
                "num_explored_concrete": 1391,
                "num_explored_lambda": 906,
                "num_explored_none": 834,
                "num_inputs": 1,
                "num_kept_concrete": 454,
                "num_kept_lambda": 332,
                "num_values_explored": 3131,
                "num_values_kept": 786,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 56729
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84672757983208,
            "num_unique_values": 1307,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.15484311050478,
                "explored_percent_lambda": 31.582537517053208,
                "explored_percent_none": 15.26261937244202,
                "kept_percent_concrete": 52.003081664098616,
                "kept_percent_lambda": 47.996918335901384,
                "num_examples": 3,
                "num_explored_concrete": 3117,
                "num_explored_lambda": 1852,
                "num_explored_none": 895,
                "num_inputs": 1,
                "num_kept_concrete": 675,
                "num_kept_lambda": 623,
                "num_values_explored": 5864,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61647
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3364348509348929,
            "num_unique_values": 312,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.92996108949416,
                "explored_percent_lambda": 23.994811932555123,
                "explored_percent_none": 2.0752269779507135,
                "kept_percent_concrete": 74.17218543046357,
                "kept_percent_lambda": 25.827814569536425,
                "num_examples": 3,
                "num_explored_concrete": 570,
                "num_explored_lambda": 185,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 78,
                "num_values_explored": 771,
                "num_values_kept": 302,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87549866409972,
            "num_unique_values": 1318,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.73231566035165,
                "explored_percent_lambda": 12.348371268910999,
                "explored_percent_none": 15.919313070737358,
                "kept_percent_concrete": 78.22765469824293,
                "kept_percent_lambda": 21.772345301757067,
                "num_examples": 5,
                "num_explored_concrete": 5263,
                "num_explored_lambda": 906,
                "num_explored_none": 1168,
                "num_inputs": 1,
                "num_kept_concrete": 1024,
                "num_kept_lambda": 285,
                "num_values_explored": 7337,
                "num_values_kept": 1309,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74785
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21680721803568304,
            "num_unique_values": 213,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 52.577319587628864,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 6.185567010309279,
                "kept_percent_concrete": 48.529411764705884,
                "kept_percent_lambda": 51.470588235294116,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 120,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 105,
                "num_values_explored": 291,
                "num_values_kept": 204,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7976753260009,
            "num_unique_values": 1272,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.96182867288061,
                "explored_percent_lambda": 17.265867731913005,
                "explored_percent_none": 20.77230359520639,
                "kept_percent_concrete": 68.96278701504355,
                "kept_percent_lambda": 31.037212984956454,
                "num_examples": 5,
                "num_explored_concrete": 4188,
                "num_explored_lambda": 1167,
                "num_explored_none": 1404,
                "num_inputs": 1,
                "num_kept_concrete": 871,
                "num_kept_lambda": 392,
                "num_values_explored": 6759,
                "num_values_kept": 1263,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70565
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86442150804214,
            "num_unique_values": 1374,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.52304147465438,
                "explored_percent_lambda": 13.10483870967742,
                "explored_percent_none": 14.372119815668203,
                "kept_percent_concrete": 74.72527472527473,
                "kept_percent_lambda": 25.274725274725274,
                "num_examples": 5,
                "num_explored_concrete": 5036,
                "num_explored_lambda": 910,
                "num_explored_none": 998,
                "num_inputs": 1,
                "num_kept_concrete": 1020,
                "num_kept_lambda": 345,
                "num_values_explored": 6944,
                "num_values_kept": 1365,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69843
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 72.36910984595306,
            "num_unique_values": 267,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 28.520286396181383,
                "explored_percent_lambda": 55.727923627684966,
                "explored_percent_none": 15.75178997613365,
                "kept_percent_concrete": 43.798449612403104,
                "kept_percent_lambda": 56.201550387596896,
                "num_examples": 3,
                "num_explored_concrete": 239,
                "num_explored_lambda": 467,
                "num_explored_none": 132,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 145,
                "num_values_explored": 838,
                "num_values_kept": 258,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 41935
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 85.43047936703078,
            "num_unique_values": 894,
            "solution": "Min(Max(1, Count((lambda u1: IsEven(Minimum(Scanl1((lambda u1, u2: Sum(x)), x)))), Drop(4, x))), Max(Subtract(4, i), Add(i, -1)))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 83.96703004520074,
                "explored_percent_lambda": 4.626429141185855,
                "explored_percent_none": 11.4065408136134,
                "kept_percent_concrete": 93.43891402714932,
                "kept_percent_lambda": 6.5610859728506785,
                "num_examples": 5,
                "num_explored_concrete": 3158,
                "num_explored_lambda": 174,
                "num_explored_none": 429,
                "num_inputs": 2,
                "num_kept_concrete": 826,
                "num_kept_lambda": 58,
                "num_values_explored": 3761,
                "num_values_kept": 884,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 70401
            },
            "success": true,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83118956792168,
            "num_unique_values": 1637,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.8388625592417,
                "explored_percent_lambda": 23.459715639810426,
                "explored_percent_none": 7.701421800947867,
                "kept_percent_concrete": 59.004302397049784,
                "kept_percent_lambda": 40.995697602950216,
                "num_examples": 3,
                "num_explored_concrete": 4648,
                "num_explored_lambda": 1584,
                "num_explored_none": 520,
                "num_inputs": 2,
                "num_kept_concrete": 960,
                "num_kept_lambda": 667,
                "num_values_explored": 6752,
                "num_values_kept": 1627,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68570
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.518394886981696,
            "num_unique_values": 660,
            "solution": "Min(fn_0(1, x), Maximum(Drop(3, x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 61.2108773730118,
                "explored_percent_lambda": 19.70241149307337,
                "explored_percent_none": 19.08671113391483,
                "kept_percent_concrete": 74.9615975422427,
                "kept_percent_lambda": 25.038402457757297,
                "num_examples": 5,
                "num_explored_concrete": 1193,
                "num_explored_lambda": 384,
                "num_explored_none": 372,
                "num_inputs": 1,
                "num_kept_concrete": 488,
                "num_kept_lambda": 163,
                "num_values_explored": 1949,
                "num_values_kept": 651,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3499
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.832884841831401,
            "num_unique_values": 547,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(2, v1)))(v1))))(u1)), fn_1(x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.36473755047106,
                "explored_percent_lambda": 36.33916554508748,
                "explored_percent_none": 10.296096904441454,
                "kept_percent_concrete": 53.90334572490706,
                "kept_percent_lambda": 46.09665427509294,
                "num_examples": 3,
                "num_explored_concrete": 793,
                "num_explored_lambda": 540,
                "num_explored_none": 153,
                "num_inputs": 1,
                "num_kept_concrete": 290,
                "num_kept_lambda": 248,
                "num_values_explored": 1486,
                "num_values_kept": 538,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9248
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68884394713677,
            "num_unique_values": 1411,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.1468505404398,
                "explored_percent_lambda": 9.864579450863461,
                "explored_percent_none": 7.988570008696732,
                "kept_percent_concrete": 79.0,
                "kept_percent_lambda": 21.0,
                "num_examples": 3,
                "num_explored_concrete": 6612,
                "num_explored_lambda": 794,
                "num_explored_none": 643,
                "num_inputs": 3,
                "num_kept_concrete": 1106,
                "num_kept_lambda": 294,
                "num_values_explored": 8049,
                "num_values_kept": 1400,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78877
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8457388218958,
            "num_unique_values": 1221,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.43805874840358,
                "explored_percent_lambda": 14.061302681992338,
                "explored_percent_none": 16.500638569604085,
                "kept_percent_concrete": 70.57851239669421,
                "kept_percent_lambda": 29.421487603305785,
                "num_examples": 3,
                "num_explored_concrete": 5437,
                "num_explored_lambda": 1101,
                "num_explored_none": 1292,
                "num_inputs": 3,
                "num_kept_concrete": 854,
                "num_kept_lambda": 356,
                "num_values_explored": 7830,
                "num_values_kept": 1210,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82923
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.4244766710326076,
            "num_unique_values": 590,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 68.21345707656613,
                "explored_percent_lambda": 19.907192575406032,
                "explored_percent_none": 11.879350348027842,
                "kept_percent_concrete": 74.26597582037996,
                "kept_percent_lambda": 25.734024179620036,
                "num_examples": 3,
                "num_explored_concrete": 1470,
                "num_explored_lambda": 429,
                "num_explored_none": 256,
                "num_inputs": 3,
                "num_kept_concrete": 430,
                "num_kept_lambda": 149,
                "num_values_explored": 2155,
                "num_values_kept": 579,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4015
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6729652879294,
            "num_unique_values": 1296,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.364954301922474,
                "explored_percent_lambda": 29.498896942956193,
                "explored_percent_none": 16.136148755121337,
                "kept_percent_concrete": 53.03265940902022,
                "kept_percent_lambda": 46.96734059097978,
                "num_examples": 3,
                "num_explored_concrete": 3450,
                "num_explored_lambda": 1872,
                "num_explored_none": 1024,
                "num_inputs": 2,
                "num_kept_concrete": 682,
                "num_kept_lambda": 604,
                "num_values_explored": 6346,
                "num_values_kept": 1286,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67740
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.60287134791724,
            "num_unique_values": 1461,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.8663101604278,
                "explored_percent_lambda": 5.965537730243613,
                "explored_percent_none": 19.16815210932858,
                "kept_percent_concrete": 87.9393521709166,
                "kept_percent_lambda": 12.060647829083392,
                "num_examples": 5,
                "num_explored_concrete": 6300,
                "num_explored_lambda": 502,
                "num_explored_none": 1613,
                "num_inputs": 2,
                "num_kept_concrete": 1276,
                "num_kept_lambda": 175,
                "num_values_explored": 8415,
                "num_values_kept": 1451,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 84927
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84637624793686,
            "num_unique_values": 1358,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.28802957065681,
                "explored_percent_lambda": 14.970145009951663,
                "explored_percent_none": 23.741825419391528,
                "kept_percent_concrete": 66.32047477744807,
                "kept_percent_lambda": 33.67952522255193,
                "num_examples": 3,
                "num_explored_concrete": 4311,
                "num_explored_lambda": 1053,
                "num_explored_none": 1670,
                "num_inputs": 2,
                "num_kept_concrete": 894,
                "num_kept_lambda": 454,
                "num_values_explored": 7034,
                "num_values_kept": 1348,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72192
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92794351722114,
            "num_unique_values": 1405,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.66900175131349,
                "explored_percent_lambda": 29.13548797962108,
                "explored_percent_none": 12.195510269065435,
                "kept_percent_concrete": 54.94269340974212,
                "kept_percent_lambda": 45.05730659025788,
                "num_examples": 3,
                "num_explored_concrete": 3685,
                "num_explored_lambda": 1830,
                "num_explored_none": 766,
                "num_inputs": 1,
                "num_kept_concrete": 767,
                "num_kept_lambda": 629,
                "num_values_explored": 6281,
                "num_values_kept": 1396,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64174
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18104933388531208,
            "num_unique_values": 165,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.59016393442623,
                "explored_percent_lambda": 43.442622950819676,
                "explored_percent_none": 6.967213114754099,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 121,
                "num_explored_lambda": 106,
                "num_explored_none": 17,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 91,
                "num_values_explored": 244,
                "num_values_kept": 156,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 19.403809507144615,
            "num_unique_values": 1432,
            "solution": "Max(Max(Max(3, IntDivide(Maximum(y), 3)), Count((lambda u1: IsOdd(Last(y))), fn_1(Reverse(y)))), Min(4, Maximum(x)))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 73.20665782884078,
                "explored_percent_lambda": 8.823096185005156,
                "explored_percent_none": 17.970245986154072,
                "kept_percent_concrete": 87.76371308016877,
                "kept_percent_lambda": 12.236286919831224,
                "num_examples": 5,
                "num_explored_concrete": 4970,
                "num_explored_lambda": 599,
                "num_explored_none": 1220,
                "num_inputs": 2,
                "num_kept_concrete": 1248,
                "num_kept_lambda": 174,
                "num_values_explored": 6789,
                "num_values_kept": 1422,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 16028
            },
            "success": true,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71943272603676,
            "num_unique_values": 1580,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.79632696071052,
                "explored_percent_lambda": 25.28977871443625,
                "explored_percent_none": 3.9138943248532287,
                "kept_percent_concrete": 57.197452229299365,
                "kept_percent_lambda": 42.802547770700635,
                "num_examples": 3,
                "num_explored_concrete": 4703,
                "num_explored_lambda": 1680,
                "num_explored_none": 260,
                "num_inputs": 2,
                "num_kept_concrete": 898,
                "num_kept_lambda": 672,
                "num_values_explored": 6643,
                "num_values_kept": 1570,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64908
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80155704799108,
            "num_unique_values": 1489,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.4598580010923,
                "explored_percent_lambda": 14.213544511196067,
                "explored_percent_none": 17.326597487711634,
                "kept_percent_concrete": 69.82408660351827,
                "kept_percent_lambda": 30.175913396481732,
                "num_examples": 3,
                "num_explored_concrete": 5014,
                "num_explored_lambda": 1041,
                "num_explored_none": 1269,
                "num_inputs": 3,
                "num_kept_concrete": 1032,
                "num_kept_lambda": 446,
                "num_values_explored": 7324,
                "num_values_kept": 1478,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74634
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.53878241404891,
            "num_unique_values": 846,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 68.6670687575392,
                "explored_percent_lambda": 15.19903498190591,
                "explored_percent_none": 16.133896260554884,
                "kept_percent_concrete": 75.74671445639187,
                "kept_percent_lambda": 24.253285543608126,
                "num_examples": 5,
                "num_explored_concrete": 2277,
                "num_explored_lambda": 504,
                "num_explored_none": 535,
                "num_inputs": 1,
                "num_kept_concrete": 634,
                "num_kept_lambda": 203,
                "num_values_explored": 3316,
                "num_values_kept": 837,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 54178
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87762815412134,
            "num_unique_values": 1389,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.577551350477115,
                "explored_percent_lambda": 22.610383309073267,
                "explored_percent_none": 13.81206534044962,
                "kept_percent_concrete": 56.3768115942029,
                "kept_percent_lambda": 43.6231884057971,
                "num_examples": 3,
                "num_explored_concrete": 3931,
                "num_explored_lambda": 1398,
                "num_explored_none": 854,
                "num_inputs": 1,
                "num_kept_concrete": 778,
                "num_kept_lambda": 602,
                "num_values_explored": 6183,
                "num_values_kept": 1380,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63393
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85036227712408,
            "num_unique_values": 1388,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.0024402147389,
                "explored_percent_lambda": 27.916056612981944,
                "explored_percent_none": 17.08150317227916,
                "kept_percent_concrete": 54.57184325108853,
                "kept_percent_lambda": 45.42815674891147,
                "num_examples": 3,
                "num_explored_concrete": 3381,
                "num_explored_lambda": 1716,
                "num_explored_none": 1050,
                "num_inputs": 2,
                "num_kept_concrete": 752,
                "num_kept_lambda": 626,
                "num_values_explored": 6147,
                "num_values_kept": 1378,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65836
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87925179000013,
            "num_unique_values": 1005,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.06145251396648,
                "explored_percent_lambda": 40.06634078212291,
                "explored_percent_none": 18.872206703910614,
                "kept_percent_concrete": 46.4859437751004,
                "kept_percent_lambda": 53.5140562248996,
                "num_examples": 3,
                "num_explored_concrete": 2352,
                "num_explored_lambda": 2295,
                "num_explored_none": 1081,
                "num_inputs": 1,
                "num_kept_concrete": 463,
                "num_kept_lambda": 533,
                "num_values_explored": 5728,
                "num_values_kept": 996,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60199
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0032810671254992,
            "num_unique_values": 570,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 2)))(u2)), fn_2(0, r), Sort(c))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.59117840684661,
                "explored_percent_lambda": 35.41803818301514,
                "explored_percent_none": 5.990783410138249,
                "kept_percent_concrete": 59.82142857142857,
                "kept_percent_lambda": 40.17857142857143,
                "num_examples": 3,
                "num_explored_concrete": 890,
                "num_explored_lambda": 538,
                "num_explored_none": 91,
                "num_inputs": 2,
                "num_kept_concrete": 335,
                "num_kept_lambda": 225,
                "num_values_explored": 1519,
                "num_values_kept": 560,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3379
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72621705685742,
            "num_unique_values": 1468,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.12782440284055,
                "explored_percent_lambda": 7.475790832795352,
                "explored_percent_none": 14.396384764364106,
                "kept_percent_concrete": 86.35116598079561,
                "kept_percent_lambda": 13.64883401920439,
                "num_examples": 5,
                "num_explored_concrete": 6051,
                "num_explored_lambda": 579,
                "num_explored_none": 1115,
                "num_inputs": 2,
                "num_kept_concrete": 1259,
                "num_kept_lambda": 199,
                "num_values_explored": 7745,
                "num_values_kept": 1458,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78764
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9628209520597,
            "num_unique_values": 1373,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.65085177519503,
                "explored_percent_lambda": 24.502467759910843,
                "explored_percent_none": 22.846680464894124,
                "kept_percent_concrete": 54.105571847507335,
                "kept_percent_lambda": 45.894428152492665,
                "num_examples": 3,
                "num_explored_concrete": 3307,
                "num_explored_lambda": 1539,
                "num_explored_none": 1435,
                "num_inputs": 1,
                "num_kept_concrete": 738,
                "num_kept_lambda": 626,
                "num_values_explored": 6281,
                "num_values_kept": 1364,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63178
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75618824106641,
            "num_unique_values": 1238,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.48899244737265,
                "explored_percent_lambda": 26.72344528362526,
                "explored_percent_none": 13.78756226900209,
                "kept_percent_concrete": 56.59609120521173,
                "kept_percent_lambda": 43.40390879478827,
                "num_examples": 3,
                "num_explored_concrete": 3702,
                "num_explored_lambda": 1663,
                "num_explored_none": 858,
                "num_inputs": 2,
                "num_kept_concrete": 695,
                "num_kept_lambda": 533,
                "num_values_explored": 6223,
                "num_values_kept": 1228,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64227
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.76347575103864,
            "num_unique_values": 1655,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.09947577036185,
                "explored_percent_lambda": 7.019562715765248,
                "explored_percent_none": 10.880961513872906,
                "kept_percent_concrete": 87.29483282674772,
                "kept_percent_lambda": 12.70516717325228,
                "num_examples": 5,
                "num_explored_concrete": 6421,
                "num_explored_lambda": 549,
                "num_explored_none": 851,
                "num_inputs": 2,
                "num_kept_concrete": 1436,
                "num_kept_lambda": 209,
                "num_values_explored": 7821,
                "num_values_kept": 1645,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 78934
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.43107652897015,
            "num_unique_values": 409,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 31.30810527694121,
                "explored_percent_lambda": 11.693073196281262,
                "explored_percent_none": 56.99882152677753,
                "kept_percent_concrete": 82.25,
                "kept_percent_lambda": 17.75,
                "num_examples": 5,
                "num_explored_concrete": 2391,
                "num_explored_lambda": 893,
                "num_explored_none": 4353,
                "num_inputs": 1,
                "num_kept_concrete": 329,
                "num_kept_lambda": 71,
                "num_values_explored": 7637,
                "num_values_kept": 400,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72641
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13196044508367777,
            "num_unique_values": 185,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 87.54448398576513,
                "explored_percent_lambda": 3.9145907473309607,
                "explored_percent_none": 8.540925266903914,
                "kept_percent_concrete": 96.0,
                "kept_percent_lambda": 4.0,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 11,
                "num_explored_none": 24,
                "num_inputs": 2,
                "num_kept_concrete": 168,
                "num_kept_lambda": 7,
                "num_values_explored": 281,
                "num_values_kept": 175,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.148014068137854,
            "num_unique_values": 821,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.86833443054641,
                "explored_percent_lambda": 25.773535220539827,
                "explored_percent_none": 24.358130348913758,
                "kept_percent_concrete": 59.60591133004926,
                "kept_percent_lambda": 40.39408866995074,
                "num_examples": 3,
                "num_explored_concrete": 1515,
                "num_explored_lambda": 783,
                "num_explored_none": 740,
                "num_inputs": 1,
                "num_kept_concrete": 484,
                "num_kept_lambda": 328,
                "num_values_explored": 3038,
                "num_values_kept": 812,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 17276
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.33754860283807,
            "num_unique_values": 399,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 32.07478450892315,
                "explored_percent_lambda": 7.3449071263809635,
                "explored_percent_none": 60.58030836469588,
                "kept_percent_concrete": 89.46015424164524,
                "kept_percent_lambda": 10.539845758354756,
                "num_examples": 5,
                "num_explored_concrete": 2642,
                "num_explored_lambda": 605,
                "num_explored_none": 4990,
                "num_inputs": 2,
                "num_kept_concrete": 348,
                "num_kept_lambda": 41,
                "num_values_explored": 8237,
                "num_values_kept": 389,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 84846
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66024383483455,
            "num_unique_values": 1042,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.03766617429837,
                "explored_percent_lambda": 21.233382570162483,
                "explored_percent_none": 22.728951255539144,
                "kept_percent_concrete": 59.341723136495645,
                "kept_percent_lambda": 40.658276863504355,
                "num_examples": 3,
                "num_explored_concrete": 3035,
                "num_explored_lambda": 1150,
                "num_explored_none": 1231,
                "num_inputs": 1,
                "num_kept_concrete": 613,
                "num_kept_lambda": 420,
                "num_values_explored": 5416,
                "num_values_kept": 1033,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67711
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20767232403159,
            "num_unique_values": 792,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.651048088779284,
                "explored_percent_lambda": 43.40320591861899,
                "explored_percent_none": 3.945745992601726,
                "kept_percent_concrete": 50.95785440613027,
                "kept_percent_lambda": 49.04214559386973,
                "num_examples": 3,
                "num_explored_concrete": 1281,
                "num_explored_lambda": 1056,
                "num_explored_none": 96,
                "num_inputs": 1,
                "num_kept_concrete": 399,
                "num_kept_lambda": 384,
                "num_values_explored": 2433,
                "num_values_kept": 783,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28014
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81738651311025,
            "num_unique_values": 784,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.177570093457945,
                "explored_percent_lambda": 29.30841121495327,
                "explored_percent_none": 7.514018691588785,
                "kept_percent_concrete": 54.96774193548387,
                "kept_percent_lambda": 45.03225806451613,
                "num_examples": 3,
                "num_explored_concrete": 1690,
                "num_explored_lambda": 784,
                "num_explored_none": 201,
                "num_inputs": 1,
                "num_kept_concrete": 426,
                "num_kept_lambda": 349,
                "num_values_explored": 2675,
                "num_values_kept": 775,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28371
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94648219901137,
            "num_unique_values": 838,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.46875,
                "explored_percent_lambda": 29.21195652173913,
                "explored_percent_none": 15.31929347826087,
                "kept_percent_concrete": 61.111111111111114,
                "kept_percent_lambda": 38.888888888888886,
                "num_examples": 3,
                "num_explored_concrete": 1633,
                "num_explored_lambda": 860,
                "num_explored_none": 451,
                "num_inputs": 2,
                "num_kept_concrete": 506,
                "num_kept_lambda": 322,
                "num_values_explored": 2944,
                "num_values_kept": 828,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30858
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12075198302045,
            "num_unique_values": 686,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.87263339070568,
                "explored_percent_lambda": 20.481927710843372,
                "explored_percent_none": 25.645438898450948,
                "kept_percent_concrete": 72.52584933530281,
                "kept_percent_lambda": 27.474150664697195,
                "num_examples": 5,
                "num_explored_concrete": 1565,
                "num_explored_lambda": 595,
                "num_explored_none": 745,
                "num_inputs": 1,
                "num_kept_concrete": 491,
                "num_kept_lambda": 186,
                "num_values_explored": 2905,
                "num_values_kept": 677,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30158
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.38802068890072,
            "num_unique_values": 683,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.59011033919084,
                "explored_percent_lambda": 33.8373518594197,
                "explored_percent_none": 17.572537801389455,
                "kept_percent_concrete": 49.70326409495549,
                "kept_percent_lambda": 50.29673590504451,
                "num_examples": 3,
                "num_explored_concrete": 1189,
                "num_explored_lambda": 828,
                "num_explored_none": 430,
                "num_inputs": 1,
                "num_kept_concrete": 335,
                "num_kept_lambda": 339,
                "num_values_explored": 2447,
                "num_values_kept": 674,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28040
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05307496385649,
            "num_unique_values": 687,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.36356678147723,
                "explored_percent_lambda": 31.611174894756985,
                "explored_percent_none": 18.025258323765787,
                "kept_percent_concrete": 53.097345132743364,
                "kept_percent_lambda": 46.902654867256636,
                "num_examples": 3,
                "num_explored_concrete": 1316,
                "num_explored_lambda": 826,
                "num_explored_none": 471,
                "num_inputs": 1,
                "num_kept_concrete": 360,
                "num_kept_lambda": 318,
                "num_values_explored": 2613,
                "num_values_kept": 678,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28185
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92092428798787,
            "num_unique_values": 1550,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.67600487210719,
                "explored_percent_lambda": 7.356881851400731,
                "explored_percent_none": 16.967113276492082,
                "kept_percent_concrete": 87.40259740259741,
                "kept_percent_lambda": 12.597402597402597,
                "num_examples": 5,
                "num_explored_concrete": 6213,
                "num_explored_lambda": 604,
                "num_explored_none": 1393,
                "num_inputs": 2,
                "num_kept_concrete": 1346,
                "num_kept_lambda": 194,
                "num_values_explored": 8210,
                "num_values_kept": 1540,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65480
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82185351406224,
            "num_unique_values": 1308,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.09964412811388,
                "explored_percent_lambda": 23.540925266903916,
                "explored_percent_none": 14.359430604982206,
                "kept_percent_concrete": 59.399075500770415,
                "kept_percent_lambda": 40.600924499229585,
                "num_examples": 3,
                "num_explored_concrete": 3490,
                "num_explored_lambda": 1323,
                "num_explored_none": 807,
                "num_inputs": 2,
                "num_kept_concrete": 771,
                "num_kept_lambda": 527,
                "num_values_explored": 5620,
                "num_values_kept": 1298,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67526
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74989359499887,
            "num_unique_values": 1276,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.68503525724732,
                "explored_percent_lambda": 8.122225124053278,
                "explored_percent_none": 28.1927396186994,
                "kept_percent_concrete": 86.17693522906794,
                "kept_percent_lambda": 13.823064770932069,
                "num_examples": 5,
                "num_explored_concrete": 4877,
                "num_explored_lambda": 622,
                "num_explored_none": 2159,
                "num_inputs": 2,
                "num_kept_concrete": 1091,
                "num_kept_lambda": 175,
                "num_values_explored": 7658,
                "num_values_kept": 1266,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 77652
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.6974390449468,
            "num_unique_values": 1590,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.97804938887504,
                "explored_percent_lambda": 5.999002244948865,
                "explored_percent_none": 12.022948366176104,
                "kept_percent_concrete": 88.35443037974683,
                "kept_percent_lambda": 11.645569620253164,
                "num_examples": 5,
                "num_explored_concrete": 6573,
                "num_explored_lambda": 481,
                "num_explored_none": 964,
                "num_inputs": 2,
                "num_kept_concrete": 1396,
                "num_kept_lambda": 184,
                "num_values_explored": 8018,
                "num_values_kept": 1580,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82603
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 82.091240467038,
            "num_unique_values": 235,
            "solution": "Count((lambda u1: ((lambda v1: Equal(n, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.1078431372549,
                "explored_percent_lambda": 19.526143790849673,
                "explored_percent_none": 23.366013071895424,
                "kept_percent_concrete": 77.77777777777777,
                "kept_percent_lambda": 22.22222222222222,
                "num_examples": 5,
                "num_explored_concrete": 699,
                "num_explored_lambda": 239,
                "num_explored_none": 286,
                "num_inputs": 2,
                "num_kept_concrete": 175,
                "num_kept_lambda": 50,
                "num_values_explored": 1224,
                "num_values_kept": 225,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 69939
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.34
}