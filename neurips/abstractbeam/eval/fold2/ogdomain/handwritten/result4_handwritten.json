{
    "num_tasks": 50,
    "num_tasks_solved": 13,
    "results": [
        {
            "elapsed_time": 0.6912885708734393,
            "num_unique_values": 284,
            "solution": "Sort(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.742802303262955,
                "explored_percent_lambda": 35.31669865642994,
                "explored_percent_none": 10.940499040307103,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 280,
                "num_explored_lambda": 184,
                "num_explored_none": 57,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 521,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.09604597999714315,
            "num_unique_values": 83,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11764705882353,
                "explored_percent_lambda": 5.882352941176471,
                "explored_percent_none": 45.0,
                "kept_percent_concrete": 95.89041095890411,
                "kept_percent_lambda": 4.109589041095891,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 20,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 70,
                "num_kept_lambda": 3,
                "num_values_explored": 340,
                "num_values_kept": 73,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 340
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.57716584694572,
            "num_unique_values": 520,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 44.31239388794567,
                "explored_percent_lambda": 29.994340690435767,
                "explored_percent_none": 25.693265421618563,
                "kept_percent_concrete": 55.38160469667319,
                "kept_percent_lambda": 44.61839530332681,
                "num_examples": 3,
                "num_explored_concrete": 783,
                "num_explored_lambda": 530,
                "num_explored_none": 454,
                "num_inputs": 1,
                "num_kept_concrete": 283,
                "num_kept_lambda": 228,
                "num_values_explored": 1767,
                "num_values_kept": 511,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22315
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91125925211236,
            "num_unique_values": 1235,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.04912047792897,
                "explored_percent_lambda": 27.97875871224693,
                "explored_percent_none": 17.972120809824094,
                "kept_percent_concrete": 50.0815660685155,
                "kept_percent_lambda": 49.9184339314845,
                "num_examples": 3,
                "num_explored_concrete": 3257,
                "num_explored_lambda": 1686,
                "num_explored_none": 1083,
                "num_inputs": 1,
                "num_kept_concrete": 614,
                "num_kept_lambda": 612,
                "num_values_explored": 6026,
                "num_values_kept": 1226,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58275
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.35408397507853806,
            "num_unique_values": 312,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 73.92996108949416,
                "explored_percent_lambda": 23.994811932555123,
                "explored_percent_none": 2.0752269779507135,
                "kept_percent_concrete": 74.17218543046357,
                "kept_percent_lambda": 25.827814569536425,
                "num_examples": 3,
                "num_explored_concrete": 570,
                "num_explored_lambda": 185,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 78,
                "num_values_explored": 771,
                "num_values_kept": 302,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91036334494129,
            "num_unique_values": 1346,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.84739782416936,
                "explored_percent_lambda": 13.848867980005881,
                "explored_percent_none": 17.303734195824756,
                "kept_percent_concrete": 76.29020194465221,
                "kept_percent_lambda": 23.709798055347793,
                "num_examples": 5,
                "num_explored_concrete": 4683,
                "num_explored_lambda": 942,
                "num_explored_none": 1177,
                "num_inputs": 1,
                "num_kept_concrete": 1020,
                "num_kept_lambda": 317,
                "num_values_explored": 6802,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72272
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5057967118918896,
            "num_unique_values": 213,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 52.577319587628864,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 6.185567010309279,
                "kept_percent_concrete": 48.529411764705884,
                "kept_percent_lambda": 51.470588235294116,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 120,
                "num_explored_none": 18,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 105,
                "num_values_explored": 291,
                "num_values_kept": 204,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95365567901172,
            "num_unique_values": 1048,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.01652892561984,
                "explored_percent_lambda": 23.00826446280992,
                "explored_percent_none": 22.975206611570247,
                "kept_percent_concrete": 63.71511068334937,
                "kept_percent_lambda": 36.28488931665063,
                "num_examples": 5,
                "num_explored_concrete": 3268,
                "num_explored_lambda": 1392,
                "num_explored_none": 1390,
                "num_inputs": 1,
                "num_kept_concrete": 662,
                "num_kept_lambda": 377,
                "num_values_explored": 6050,
                "num_values_kept": 1039,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68398
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95918750902638,
            "num_unique_values": 1560,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.64994867282593,
                "explored_percent_lambda": 15.662120545534536,
                "explored_percent_none": 11.687930781639537,
                "kept_percent_concrete": 74.79045776918117,
                "kept_percent_lambda": 25.209542230818826,
                "num_examples": 5,
                "num_explored_concrete": 4954,
                "num_explored_lambda": 1068,
                "num_explored_none": 797,
                "num_inputs": 1,
                "num_kept_concrete": 1160,
                "num_kept_lambda": 391,
                "num_values_explored": 6819,
                "num_values_kept": 1551,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67025
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 82.40670154290274,
            "num_unique_values": 262,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 29.937106918238992,
                "explored_percent_lambda": 58.113207547169814,
                "explored_percent_none": 11.949685534591195,
                "kept_percent_concrete": 44.66403162055336,
                "kept_percent_lambda": 55.33596837944664,
                "num_examples": 3,
                "num_explored_concrete": 238,
                "num_explored_lambda": 462,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 140,
                "num_values_explored": 795,
                "num_values_kept": 253,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 46511
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68333576992154,
            "num_unique_values": 1319,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.3279098873592,
                "explored_percent_lambda": 3.4292866082603255,
                "explored_percent_none": 14.242803504380475,
                "kept_percent_concrete": 94.27043544690603,
                "kept_percent_lambda": 5.729564553093965,
                "num_examples": 5,
                "num_explored_concrete": 6578,
                "num_explored_lambda": 274,
                "num_explored_none": 1138,
                "num_inputs": 2,
                "num_kept_concrete": 1234,
                "num_kept_lambda": 75,
                "num_values_explored": 7990,
                "num_values_kept": 1309,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 80119
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06108915689401,
            "num_unique_values": 1632,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.64578766050737,
                "explored_percent_lambda": 26.150955214531788,
                "explored_percent_none": 7.203257124960852,
                "kept_percent_concrete": 57.028360049321826,
                "kept_percent_lambda": 42.971639950678174,
                "num_examples": 3,
                "num_explored_concrete": 4256,
                "num_explored_lambda": 1670,
                "num_explored_none": 460,
                "num_inputs": 2,
                "num_kept_concrete": 925,
                "num_kept_lambda": 697,
                "num_values_explored": 6386,
                "num_values_kept": 1622,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 66687
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 11.988710962003097,
            "num_unique_values": 283,
            "solution": "fn_0(0, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 46.041412911084045,
                "explored_percent_lambda": 34.1047503045067,
                "explored_percent_none": 19.853836784409257,
                "kept_percent_concrete": 58.394160583941606,
                "kept_percent_lambda": 41.605839416058394,
                "num_examples": 5,
                "num_explored_concrete": 378,
                "num_explored_lambda": 280,
                "num_explored_none": 163,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 114,
                "num_values_explored": 821,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9503
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.15716338600032,
            "num_unique_values": 837,
            "solution": "Filter((lambda u1: ((lambda v1: IsOdd(((lambda v1: Min(0, v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 58.60612460401267,
                "explored_percent_lambda": 31.925378387891588,
                "explored_percent_none": 9.46849700809574,
                "kept_percent_concrete": 54.227053140096615,
                "kept_percent_lambda": 45.772946859903385,
                "num_examples": 3,
                "num_explored_concrete": 1665,
                "num_explored_lambda": 907,
                "num_explored_none": 269,
                "num_inputs": 1,
                "num_kept_concrete": 449,
                "num_kept_lambda": 379,
                "num_values_explored": 2841,
                "num_values_kept": 828,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10517
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73609851510264,
            "num_unique_values": 1441,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.596613813491,
                "explored_percent_lambda": 11.273851115291588,
                "explored_percent_none": 8.129535071217415,
                "kept_percent_concrete": 78.6013986013986,
                "kept_percent_lambda": 21.3986013986014,
                "num_examples": 3,
                "num_explored_concrete": 5998,
                "num_explored_lambda": 839,
                "num_explored_none": 605,
                "num_inputs": 3,
                "num_kept_concrete": 1124,
                "num_kept_lambda": 306,
                "num_values_explored": 7442,
                "num_values_kept": 1430,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 76180
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79832918406464,
            "num_unique_values": 1252,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.27120327828139,
                "explored_percent_lambda": 10.393642120948714,
                "explored_percent_none": 17.3351546007699,
                "kept_percent_concrete": 76.22884770346495,
                "kept_percent_lambda": 23.771152296535053,
                "num_examples": 3,
                "num_explored_concrete": 5820,
                "num_explored_lambda": 837,
                "num_explored_none": 1396,
                "num_inputs": 3,
                "num_kept_concrete": 946,
                "num_kept_lambda": 295,
                "num_values_explored": 8053,
                "num_values_kept": 1241,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82634
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.422143999952823,
            "num_unique_values": 591,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 69.7749196141479,
                "explored_percent_lambda": 19.33853927423059,
                "explored_percent_none": 10.886541111621497,
                "kept_percent_concrete": 75.0,
                "kept_percent_lambda": 25.0,
                "num_examples": 3,
                "num_explored_concrete": 1519,
                "num_explored_lambda": 421,
                "num_explored_none": 237,
                "num_inputs": 3,
                "num_kept_concrete": 435,
                "num_kept_lambda": 145,
                "num_values_explored": 2177,
                "num_values_kept": 580,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4037
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68650882388465,
            "num_unique_values": 1342,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.719298245614034,
                "explored_percent_lambda": 23.450292397660817,
                "explored_percent_none": 18.830409356725145,
                "kept_percent_concrete": 55.85585585585586,
                "kept_percent_lambda": 44.14414414414414,
                "num_examples": 3,
                "num_explored_concrete": 3948,
                "num_explored_lambda": 1604,
                "num_explored_none": 1288,
                "num_inputs": 2,
                "num_kept_concrete": 744,
                "num_kept_lambda": 588,
                "num_values_explored": 6840,
                "num_values_kept": 1332,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68106
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.62964911293238,
            "num_unique_values": 1432,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.32683955825784,
                "explored_percent_lambda": 8.326095049013524,
                "explored_percent_none": 17.347065392728627,
                "kept_percent_concrete": 86.14627285513362,
                "kept_percent_lambda": 13.853727144866385,
                "num_examples": 5,
                "num_explored_concrete": 5990,
                "num_explored_lambda": 671,
                "num_explored_none": 1398,
                "num_inputs": 2,
                "num_kept_concrete": 1225,
                "num_kept_lambda": 197,
                "num_values_explored": 8059,
                "num_values_kept": 1422,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 82956
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86904339003377,
            "num_unique_values": 1376,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.741672834937084,
                "explored_percent_lambda": 17.70540340488527,
                "explored_percent_none": 23.552923760177645,
                "kept_percent_concrete": 64.56808199121522,
                "kept_percent_lambda": 35.43191800878477,
                "num_examples": 3,
                "num_explored_concrete": 3968,
                "num_explored_lambda": 1196,
                "num_explored_none": 1591,
                "num_inputs": 2,
                "num_kept_concrete": 882,
                "num_kept_lambda": 484,
                "num_values_explored": 6755,
                "num_values_kept": 1366,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70675
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93486202484928,
            "num_unique_values": 1431,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.84401251853072,
                "explored_percent_lambda": 29.73151045956185,
                "explored_percent_none": 13.424477021907428,
                "kept_percent_concrete": 55.27426160337553,
                "kept_percent_lambda": 44.72573839662447,
                "num_examples": 3,
                "num_explored_concrete": 3451,
                "num_explored_lambda": 1805,
                "num_explored_none": 815,
                "num_inputs": 1,
                "num_kept_concrete": 786,
                "num_kept_lambda": 636,
                "num_values_explored": 6071,
                "num_values_kept": 1422,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61721
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18499943986535072,
            "num_unique_values": 165,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 49.59016393442623,
                "explored_percent_lambda": 43.442622950819676,
                "explored_percent_none": 6.967213114754099,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 121,
                "num_explored_lambda": 106,
                "num_explored_none": 17,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 91,
                "num_values_explored": 244,
                "num_values_kept": 156,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72335563902743,
            "num_unique_values": 797,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.34883720930233,
                "explored_percent_lambda": 13.406292749658002,
                "explored_percent_none": 16.244870041039672,
                "kept_percent_concrete": 81.70266836086404,
                "kept_percent_lambda": 18.297331639135958,
                "num_examples": 5,
                "num_explored_concrete": 2057,
                "num_explored_lambda": 392,
                "num_explored_none": 475,
                "num_inputs": 2,
                "num_kept_concrete": 643,
                "num_kept_lambda": 144,
                "num_values_explored": 2924,
                "num_values_kept": 787,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 34219
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89723284519278,
            "num_unique_values": 822,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.5351506456241,
                "explored_percent_lambda": 27.40315638450502,
                "explored_percent_none": 6.061692969870875,
                "kept_percent_concrete": 59.72906403940887,
                "kept_percent_lambda": 40.27093596059113,
                "num_examples": 3,
                "num_explored_concrete": 1855,
                "num_explored_lambda": 764,
                "num_explored_none": 169,
                "num_inputs": 2,
                "num_kept_concrete": 485,
                "num_kept_lambda": 327,
                "num_values_explored": 2788,
                "num_values_kept": 812,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30709
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97382333292626,
            "num_unique_values": 758,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.86680469289165,
                "explored_percent_lambda": 22.601794340924776,
                "explored_percent_none": 20.531400966183575,
                "kept_percent_concrete": 63.98929049531459,
                "kept_percent_lambda": 36.01070950468541,
                "num_examples": 3,
                "num_explored_concrete": 1648,
                "num_explored_lambda": 655,
                "num_explored_none": 595,
                "num_inputs": 3,
                "num_kept_concrete": 478,
                "num_kept_lambda": 269,
                "num_values_explored": 2898,
                "num_values_kept": 747,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30931
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.12754070316441,
            "num_unique_values": 1209,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.58628134861318,
                "explored_percent_lambda": 12.423185517355922,
                "explored_percent_none": 16.99053313403089,
                "kept_percent_concrete": 78.91666666666667,
                "kept_percent_lambda": 21.083333333333332,
                "num_examples": 5,
                "num_explored_concrete": 4250,
                "num_explored_lambda": 748,
                "num_explored_none": 1023,
                "num_inputs": 1,
                "num_kept_concrete": 947,
                "num_kept_lambda": 253,
                "num_values_explored": 6021,
                "num_values_kept": 1200,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 33438
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1703659419436,
            "num_unique_values": 833,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.12359550561798,
                "explored_percent_lambda": 27.677902621722847,
                "explored_percent_none": 11.198501872659175,
                "kept_percent_concrete": 56.189320388349515,
                "kept_percent_lambda": 43.810679611650485,
                "num_examples": 3,
                "num_explored_concrete": 1632,
                "num_explored_lambda": 739,
                "num_explored_none": 299,
                "num_inputs": 1,
                "num_kept_concrete": 463,
                "num_kept_lambda": 361,
                "num_values_explored": 2670,
                "num_values_kept": 824,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27486
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11831063800491,
            "num_unique_values": 702,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.33462432223083,
                "explored_percent_lambda": 28.350116189000776,
                "explored_percent_none": 23.315259488768397,
                "kept_percent_concrete": 56.06936416184971,
                "kept_percent_lambda": 43.93063583815029,
                "num_examples": 3,
                "num_explored_concrete": 1248,
                "num_explored_lambda": 732,
                "num_explored_none": 602,
                "num_inputs": 2,
                "num_kept_concrete": 388,
                "num_kept_lambda": 304,
                "num_values_explored": 2582,
                "num_values_kept": 692,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28558
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24806711706333,
            "num_unique_values": 562,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 37.062339880444064,
                "explored_percent_lambda": 34.54312553373185,
                "explored_percent_none": 28.394534585824083,
                "kept_percent_concrete": 48.282097649186255,
                "kept_percent_lambda": 51.717902350813745,
                "num_examples": 3,
                "num_explored_concrete": 868,
                "num_explored_lambda": 809,
                "num_explored_none": 665,
                "num_inputs": 1,
                "num_kept_concrete": 267,
                "num_kept_lambda": 286,
                "num_values_explored": 2342,
                "num_values_kept": 553,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31754
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 89.47776005789638,
            "num_unique_values": 764,
            "solution": "Take(fn_0(Last(fn_1(c)), ZipWith((lambda u1, u2: ((lambda v1: IntDivide(v1, Square(3))))(u2)), fn_2(0, r), fn_1(Reverse(c)))), Sort(c))",
            "solution_weight": 19,
            "stats": {
                "explored_percent_concrete": 63.62372567191844,
                "explored_percent_lambda": 31.881371640407785,
                "explored_percent_none": 4.494902687673772,
                "kept_percent_concrete": 54.774535809018566,
                "kept_percent_lambda": 45.225464190981434,
                "num_examples": 3,
                "num_explored_concrete": 1373,
                "num_explored_lambda": 688,
                "num_explored_none": 97,
                "num_inputs": 2,
                "num_kept_concrete": 413,
                "num_kept_lambda": 341,
                "num_values_explored": 2158,
                "num_values_kept": 754,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 25691
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99013033485971,
            "num_unique_values": 790,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.9887721839913,
                "explored_percent_lambda": 16.696848967765302,
                "explored_percent_none": 12.31437884824339,
                "kept_percent_concrete": 78.84615384615384,
                "kept_percent_lambda": 21.153846153846153,
                "num_examples": 5,
                "num_explored_concrete": 1960,
                "num_explored_lambda": 461,
                "num_explored_none": 340,
                "num_inputs": 2,
                "num_kept_concrete": 615,
                "num_kept_lambda": 165,
                "num_values_explored": 2761,
                "num_values_kept": 780,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30207
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.31700599589385,
            "num_unique_values": 695,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.066219614417435,
                "explored_percent_lambda": 31.05616093880972,
                "explored_percent_none": 21.87761944677284,
                "kept_percent_concrete": 47.8134110787172,
                "kept_percent_lambda": 52.1865889212828,
                "num_examples": 3,
                "num_explored_concrete": 1123,
                "num_explored_lambda": 741,
                "num_explored_none": 522,
                "num_inputs": 1,
                "num_kept_concrete": 328,
                "num_kept_lambda": 358,
                "num_values_explored": 2386,
                "num_values_kept": 686,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26149
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11389674502425,
            "num_unique_values": 715,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.35490120108486,
                "explored_percent_lambda": 24.09918636187524,
                "explored_percent_none": 11.545912437039908,
                "kept_percent_concrete": 61.13475177304964,
                "kept_percent_lambda": 38.86524822695036,
                "num_examples": 3,
                "num_explored_concrete": 1661,
                "num_explored_lambda": 622,
                "num_explored_none": 298,
                "num_inputs": 2,
                "num_kept_concrete": 431,
                "num_kept_lambda": 274,
                "num_values_explored": 2581,
                "num_values_kept": 705,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28321
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14002226199955,
            "num_unique_values": 854,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.020825979527,
                "explored_percent_lambda": 12.989763501588422,
                "explored_percent_none": 9.989410518884574,
                "kept_percent_concrete": 81.99052132701422,
                "kept_percent_lambda": 18.009478672985782,
                "num_examples": 5,
                "num_explored_concrete": 2182,
                "num_explored_lambda": 368,
                "num_explored_none": 283,
                "num_inputs": 2,
                "num_kept_concrete": 692,
                "num_kept_lambda": 152,
                "num_values_explored": 2833,
                "num_values_kept": 844,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 29771
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.63317209086381,
            "num_unique_values": 217,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 29.41176470588235,
                "explored_percent_lambda": 14.313725490196079,
                "explored_percent_none": 56.27450980392157,
                "kept_percent_concrete": 72.11538461538461,
                "kept_percent_lambda": 27.884615384615383,
                "num_examples": 5,
                "num_explored_concrete": 750,
                "num_explored_lambda": 365,
                "num_explored_none": 1435,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 58,
                "num_values_explored": 2550,
                "num_values_kept": 208,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27625
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2034927629865706,
            "num_unique_values": 185,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 87.54448398576513,
                "explored_percent_lambda": 3.9145907473309607,
                "explored_percent_none": 8.540925266903914,
                "kept_percent_concrete": 96.0,
                "kept_percent_lambda": 4.0,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 11,
                "num_explored_none": 24,
                "num_inputs": 2,
                "num_kept_concrete": 168,
                "num_kept_lambda": 7,
                "num_values_explored": 281,
                "num_values_kept": 175,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01437919097953,
            "num_unique_values": 682,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.21995094031071,
                "explored_percent_lambda": 32.29762878168438,
                "explored_percent_none": 20.482420278004906,
                "kept_percent_concrete": 54.38335809806835,
                "kept_percent_lambda": 45.61664190193165,
                "num_examples": 3,
                "num_explored_concrete": 1155,
                "num_explored_lambda": 790,
                "num_explored_none": 501,
                "num_inputs": 1,
                "num_kept_concrete": 366,
                "num_kept_lambda": 307,
                "num_values_explored": 2446,
                "num_values_kept": 673,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25193
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.53418945590965,
            "num_unique_values": 222,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.390379278445884,
                "explored_percent_lambda": 5.026210299105767,
                "explored_percent_none": 56.58341042244835,
                "kept_percent_concrete": 90.56603773584905,
                "kept_percent_lambda": 9.433962264150944,
                "num_examples": 5,
                "num_explored_concrete": 1245,
                "num_explored_lambda": 163,
                "num_explored_none": 1835,
                "num_inputs": 2,
                "num_kept_concrete": 192,
                "num_kept_lambda": 20,
                "num_values_explored": 3243,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 32101
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91068548988551,
            "num_unique_values": 645,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.95391338895511,
                "explored_percent_lambda": 27.334127930075486,
                "explored_percent_none": 24.711958680969406,
                "kept_percent_concrete": 58.64779874213836,
                "kept_percent_lambda": 41.35220125786164,
                "num_examples": 3,
                "num_explored_concrete": 1207,
                "num_explored_lambda": 688,
                "num_explored_none": 622,
                "num_inputs": 1,
                "num_kept_concrete": 373,
                "num_kept_lambda": 263,
                "num_values_explored": 2517,
                "num_values_kept": 636,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 25855
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.48597534606233,
            "num_unique_values": 744,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.154164939908824,
                "explored_percent_lambda": 39.03854123497721,
                "explored_percent_none": 4.807293825113966,
                "kept_percent_concrete": 50.06802721088435,
                "kept_percent_lambda": 49.93197278911565,
                "num_examples": 3,
                "num_explored_concrete": 1355,
                "num_explored_lambda": 942,
                "num_explored_none": 116,
                "num_inputs": 1,
                "num_kept_concrete": 368,
                "num_kept_lambda": 367,
                "num_values_explored": 2413,
                "num_values_kept": 735,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26952
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96637208596803,
            "num_unique_values": 749,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.68461244749905,
                "explored_percent_lambda": 37.83886979763268,
                "explored_percent_none": 8.47651775486827,
                "kept_percent_concrete": 50.945945945945944,
                "kept_percent_lambda": 49.054054054054056,
                "num_examples": 3,
                "num_explored_concrete": 1406,
                "num_explored_lambda": 991,
                "num_explored_none": 222,
                "num_inputs": 1,
                "num_kept_concrete": 377,
                "num_kept_lambda": 363,
                "num_values_explored": 2619,
                "num_values_kept": 740,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27435
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92716058786027,
            "num_unique_values": 768,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.24284077892325,
                "explored_percent_lambda": 28.4077892325315,
                "explored_percent_none": 15.349369988545247,
                "kept_percent_concrete": 58.443271767810025,
                "kept_percent_lambda": 41.556728232189975,
                "num_examples": 3,
                "num_explored_concrete": 1473,
                "num_explored_lambda": 744,
                "num_explored_none": 402,
                "num_inputs": 2,
                "num_kept_concrete": 443,
                "num_kept_lambda": 315,
                "num_values_explored": 2619,
                "num_values_kept": 758,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28481
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32624483807012,
            "num_unique_values": 528,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.88466308391897,
                "explored_percent_lambda": 21.08309218685407,
                "explored_percent_none": 38.03224472922695,
                "kept_percent_concrete": 70.90558766859345,
                "kept_percent_lambda": 29.094412331406552,
                "num_examples": 5,
                "num_explored_concrete": 989,
                "num_explored_lambda": 510,
                "num_explored_none": 920,
                "num_inputs": 1,
                "num_kept_concrete": 368,
                "num_kept_lambda": 151,
                "num_values_explored": 2419,
                "num_values_kept": 519,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 27306
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.53805098403245,
            "num_unique_values": 678,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.06755076668048,
                "explored_percent_lambda": 34.02403646912557,
                "explored_percent_none": 16.90841276419395,
                "kept_percent_concrete": 51.71898355754858,
                "kept_percent_lambda": 48.28101644245142,
                "num_examples": 3,
                "num_explored_concrete": 1184,
                "num_explored_lambda": 821,
                "num_explored_none": 408,
                "num_inputs": 1,
                "num_kept_concrete": 346,
                "num_kept_lambda": 323,
                "num_values_explored": 2413,
                "num_values_kept": 669,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 26014
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.12183613702655,
            "num_unique_values": 522,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, 4)))(u1)), Map((lambda u1: ((lambda v1: Multiply(v1, 3)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 48.87339055793991,
                "explored_percent_lambda": 34.603004291845494,
                "explored_percent_none": 16.523605150214593,
                "kept_percent_concrete": 53.801169590643276,
                "kept_percent_lambda": 46.198830409356724,
                "num_examples": 3,
                "num_explored_concrete": 911,
                "num_explored_lambda": 645,
                "num_explored_none": 308,
                "num_inputs": 1,
                "num_kept_concrete": 276,
                "num_kept_lambda": 237,
                "num_values_explored": 1864,
                "num_values_kept": 513,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 6178
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99304383201525,
            "num_unique_values": 731,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.26171468240194,
                "explored_percent_lambda": 16.17493925720236,
                "explored_percent_none": 17.563346060395695,
                "kept_percent_concrete": 78.08599167822469,
                "kept_percent_lambda": 21.914008321775313,
                "num_examples": 5,
                "num_explored_concrete": 1909,
                "num_explored_lambda": 466,
                "num_explored_none": 506,
                "num_inputs": 2,
                "num_kept_concrete": 563,
                "num_kept_lambda": 158,
                "num_values_explored": 2881,
                "num_values_kept": 721,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 30454
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07586520491168,
            "num_unique_values": 795,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.22641509433962,
                "explored_percent_lambda": 25.735849056603772,
                "explored_percent_none": 16.037735849056602,
                "kept_percent_concrete": 59.23566878980892,
                "kept_percent_lambda": 40.76433121019108,
                "num_examples": 3,
                "num_explored_concrete": 1543,
                "num_explored_lambda": 682,
                "num_explored_none": 425,
                "num_inputs": 2,
                "num_kept_concrete": 465,
                "num_kept_lambda": 320,
                "num_values_explored": 2650,
                "num_values_kept": 785,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28681
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97232908918522,
            "num_unique_values": 650,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.116269996098325,
                "explored_percent_lambda": 18.88412017167382,
                "explored_percent_none": 26.999609832227858,
                "kept_percent_concrete": 80.3125,
                "kept_percent_lambda": 19.6875,
                "num_examples": 5,
                "num_explored_concrete": 1387,
                "num_explored_lambda": 484,
                "num_explored_none": 692,
                "num_inputs": 2,
                "num_kept_concrete": 514,
                "num_kept_lambda": 126,
                "num_values_explored": 2563,
                "num_values_kept": 640,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 28415
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.932360855164,
            "num_unique_values": 748,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.24949014276002,
                "explored_percent_lambda": 13.086335825968728,
                "explored_percent_none": 13.664174031271244,
                "kept_percent_concrete": 79.53929539295393,
                "kept_percent_lambda": 20.460704607046072,
                "num_examples": 5,
                "num_explored_concrete": 2155,
                "num_explored_lambda": 385,
                "num_explored_none": 402,
                "num_inputs": 2,
                "num_kept_concrete": 587,
                "num_kept_lambda": 151,
                "num_values_explored": 2942,
                "num_values_kept": 738,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31106
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.89791760290973,
            "num_unique_values": 623,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.80914247580914,
                "explored_percent_lambda": 9.342676009342677,
                "explored_percent_none": 14.848181514848182,
                "kept_percent_concrete": 89.8858075040783,
                "kept_percent_lambda": 10.114192495921696,
                "num_examples": 5,
                "num_explored_concrete": 2272,
                "num_explored_lambda": 280,
                "num_explored_none": 445,
                "num_inputs": 2,
                "num_kept_concrete": 551,
                "num_kept_lambda": 62,
                "num_values_explored": 2997,
                "num_values_kept": 613,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31708
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.26
}