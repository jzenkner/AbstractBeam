{
    "num_tasks": 50,
    "num_tasks_solved": 15,
    "results": [
        {
            "elapsed_time": 0.6782797649502754,
            "num_unique_values": 241,
            "solution": "Sort(Reverse(Map((lambda u1: ((lambda v1: Square(v1)))(u1)), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.963531669865645,
                "explored_percent_lambda": 51.43953934740883,
                "explored_percent_none": 9.596928982725528,
                "kept_percent_concrete": 43.53448275862069,
                "kept_percent_lambda": 56.46551724137931,
                "num_examples": 3,
                "num_explored_concrete": 203,
                "num_explored_lambda": 268,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 131,
                "num_values_explored": 521,
                "num_values_kept": 232,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.8085867390036583,
            "num_unique_values": 162,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 19.142066420664207,
                "explored_percent_lambda": 14.760147601476016,
                "explored_percent_none": 66.09778597785977,
                "kept_percent_concrete": 73.6842105263158,
                "kept_percent_lambda": 26.31578947368421,
                "num_examples": 5,
                "num_explored_concrete": 415,
                "num_explored_lambda": 320,
                "num_explored_none": 1433,
                "num_inputs": 2,
                "num_kept_concrete": 112,
                "num_kept_lambda": 40,
                "num_values_explored": 2168,
                "num_values_kept": 152,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3718
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.7858691001310945,
            "num_unique_values": 511,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(((lambda v1: Square(v1)))(v1), v1)))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 30.585559977259805,
                "explored_percent_lambda": 47.86810687890847,
                "explored_percent_none": 21.546333143831724,
                "kept_percent_concrete": 51.99203187250996,
                "kept_percent_lambda": 48.00796812749004,
                "num_examples": 3,
                "num_explored_concrete": 538,
                "num_explored_lambda": 842,
                "num_explored_none": 379,
                "num_inputs": 1,
                "num_kept_concrete": 261,
                "num_kept_lambda": 241,
                "num_values_explored": 1759,
                "num_values_kept": 502,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3619
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87858042912558,
            "num_unique_values": 1191,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.74641148325359,
                "explored_percent_lambda": 41.6267942583732,
                "explored_percent_none": 17.626794258373206,
                "kept_percent_concrete": 47.2927241962775,
                "kept_percent_lambda": 52.7072758037225,
                "num_examples": 3,
                "num_explored_concrete": 2129,
                "num_explored_lambda": 2175,
                "num_explored_none": 921,
                "num_inputs": 1,
                "num_kept_concrete": 559,
                "num_kept_lambda": 623,
                "num_values_explored": 5225,
                "num_values_kept": 1182,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53764
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3721160900313407,
            "num_unique_values": 291,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 63.16472114137484,
                "explored_percent_lambda": 29.312581063553825,
                "explored_percent_none": 7.522697795071336,
                "kept_percent_concrete": 64.76868327402136,
                "kept_percent_lambda": 35.23131672597865,
                "num_examples": 3,
                "num_explored_concrete": 487,
                "num_explored_lambda": 226,
                "num_explored_none": 58,
                "num_inputs": 2,
                "num_kept_concrete": 182,
                "num_kept_lambda": 99,
                "num_values_explored": 771,
                "num_values_kept": 281,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 771
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0082406848669,
            "num_unique_values": 1263,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.48974518334369,
                "explored_percent_lambda": 17.04474829086389,
                "explored_percent_none": 14.465506525792417,
                "kept_percent_concrete": 73.52472089314195,
                "kept_percent_lambda": 26.475279106858054,
                "num_examples": 5,
                "num_explored_concrete": 4408,
                "num_explored_lambda": 1097,
                "num_explored_none": 931,
                "num_inputs": 1,
                "num_kept_concrete": 922,
                "num_kept_lambda": 332,
                "num_values_explored": 6436,
                "num_values_kept": 1254,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67265
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23610020778141916,
            "num_unique_values": 200,
            "solution": "fn_1(Drop(1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 38.83161512027491,
                "explored_percent_lambda": 49.828178694158076,
                "explored_percent_none": 11.34020618556701,
                "kept_percent_concrete": 40.31413612565445,
                "kept_percent_lambda": 59.68586387434555,
                "num_examples": 3,
                "num_explored_concrete": 113,
                "num_explored_lambda": 145,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 77,
                "num_kept_lambda": 114,
                "num_values_explored": 291,
                "num_values_kept": 191,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 291
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.990584715968,
            "num_unique_values": 1193,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.59276305348358,
                "explored_percent_lambda": 16.933820028566895,
                "explored_percent_none": 17.473416917949532,
                "kept_percent_concrete": 73.3108108108108,
                "kept_percent_lambda": 26.68918918918919,
                "num_examples": 5,
                "num_explored_concrete": 4133,
                "num_explored_lambda": 1067,
                "num_explored_none": 1101,
                "num_inputs": 1,
                "num_kept_concrete": 868,
                "num_kept_lambda": 316,
                "num_values_explored": 6301,
                "num_values_kept": 1184,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 65052
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15345040801913,
            "num_unique_values": 1281,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.34763733511438,
                "explored_percent_lambda": 18.600768074803806,
                "explored_percent_none": 19.051594590081816,
                "kept_percent_concrete": 68.78930817610063,
                "kept_percent_lambda": 31.21069182389937,
                "num_examples": 5,
                "num_explored_concrete": 3734,
                "num_explored_lambda": 1114,
                "num_explored_none": 1141,
                "num_inputs": 1,
                "num_kept_concrete": 875,
                "num_kept_lambda": 397,
                "num_values_explored": 5989,
                "num_values_kept": 1272,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62268
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93353218887933,
            "num_unique_values": 1231,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.094443425637266,
                "explored_percent_lambda": 39.77626994315056,
                "explored_percent_none": 15.129286631212176,
                "kept_percent_concrete": 48.93617021276596,
                "kept_percent_lambda": 51.06382978723404,
                "num_examples": 3,
                "num_explored_concrete": 2459,
                "num_explored_lambda": 2169,
                "num_explored_none": 825,
                "num_inputs": 1,
                "num_kept_concrete": 598,
                "num_kept_lambda": 624,
                "num_values_explored": 5453,
                "num_values_kept": 1222,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53848
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85261109494604,
            "num_unique_values": 1348,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.38259914916975,
                "explored_percent_lambda": 8.93371757925072,
                "explored_percent_none": 14.683683271579525,
                "kept_percent_concrete": 88.78923766816143,
                "kept_percent_lambda": 11.210762331838565,
                "num_examples": 5,
                "num_explored_concrete": 5566,
                "num_explored_lambda": 651,
                "num_explored_none": 1070,
                "num_inputs": 2,
                "num_kept_concrete": 1188,
                "num_kept_lambda": 150,
                "num_values_explored": 7287,
                "num_values_kept": 1338,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 74394
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99655109806918,
            "num_unique_values": 1457,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.06676316265605,
                "explored_percent_lambda": 33.23683734394789,
                "explored_percent_none": 13.696399493396056,
                "kept_percent_concrete": 55.21769177608846,
                "kept_percent_lambda": 44.78230822391154,
                "num_examples": 3,
                "num_explored_concrete": 2933,
                "num_explored_lambda": 1837,
                "num_explored_none": 757,
                "num_inputs": 2,
                "num_kept_concrete": 799,
                "num_kept_lambda": 648,
                "num_values_explored": 5527,
                "num_values_kept": 1447,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56357
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19025757000781596,
            "num_unique_values": 156,
            "solution": "fn_0(0, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 55.63380281690141,
                "explored_percent_lambda": 31.338028169014084,
                "explored_percent_none": 13.028169014084508,
                "kept_percent_concrete": 61.224489795918366,
                "kept_percent_lambda": 38.775510204081634,
                "num_examples": 5,
                "num_explored_concrete": 158,
                "num_explored_lambda": 89,
                "num_explored_none": 37,
                "num_inputs": 1,
                "num_kept_concrete": 90,
                "num_kept_lambda": 57,
                "num_values_explored": 284,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09046700992621,
            "num_unique_values": 1349,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.36847032390938,
                "explored_percent_lambda": 33.12113836360232,
                "explored_percent_none": 14.510391312488299,
                "kept_percent_concrete": 53.059701492537314,
                "kept_percent_lambda": 46.940298507462686,
                "num_examples": 3,
                "num_explored_concrete": 2797,
                "num_explored_lambda": 1769,
                "num_explored_none": 775,
                "num_inputs": 1,
                "num_kept_concrete": 711,
                "num_kept_lambda": 629,
                "num_values_explored": 5341,
                "num_values_kept": 1340,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54807
            },
            "success": false,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80532984714955,
            "num_unique_values": 1520,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.99558758640977,
                "explored_percent_lambda": 17.67907045153699,
                "explored_percent_none": 12.325341962053242,
                "kept_percent_concrete": 69.91385023194168,
                "kept_percent_lambda": 30.086149768058316,
                "num_examples": 3,
                "num_explored_concrete": 4759,
                "num_explored_lambda": 1202,
                "num_explored_none": 838,
                "num_inputs": 3,
                "num_kept_concrete": 1055,
                "num_kept_lambda": 454,
                "num_values_explored": 6799,
                "num_values_kept": 1509,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69561
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84633406600915,
            "num_unique_values": 1302,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.12107623318386,
                "explored_percent_lambda": 22.6457399103139,
                "explored_percent_none": 16.233183856502244,
                "kept_percent_concrete": 67.15724244771495,
                "kept_percent_lambda": 32.84275755228505,
                "num_examples": 3,
                "num_explored_concrete": 4089,
                "num_explored_lambda": 1515,
                "num_explored_none": 1086,
                "num_inputs": 3,
                "num_kept_concrete": 867,
                "num_kept_lambda": 424,
                "num_values_explored": 6690,
                "num_values_kept": 1291,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69376
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3333517499268055,
            "num_unique_values": 298,
            "solution": "fn_2(a, Filter((lambda u1: ((lambda v1: Greater(b, v1)))(u1)), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 33.23529411764706,
                "explored_percent_lambda": 41.76470588235294,
                "explored_percent_none": 25.0,
                "kept_percent_concrete": 58.18815331010453,
                "kept_percent_lambda": 41.81184668989547,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 426,
                "num_explored_none": 255,
                "num_inputs": 3,
                "num_kept_concrete": 167,
                "num_kept_lambda": 120,
                "num_values_explored": 1020,
                "num_values_kept": 287,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2570
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84471312211826,
            "num_unique_values": 1264,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.33205641650705,
                "explored_percent_lambda": 35.05136688142086,
                "explored_percent_none": 13.616576702072088,
                "kept_percent_concrete": 53.42902711323764,
                "kept_percent_lambda": 46.57097288676236,
                "num_examples": 3,
                "num_explored_concrete": 2948,
                "num_explored_lambda": 2013,
                "num_explored_none": 782,
                "num_inputs": 2,
                "num_kept_concrete": 670,
                "num_kept_lambda": 584,
                "num_values_explored": 5743,
                "num_values_kept": 1254,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59546
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87873155996203,
            "num_unique_values": 1522,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47373694003149,
                "explored_percent_lambda": 11.063403463575211,
                "explored_percent_none": 18.4628595963933,
                "kept_percent_concrete": 82.34126984126983,
                "kept_percent_lambda": 17.658730158730158,
                "num_examples": 5,
                "num_explored_concrete": 4924,
                "num_explored_lambda": 773,
                "num_explored_none": 1290,
                "num_inputs": 2,
                "num_kept_concrete": 1245,
                "num_kept_lambda": 267,
                "num_values_explored": 6987,
                "num_values_kept": 1512,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71538
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90364619297907,
            "num_unique_values": 1443,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.99257855676615,
                "explored_percent_lambda": 27.333017527238276,
                "explored_percent_none": 13.674403915995578,
                "kept_percent_concrete": 68.66713189113747,
                "kept_percent_lambda": 31.332868108862527,
                "num_examples": 3,
                "num_explored_concrete": 3736,
                "num_explored_lambda": 1731,
                "num_explored_none": 866,
                "num_inputs": 2,
                "num_kept_concrete": 984,
                "num_kept_lambda": 449,
                "num_values_explored": 6333,
                "num_values_kept": 1433,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64466
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95200115209445,
            "num_unique_values": 1356,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.479722323712096,
                "explored_percent_lambda": 34.70953598830837,
                "explored_percent_none": 13.81074168797954,
                "kept_percent_concrete": 52.56124721603563,
                "kept_percent_lambda": 47.43875278396437,
                "num_examples": 3,
                "num_explored_concrete": 2818,
                "num_explored_lambda": 1900,
                "num_explored_none": 756,
                "num_inputs": 1,
                "num_kept_concrete": 708,
                "num_kept_lambda": 639,
                "num_values_explored": 5474,
                "num_values_kept": 1347,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55773
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21384428208693862,
            "num_unique_values": 160,
            "solution": "Filter((lambda u1: ((lambda v1: IsEven(v1)))(u1)), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 34.42622950819672,
                "explored_percent_lambda": 61.0655737704918,
                "explored_percent_none": 4.508196721311475,
                "kept_percent_concrete": 27.814569536423843,
                "kept_percent_lambda": 72.18543046357615,
                "num_examples": 3,
                "num_explored_concrete": 84,
                "num_explored_lambda": 149,
                "num_explored_none": 11,
                "num_inputs": 1,
                "num_kept_concrete": 42,
                "num_kept_lambda": 109,
                "num_values_explored": 244,
                "num_values_kept": 151,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 244
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.424931751098484,
            "num_unique_values": 1185,
            "solution": "Min(Max(Min(Max(4, Last(fn_1(Sort(y)))), Sum(fn_2(1, x))), Head(y)), Add(3, fn_0(3, x)))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 65.54895573864725,
                "explored_percent_lambda": 15.462732324200038,
                "explored_percent_none": 18.988311937152712,
                "kept_percent_concrete": 84.68085106382979,
                "kept_percent_lambda": 15.319148936170214,
                "num_examples": 5,
                "num_explored_concrete": 3421,
                "num_explored_lambda": 807,
                "num_explored_none": 991,
                "num_inputs": 2,
                "num_kept_concrete": 995,
                "num_kept_lambda": 180,
                "num_values_explored": 5219,
                "num_values_kept": 1175,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7699
            },
            "success": true,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86985646700487,
            "num_unique_values": 1410,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.11475409836065,
                "explored_percent_lambda": 26.704918032786885,
                "explored_percent_none": 9.180327868852459,
                "kept_percent_concrete": 60.0,
                "kept_percent_lambda": 40.0,
                "num_examples": 3,
                "num_explored_concrete": 3911,
                "num_explored_lambda": 1629,
                "num_explored_none": 560,
                "num_inputs": 2,
                "num_kept_concrete": 840,
                "num_kept_lambda": 560,
                "num_values_explored": 6100,
                "num_values_kept": 1400,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58760
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98226468707435,
            "num_unique_values": 1552,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.48553557466771,
                "explored_percent_lambda": 25.14464425332291,
                "explored_percent_none": 13.369820172009382,
                "kept_percent_concrete": 67.94289422452952,
                "kept_percent_lambda": 32.057105775470475,
                "num_examples": 3,
                "num_explored_concrete": 3932,
                "num_explored_lambda": 1608,
                "num_explored_none": 855,
                "num_inputs": 3,
                "num_kept_concrete": 1047,
                "num_kept_lambda": 494,
                "num_values_explored": 6395,
                "num_values_kept": 1541,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67361
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 96.75339929503389,
            "num_unique_values": 824,
            "solution": "Count((lambda u1: ((lambda v1: IsEven(((lambda v1: Min(v1, 2)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 57.50332005312085,
                "explored_percent_lambda": 22.470119521912352,
                "explored_percent_none": 20.0265604249668,
                "kept_percent_concrete": 72.26993865030674,
                "kept_percent_lambda": 27.73006134969325,
                "num_examples": 5,
                "num_explored_concrete": 2165,
                "num_explored_lambda": 846,
                "num_explored_none": 754,
                "num_inputs": 1,
                "num_kept_concrete": 589,
                "num_kept_lambda": 226,
                "num_values_explored": 3765,
                "num_values_kept": 815,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 62385
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87617500196211,
            "num_unique_values": 1243,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.59579180509413,
                "explored_percent_lambda": 34.403839055001846,
                "explored_percent_none": 11.000369139904024,
                "kept_percent_concrete": 47.73095623987034,
                "kept_percent_lambda": 52.26904376012966,
                "num_examples": 3,
                "num_explored_concrete": 2958,
                "num_explored_lambda": 1864,
                "num_explored_none": 596,
                "num_inputs": 1,
                "num_kept_concrete": 589,
                "num_kept_lambda": 645,
                "num_values_explored": 5418,
                "num_values_kept": 1234,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53116
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72787115396932,
            "num_unique_values": 1313,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.308954203691044,
                "explored_percent_lambda": 32.48462064251538,
                "explored_percent_none": 21.206425153793575,
                "kept_percent_concrete": 54.950115118956255,
                "kept_percent_lambda": 45.049884881043745,
                "num_examples": 3,
                "num_explored_concrete": 2710,
                "num_explored_lambda": 1901,
                "num_explored_none": 1241,
                "num_inputs": 2,
                "num_kept_concrete": 716,
                "num_kept_lambda": 587,
                "num_values_explored": 5852,
                "num_values_kept": 1303,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57618
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.824292157776654,
            "num_unique_values": 224,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1: Subtract(v1, -1)))(u1)), Map((lambda u1: 0), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 15.09433962264151,
                "explored_percent_lambda": 47.87735849056604,
                "explored_percent_none": 37.028301886792455,
                "kept_percent_concrete": 38.13953488372093,
                "kept_percent_lambda": 61.86046511627907,
                "num_examples": 3,
                "num_explored_concrete": 192,
                "num_explored_lambda": 609,
                "num_explored_none": 471,
                "num_inputs": 1,
                "num_kept_concrete": 82,
                "num_kept_lambda": 133,
                "num_values_explored": 1272,
                "num_values_kept": 215,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8587
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.04290508502163,
            "num_unique_values": 1078,
            "solution": "Take(Add(3, Last(r)), fn_1(fn_1(Sort(c))))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 64.65416178194607,
                "explored_percent_lambda": 26.52403282532239,
                "explored_percent_none": 8.821805392731536,
                "kept_percent_concrete": 58.61423220973783,
                "kept_percent_lambda": 41.38576779026217,
                "num_examples": 3,
                "num_explored_concrete": 2206,
                "num_explored_lambda": 905,
                "num_explored_none": 301,
                "num_inputs": 2,
                "num_kept_concrete": 626,
                "num_kept_lambda": 442,
                "num_values_explored": 3412,
                "num_values_kept": 1068,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10838
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79743336583488,
            "num_unique_values": 1559,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.77971762562623,
                "explored_percent_lambda": 11.750417488993472,
                "explored_percent_none": 15.469864885380295,
                "kept_percent_concrete": 81.14912846998064,
                "kept_percent_lambda": 18.85087153001937,
                "num_examples": 5,
                "num_explored_concrete": 4794,
                "num_explored_lambda": 774,
                "num_explored_none": 1019,
                "num_inputs": 2,
                "num_kept_concrete": 1257,
                "num_kept_lambda": 292,
                "num_values_explored": 6587,
                "num_values_kept": 1549,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68260
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21946937893517,
            "num_unique_values": 1304,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.43702579666161,
                "explored_percent_lambda": 40.8763277693475,
                "explored_percent_none": 15.686646433990894,
                "kept_percent_concrete": 50.5019305019305,
                "kept_percent_lambda": 49.4980694980695,
                "num_examples": 3,
                "num_explored_concrete": 2290,
                "num_explored_lambda": 2155,
                "num_explored_none": 827,
                "num_inputs": 1,
                "num_kept_concrete": 654,
                "num_kept_lambda": 641,
                "num_values_explored": 5272,
                "num_values_kept": 1295,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53371
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90686715999618,
            "num_unique_values": 1221,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.31059955334135,
                "explored_percent_lambda": 31.59250987802783,
                "explored_percent_none": 16.09689056863082,
                "kept_percent_concrete": 57.3905862923204,
                "kept_percent_lambda": 42.6094137076796,
                "num_examples": 3,
                "num_explored_concrete": 3045,
                "num_explored_lambda": 1839,
                "num_explored_none": 937,
                "num_inputs": 2,
                "num_kept_concrete": 695,
                "num_kept_lambda": 516,
                "num_values_explored": 5821,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61718
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 57.175083400914446,
            "num_unique_values": 1077,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), fn_1(Reverse(i))))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 65.50903901046622,
                "explored_percent_lambda": 15.746907706945766,
                "explored_percent_none": 18.744053282588013,
                "kept_percent_concrete": 78.81911902530459,
                "kept_percent_lambda": 21.18088097469541,
                "num_examples": 5,
                "num_explored_concrete": 2754,
                "num_explored_lambda": 662,
                "num_explored_none": 788,
                "num_inputs": 2,
                "num_kept_concrete": 841,
                "num_kept_lambda": 226,
                "num_values_explored": 4204,
                "num_values_kept": 1067,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 38667
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.4749345430173,
            "num_unique_values": 386,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 25.240219629375428,
                "explored_percent_lambda": 22.906657515442692,
                "explored_percent_none": 51.85312285518188,
                "kept_percent_concrete": 55.70291777188329,
                "kept_percent_lambda": 44.29708222811671,
                "num_examples": 5,
                "num_explored_concrete": 1471,
                "num_explored_lambda": 1335,
                "num_explored_none": 3022,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 167,
                "num_values_explored": 5828,
                "num_values_kept": 377,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59956
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14446725510060787,
            "num_unique_values": 148,
            "solution": "fn_0(q, x)",
            "solution_weight": 3,
            "stats": {
                "explored_percent_concrete": 67.25978647686833,
                "explored_percent_lambda": 16.725978647686834,
                "explored_percent_none": 16.01423487544484,
                "kept_percent_concrete": 88.40579710144928,
                "kept_percent_lambda": 11.594202898550725,
                "num_examples": 5,
                "num_explored_concrete": 189,
                "num_explored_lambda": 47,
                "num_explored_none": 45,
                "num_inputs": 2,
                "num_kept_concrete": 122,
                "num_kept_lambda": 16,
                "num_values_explored": 281,
                "num_values_kept": 138,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 281
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 98.5887812920846,
            "num_unique_values": 1090,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Add(2, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.7420814479638,
                "explored_percent_lambda": 41.90045248868778,
                "explored_percent_none": 16.357466063348415,
                "kept_percent_concrete": 54.11655874190564,
                "kept_percent_lambda": 45.88344125809436,
                "num_examples": 3,
                "num_explored_concrete": 1845,
                "num_explored_lambda": 1852,
                "num_explored_none": 723,
                "num_inputs": 1,
                "num_kept_concrete": 585,
                "num_kept_lambda": 496,
                "num_values_explored": 4420,
                "num_values_kept": 1081,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52811
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.60797565383837,
            "num_unique_values": 348,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 29.49661908339594,
                "explored_percent_lambda": 13.884297520661157,
                "explored_percent_none": 56.6190833959429,
                "kept_percent_concrete": 74.2603550295858,
                "kept_percent_lambda": 25.7396449704142,
                "num_examples": 5,
                "num_explored_concrete": 1963,
                "num_explored_lambda": 924,
                "num_explored_none": 3768,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 87,
                "num_values_explored": 6655,
                "num_values_kept": 338,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 67773
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85784953809343,
            "num_unique_values": 1242,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.6457164234942,
                "explored_percent_lambda": 41.18967452300786,
                "explored_percent_none": 20.16460905349794,
                "kept_percent_concrete": 49.87834549878345,
                "kept_percent_lambda": 50.12165450121655,
                "num_examples": 3,
                "num_explored_concrete": 2066,
                "num_explored_lambda": 2202,
                "num_explored_none": 1078,
                "num_inputs": 1,
                "num_kept_concrete": 615,
                "num_kept_lambda": 618,
                "num_values_explored": 5346,
                "num_values_kept": 1233,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55293
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04852717695758,
            "num_unique_values": 1293,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.176158212781544,
                "explored_percent_lambda": 34.24281267167186,
                "explored_percent_none": 7.581029115546603,
                "kept_percent_concrete": 51.94704049844237,
                "kept_percent_lambda": 48.05295950155763,
                "num_examples": 3,
                "num_explored_concrete": 3177,
                "num_explored_lambda": 1870,
                "num_explored_none": 414,
                "num_inputs": 1,
                "num_kept_concrete": 667,
                "num_kept_lambda": 617,
                "num_values_explored": 5461,
                "num_values_kept": 1284,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54696
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8917912740726,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.92346661841867,
                "explored_percent_lambda": 37.14492491405826,
                "explored_percent_none": 13.931608467523068,
                "kept_percent_concrete": 51.32275132275132,
                "kept_percent_lambda": 48.67724867724868,
                "num_examples": 3,
                "num_explored_concrete": 2704,
                "num_explored_lambda": 2053,
                "num_explored_none": 770,
                "num_inputs": 1,
                "num_kept_concrete": 679,
                "num_kept_lambda": 644,
                "num_values_explored": 5527,
                "num_values_kept": 1323,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57662
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91345408116467,
            "num_unique_values": 1423,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.145940071417485,
                "explored_percent_lambda": 25.337680484396834,
                "explored_percent_none": 14.516379444185686,
                "kept_percent_concrete": 69.00212314225053,
                "kept_percent_lambda": 30.997876857749468,
                "num_examples": 3,
                "num_explored_concrete": 3874,
                "num_explored_lambda": 1632,
                "num_explored_none": 935,
                "num_inputs": 2,
                "num_kept_concrete": 975,
                "num_kept_lambda": 438,
                "num_values_explored": 6441,
                "num_values_kept": 1413,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 64906
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93955988693051,
            "num_unique_values": 1341,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.55993199206574,
                "explored_percent_lambda": 15.44346840464721,
                "explored_percent_none": 27.99659960328705,
                "kept_percent_concrete": 73.7987987987988,
                "kept_percent_lambda": 26.2012012012012,
                "num_examples": 5,
                "num_explored_concrete": 3992,
                "num_explored_lambda": 1090,
                "num_explored_none": 1976,
                "num_inputs": 1,
                "num_kept_concrete": 983,
                "num_kept_lambda": 349,
                "num_values_explored": 7058,
                "num_values_kept": 1332,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 71694
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91545834485441,
            "num_unique_values": 1108,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.10467882632831,
                "explored_percent_lambda": 43.85408406026963,
                "explored_percent_none": 18.04123711340206,
                "kept_percent_concrete": 49.681528662420384,
                "kept_percent_lambda": 50.318471337579616,
                "num_examples": 3,
                "num_explored_concrete": 1922,
                "num_explored_lambda": 2212,
                "num_explored_none": 910,
                "num_inputs": 1,
                "num_kept_concrete": 546,
                "num_kept_lambda": 553,
                "num_values_explored": 5044,
                "num_values_kept": 1099,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56397
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06114382483065,
            "num_unique_values": 1228,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.86013986013986,
                "explored_percent_lambda": 44.21134421134421,
                "explored_percent_none": 15.928515928515928,
                "kept_percent_concrete": 49.794913863822806,
                "kept_percent_lambda": 50.205086136177194,
                "num_examples": 3,
                "num_explored_concrete": 2052,
                "num_explored_lambda": 2276,
                "num_explored_none": 820,
                "num_inputs": 1,
                "num_kept_concrete": 607,
                "num_kept_lambda": 612,
                "num_values_explored": 5148,
                "num_values_kept": 1219,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52738
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.83273828681558,
            "num_unique_values": 1495,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.21321930714596,
                "explored_percent_lambda": 10.407305406580663,
                "explored_percent_none": 18.379475286273372,
                "kept_percent_concrete": 82.96296296296296,
                "kept_percent_lambda": 17.037037037037038,
                "num_examples": 5,
                "num_explored_concrete": 4913,
                "num_explored_lambda": 718,
                "num_explored_none": 1268,
                "num_inputs": 2,
                "num_kept_concrete": 1232,
                "num_kept_lambda": 253,
                "num_values_explored": 6899,
                "num_values_kept": 1485,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70400
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0664169639349,
            "num_unique_values": 1522,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.41397153945666,
                "explored_percent_lambda": 28.71927554980595,
                "explored_percent_none": 10.866752910737386,
                "kept_percent_concrete": 65.93915343915344,
                "kept_percent_lambda": 34.060846560846564,
                "num_examples": 3,
                "num_explored_concrete": 3736,
                "num_explored_lambda": 1776,
                "num_explored_none": 672,
                "num_inputs": 2,
                "num_kept_concrete": 997,
                "num_kept_lambda": 515,
                "num_values_explored": 6184,
                "num_values_kept": 1512,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 63235
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84684651903808,
            "num_unique_values": 1306,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.45149307043864,
                "explored_percent_lambda": 11.687383911987427,
                "explored_percent_none": 27.861123017573938,
                "kept_percent_concrete": 82.94753086419753,
                "kept_percent_lambda": 17.05246913580247,
                "num_examples": 5,
                "num_explored_concrete": 4231,
                "num_explored_lambda": 818,
                "num_explored_none": 1950,
                "num_inputs": 2,
                "num_kept_concrete": 1075,
                "num_kept_lambda": 221,
                "num_values_explored": 6999,
                "num_values_kept": 1296,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 68977
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99036419112235,
            "num_unique_values": 1504,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.3907031479847,
                "explored_percent_lambda": 12.032950867902324,
                "explored_percent_none": 9.576345984112974,
                "kept_percent_concrete": 84.40428380187416,
                "kept_percent_lambda": 15.595716198125837,
                "num_examples": 5,
                "num_explored_concrete": 5329,
                "num_explored_lambda": 818,
                "num_explored_none": 651,
                "num_inputs": 2,
                "num_kept_concrete": 1261,
                "num_kept_lambda": 233,
                "num_values_explored": 6798,
                "num_values_kept": 1494,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 70482
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91770317894407,
            "num_unique_values": 1007,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.46277458351761,
                "explored_percent_lambda": 13.415892672858616,
                "explored_percent_none": 19.121332743623764,
                "kept_percent_concrete": 81.14343029087262,
                "kept_percent_lambda": 18.85656970912738,
                "num_examples": 5,
                "num_explored_concrete": 4576,
                "num_explored_lambda": 910,
                "num_explored_none": 1297,
                "num_inputs": 2,
                "num_kept_concrete": 809,
                "num_kept_lambda": 188,
                "num_values_explored": 6783,
                "num_values_kept": 997,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 69607
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.3
}