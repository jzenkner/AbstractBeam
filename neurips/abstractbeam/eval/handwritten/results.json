{
    "num_tasks": 50,
    "num_tasks_solved": 27,
    "results": [
        {
            "elapsed_time": 100.68583179998677,
            "num_unique_values": 1057,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.010224948875255,
                "explored_percent_lambda": 19.472847080209043,
                "explored_percent_none": 25.516927970915702,
                "kept_percent_concrete": 57.523809523809526,
                "kept_percent_lambda": 42.476190476190474,
                "num_examples": 3,
                "num_explored_concrete": 2421,
                "num_explored_lambda": 857,
                "num_explored_none": 1123,
                "num_inputs": 2,
                "num_kept_concrete": 604,
                "num_kept_lambda": 446,
                "num_values_explored": 4401,
                "num_values_kept": 1050,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 39455
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2597260299371555,
            "num_unique_values": 163,
            "solution": "fn_0(Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 41.901408450704224,
                "explored_percent_none": 17.95774647887324,
                "kept_percent_concrete": 36.94267515923567,
                "kept_percent_lambda": 63.05732484076433,
                "num_examples": 5,
                "num_explored_concrete": 114,
                "num_explored_lambda": 119,
                "num_explored_none": 51,
                "num_inputs": 1,
                "num_kept_concrete": 58,
                "num_kept_lambda": 99,
                "num_values_explored": 284,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.13591000600718,
            "num_unique_values": 547,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), m, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.04707302353651,
                "explored_percent_lambda": 29.9939649969825,
                "explored_percent_none": 23.95896197948099,
                "kept_percent_concrete": 65.37037037037037,
                "kept_percent_lambda": 34.629629629629626,
                "num_examples": 5,
                "num_explored_concrete": 763,
                "num_explored_lambda": 497,
                "num_explored_none": 397,
                "num_inputs": 2,
                "num_kept_concrete": 353,
                "num_kept_lambda": 187,
                "num_values_explored": 1657,
                "num_values_kept": 540,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 37585
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5188459970522672,
            "num_unique_values": 314,
            "solution": "Reverse(Take(fn_0(-1, x), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.09041591320072,
                "explored_percent_lambda": 39.42133815551537,
                "explored_percent_none": 10.488245931283906,
                "kept_percent_concrete": 46.753246753246756,
                "kept_percent_lambda": 53.246753246753244,
                "num_examples": 3,
                "num_explored_concrete": 277,
                "num_explored_lambda": 218,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 144,
                "num_kept_lambda": 164,
                "num_values_explored": 553,
                "num_values_kept": 308,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 553
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.320429702987894,
            "num_unique_values": 552,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 0)))(u2)), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.77406931964057,
                "explored_percent_lambda": 36.39281129653402,
                "explored_percent_none": 19.833119383825416,
                "kept_percent_concrete": 59.15750915750916,
                "kept_percent_lambda": 40.84249084249084,
                "num_examples": 5,
                "num_explored_concrete": 682,
                "num_explored_lambda": 567,
                "num_explored_none": 309,
                "num_inputs": 1,
                "num_kept_concrete": 323,
                "num_kept_lambda": 223,
                "num_values_explored": 1558,
                "num_values_kept": 546,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3308
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.61143301404081,
            "num_unique_values": 1081,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.024613373992594,
                "explored_percent_lambda": 19.037246787192334,
                "explored_percent_none": 23.938139838815072,
                "kept_percent_concrete": 58.19366852886406,
                "kept_percent_lambda": 41.80633147113594,
                "num_examples": 3,
                "num_explored_concrete": 2618,
                "num_explored_lambda": 874,
                "num_explored_none": 1099,
                "num_inputs": 2,
                "num_kept_concrete": 625,
                "num_kept_lambda": 449,
                "num_values_explored": 4591,
                "num_values_kept": 1074,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45834
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5028889919631183,
            "num_unique_values": 223,
            "solution": "Map((lambda u1: ((lambda v1: Max(a, ((lambda v1: Min(v1, b)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.05966587112172,
                "explored_percent_lambda": 46.53937947494033,
                "explored_percent_none": 28.400954653937948,
                "kept_percent_concrete": 40.93023255813954,
                "kept_percent_lambda": 59.06976744186046,
                "num_examples": 3,
                "num_explored_concrete": 210,
                "num_explored_lambda": 390,
                "num_explored_none": 238,
                "num_inputs": 3,
                "num_kept_concrete": 88,
                "num_kept_lambda": 127,
                "num_values_explored": 838,
                "num_values_kept": 215,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2588
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.81005521898624,
            "num_unique_values": 735,
            "solution": "Max(fn_0(1, x), Max(Sum(x), Subtract(Sum(x), Access(Square(fn_3(-1)), x))))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 54.510184287099904,
                "explored_percent_lambda": 27.012609117361784,
                "explored_percent_none": 18.477206595538313,
                "kept_percent_concrete": 68.86145404663924,
                "kept_percent_lambda": 31.13854595336077,
                "num_examples": 5,
                "num_explored_concrete": 1124,
                "num_explored_lambda": 557,
                "num_explored_none": 381,
                "num_inputs": 1,
                "num_kept_concrete": 502,
                "num_kept_lambda": 227,
                "num_values_explored": 2062,
                "num_values_kept": 729,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 38519
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.057998692034744,
            "num_unique_values": 1034,
            "solution": "IntDivide(IntDivide(Add(Last(x), Head(x)), fn_3(-1)), -1)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.35072754641244,
                "explored_percent_lambda": 19.618665328650277,
                "explored_percent_none": 23.03060712493728,
                "kept_percent_concrete": 68.77431906614785,
                "kept_percent_lambda": 31.22568093385214,
                "num_examples": 5,
                "num_explored_concrete": 2286,
                "num_explored_lambda": 782,
                "num_explored_none": 918,
                "num_inputs": 1,
                "num_kept_concrete": 707,
                "num_kept_lambda": 321,
                "num_values_explored": 3986,
                "num_values_kept": 1028,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 20357
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.633685301057994,
            "num_unique_values": 559,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 57.69230769230769,
                "explored_percent_lambda": 25.358539765319428,
                "explored_percent_none": 16.949152542372882,
                "kept_percent_concrete": 71.92028985507247,
                "kept_percent_lambda": 28.079710144927535,
                "num_examples": 5,
                "num_explored_concrete": 885,
                "num_explored_lambda": 389,
                "num_explored_none": 260,
                "num_inputs": 2,
                "num_kept_concrete": 397,
                "num_kept_lambda": 155,
                "num_values_explored": 1534,
                "num_values_kept": 552,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3634
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.83181924803648,
            "num_unique_values": 985,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.24247185126997,
                "explored_percent_lambda": 28.960460853626603,
                "explored_percent_none": 24.79706729510343,
                "kept_percent_concrete": 45.04596527068437,
                "kept_percent_lambda": 54.95403472931563,
                "num_examples": 3,
                "num_explored_concrete": 1766,
                "num_explored_lambda": 1106,
                "num_explored_none": 947,
                "num_inputs": 1,
                "num_kept_concrete": 441,
                "num_kept_lambda": 538,
                "num_values_explored": 3819,
                "num_values_kept": 979,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41705
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.912620597053319,
            "num_unique_values": 225,
            "solution": "Map((lambda u1: ((lambda v1, v2: If(((lambda v1: IsEven(((lambda v1: Multiply(v1, v1)))(v1))))(v1), v2, 0)))(u1, u1)), x)",
            "solution_weight": 13,
            "stats": {
                "explored_percent_concrete": 19.840213049267643,
                "explored_percent_lambda": 65.51264980026632,
                "explored_percent_none": 14.647137150466046,
                "kept_percent_concrete": 33.789954337899545,
                "kept_percent_lambda": 66.21004566210046,
                "num_examples": 3,
                "num_explored_concrete": 149,
                "num_explored_lambda": 492,
                "num_explored_none": 110,
                "num_inputs": 1,
                "num_kept_concrete": 74,
                "num_kept_lambda": 145,
                "num_values_explored": 751,
                "num_values_kept": 219,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2501
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44921909994446,
            "num_unique_values": 1228,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.17013190252627,
                "explored_percent_lambda": 29.845741113346747,
                "explored_percent_none": 26.984126984126984,
                "kept_percent_concrete": 43.81654381654381,
                "kept_percent_lambda": 56.18345618345619,
                "num_examples": 3,
                "num_explored_concrete": 1931,
                "num_explored_lambda": 1335,
                "num_explored_none": 1207,
                "num_inputs": 2,
                "num_kept_concrete": 535,
                "num_kept_lambda": 686,
                "num_values_explored": 4473,
                "num_values_kept": 1221,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43084
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.11333578499034,
            "num_unique_values": 830,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.78315073668304,
                "explored_percent_lambda": 34.8318851530034,
                "explored_percent_none": 23.38496411031356,
                "kept_percent_concrete": 46.480582524271846,
                "kept_percent_lambda": 53.519417475728154,
                "num_examples": 3,
                "num_explored_concrete": 1106,
                "num_explored_lambda": 922,
                "num_explored_none": 619,
                "num_inputs": 1,
                "num_kept_concrete": 383,
                "num_kept_lambda": 441,
                "num_values_explored": 2647,
                "num_values_kept": 824,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5097
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.43784712802153,
            "num_unique_values": 896,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.869451697127936,
                "explored_percent_lambda": 27.075718015665796,
                "explored_percent_none": 23.054830287206265,
                "kept_percent_concrete": 48.42696629213483,
                "kept_percent_lambda": 51.57303370786517,
                "num_examples": 3,
                "num_explored_concrete": 1910,
                "num_explored_lambda": 1037,
                "num_explored_none": 883,
                "num_inputs": 1,
                "num_kept_concrete": 431,
                "num_kept_lambda": 459,
                "num_values_explored": 3830,
                "num_values_kept": 890,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47645
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24679172807373106,
            "num_unique_values": 120,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 35.22012578616352,
                "explored_percent_lambda": 58.490566037735846,
                "explored_percent_none": 6.289308176100629,
                "kept_percent_concrete": 27.43362831858407,
                "kept_percent_lambda": 72.56637168141593,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 93,
                "num_explored_none": 10,
                "num_inputs": 2,
                "num_kept_concrete": 31,
                "num_kept_lambda": 82,
                "num_values_explored": 159,
                "num_values_kept": 113,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 159
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4841582449153,
            "num_unique_values": 1067,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.75110388101324,
                "explored_percent_lambda": 17.313502207762028,
                "explored_percent_none": 25.935393911224725,
                "kept_percent_concrete": 72.00754005655043,
                "kept_percent_lambda": 27.992459943449575,
                "num_examples": 5,
                "num_explored_concrete": 2442,
                "num_explored_lambda": 745,
                "num_explored_none": 1116,
                "num_inputs": 1,
                "num_kept_concrete": 764,
                "num_kept_lambda": 297,
                "num_values_explored": 4303,
                "num_values_kept": 1061,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47983
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.08605171297677,
            "num_unique_values": 1117,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.72813774354327,
                "explored_percent_lambda": 28.72677843226099,
                "explored_percent_none": 21.54508382419574,
                "kept_percent_concrete": 42.7027027027027,
                "kept_percent_lambda": 57.2972972972973,
                "num_examples": 3,
                "num_explored_concrete": 2195,
                "num_explored_lambda": 1268,
                "num_explored_none": 951,
                "num_inputs": 2,
                "num_kept_concrete": 474,
                "num_kept_lambda": 636,
                "num_values_explored": 4414,
                "num_values_kept": 1110,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42867
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5494882389903069,
            "num_unique_values": 340,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.98876404494382,
                "explored_percent_lambda": 25.140449438202246,
                "explored_percent_none": 15.870786516853933,
                "kept_percent_concrete": 60.17964071856287,
                "kept_percent_lambda": 39.82035928143713,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 179,
                "num_explored_none": 113,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 133,
                "num_values_explored": 712,
                "num_values_kept": 334,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 712
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.51242162997369,
            "num_unique_values": 903,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.10944901520818,
                "explored_percent_lambda": 22.63774619795562,
                "explored_percent_none": 26.2528047868362,
                "kept_percent_concrete": 54.52513966480447,
                "kept_percent_lambda": 45.47486033519553,
                "num_examples": 3,
                "num_explored_concrete": 2050,
                "num_explored_lambda": 908,
                "num_explored_none": 1053,
                "num_inputs": 3,
                "num_kept_concrete": 488,
                "num_kept_lambda": 407,
                "num_values_explored": 4011,
                "num_values_kept": 895,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44768
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8061303560389206,
            "num_unique_values": 347,
            "solution": "Last(Map((lambda u1: ((lambda v1: fn_5(v1, x)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.66349583828775,
                "explored_percent_lambda": 26.397146254458978,
                "explored_percent_none": 10.93935790725327,
                "kept_percent_concrete": 59.82404692082111,
                "kept_percent_lambda": 40.17595307917889,
                "num_examples": 5,
                "num_explored_concrete": 527,
                "num_explored_lambda": 222,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 137,
                "num_values_explored": 841,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 841
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.95472914900165,
            "num_unique_values": 1131,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.886385896180215,
                "explored_percent_lambda": 32.46816846229187,
                "explored_percent_none": 21.645445641527914,
                "kept_percent_concrete": 42.48888888888889,
                "kept_percent_lambda": 57.51111111111111,
                "num_examples": 3,
                "num_explored_concrete": 1874,
                "num_explored_lambda": 1326,
                "num_explored_none": 884,
                "num_inputs": 1,
                "num_kept_concrete": 478,
                "num_kept_lambda": 647,
                "num_values_explored": 4084,
                "num_values_kept": 1125,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43588
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.43945801106747,
            "num_unique_values": 1117,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.46830530401035,
                "explored_percent_lambda": 23.372143165157397,
                "explored_percent_none": 20.159551530832257,
                "kept_percent_concrete": 53.693693693693696,
                "kept_percent_lambda": 46.306306306306304,
                "num_examples": 3,
                "num_explored_concrete": 2619,
                "num_explored_lambda": 1084,
                "num_explored_none": 935,
                "num_inputs": 2,
                "num_kept_concrete": 596,
                "num_kept_lambda": 514,
                "num_values_explored": 4638,
                "num_values_kept": 1110,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48546
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5400918109808117,
            "num_unique_values": 301,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.45286506469501,
                "explored_percent_lambda": 32.90203327171904,
                "explored_percent_none": 11.645101663585953,
                "kept_percent_concrete": 54.23728813559322,
                "kept_percent_lambda": 45.76271186440678,
                "num_examples": 5,
                "num_explored_concrete": 300,
                "num_explored_lambda": 178,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 135,
                "num_values_explored": 541,
                "num_values_kept": 295,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.683438383974135,
            "num_unique_values": 258,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 30.89430894308943,
                "explored_percent_lambda": 58.53658536585366,
                "explored_percent_none": 10.56910569105691,
                "kept_percent_concrete": 39.682539682539684,
                "kept_percent_lambda": 60.317460317460316,
                "num_examples": 3,
                "num_explored_concrete": 190,
                "num_explored_lambda": 360,
                "num_explored_none": 65,
                "num_inputs": 1,
                "num_kept_concrete": 100,
                "num_kept_lambda": 152,
                "num_values_explored": 615,
                "num_values_kept": 252,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3065
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.7028769509634,
            "num_unique_values": 1017,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 40.743550834597876,
                "explored_percent_lambda": 29.109762266059686,
                "explored_percent_none": 30.146686899342438,
                "kept_percent_concrete": 46.6864490603363,
                "kept_percent_lambda": 53.3135509396637,
                "num_examples": 3,
                "num_explored_concrete": 1611,
                "num_explored_lambda": 1151,
                "num_explored_none": 1192,
                "num_inputs": 1,
                "num_kept_concrete": 472,
                "num_kept_lambda": 539,
                "num_values_explored": 3954,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43133
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5326034650206566,
            "num_unique_values": 162,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.732510288065846,
                "explored_percent_lambda": 34.5679012345679,
                "explored_percent_none": 10.699588477366255,
                "kept_percent_concrete": 52.903225806451616,
                "kept_percent_lambda": 47.096774193548384,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 84,
                "num_explored_none": 26,
                "num_inputs": 2,
                "num_kept_concrete": 82,
                "num_kept_lambda": 73,
                "num_values_explored": 243,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 243
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.68493471504189,
            "num_unique_values": 1300,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.422939068100355,
                "explored_percent_lambda": 25.567502986857825,
                "explored_percent_none": 16.009557945041816,
                "kept_percent_concrete": 53.091190108191654,
                "kept_percent_lambda": 46.908809891808346,
                "num_examples": 3,
                "num_explored_concrete": 2445,
                "num_explored_lambda": 1070,
                "num_explored_none": 670,
                "num_inputs": 1,
                "num_kept_concrete": 687,
                "num_kept_lambda": 607,
                "num_values_explored": 4185,
                "num_values_kept": 1294,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42639
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.713296008994803,
            "num_unique_values": 747,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 57.0266606416629,
                "explored_percent_lambda": 23.226389516493448,
                "explored_percent_none": 19.74694984184365,
                "kept_percent_concrete": 71.89189189189189,
                "kept_percent_lambda": 28.10810810810811,
                "num_examples": 5,
                "num_explored_concrete": 1262,
                "num_explored_lambda": 514,
                "num_explored_none": 437,
                "num_inputs": 2,
                "num_kept_concrete": 532,
                "num_kept_lambda": 208,
                "num_values_explored": 2213,
                "num_values_kept": 740,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4663
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.1082245890284,
            "num_unique_values": 1254,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.5154862464804,
                "explored_percent_lambda": 17.71713233701538,
                "explored_percent_none": 21.767381416504225,
                "kept_percent_concrete": 68.96551724137932,
                "kept_percent_lambda": 31.03448275862069,
                "num_examples": 5,
                "num_explored_concrete": 2794,
                "num_explored_lambda": 818,
                "num_explored_none": 1005,
                "num_inputs": 2,
                "num_kept_concrete": 860,
                "num_kept_lambda": 387,
                "num_values_explored": 4617,
                "num_values_kept": 1247,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51910
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4105381889967248,
            "num_unique_values": 275,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 53.44827586206897,
                "explored_percent_lambda": 35.24904214559387,
                "explored_percent_none": 11.302681992337165,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 5,
                "num_explored_concrete": 279,
                "num_explored_lambda": 184,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 133,
                "num_values_explored": 522,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 522
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08421037904918,
            "num_unique_values": 1143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.33347959631417,
                "explored_percent_lambda": 22.290478279947344,
                "explored_percent_none": 17.376042123738483,
                "kept_percent_concrete": 57.83450704225352,
                "kept_percent_lambda": 42.16549295774648,
                "num_examples": 3,
                "num_explored_concrete": 2750,
                "num_explored_lambda": 1016,
                "num_explored_none": 792,
                "num_inputs": 2,
                "num_kept_concrete": 657,
                "num_kept_lambda": 479,
                "num_values_explored": 4558,
                "num_values_kept": 1136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45875
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4776570230024,
            "num_unique_values": 1190,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.39531214784765,
                "explored_percent_lambda": 22.154608970024793,
                "explored_percent_none": 19.450078882127563,
                "kept_percent_concrete": 56.6356720202874,
                "kept_percent_lambda": 43.3643279797126,
                "num_examples": 3,
                "num_explored_concrete": 2591,
                "num_explored_lambda": 983,
                "num_explored_none": 863,
                "num_inputs": 2,
                "num_kept_concrete": 670,
                "num_kept_lambda": 513,
                "num_values_explored": 4437,
                "num_values_kept": 1183,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46802
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.3224259950220585,
            "num_unique_values": 603,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.95662949194548,
                "explored_percent_lambda": 32.15613382899628,
                "explored_percent_none": 12.88723667905824,
                "kept_percent_concrete": 52.51677852348993,
                "kept_percent_lambda": 47.48322147651007,
                "num_examples": 3,
                "num_explored_concrete": 887,
                "num_explored_lambda": 519,
                "num_explored_none": 208,
                "num_inputs": 2,
                "num_kept_concrete": 313,
                "num_kept_lambda": 283,
                "num_values_explored": 1614,
                "num_values_kept": 596,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3364
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.72150583204348,
            "num_unique_values": 1152,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.58223019968588,
                "explored_percent_lambda": 18.375588961184654,
                "explored_percent_none": 16.042180839129458,
                "kept_percent_concrete": 65.76419213973799,
                "kept_percent_lambda": 34.23580786026201,
                "num_examples": 5,
                "num_explored_concrete": 2923,
                "num_explored_lambda": 819,
                "num_explored_none": 715,
                "num_inputs": 2,
                "num_kept_concrete": 753,
                "num_kept_lambda": 392,
                "num_values_explored": 4457,
                "num_values_kept": 1145,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47719
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6966608259826899,
            "num_unique_values": 281,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.15942028985507,
                "explored_percent_lambda": 32.608695652173914,
                "explored_percent_none": 11.231884057971014,
                "kept_percent_concrete": 53.64963503649635,
                "kept_percent_lambda": 46.35036496350365,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 180,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 147,
                "num_kept_lambda": 127,
                "num_values_explored": 552,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 552
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.84113589907065,
            "num_unique_values": 1098,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.281394156842644,
                "explored_percent_lambda": 24.88467452588416,
                "explored_percent_none": 23.833931317273194,
                "kept_percent_concrete": 50.779101741521536,
                "kept_percent_lambda": 49.220898258478464,
                "num_examples": 3,
                "num_explored_concrete": 2001,
                "num_explored_lambda": 971,
                "num_explored_none": 930,
                "num_inputs": 2,
                "num_kept_concrete": 554,
                "num_kept_lambda": 537,
                "num_values_explored": 3902,
                "num_values_kept": 1091,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43614
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.7182499920018,
            "num_unique_values": 1263,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.34959349593496,
                "explored_percent_lambda": 16.155930790077132,
                "explored_percent_none": 24.49447571398791,
                "kept_percent_concrete": 71.25796178343948,
                "kept_percent_lambda": 28.74203821656051,
                "num_examples": 5,
                "num_explored_concrete": 2847,
                "num_explored_lambda": 775,
                "num_explored_none": 1175,
                "num_inputs": 2,
                "num_kept_concrete": 895,
                "num_kept_lambda": 361,
                "num_values_explored": 4797,
                "num_values_kept": 1256,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49969
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.48636433109641075,
            "num_unique_values": 164,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: 1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.02788844621514,
                "explored_percent_lambda": 44.223107569721115,
                "explored_percent_none": 12.749003984063744,
                "kept_percent_concrete": 41.139240506329116,
                "kept_percent_lambda": 58.860759493670884,
                "num_examples": 5,
                "num_explored_concrete": 108,
                "num_explored_lambda": 111,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 93,
                "num_values_explored": 251,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 251
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.9079791919794,
            "num_unique_values": 1115,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.73116438356164,
                "explored_percent_lambda": 28.767123287671232,
                "explored_percent_none": 23.501712328767123,
                "kept_percent_concrete": 47.2497745716862,
                "kept_percent_lambda": 52.7502254283138,
                "num_examples": 3,
                "num_explored_concrete": 2230,
                "num_explored_lambda": 1344,
                "num_explored_none": 1098,
                "num_inputs": 1,
                "num_kept_concrete": 524,
                "num_kept_lambda": 585,
                "num_values_explored": 4672,
                "num_values_kept": 1109,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45548
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.15678124607075,
            "num_unique_values": 1167,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.90614578370653,
                "explored_percent_lambda": 29.60933777989519,
                "explored_percent_none": 17.484516436398284,
                "kept_percent_concrete": 46.33936261843239,
                "kept_percent_lambda": 53.66063738156761,
                "num_examples": 3,
                "num_explored_concrete": 2221,
                "num_explored_lambda": 1243,
                "num_explored_none": 734,
                "num_inputs": 1,
                "num_kept_concrete": 538,
                "num_kept_lambda": 623,
                "num_values_explored": 4198,
                "num_values_kept": 1161,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45277
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3144090280402452,
            "num_unique_values": 150,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.67796610169491,
                "explored_percent_lambda": 50.0,
                "explored_percent_none": 9.322033898305085,
                "kept_percent_concrete": 31.944444444444443,
                "kept_percent_lambda": 68.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 118,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 98,
                "num_values_explored": 236,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 236
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.406045307056047,
            "num_unique_values": 117,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.204819277108435,
                "explored_percent_lambda": 41.566265060240966,
                "explored_percent_none": 7.228915662650603,
                "kept_percent_concrete": 44.95412844036697,
                "kept_percent_lambda": 55.04587155963303,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 69,
                "num_explored_none": 12,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 60,
                "num_values_explored": 166,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 166
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.61590796802193,
            "num_unique_values": 1216,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.70912183712524,
                "explored_percent_lambda": 24.303635977035935,
                "explored_percent_none": 19.987242185838827,
                "kept_percent_concrete": 53.47107438016529,
                "kept_percent_lambda": 46.52892561983471,
                "num_examples": 3,
                "num_explored_concrete": 2620,
                "num_explored_lambda": 1143,
                "num_explored_none": 940,
                "num_inputs": 1,
                "num_kept_concrete": 647,
                "num_kept_lambda": 563,
                "num_values_explored": 4703,
                "num_values_kept": 1210,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43295
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.27660365600605,
            "num_unique_values": 950,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.20228384991844,
                "explored_percent_lambda": 21.696574225122347,
                "explored_percent_none": 26.10114192495922,
                "kept_percent_concrete": 61.50583244962884,
                "kept_percent_lambda": 38.49416755037116,
                "num_examples": 3,
                "num_explored_concrete": 1920,
                "num_explored_lambda": 798,
                "num_explored_none": 960,
                "num_inputs": 2,
                "num_kept_concrete": 580,
                "num_kept_lambda": 363,
                "num_values_explored": 3678,
                "num_values_kept": 943,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45156
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.231939128949307,
            "num_unique_values": 848,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.25997248968363,
                "explored_percent_lambda": 20.30261348005502,
                "explored_percent_none": 26.437414030261348,
                "kept_percent_concrete": 61.785714285714285,
                "kept_percent_lambda": 38.214285714285715,
                "num_examples": 3,
                "num_explored_concrete": 1936,
                "num_explored_lambda": 738,
                "num_explored_none": 961,
                "num_inputs": 3,
                "num_kept_concrete": 519,
                "num_kept_lambda": 321,
                "num_values_explored": 3635,
                "num_values_kept": 840,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9513
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.4740184820257127,
            "num_unique_values": 261,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.122549019607842,
                "explored_percent_lambda": 50.122549019607845,
                "explored_percent_none": 24.754901960784313,
                "kept_percent_concrete": 42.745098039215684,
                "kept_percent_lambda": 57.254901960784316,
                "num_examples": 3,
                "num_explored_concrete": 205,
                "num_explored_lambda": 409,
                "num_explored_none": 202,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 146,
                "num_values_explored": 816,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3616
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.162343950010836,
            "num_unique_values": 569,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 38.74709976798144,
                "explored_percent_lambda": 39.791183294663576,
                "explored_percent_none": 21.46171693735499,
                "kept_percent_concrete": 42.273534635879216,
                "kept_percent_lambda": 57.726465364120784,
                "num_examples": 3,
                "num_explored_concrete": 668,
                "num_explored_lambda": 686,
                "num_explored_none": 370,
                "num_inputs": 1,
                "num_kept_concrete": 238,
                "num_kept_lambda": 325,
                "num_values_explored": 1724,
                "num_values_kept": 563,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9837
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2848077539820224,
            "num_unique_values": 164,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.099616858237546,
                "explored_percent_lambda": 53.25670498084291,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 27.848101265822784,
                "kept_percent_lambda": 72.15189873417721,
                "num_examples": 3,
                "num_explored_concrete": 89,
                "num_explored_lambda": 139,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 114,
                "num_values_explored": 261,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 261
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09813480591401,
            "num_unique_values": 1148,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.64912280701754,
                "explored_percent_lambda": 16.38157894736842,
                "explored_percent_none": 23.969298245614034,
                "kept_percent_concrete": 69.67572304995618,
                "kept_percent_lambda": 30.32427695004382,
                "num_examples": 5,
                "num_explored_concrete": 2720,
                "num_explored_lambda": 747,
                "num_explored_none": 1093,
                "num_inputs": 2,
                "num_kept_concrete": 795,
                "num_kept_lambda": 346,
                "num_values_explored": 4560,
                "num_values_kept": 1141,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50332
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.54
}