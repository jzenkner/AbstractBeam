{
    "num_tasks": 50,
    "num_tasks_solved": 26,
    "results": [
        {
            "elapsed_time": 102.08660024497658,
            "num_unique_values": 1116,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.471941865159465,
                "explored_percent_lambda": 18.89382317319338,
                "explored_percent_none": 27.634234961647152,
                "kept_percent_concrete": 56.9882777276826,
                "kept_percent_lambda": 43.0117222723174,
                "num_examples": 3,
                "num_explored_concrete": 2649,
                "num_explored_lambda": 936,
                "num_explored_none": 1369,
                "num_inputs": 2,
                "num_kept_concrete": 632,
                "num_kept_lambda": 477,
                "num_values_explored": 4954,
                "num_values_kept": 1109,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41371
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26576285308692604,
            "num_unique_values": 163,
            "solution": "fn_0(Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 41.901408450704224,
                "explored_percent_none": 17.95774647887324,
                "kept_percent_concrete": 36.94267515923567,
                "kept_percent_lambda": 63.05732484076433,
                "num_examples": 5,
                "num_explored_concrete": 114,
                "num_explored_lambda": 119,
                "num_explored_none": 51,
                "num_inputs": 1,
                "num_kept_concrete": 58,
                "num_kept_lambda": 99,
                "num_values_explored": 284,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.42970942193642,
            "num_unique_values": 1085,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.72289742343218,
                "explored_percent_lambda": 16.383082158483226,
                "explored_percent_none": 23.89402041808459,
                "kept_percent_concrete": 73.65491651205937,
                "kept_percent_lambda": 26.34508348794063,
                "num_examples": 5,
                "num_explored_concrete": 2457,
                "num_explored_lambda": 674,
                "num_explored_none": 983,
                "num_inputs": 2,
                "num_kept_concrete": 794,
                "num_kept_lambda": 284,
                "num_values_explored": 4114,
                "num_values_kept": 1078,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49843
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6983315149554983,
            "num_unique_values": 314,
            "solution": "Reverse(Take(fn_0(-1, x), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.09041591320072,
                "explored_percent_lambda": 39.42133815551537,
                "explored_percent_none": 10.488245931283906,
                "kept_percent_concrete": 46.753246753246756,
                "kept_percent_lambda": 53.246753246753244,
                "num_examples": 3,
                "num_explored_concrete": 277,
                "num_explored_lambda": 218,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 144,
                "num_kept_lambda": 164,
                "num_values_explored": 553,
                "num_values_kept": 308,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 553
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.14024566905573,
            "num_unique_values": 553,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 0)))(u2)), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 42.91338582677165,
                "explored_percent_lambda": 37.20472440944882,
                "explored_percent_none": 19.881889763779526,
                "kept_percent_concrete": 59.41499085923218,
                "kept_percent_lambda": 40.58500914076782,
                "num_examples": 5,
                "num_explored_concrete": 654,
                "num_explored_lambda": 567,
                "num_explored_none": 303,
                "num_inputs": 1,
                "num_kept_concrete": 325,
                "num_kept_lambda": 222,
                "num_values_explored": 1524,
                "num_values_kept": 547,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3274
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23397317994386,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.29590865842055,
                "explored_percent_lambda": 17.012369172216935,
                "explored_percent_none": 23.69172216936251,
                "kept_percent_concrete": 61.18760757314974,
                "kept_percent_lambda": 38.81239242685026,
                "num_examples": 3,
                "num_explored_concrete": 3116,
                "num_explored_lambda": 894,
                "num_explored_none": 1245,
                "num_inputs": 2,
                "num_kept_concrete": 711,
                "num_kept_lambda": 451,
                "num_values_explored": 5255,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51333
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 45.24591179098934,
            "num_unique_values": 556,
            "solution": "Map((lambda u1: ((lambda v1: fn_14((lambda u1, u2: ((lambda v1: Max(v1, a)))(v1)), Reverse(Drop(a, Take(-1, x))))))(u1)), ZipWith((lambda u1, u2: ((lambda v1: Min(v1, b)))(u1)), x, x))",
            "solution_weight": 20,
            "stats": {
                "explored_percent_concrete": 39.72208912314327,
                "explored_percent_lambda": 31.432678485864876,
                "explored_percent_none": 28.845232390991853,
                "kept_percent_concrete": 48.90510948905109,
                "kept_percent_lambda": 51.09489051094891,
                "num_examples": 3,
                "num_explored_concrete": 829,
                "num_explored_lambda": 656,
                "num_explored_none": 602,
                "num_inputs": 3,
                "num_kept_concrete": 268,
                "num_kept_lambda": 280,
                "num_values_explored": 2087,
                "num_values_kept": 548,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 22626
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2512037520064,
            "num_unique_values": 1227,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.63277393879566,
                "explored_percent_lambda": 17.1964461994077,
                "explored_percent_none": 19.170779861796643,
                "kept_percent_concrete": 69.94266994266994,
                "kept_percent_lambda": 30.057330057330056,
                "num_examples": 5,
                "num_explored_concrete": 3223,
                "num_explored_lambda": 871,
                "num_explored_none": 971,
                "num_inputs": 1,
                "num_kept_concrete": 854,
                "num_kept_lambda": 367,
                "num_values_explored": 5065,
                "num_values_kept": 1221,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49643
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 51.004575820988975,
            "num_unique_values": 1262,
            "solution": "fn_3(Multiply(fn_3(-1), IntDivide(Add(Head(x), Last(x)), Multiply(-1, Square(fn_3(-1))))))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 60.433654558932545,
                "explored_percent_lambda": 17.142327650111195,
                "explored_percent_none": 22.424017790956263,
                "kept_percent_concrete": 69.50636942675159,
                "kept_percent_lambda": 30.493630573248407,
                "num_examples": 5,
                "num_explored_concrete": 3261,
                "num_explored_lambda": 925,
                "num_explored_none": 1210,
                "num_inputs": 1,
                "num_kept_concrete": 873,
                "num_kept_lambda": 383,
                "num_values_explored": 5396,
                "num_values_kept": 1256,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 27293
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.4885297290748,
            "num_unique_values": 558,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 55.360896986685354,
                "explored_percent_lambda": 25.92852137351086,
                "explored_percent_none": 18.710581639803785,
                "kept_percent_concrete": 70.78039927404718,
                "kept_percent_lambda": 29.219600725952812,
                "num_examples": 5,
                "num_explored_concrete": 790,
                "num_explored_lambda": 370,
                "num_explored_none": 267,
                "num_inputs": 2,
                "num_kept_concrete": 390,
                "num_kept_lambda": 161,
                "num_values_explored": 1427,
                "num_values_kept": 551,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 23185
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.95805235102307,
            "num_unique_values": 1152,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.24338861497087,
                "explored_percent_lambda": 28.798744957418197,
                "explored_percent_none": 23.957866427610938,
                "kept_percent_concrete": 42.4956369982548,
                "kept_percent_lambda": 57.5043630017452,
                "num_examples": 3,
                "num_explored_concrete": 2108,
                "num_explored_lambda": 1285,
                "num_explored_none": 1069,
                "num_inputs": 1,
                "num_kept_concrete": 487,
                "num_kept_lambda": 659,
                "num_values_explored": 4462,
                "num_values_kept": 1146,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50214
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6594615259673446,
            "num_unique_values": 218,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 18.47826086956522,
                "explored_percent_lambda": 67.79891304347827,
                "explored_percent_none": 13.722826086956522,
                "kept_percent_concrete": 30.660377358490567,
                "kept_percent_lambda": 69.33962264150944,
                "num_examples": 3,
                "num_explored_concrete": 136,
                "num_explored_lambda": 499,
                "num_explored_none": 101,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 147,
                "num_values_explored": 736,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2486
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32262308103964,
            "num_unique_values": 1235,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.88172992056487,
                "explored_percent_lambda": 29.942630185348634,
                "explored_percent_none": 22.175639894086498,
                "kept_percent_concrete": 44.70684039087948,
                "kept_percent_lambda": 55.29315960912052,
                "num_examples": 3,
                "num_explored_concrete": 2170,
                "num_explored_lambda": 1357,
                "num_explored_none": 1005,
                "num_inputs": 2,
                "num_kept_concrete": 549,
                "num_kept_lambda": 679,
                "num_values_explored": 4532,
                "num_values_kept": 1228,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43798
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.35042439494282,
            "num_unique_values": 831,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 39.424895951570186,
                "explored_percent_lambda": 38.17631479379493,
                "explored_percent_none": 22.398789254634885,
                "kept_percent_concrete": 42.666666666666664,
                "kept_percent_lambda": 57.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 1042,
                "num_explored_lambda": 1009,
                "num_explored_none": 592,
                "num_inputs": 1,
                "num_kept_concrete": 352,
                "num_kept_lambda": 473,
                "num_values_explored": 2643,
                "num_values_kept": 825,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5093
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.55653545598034,
            "num_unique_values": 1017,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.015369836695484,
                "explored_percent_lambda": 27.76176753121998,
                "explored_percent_none": 23.222862632084535,
                "kept_percent_concrete": 48.269040553907026,
                "kept_percent_lambda": 51.730959446092974,
                "num_examples": 3,
                "num_explored_concrete": 2041,
                "num_explored_lambda": 1156,
                "num_explored_none": 967,
                "num_inputs": 1,
                "num_kept_concrete": 488,
                "num_kept_lambda": 523,
                "num_values_explored": 4164,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44877
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21276157104875892,
            "num_unique_values": 120,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 35.22012578616352,
                "explored_percent_lambda": 58.490566037735846,
                "explored_percent_none": 6.289308176100629,
                "kept_percent_concrete": 27.43362831858407,
                "kept_percent_lambda": 72.56637168141593,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 93,
                "num_explored_none": 10,
                "num_inputs": 2,
                "num_kept_concrete": 31,
                "num_kept_lambda": 82,
                "num_values_explored": 159,
                "num_values_kept": 113,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 159
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24526268499903,
            "num_unique_values": 1174,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.23809523809524,
                "explored_percent_lambda": 15.485714285714286,
                "explored_percent_none": 25.276190476190475,
                "kept_percent_concrete": 71.1472602739726,
                "kept_percent_lambda": 28.852739726027398,
                "num_examples": 5,
                "num_explored_concrete": 3110,
                "num_explored_lambda": 813,
                "num_explored_none": 1327,
                "num_inputs": 1,
                "num_kept_concrete": 831,
                "num_kept_lambda": 337,
                "num_values_explored": 5250,
                "num_values_kept": 1168,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52774
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.2463241070509,
            "num_unique_values": 1097,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.509936984973336,
                "explored_percent_lambda": 29.786718371303927,
                "explored_percent_none": 23.703344643722733,
                "kept_percent_concrete": 41.92660550458716,
                "kept_percent_lambda": 58.07339449541284,
                "num_examples": 3,
                "num_explored_concrete": 1919,
                "num_explored_lambda": 1229,
                "num_explored_none": 978,
                "num_inputs": 2,
                "num_kept_concrete": 457,
                "num_kept_lambda": 633,
                "num_values_explored": 4126,
                "num_values_kept": 1090,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41597
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5295620360411704,
            "num_unique_values": 340,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.98876404494382,
                "explored_percent_lambda": 25.140449438202246,
                "explored_percent_none": 15.870786516853933,
                "kept_percent_concrete": 60.17964071856287,
                "kept_percent_lambda": 39.82035928143713,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 179,
                "num_explored_none": 113,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 133,
                "num_values_explored": 712,
                "num_values_kept": 334,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 712
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.33144114899915,
            "num_unique_values": 1067,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.56842105263158,
                "explored_percent_lambda": 24.210526315789473,
                "explored_percent_none": 25.221052631578946,
                "kept_percent_concrete": 50.6137865911237,
                "kept_percent_lambda": 49.3862134088763,
                "num_examples": 3,
                "num_explored_concrete": 2402,
                "num_explored_lambda": 1150,
                "num_explored_none": 1198,
                "num_inputs": 3,
                "num_kept_concrete": 536,
                "num_kept_lambda": 523,
                "num_values_explored": 4750,
                "num_values_kept": 1059,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47756
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9819327739533037,
            "num_unique_values": 347,
            "solution": "Last(Map((lambda u1: ((lambda v1: fn_5(v1, x)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.66349583828775,
                "explored_percent_lambda": 26.397146254458978,
                "explored_percent_none": 10.93935790725327,
                "kept_percent_concrete": 59.82404692082111,
                "kept_percent_lambda": 40.17595307917889,
                "num_examples": 5,
                "num_explored_concrete": 527,
                "num_explored_lambda": 222,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 137,
                "num_values_explored": 841,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 841
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.42284104798455,
            "num_unique_values": 987,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.997835497835496,
                "explored_percent_lambda": 29.22077922077922,
                "explored_percent_none": 22.78138528138528,
                "kept_percent_concrete": 47.400611620795104,
                "kept_percent_lambda": 52.599388379204896,
                "num_examples": 3,
                "num_explored_concrete": 1774,
                "num_explored_lambda": 1080,
                "num_explored_none": 842,
                "num_inputs": 1,
                "num_kept_concrete": 465,
                "num_kept_lambda": 516,
                "num_values_explored": 3696,
                "num_values_kept": 981,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44310
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.9102682149969,
            "num_unique_values": 1088,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.523190678915526,
                "explored_percent_lambda": 22.159982074837554,
                "explored_percent_none": 22.31682724624692,
                "kept_percent_concrete": 55.78168362627197,
                "kept_percent_lambda": 44.21831637372803,
                "num_examples": 3,
                "num_explored_concrete": 2478,
                "num_explored_lambda": 989,
                "num_explored_none": 996,
                "num_inputs": 2,
                "num_kept_concrete": 603,
                "num_kept_lambda": 478,
                "num_values_explored": 4463,
                "num_values_kept": 1081,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42414
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.46485824103001505,
            "num_unique_values": 301,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.45286506469501,
                "explored_percent_lambda": 32.90203327171904,
                "explored_percent_none": 11.645101663585953,
                "kept_percent_concrete": 54.23728813559322,
                "kept_percent_lambda": 45.76271186440678,
                "num_examples": 5,
                "num_explored_concrete": 300,
                "num_explored_lambda": 178,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 135,
                "num_values_explored": 541,
                "num_values_kept": 295,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.012092705001123,
            "num_unique_values": 256,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v2, v1)))(u1, u2)), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 31.097560975609756,
                "explored_percent_lambda": 56.859756097560975,
                "explored_percent_none": 12.042682926829269,
                "kept_percent_concrete": 38.4,
                "kept_percent_lambda": 61.6,
                "num_examples": 3,
                "num_explored_concrete": 204,
                "num_explored_lambda": 373,
                "num_explored_none": 79,
                "num_inputs": 1,
                "num_kept_concrete": 96,
                "num_kept_lambda": 154,
                "num_values_explored": 656,
                "num_values_kept": 250,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7677
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.3916213780175894,
            "num_unique_values": 567,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 34.76323119777159,
                "explored_percent_lambda": 40.278551532033426,
                "explored_percent_none": 24.958217270194986,
                "kept_percent_concrete": 44.563279857397504,
                "kept_percent_lambda": 55.436720142602496,
                "num_examples": 3,
                "num_explored_concrete": 624,
                "num_explored_lambda": 723,
                "num_explored_none": 448,
                "num_inputs": 1,
                "num_kept_concrete": 250,
                "num_kept_lambda": 311,
                "num_values_explored": 1795,
                "num_values_kept": 561,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3895
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21894520591013134,
            "num_unique_values": 162,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.732510288065846,
                "explored_percent_lambda": 34.5679012345679,
                "explored_percent_none": 10.699588477366255,
                "kept_percent_concrete": 52.903225806451616,
                "kept_percent_lambda": 47.096774193548384,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 84,
                "num_explored_none": 26,
                "num_inputs": 2,
                "num_kept_concrete": 82,
                "num_kept_lambda": 73,
                "num_values_explored": 243,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 243
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.3866612049751,
            "num_unique_values": 1343,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.975124378109456,
                "explored_percent_lambda": 25.554047942107644,
                "explored_percent_none": 19.470827679782904,
                "kept_percent_concrete": 51.75766641735228,
                "kept_percent_lambda": 48.24233358264772,
                "num_examples": 3,
                "num_explored_concrete": 2431,
                "num_explored_lambda": 1130,
                "num_explored_none": 861,
                "num_inputs": 1,
                "num_kept_concrete": 692,
                "num_kept_lambda": 645,
                "num_values_explored": 4422,
                "num_values_kept": 1337,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45846
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.817061273031868,
            "num_unique_values": 1091,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 67.64875794338532,
                "explored_percent_lambda": 17.879838243789717,
                "explored_percent_none": 14.471403812824956,
                "kept_percent_concrete": 71.86346863468634,
                "kept_percent_lambda": 28.136531365313655,
                "num_examples": 5,
                "num_explored_concrete": 2342,
                "num_explored_lambda": 619,
                "num_explored_none": 501,
                "num_inputs": 2,
                "num_kept_concrete": 779,
                "num_kept_lambda": 305,
                "num_values_explored": 3462,
                "num_values_kept": 1084,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5912
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.12841437000316,
            "num_unique_values": 1036,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.42501481920569,
                "explored_percent_lambda": 20.92471843509188,
                "explored_percent_none": 19.65026674570243,
                "kept_percent_concrete": 68.5131195335277,
                "kept_percent_lambda": 31.486880466472304,
                "num_examples": 5,
                "num_explored_concrete": 2005,
                "num_explored_lambda": 706,
                "num_explored_none": 663,
                "num_inputs": 2,
                "num_kept_concrete": 705,
                "num_kept_lambda": 324,
                "num_values_explored": 3374,
                "num_values_kept": 1029,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44666
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.7068139089969918,
            "num_unique_values": 275,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 53.44827586206897,
                "explored_percent_lambda": 35.24904214559387,
                "explored_percent_none": 11.302681992337165,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 5,
                "num_explored_concrete": 279,
                "num_explored_lambda": 184,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 133,
                "num_values_explored": 522,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 522
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.53744212398306,
            "num_unique_values": 1040,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.358845671267254,
                "explored_percent_lambda": 21.831869510664994,
                "explored_percent_none": 15.809284818067754,
                "kept_percent_concrete": 61.37463697967086,
                "kept_percent_lambda": 38.62536302032914,
                "num_examples": 3,
                "num_explored_concrete": 2485,
                "num_explored_lambda": 870,
                "num_explored_none": 630,
                "num_inputs": 2,
                "num_kept_concrete": 634,
                "num_kept_lambda": 399,
                "num_values_explored": 3985,
                "num_values_kept": 1033,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42943
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.38786609098315,
            "num_unique_values": 980,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.16689466484268,
                "explored_percent_lambda": 21.149110807113544,
                "explored_percent_none": 20.683994528043776,
                "kept_percent_concrete": 58.68448098663926,
                "kept_percent_lambda": 41.31551901336074,
                "num_examples": 3,
                "num_explored_concrete": 2126,
                "num_explored_lambda": 773,
                "num_explored_none": 756,
                "num_inputs": 2,
                "num_kept_concrete": 571,
                "num_kept_lambda": 402,
                "num_values_explored": 3655,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46055
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.957317674066871,
            "num_unique_values": 604,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 52.41379310344828,
                "explored_percent_lambda": 34.94252873563219,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 52.428810720268004,
                "kept_percent_lambda": 47.571189279731996,
                "num_examples": 3,
                "num_explored_concrete": 912,
                "num_explored_lambda": 608,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 313,
                "num_kept_lambda": 284,
                "num_values_explored": 1740,
                "num_values_kept": 597,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3490
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.0677135209553,
            "num_unique_values": 1324,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.95755182625864,
                "explored_percent_lambda": 16.169792694965448,
                "explored_percent_none": 12.872655478775913,
                "kept_percent_concrete": 70.23538344722854,
                "kept_percent_lambda": 29.76461655277145,
                "num_examples": 5,
                "num_explored_concrete": 3594,
                "num_explored_lambda": 819,
                "num_explored_none": 652,
                "num_inputs": 2,
                "num_kept_concrete": 925,
                "num_kept_lambda": 392,
                "num_values_explored": 5065,
                "num_values_kept": 1317,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51261
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4280334879877046,
            "num_unique_values": 281,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.15942028985507,
                "explored_percent_lambda": 32.608695652173914,
                "explored_percent_none": 11.231884057971014,
                "kept_percent_concrete": 53.64963503649635,
                "kept_percent_lambda": 46.35036496350365,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 180,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 147,
                "num_kept_lambda": 127,
                "num_values_explored": 552,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 552
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.5687187599251,
            "num_unique_values": 1230,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.685794111326025,
                "explored_percent_lambda": 23.36127229744251,
                "explored_percent_none": 22.952933591231464,
                "kept_percent_concrete": 52.41210139002453,
                "kept_percent_lambda": 47.58789860997547,
                "num_examples": 3,
                "num_explored_concrete": 2498,
                "num_explored_lambda": 1087,
                "num_explored_none": 1068,
                "num_inputs": 2,
                "num_kept_concrete": 641,
                "num_kept_lambda": 582,
                "num_values_explored": 4653,
                "num_values_kept": 1223,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49113
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.34440521500073,
            "num_unique_values": 1378,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.35580237456913,
                "explored_percent_lambda": 15.032554576790501,
                "explored_percent_none": 23.611643048640367,
                "kept_percent_concrete": 72.64770240700219,
                "kept_percent_lambda": 27.35229759299781,
                "num_examples": 5,
                "num_explored_concrete": 3204,
                "num_explored_lambda": 785,
                "num_explored_none": 1233,
                "num_inputs": 2,
                "num_kept_concrete": 996,
                "num_kept_lambda": 375,
                "num_values_explored": 5222,
                "num_values_kept": 1371,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52033
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.301327224005945,
            "num_unique_values": 164,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: 1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.02788844621514,
                "explored_percent_lambda": 44.223107569721115,
                "explored_percent_none": 12.749003984063744,
                "kept_percent_concrete": 41.139240506329116,
                "kept_percent_lambda": 58.860759493670884,
                "num_examples": 5,
                "num_explored_concrete": 108,
                "num_explored_lambda": 111,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 93,
                "num_values_explored": 251,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 251
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.74577591591515,
            "num_unique_values": 987,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.08673872923807,
                "explored_percent_lambda": 28.710783021355127,
                "explored_percent_none": 24.202478249406802,
                "kept_percent_concrete": 49.33741080530071,
                "kept_percent_lambda": 50.66258919469929,
                "num_examples": 3,
                "num_explored_concrete": 1786,
                "num_explored_lambda": 1089,
                "num_explored_none": 918,
                "num_inputs": 1,
                "num_kept_concrete": 484,
                "num_kept_lambda": 497,
                "num_values_explored": 3793,
                "num_values_kept": 981,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44901
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.51266154600307,
            "num_unique_values": 1121,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.71499013806706,
                "explored_percent_lambda": 31.53353057199211,
                "explored_percent_none": 17.75147928994083,
                "kept_percent_concrete": 44.573991031390136,
                "kept_percent_lambda": 55.426008968609864,
                "num_examples": 3,
                "num_explored_concrete": 2057,
                "num_explored_lambda": 1279,
                "num_explored_none": 720,
                "num_inputs": 1,
                "num_kept_concrete": 497,
                "num_kept_lambda": 618,
                "num_values_explored": 4056,
                "num_values_kept": 1115,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44612
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26804686104878783,
            "num_unique_values": 150,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.67796610169491,
                "explored_percent_lambda": 50.0,
                "explored_percent_none": 9.322033898305085,
                "kept_percent_concrete": 31.944444444444443,
                "kept_percent_lambda": 68.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 118,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 98,
                "num_values_explored": 236,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 236
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.17453274899162352,
            "num_unique_values": 117,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.204819277108435,
                "explored_percent_lambda": 41.566265060240966,
                "explored_percent_none": 7.228915662650603,
                "kept_percent_concrete": 44.95412844036697,
                "kept_percent_lambda": 55.04587155963303,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 69,
                "num_explored_none": 12,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 60,
                "num_values_explored": 166,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 166
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.45465538999997,
            "num_unique_values": 905,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.309136420525654,
                "explored_percent_lambda": 28.097622027534417,
                "explored_percent_none": 24.593241551939926,
                "kept_percent_concrete": 52.72525027808676,
                "kept_percent_lambda": 47.27474972191324,
                "num_examples": 3,
                "num_explored_concrete": 1512,
                "num_explored_lambda": 898,
                "num_explored_none": 786,
                "num_inputs": 1,
                "num_kept_concrete": 474,
                "num_kept_lambda": 425,
                "num_values_explored": 3196,
                "num_values_kept": 899,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45153
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.19427521305624,
            "num_unique_values": 1096,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.045207956600365,
                "explored_percent_lambda": 22.988245931283906,
                "explored_percent_none": 26.966546112115733,
                "kept_percent_concrete": 56.29017447199266,
                "kept_percent_lambda": 43.70982552800734,
                "num_examples": 3,
                "num_explored_concrete": 2214,
                "num_explored_lambda": 1017,
                "num_explored_none": 1193,
                "num_inputs": 2,
                "num_kept_concrete": 613,
                "num_kept_lambda": 476,
                "num_values_explored": 4424,
                "num_values_kept": 1089,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47710
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 45.632548067951575,
            "num_unique_values": 547,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1, v2: fn_14((lambda u1, u2: ((lambda v1: Multiply(v1, a)))(v2)), ((lambda v1: Equal(1, v1)))(v1))))(v1, v1))))(u1)), x)",
            "solution_weight": 16,
            "stats": {
                "explored_percent_concrete": 43.036072144288575,
                "explored_percent_lambda": 25.751503006012022,
                "explored_percent_none": 31.2124248496994,
                "kept_percent_concrete": 59.92578849721707,
                "kept_percent_lambda": 40.07421150278293,
                "num_examples": 3,
                "num_explored_concrete": 859,
                "num_explored_lambda": 514,
                "num_explored_none": 623,
                "num_inputs": 3,
                "num_kept_concrete": 323,
                "num_kept_lambda": 216,
                "num_values_explored": 1996,
                "num_values_kept": 539,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 21650
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.390395010006614,
            "num_unique_values": 263,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.433915211970074,
                "explored_percent_lambda": 50.49875311720698,
                "explored_percent_none": 23.06733167082294,
                "kept_percent_concrete": 42.80155642023346,
                "kept_percent_lambda": 57.19844357976654,
                "num_examples": 3,
                "num_explored_concrete": 212,
                "num_explored_lambda": 405,
                "num_explored_none": 185,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 147,
                "num_values_explored": 802,
                "num_values_kept": 257,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14871
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.74642810795922,
            "num_unique_values": 603,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 41.955656623081296,
                "explored_percent_lambda": 39.681637293917,
                "explored_percent_none": 18.362706083001704,
                "kept_percent_concrete": 41.54103852596315,
                "kept_percent_lambda": 58.45896147403685,
                "num_examples": 3,
                "num_explored_concrete": 738,
                "num_explored_lambda": 698,
                "num_explored_none": 323,
                "num_inputs": 1,
                "num_kept_concrete": 248,
                "num_kept_lambda": 349,
                "num_values_explored": 1759,
                "num_values_kept": 597,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 22382
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.23352072201669216,
            "num_unique_values": 164,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.099616858237546,
                "explored_percent_lambda": 53.25670498084291,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 27.848101265822784,
                "kept_percent_lambda": 72.15189873417721,
                "num_examples": 3,
                "num_explored_concrete": 89,
                "num_explored_lambda": 139,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 114,
                "num_values_explored": 261,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 261
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09396529698279,
            "num_unique_values": 1290,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.2556697034309,
                "explored_percent_lambda": 15.642566388835046,
                "explored_percent_none": 25.101763907734057,
                "kept_percent_concrete": 71.0833982852689,
                "kept_percent_lambda": 28.916601714731097,
                "num_examples": 5,
                "num_explored_concrete": 3057,
                "num_explored_lambda": 807,
                "num_explored_none": 1295,
                "num_inputs": 2,
                "num_kept_concrete": 912,
                "num_kept_lambda": 371,
                "num_values_explored": 5159,
                "num_values_kept": 1283,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52764
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.52
}