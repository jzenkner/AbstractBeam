{
    "num_tasks": 50,
    "num_tasks_solved": 22,
    "results": [
        {
            "elapsed_time": 101.20340960100293,
            "num_unique_values": 1048,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.77320359281437,
                "explored_percent_lambda": 13.566616766467066,
                "explored_percent_none": 13.660179640718562,
                "kept_percent_concrete": 69.07514450867052,
                "kept_percent_lambda": 30.92485549132948,
                "num_examples": 3,
                "num_explored_concrete": 3889,
                "num_explored_lambda": 725,
                "num_explored_none": 730,
                "num_inputs": 2,
                "num_kept_concrete": 717,
                "num_kept_lambda": 321,
                "num_values_explored": 5344,
                "num_values_kept": 1038,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55667
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.62699612020515,
            "num_unique_values": 791,
            "solution": "Count((lambda u1: ((lambda v1: Less(v1, Head(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.47108130762783,
                "explored_percent_lambda": 19.279128248114,
                "explored_percent_none": 14.249790444258172,
                "kept_percent_concrete": 71.22762148337596,
                "kept_percent_lambda": 28.77237851662404,
                "num_examples": 5,
                "num_explored_concrete": 2379,
                "num_explored_lambda": 690,
                "num_explored_none": 510,
                "num_inputs": 1,
                "num_kept_concrete": 557,
                "num_kept_lambda": 225,
                "num_values_explored": 3579,
                "num_values_kept": 782,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10709
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20909170503728,
            "num_unique_values": 1079,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.81496995082863,
                "explored_percent_lambda": 10.089236933163358,
                "explored_percent_none": 14.095793116008013,
                "kept_percent_concrete": 82.13283442469597,
                "kept_percent_lambda": 17.86716557530402,
                "num_examples": 5,
                "num_explored_concrete": 4163,
                "num_explored_lambda": 554,
                "num_explored_none": 774,
                "num_inputs": 2,
                "num_kept_concrete": 878,
                "num_kept_lambda": 191,
                "num_values_explored": 5491,
                "num_values_kept": 1069,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56138
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4289163590874523,
            "num_unique_values": 349,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Less(v1, -1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.37235367372354,
                "explored_percent_lambda": 29.140722291407222,
                "explored_percent_none": 3.4869240348692405,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 541,
                "num_explored_lambda": 234,
                "num_explored_none": 28,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 130,
                "num_values_explored": 803,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 803
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.36165204690769315,
            "num_unique_values": 291,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.60268714011517,
                "explored_percent_lambda": 21.689059500959694,
                "explored_percent_none": 11.708253358925145,
                "kept_percent_concrete": 68.43971631205673,
                "kept_percent_lambda": 31.56028368794326,
                "num_examples": 5,
                "num_explored_concrete": 347,
                "num_explored_lambda": 113,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 89,
                "num_values_explored": 521,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.82341795694083,
            "num_unique_values": 1261,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.36653895274585,
                "explored_percent_lambda": 24.54235845040443,
                "explored_percent_none": 14.091102596849723,
                "kept_percent_concrete": 54.75619504396483,
                "kept_percent_lambda": 45.24380495603517,
                "num_examples": 3,
                "num_explored_concrete": 2883,
                "num_explored_lambda": 1153,
                "num_explored_none": 662,
                "num_inputs": 2,
                "num_kept_concrete": 685,
                "num_kept_lambda": 566,
                "num_values_explored": 4698,
                "num_values_kept": 1251,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48007
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 94.6896723441314,
            "num_unique_values": 519,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.22010398613518,
                "explored_percent_lambda": 34.48873483535529,
                "explored_percent_none": 16.291161178509533,
                "kept_percent_concrete": 54.92125984251968,
                "kept_percent_lambda": 45.07874015748032,
                "num_examples": 3,
                "num_explored_concrete": 852,
                "num_explored_lambda": 597,
                "num_explored_none": 282,
                "num_inputs": 3,
                "num_kept_concrete": 279,
                "num_kept_lambda": 229,
                "num_values_explored": 1731,
                "num_values_kept": 508,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46465
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32202326203696,
            "num_unique_values": 1063,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.01162790697674,
                "explored_percent_lambda": 15.01937984496124,
                "explored_percent_none": 15.968992248062015,
                "kept_percent_concrete": 74.09867172675521,
                "kept_percent_lambda": 25.901328273244783,
                "num_examples": 5,
                "num_explored_concrete": 3561,
                "num_explored_lambda": 775,
                "num_explored_none": 824,
                "num_inputs": 1,
                "num_kept_concrete": 781,
                "num_kept_lambda": 273,
                "num_values_explored": 5160,
                "num_values_kept": 1054,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55880
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.847031408920884,
            "num_unique_values": 616,
            "solution": "IntDivide(Add(Last(x), Head(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.929955290611026,
                "explored_percent_lambda": 26.030799801291604,
                "explored_percent_none": 17.039244908097366,
                "kept_percent_concrete": 69.8517298187809,
                "kept_percent_lambda": 30.14827018121911,
                "num_examples": 5,
                "num_explored_concrete": 1146,
                "num_explored_lambda": 524,
                "num_explored_none": 343,
                "num_inputs": 1,
                "num_kept_concrete": 424,
                "num_kept_lambda": 183,
                "num_values_explored": 2013,
                "num_values_kept": 607,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3813
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.140961971133947,
            "num_unique_values": 496,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 69.29375639713409,
                "explored_percent_lambda": 13.561924257932446,
                "explored_percent_none": 17.14431934493347,
                "kept_percent_concrete": 80.04115226337449,
                "kept_percent_lambda": 19.958847736625515,
                "num_examples": 5,
                "num_explored_concrete": 1354,
                "num_explored_lambda": 265,
                "num_explored_none": 335,
                "num_inputs": 2,
                "num_kept_concrete": 389,
                "num_kept_lambda": 97,
                "num_values_explored": 1954,
                "num_values_kept": 486,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15252
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99746557720937,
            "num_unique_values": 1133,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.07597361140668,
                "explored_percent_lambda": 25.239412640987442,
                "explored_percent_none": 17.684613747605873,
                "kept_percent_concrete": 51.60142348754449,
                "kept_percent_lambda": 48.39857651245551,
                "num_examples": 3,
                "num_explored_concrete": 2682,
                "num_explored_lambda": 1186,
                "num_explored_none": 831,
                "num_inputs": 1,
                "num_kept_concrete": 580,
                "num_kept_lambda": 544,
                "num_values_explored": 4699,
                "num_values_kept": 1124,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49080
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.74607222387567,
            "num_unique_values": 224,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 26.84766214177979,
                "explored_percent_lambda": 61.085972850678736,
                "explored_percent_none": 12.066365007541478,
                "kept_percent_concrete": 36.74418604651163,
                "kept_percent_lambda": 63.25581395348837,
                "num_examples": 3,
                "num_explored_concrete": 178,
                "num_explored_lambda": 405,
                "num_explored_none": 80,
                "num_inputs": 1,
                "num_kept_concrete": 79,
                "num_kept_lambda": 136,
                "num_values_explored": 663,
                "num_values_kept": 215,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 11969
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88864570716396,
            "num_unique_values": 1046,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.34762092017302,
                "explored_percent_lambda": 21.195438458513568,
                "explored_percent_none": 16.45694062131341,
                "kept_percent_concrete": 55.79150579150579,
                "kept_percent_lambda": 44.20849420849421,
                "num_examples": 3,
                "num_explored_concrete": 3171,
                "num_explored_lambda": 1078,
                "num_explored_none": 837,
                "num_inputs": 2,
                "num_kept_concrete": 578,
                "num_kept_lambda": 458,
                "num_values_explored": 5086,
                "num_values_kept": 1036,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52802
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 37.11771138012409,
            "num_unique_values": 842,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(Last(x), v1)))(u2)), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.02369035702369,
                "explored_percent_lambda": 29.963296629963295,
                "explored_percent_none": 13.013013013013014,
                "kept_percent_concrete": 59.903961584633855,
                "kept_percent_lambda": 40.096038415366145,
                "num_examples": 3,
                "num_explored_concrete": 1709,
                "num_explored_lambda": 898,
                "num_explored_none": 390,
                "num_inputs": 1,
                "num_kept_concrete": 499,
                "num_kept_lambda": 334,
                "num_values_explored": 2997,
                "num_values_kept": 833,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 19110
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02700750809163,
            "num_unique_values": 1081,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.887521968365554,
                "explored_percent_lambda": 32.46924428822496,
                "explored_percent_none": 11.64323374340949,
                "kept_percent_concrete": 51.30597014925373,
                "kept_percent_lambda": 48.69402985074627,
                "num_examples": 3,
                "num_explored_concrete": 2544,
                "num_explored_lambda": 1478,
                "num_explored_none": 530,
                "num_inputs": 1,
                "num_kept_concrete": 550,
                "num_kept_lambda": 522,
                "num_values_explored": 4552,
                "num_values_kept": 1072,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47822
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.30164421792142093,
            "num_unique_values": 289,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.45908183632734,
                "explored_percent_lambda": 26.347305389221557,
                "explored_percent_none": 3.193612774451098,
                "kept_percent_concrete": 69.53405017921148,
                "kept_percent_lambda": 30.46594982078853,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 132,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 85,
                "num_values_explored": 501,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99835722101852,
            "num_unique_values": 1158,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.46516771102101,
                "explored_percent_lambda": 10.578695171396978,
                "explored_percent_none": 12.956137117582012,
                "kept_percent_concrete": 80.76588337684943,
                "kept_percent_lambda": 19.234116623150566,
                "num_examples": 5,
                "num_explored_concrete": 4149,
                "num_explored_lambda": 574,
                "num_explored_none": 703,
                "num_inputs": 1,
                "num_kept_concrete": 928,
                "num_kept_lambda": 221,
                "num_values_explored": 5426,
                "num_values_kept": 1149,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55694
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.947112940019,
            "num_unique_values": 1117,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.29123654733143,
                "explored_percent_lambda": 29.431144300461234,
                "explored_percent_none": 12.277619152207336,
                "kept_percent_concrete": 50.76784101174345,
                "kept_percent_lambda": 49.23215898825655,
                "num_examples": 3,
                "num_explored_concrete": 2654,
                "num_explored_lambda": 1340,
                "num_explored_none": 559,
                "num_inputs": 2,
                "num_kept_concrete": 562,
                "num_kept_lambda": 545,
                "num_values_explored": 4553,
                "num_values_kept": 1107,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47972
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18148874398320913,
            "num_unique_values": 162,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.9873417721519,
                "explored_percent_lambda": 15.189873417721518,
                "explored_percent_none": 15.822784810126583,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 5,
                "num_explored_concrete": 218,
                "num_explored_lambda": 48,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 39,
                "num_values_explored": 316,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 316
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75188434310257,
            "num_unique_values": 1093,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.64576206765489,
                "explored_percent_lambda": 18.434055492208287,
                "explored_percent_none": 9.92018244013683,
                "kept_percent_concrete": 64.60258780036969,
                "kept_percent_lambda": 35.39741219963032,
                "num_examples": 3,
                "num_explored_concrete": 3770,
                "num_explored_lambda": 970,
                "num_explored_none": 522,
                "num_inputs": 3,
                "num_kept_concrete": 699,
                "num_kept_lambda": 383,
                "num_values_explored": 5262,
                "num_values_kept": 1082,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54708
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79666027892381,
            "num_unique_values": 1010,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.08656548622822,
                "explored_percent_lambda": 13.265879707700956,
                "explored_percent_none": 12.647554806070826,
                "kept_percent_concrete": 76.22377622377623,
                "kept_percent_lambda": 23.776223776223777,
                "num_examples": 5,
                "num_explored_concrete": 3954,
                "num_explored_lambda": 708,
                "num_explored_none": 675,
                "num_inputs": 1,
                "num_kept_concrete": 763,
                "num_kept_lambda": 238,
                "num_values_explored": 5337,
                "num_values_kept": 1001,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55014
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01892048609443,
            "num_unique_values": 1104,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.23161361141602,
                "explored_percent_lambda": 30.296377607025246,
                "explored_percent_none": 10.472008781558726,
                "kept_percent_concrete": 54.06392694063927,
                "kept_percent_lambda": 45.93607305936073,
                "num_examples": 3,
                "num_explored_concrete": 2698,
                "num_explored_lambda": 1380,
                "num_explored_none": 477,
                "num_inputs": 1,
                "num_kept_concrete": 592,
                "num_kept_lambda": 503,
                "num_values_explored": 4555,
                "num_values_kept": 1095,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46615
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20910395495594,
            "num_unique_values": 1099,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.08254716981132,
                "explored_percent_lambda": 19.654088050314467,
                "explored_percent_none": 20.263364779874212,
                "kept_percent_concrete": 61.15702479338843,
                "kept_percent_lambda": 38.84297520661157,
                "num_examples": 3,
                "num_explored_concrete": 3057,
                "num_explored_lambda": 1000,
                "num_explored_none": 1031,
                "num_inputs": 2,
                "num_kept_concrete": 666,
                "num_kept_lambda": 423,
                "num_values_explored": 5088,
                "num_values_kept": 1089,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53047
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.27575652697123587,
            "num_unique_values": 264,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 71.89409368635438,
                "explored_percent_lambda": 18.126272912423627,
                "explored_percent_none": 9.979633401221996,
                "kept_percent_concrete": 73.33333333333333,
                "kept_percent_lambda": 26.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 353,
                "num_explored_lambda": 89,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 68,
                "num_values_explored": 491,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97731071710587,
            "num_unique_values": 1199,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.745140388768895,
                "explored_percent_lambda": 29.287257019438446,
                "explored_percent_none": 14.967602591792657,
                "kept_percent_concrete": 55.96638655462185,
                "kept_percent_lambda": 44.03361344537815,
                "num_examples": 3,
                "num_explored_concrete": 2581,
                "num_explored_lambda": 1356,
                "num_explored_none": 693,
                "num_inputs": 1,
                "num_kept_concrete": 666,
                "num_kept_lambda": 524,
                "num_values_explored": 4630,
                "num_values_kept": 1190,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48562
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 77.19710356020369,
            "num_unique_values": 824,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.26637554585153,
                "explored_percent_lambda": 43.19505094614265,
                "explored_percent_none": 15.538573508005822,
                "kept_percent_concrete": 48.22085889570552,
                "kept_percent_lambda": 51.77914110429448,
                "num_examples": 3,
                "num_explored_concrete": 1134,
                "num_explored_lambda": 1187,
                "num_explored_none": 427,
                "num_inputs": 1,
                "num_kept_concrete": 393,
                "num_kept_lambda": 422,
                "num_values_explored": 2748,
                "num_values_kept": 815,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 35826
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16312086186371744,
            "num_unique_values": 180,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.56275303643725,
                "explored_percent_lambda": 27.93522267206478,
                "explored_percent_none": 8.502024291497976,
                "kept_percent_concrete": 64.70588235294117,
                "kept_percent_lambda": 35.294117647058826,
                "num_examples": 3,
                "num_explored_concrete": 157,
                "num_explored_lambda": 69,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 60,
                "num_values_explored": 247,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 247
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91847783699632,
            "num_unique_values": 1139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.0984682713348,
                "explored_percent_lambda": 26.039387308533918,
                "explored_percent_none": 8.86214442013129,
                "kept_percent_concrete": 58.76106194690266,
                "kept_percent_lambda": 41.23893805309734,
                "num_examples": 3,
                "num_explored_concrete": 2975,
                "num_explored_lambda": 1190,
                "num_explored_none": 405,
                "num_inputs": 1,
                "num_kept_concrete": 664,
                "num_kept_lambda": 466,
                "num_values_explored": 4570,
                "num_values_kept": 1130,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47213
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.34250608715228736,
            "num_unique_values": 304,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 90.3225806451613,
                "explored_percent_lambda": 4.774193548387097,
                "explored_percent_none": 4.903225806451613,
                "kept_percent_concrete": 92.51700680272108,
                "kept_percent_lambda": 7.482993197278912,
                "num_examples": 5,
                "num_explored_concrete": 700,
                "num_explored_lambda": 37,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 272,
                "num_kept_lambda": 22,
                "num_values_explored": 775,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 775
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.70844571385533,
            "num_unique_values": 1053,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.03132613992342,
                "explored_percent_lambda": 8.510268012530457,
                "explored_percent_none": 21.458405847546118,
                "kept_percent_concrete": 83.12559923298178,
                "kept_percent_lambda": 16.874400767018216,
                "num_examples": 5,
                "num_explored_concrete": 4024,
                "num_explored_lambda": 489,
                "num_explored_none": 1233,
                "num_inputs": 2,
                "num_kept_concrete": 867,
                "num_kept_lambda": 176,
                "num_values_explored": 5746,
                "num_values_kept": 1043,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59243
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25053171208128333,
            "num_unique_values": 229,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 70.76271186440678,
                "explored_percent_lambda": 17.372881355932204,
                "explored_percent_none": 11.864406779661017,
                "kept_percent_concrete": 69.0909090909091,
                "kept_percent_lambda": 30.90909090909091,
                "num_examples": 5,
                "num_explored_concrete": 334,
                "num_explored_lambda": 82,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 152,
                "num_kept_lambda": 68,
                "num_values_explored": 472,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 472
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81724353693426,
            "num_unique_values": 1119,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.89968321013727,
                "explored_percent_lambda": 22.238648363252377,
                "explored_percent_none": 12.861668426610349,
                "kept_percent_concrete": 63.11992786293958,
                "kept_percent_lambda": 36.88007213706042,
                "num_examples": 3,
                "num_explored_concrete": 3073,
                "num_explored_lambda": 1053,
                "num_explored_none": 609,
                "num_inputs": 2,
                "num_kept_concrete": 700,
                "num_kept_lambda": 409,
                "num_values_explored": 4735,
                "num_values_kept": 1109,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50449
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79163427907042,
            "num_unique_values": 1101,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.33800682076544,
                "explored_percent_lambda": 18.340280409245928,
                "explored_percent_none": 9.321712769988633,
                "kept_percent_concrete": 63.70302474793767,
                "kept_percent_lambda": 36.29697525206233,
                "num_examples": 3,
                "num_explored_concrete": 3818,
                "num_explored_lambda": 968,
                "num_explored_none": 492,
                "num_inputs": 2,
                "num_kept_concrete": 695,
                "num_kept_lambda": 396,
                "num_values_explored": 5278,
                "num_values_kept": 1091,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53002
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.73996459809132,
            "num_unique_values": 254,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 35.64102564102564,
                "explored_percent_lambda": 54.87179487179487,
                "explored_percent_none": 9.487179487179487,
                "kept_percent_concrete": 51.22950819672131,
                "kept_percent_lambda": 48.77049180327869,
                "num_examples": 3,
                "num_explored_concrete": 278,
                "num_explored_lambda": 428,
                "num_explored_none": 74,
                "num_inputs": 2,
                "num_kept_concrete": 125,
                "num_kept_lambda": 119,
                "num_values_explored": 780,
                "num_values_kept": 244,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13747
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06661488604732,
            "num_unique_values": 994,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.31696428571429,
                "explored_percent_lambda": 11.644345238095237,
                "explored_percent_none": 17.038690476190474,
                "kept_percent_concrete": 71.7479674796748,
                "kept_percent_lambda": 28.252032520325205,
                "num_examples": 5,
                "num_explored_concrete": 3834,
                "num_explored_lambda": 626,
                "num_explored_none": 916,
                "num_inputs": 2,
                "num_kept_concrete": 706,
                "num_kept_lambda": 278,
                "num_values_explored": 5376,
                "num_values_kept": 984,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56056
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4086128908675164,
            "num_unique_values": 329,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 67.04119850187266,
                "explored_percent_lambda": 30.21223470661673,
                "explored_percent_none": 2.746566791510612,
                "kept_percent_concrete": 64.89028213166144,
                "kept_percent_lambda": 35.10971786833856,
                "num_examples": 3,
                "num_explored_concrete": 537,
                "num_explored_lambda": 242,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 207,
                "num_kept_lambda": 112,
                "num_values_explored": 801,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 801
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9856042531319,
            "num_unique_values": 1084,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.057466693179556,
                "explored_percent_lambda": 21.694173792006364,
                "explored_percent_none": 19.24835951481408,
                "kept_percent_concrete": 59.21787709497207,
                "kept_percent_lambda": 40.78212290502793,
                "num_examples": 3,
                "num_explored_concrete": 2970,
                "num_explored_lambda": 1091,
                "num_explored_none": 968,
                "num_inputs": 2,
                "num_kept_concrete": 636,
                "num_kept_lambda": 438,
                "num_values_explored": 5029,
                "num_values_kept": 1074,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52592
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.02537344396114,
            "num_unique_values": 1114,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.96805000868206,
                "explored_percent_lambda": 8.195867338079527,
                "explored_percent_none": 15.83608265323841,
                "kept_percent_concrete": 85.05434782608695,
                "kept_percent_lambda": 14.945652173913043,
                "num_examples": 5,
                "num_explored_concrete": 4375,
                "num_explored_lambda": 472,
                "num_explored_none": 912,
                "num_inputs": 2,
                "num_kept_concrete": 939,
                "num_kept_lambda": 165,
                "num_values_explored": 5759,
                "num_values_kept": 1104,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58291
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15622433507815003,
            "num_unique_values": 140,
            "solution": "Count((lambda u1: IsEven(4)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 64.23076923076923,
                "explored_percent_lambda": 19.23076923076923,
                "explored_percent_none": 16.53846153846154,
                "kept_percent_concrete": 69.46564885496183,
                "kept_percent_lambda": 30.53435114503817,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 50,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 40,
                "num_values_explored": 260,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 260
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04107192484662,
            "num_unique_values": 1114,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.69722416608351,
                "explored_percent_lambda": 32.58689059948682,
                "explored_percent_none": 13.71588523442967,
                "kept_percent_concrete": 51.49321266968326,
                "kept_percent_lambda": 48.50678733031674,
                "num_examples": 3,
                "num_explored_concrete": 2302,
                "num_explored_lambda": 1397,
                "num_explored_none": 588,
                "num_inputs": 1,
                "num_kept_concrete": 569,
                "num_kept_lambda": 536,
                "num_values_explored": 4287,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44421
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81015526386909,
            "num_unique_values": 1101,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.58130081300813,
                "explored_percent_lambda": 23.760162601626018,
                "explored_percent_none": 8.658536585365853,
                "kept_percent_concrete": 60.53113553113553,
                "kept_percent_lambda": 39.46886446886447,
                "num_examples": 3,
                "num_explored_concrete": 3325,
                "num_explored_lambda": 1169,
                "num_explored_none": 426,
                "num_inputs": 1,
                "num_kept_concrete": 661,
                "num_kept_lambda": 431,
                "num_values_explored": 4920,
                "num_values_kept": 1092,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49850
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13293218705803156,
            "num_unique_values": 105,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 75.52742616033755,
                "explored_percent_lambda": 14.345991561181435,
                "explored_percent_none": 10.126582278481013,
                "kept_percent_concrete": 76.04166666666667,
                "kept_percent_lambda": 23.958333333333332,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 34,
                "num_explored_none": 24,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 23,
                "num_values_explored": 237,
                "num_values_kept": 96,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 237
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11766165401786566,
            "num_unique_values": 114,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.785714285714285,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 10.119047619047619,
                "kept_percent_concrete": 42.71844660194175,
                "kept_percent_lambda": 57.28155339805825,
                "num_examples": 3,
                "num_explored_concrete": 87,
                "num_explored_lambda": 64,
                "num_explored_none": 17,
                "num_inputs": 3,
                "num_kept_concrete": 44,
                "num_kept_lambda": 59,
                "num_values_explored": 168,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 168
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.06306448299438,
            "num_unique_values": 1162,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.37670514165792,
                "explored_percent_lambda": 24.197271773347325,
                "explored_percent_none": 18.426023084994753,
                "kept_percent_concrete": 59.670424978317435,
                "kept_percent_lambda": 40.329575021682565,
                "num_examples": 3,
                "num_explored_concrete": 2734,
                "num_explored_lambda": 1153,
                "num_explored_none": 878,
                "num_inputs": 1,
                "num_kept_concrete": 688,
                "num_kept_lambda": 465,
                "num_values_explored": 4765,
                "num_values_kept": 1153,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49157
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.68998910603113,
            "num_unique_values": 1062,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.66983026099653,
                "explored_percent_lambda": 14.382186530388758,
                "explored_percent_none": 14.94798320861471,
                "kept_percent_concrete": 71.10266159695817,
                "kept_percent_lambda": 28.897338403041825,
                "num_examples": 3,
                "num_explored_concrete": 3872,
                "num_explored_lambda": 788,
                "num_explored_none": 819,
                "num_inputs": 2,
                "num_kept_concrete": 748,
                "num_kept_lambda": 304,
                "num_values_explored": 5479,
                "num_values_kept": 1052,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56961
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.26761396182701,
            "num_unique_values": 770,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 62.25754310344828,
                "explored_percent_lambda": 15.517241379310345,
                "explored_percent_none": 22.22521551724138,
                "kept_percent_concrete": 66.79841897233202,
                "kept_percent_lambda": 33.201581027667984,
                "num_examples": 3,
                "num_explored_concrete": 2311,
                "num_explored_lambda": 576,
                "num_explored_none": 825,
                "num_inputs": 3,
                "num_kept_concrete": 507,
                "num_kept_lambda": 252,
                "num_values_explored": 3712,
                "num_values_kept": 759,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5212
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.25111072300933,
            "num_unique_values": 1090,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.366696997270246,
                "explored_percent_lambda": 30.70973612374886,
                "explored_percent_none": 15.92356687898089,
                "kept_percent_concrete": 49.953746530989825,
                "kept_percent_lambda": 50.046253469010175,
                "num_examples": 3,
                "num_explored_concrete": 2346,
                "num_explored_lambda": 1350,
                "num_explored_none": 700,
                "num_inputs": 1,
                "num_kept_concrete": 540,
                "num_kept_lambda": 541,
                "num_values_explored": 4396,
                "num_values_kept": 1081,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46539
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.449835404986516,
            "num_unique_values": 551,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.978430197723185,
                "explored_percent_lambda": 40.683043738765726,
                "explored_percent_none": 15.338526063511084,
                "kept_percent_concrete": 51.845018450184504,
                "kept_percent_lambda": 48.154981549815496,
                "num_examples": 3,
                "num_explored_concrete": 734,
                "num_explored_lambda": 679,
                "num_explored_none": 256,
                "num_inputs": 1,
                "num_kept_concrete": 281,
                "num_kept_lambda": 261,
                "num_values_explored": 1669,
                "num_values_kept": 542,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7962
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.24523747595958,
            "num_unique_values": 1134,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.04799637763188,
                "explored_percent_lambda": 27.23568032601313,
                "explored_percent_none": 8.716323296354991,
                "kept_percent_concrete": 50.48888888888889,
                "kept_percent_lambda": 49.51111111111111,
                "num_examples": 3,
                "num_explored_concrete": 2829,
                "num_explored_lambda": 1203,
                "num_explored_none": 385,
                "num_inputs": 1,
                "num_kept_concrete": 568,
                "num_kept_lambda": 557,
                "num_values_explored": 4417,
                "num_values_kept": 1125,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46069
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.72531393286772,
            "num_unique_values": 1076,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.5052888527258,
                "explored_percent_lambda": 8.755085435313262,
                "explored_percent_none": 19.739625711960944,
                "kept_percent_concrete": 83.30206378986867,
                "kept_percent_lambda": 16.69793621013133,
                "num_examples": 5,
                "num_explored_concrete": 4394,
                "num_explored_lambda": 538,
                "num_explored_none": 1213,
                "num_inputs": 2,
                "num_kept_concrete": 888,
                "num_kept_lambda": 178,
                "num_values_explored": 6145,
                "num_values_kept": 1066,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60461
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.44
}