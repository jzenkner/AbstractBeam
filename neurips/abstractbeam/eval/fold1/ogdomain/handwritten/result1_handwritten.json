{
    "num_tasks": 50,
    "num_tasks_solved": 22,
    "results": [
        {
            "elapsed_time": 101.13530873507261,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.51478863078921,
                "explored_percent_lambda": 14.298081084980522,
                "explored_percent_none": 13.18713028423027,
                "kept_percent_concrete": 67.98623063683304,
                "kept_percent_lambda": 32.01376936316695,
                "num_examples": 3,
                "num_explored_concrete": 5026,
                "num_explored_lambda": 991,
                "num_explored_none": 914,
                "num_inputs": 2,
                "num_kept_concrete": 790,
                "num_kept_lambda": 372,
                "num_values_explored": 6931,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 72622
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.071615579072386,
            "num_unique_values": 1026,
            "solution": "Count((lambda u1: ((lambda v1: Less(v1, Head(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 74.63348765432099,
                "explored_percent_lambda": 13.194444444444445,
                "explored_percent_none": 12.172067901234568,
                "kept_percent_concrete": 76.7944936086529,
                "kept_percent_lambda": 23.2055063913471,
                "num_examples": 5,
                "num_explored_concrete": 3869,
                "num_explored_lambda": 684,
                "num_explored_none": 631,
                "num_inputs": 1,
                "num_kept_concrete": 781,
                "num_kept_lambda": 236,
                "num_values_explored": 5184,
                "num_values_kept": 1017,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 14158
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15301841404289,
            "num_unique_values": 1371,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.42669701432588,
                "explored_percent_lambda": 8.876690319989288,
                "explored_percent_none": 13.69661266568483,
                "kept_percent_concrete": 81.04335047759001,
                "kept_percent_lambda": 18.956649522409993,
                "num_examples": 5,
                "num_explored_concrete": 5783,
                "num_explored_lambda": 663,
                "num_explored_none": 1023,
                "num_inputs": 2,
                "num_kept_concrete": 1103,
                "num_kept_lambda": 258,
                "num_values_explored": 7469,
                "num_values_kept": 1361,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 75288
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.42188064102083445,
            "num_unique_values": 349,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Less(v1, -1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.37235367372354,
                "explored_percent_lambda": 29.140722291407222,
                "explored_percent_none": 3.4869240348692405,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 541,
                "num_explored_lambda": 234,
                "num_explored_none": 28,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 130,
                "num_values_explored": 803,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 803
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2780124908313155,
            "num_unique_values": 291,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.60268714011517,
                "explored_percent_lambda": 21.689059500959694,
                "explored_percent_none": 11.708253358925145,
                "kept_percent_concrete": 68.43971631205673,
                "kept_percent_lambda": 31.56028368794326,
                "num_examples": 5,
                "num_explored_concrete": 347,
                "num_explored_lambda": 113,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 89,
                "num_values_explored": 521,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8200991700869,
            "num_unique_values": 1398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.64995018266357,
                "explored_percent_lambda": 21.421454666223845,
                "explored_percent_none": 14.928595151112587,
                "kept_percent_concrete": 59.07780979827089,
                "kept_percent_lambda": 40.92219020172911,
                "num_examples": 3,
                "num_explored_concrete": 3833,
                "num_explored_lambda": 1290,
                "num_explored_none": 899,
                "num_inputs": 2,
                "num_kept_concrete": 820,
                "num_kept_lambda": 568,
                "num_values_explored": 6022,
                "num_values_kept": 1388,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61776
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.527185177896172,
            "num_unique_values": 519,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.99074074074074,
                "explored_percent_lambda": 34.317129629629626,
                "explored_percent_none": 18.69212962962963,
                "kept_percent_concrete": 50.0,
                "kept_percent_lambda": 50.0,
                "num_examples": 3,
                "num_explored_concrete": 812,
                "num_explored_lambda": 593,
                "num_explored_none": 323,
                "num_inputs": 3,
                "num_kept_concrete": 254,
                "num_kept_lambda": 254,
                "num_values_explored": 1728,
                "num_values_kept": 508,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9807
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.25654182699509,
            "num_unique_values": 1277,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.89597644749755,
                "explored_percent_lambda": 11.159399971961307,
                "explored_percent_none": 14.944623580541148,
                "kept_percent_concrete": 78.39116719242902,
                "kept_percent_lambda": 21.608832807570977,
                "num_examples": 5,
                "num_explored_concrete": 5271,
                "num_explored_lambda": 796,
                "num_explored_none": 1066,
                "num_inputs": 1,
                "num_kept_concrete": 994,
                "num_kept_lambda": 274,
                "num_values_explored": 7133,
                "num_values_kept": 1268,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 73514
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.373448363039643,
            "num_unique_values": 1127,
            "solution": "IntDivide(Add(Last(x), Head(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 71.04587155963303,
                "explored_percent_lambda": 15.247706422018348,
                "explored_percent_none": 13.706422018348624,
                "kept_percent_concrete": 75.67084078711986,
                "kept_percent_lambda": 24.329159212880143,
                "num_examples": 5,
                "num_explored_concrete": 3872,
                "num_explored_lambda": 831,
                "num_explored_none": 747,
                "num_inputs": 1,
                "num_kept_concrete": 846,
                "num_kept_lambda": 272,
                "num_values_explored": 5450,
                "num_values_kept": 1118,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7250
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.1036578668281436,
            "num_unique_values": 496,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 71.81385510312005,
                "explored_percent_lambda": 12.321523003701746,
                "explored_percent_none": 15.864621893178212,
                "kept_percent_concrete": 80.24691358024691,
                "kept_percent_lambda": 19.753086419753085,
                "num_examples": 5,
                "num_explored_concrete": 1358,
                "num_explored_lambda": 233,
                "num_explored_none": 300,
                "num_inputs": 2,
                "num_kept_concrete": 390,
                "num_kept_lambda": 96,
                "num_values_explored": 1891,
                "num_values_kept": 486,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3691
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98604991007596,
            "num_unique_values": 1062,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.01659840482863,
                "explored_percent_lambda": 27.117913343392974,
                "explored_percent_none": 15.8654882517784,
                "kept_percent_concrete": 53.371320037986706,
                "kept_percent_lambda": 46.628679962013294,
                "num_examples": 3,
                "num_explored_concrete": 2645,
                "num_explored_lambda": 1258,
                "num_explored_none": 736,
                "num_inputs": 1,
                "num_kept_concrete": 562,
                "num_kept_lambda": 491,
                "num_values_explored": 4639,
                "num_values_kept": 1053,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58881
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.158263234887272,
            "num_unique_values": 1057,
            "solution": "Reverse(Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 61.43933868222709,
                "explored_percent_lambda": 30.950644298565525,
                "explored_percent_none": 7.610017019207391,
                "kept_percent_concrete": 49.42748091603053,
                "kept_percent_lambda": 50.57251908396947,
                "num_examples": 3,
                "num_explored_concrete": 2527,
                "num_explored_lambda": 1273,
                "num_explored_none": 313,
                "num_inputs": 1,
                "num_kept_concrete": 518,
                "num_kept_lambda": 530,
                "num_values_explored": 4113,
                "num_values_kept": 1048,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10965
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92365135787986,
            "num_unique_values": 968,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.47574398695475,
                "explored_percent_lambda": 21.565430085609457,
                "explored_percent_none": 16.958825927435793,
                "kept_percent_concrete": 53.65344467640919,
                "kept_percent_lambda": 46.34655532359081,
                "num_examples": 3,
                "num_explored_concrete": 3016,
                "num_explored_lambda": 1058,
                "num_explored_none": 832,
                "num_inputs": 2,
                "num_kept_concrete": 514,
                "num_kept_lambda": 444,
                "num_values_explored": 4906,
                "num_values_kept": 958,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51681
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.450443875975907,
            "num_unique_values": 839,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.65979381443299,
                "explored_percent_lambda": 30.20618556701031,
                "explored_percent_none": 11.1340206185567,
                "kept_percent_concrete": 58.55421686746988,
                "kept_percent_lambda": 41.44578313253012,
                "num_examples": 3,
                "num_explored_concrete": 1707,
                "num_explored_lambda": 879,
                "num_explored_none": 324,
                "num_inputs": 1,
                "num_kept_concrete": 486,
                "num_kept_lambda": 344,
                "num_values_explored": 2910,
                "num_values_kept": 830,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4710
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0078534448985,
            "num_unique_values": 1100,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.62925320371189,
                "explored_percent_lambda": 33.1639416703491,
                "explored_percent_none": 14.206805125939018,
                "kept_percent_concrete": 51.14573785517874,
                "kept_percent_lambda": 48.85426214482126,
                "num_examples": 3,
                "num_explored_concrete": 2382,
                "num_explored_lambda": 1501,
                "num_explored_none": 643,
                "num_inputs": 1,
                "num_kept_concrete": 558,
                "num_kept_lambda": 533,
                "num_values_explored": 4526,
                "num_values_kept": 1091,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48244
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.29603756312280893,
            "num_unique_values": 289,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.45908183632734,
                "explored_percent_lambda": 26.347305389221557,
                "explored_percent_none": 3.193612774451098,
                "kept_percent_concrete": 69.53405017921148,
                "kept_percent_lambda": 30.46594982078853,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 132,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 85,
                "num_values_explored": 501,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96887356694788,
            "num_unique_values": 1070,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.8721409823772,
                "explored_percent_lambda": 10.779902512185977,
                "explored_percent_none": 16.34795650543682,
                "kept_percent_concrete": 76.81432610744581,
                "kept_percent_lambda": 23.185673892554195,
                "num_examples": 5,
                "num_explored_concrete": 3887,
                "num_explored_lambda": 575,
                "num_explored_none": 872,
                "num_inputs": 1,
                "num_kept_concrete": 815,
                "num_kept_lambda": 246,
                "num_values_explored": 5334,
                "num_values_kept": 1061,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54912
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95415535778739,
            "num_unique_values": 1124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.40748802786243,
                "explored_percent_lambda": 28.406617326948194,
                "explored_percent_none": 9.185894645189377,
                "kept_percent_concrete": 51.34649910233393,
                "kept_percent_lambda": 48.65350089766607,
                "num_examples": 3,
                "num_explored_concrete": 2867,
                "num_explored_lambda": 1305,
                "num_explored_none": 422,
                "num_inputs": 2,
                "num_kept_concrete": 572,
                "num_kept_lambda": 542,
                "num_values_explored": 4594,
                "num_values_kept": 1114,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46425
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19397156196646392,
            "num_unique_values": 162,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.9873417721519,
                "explored_percent_lambda": 15.189873417721518,
                "explored_percent_none": 15.822784810126583,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 5,
                "num_explored_concrete": 218,
                "num_explored_lambda": 48,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 39,
                "num_values_explored": 316,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 316
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73040058393963,
            "num_unique_values": 1053,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.71235873131607,
                "explored_percent_lambda": 17.335034633612832,
                "explored_percent_none": 9.95260663507109,
                "kept_percent_concrete": 64.68330134357005,
                "kept_percent_lambda": 35.31669865642994,
                "num_examples": 3,
                "num_explored_concrete": 3989,
                "num_explored_lambda": 951,
                "num_explored_none": 546,
                "num_inputs": 3,
                "num_kept_concrete": 674,
                "num_kept_lambda": 368,
                "num_values_explored": 5486,
                "num_values_kept": 1042,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54635
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.860603782814,
            "num_unique_values": 1016,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.94475760992108,
                "explored_percent_lambda": 11.912814731304021,
                "explored_percent_none": 11.142427658774897,
                "kept_percent_concrete": 79.14597815292949,
                "kept_percent_lambda": 20.854021847070506,
                "num_examples": 5,
                "num_explored_concrete": 4095,
                "num_explored_lambda": 634,
                "num_explored_none": 593,
                "num_inputs": 1,
                "num_kept_concrete": 797,
                "num_kept_lambda": 210,
                "num_values_explored": 5322,
                "num_values_kept": 1007,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54727
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05298452195711,
            "num_unique_values": 1115,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.1744417422065,
                "explored_percent_lambda": 28.985186822905153,
                "explored_percent_none": 13.840371434888349,
                "kept_percent_concrete": 54.249547920434,
                "kept_percent_lambda": 45.750452079566,
                "num_examples": 3,
                "num_explored_concrete": 2586,
                "num_explored_lambda": 1311,
                "num_explored_none": 626,
                "num_inputs": 1,
                "num_kept_concrete": 600,
                "num_kept_lambda": 506,
                "num_values_explored": 4523,
                "num_values_kept": 1106,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46304
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21004432695918,
            "num_unique_values": 1132,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.41303915722521,
                "explored_percent_lambda": 19.996024647187436,
                "explored_percent_none": 17.590936195587357,
                "kept_percent_concrete": 61.051693404634584,
                "kept_percent_lambda": 38.948306595365416,
                "num_examples": 3,
                "num_explored_concrete": 3140,
                "num_explored_lambda": 1006,
                "num_explored_none": 885,
                "num_inputs": 2,
                "num_kept_concrete": 685,
                "num_kept_lambda": 437,
                "num_values_explored": 5031,
                "num_values_kept": 1122,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52817
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.28638538997620344,
            "num_unique_values": 264,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 71.89409368635438,
                "explored_percent_lambda": 18.126272912423627,
                "explored_percent_none": 9.979633401221996,
                "kept_percent_concrete": 73.33333333333333,
                "kept_percent_lambda": 26.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 353,
                "num_explored_lambda": 89,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 68,
                "num_values_explored": 491,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07982671889476,
            "num_unique_values": 1223,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.873905429071804,
                "explored_percent_lambda": 29.443957968476358,
                "explored_percent_none": 13.68213660245184,
                "kept_percent_concrete": 56.09555189456343,
                "kept_percent_lambda": 43.90444810543657,
                "num_examples": 3,
                "num_explored_concrete": 2598,
                "num_explored_lambda": 1345,
                "num_explored_none": 625,
                "num_inputs": 1,
                "num_kept_concrete": 681,
                "num_kept_lambda": 533,
                "num_values_explored": 4568,
                "num_values_kept": 1214,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47809
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.1508116601035,
            "num_unique_values": 504,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 33.714285714285715,
                "explored_percent_lambda": 44.82539682539682,
                "explored_percent_none": 21.46031746031746,
                "kept_percent_concrete": 49.09090909090909,
                "kept_percent_lambda": 50.90909090909091,
                "num_examples": 3,
                "num_explored_concrete": 531,
                "num_explored_lambda": 706,
                "num_explored_none": 338,
                "num_inputs": 1,
                "num_kept_concrete": 243,
                "num_kept_lambda": 252,
                "num_values_explored": 1575,
                "num_values_kept": 495,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7863
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16297942586243153,
            "num_unique_values": 180,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.56275303643725,
                "explored_percent_lambda": 27.93522267206478,
                "explored_percent_none": 8.502024291497976,
                "kept_percent_concrete": 64.70588235294117,
                "kept_percent_lambda": 35.294117647058826,
                "num_examples": 3,
                "num_explored_concrete": 157,
                "num_explored_lambda": 69,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 60,
                "num_values_explored": 247,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 247
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88403393002227,
            "num_unique_values": 1143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.74983527344608,
                "explored_percent_lambda": 26.004831978915,
                "explored_percent_none": 11.245332747638919,
                "kept_percent_concrete": 58.641975308641975,
                "kept_percent_lambda": 41.358024691358025,
                "num_examples": 3,
                "num_explored_concrete": 2857,
                "num_explored_lambda": 1184,
                "num_explored_none": 512,
                "num_inputs": 1,
                "num_kept_concrete": 665,
                "num_kept_lambda": 469,
                "num_values_explored": 4553,
                "num_values_kept": 1134,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47766
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3332535878289491,
            "num_unique_values": 304,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 90.3225806451613,
                "explored_percent_lambda": 4.774193548387097,
                "explored_percent_none": 4.903225806451613,
                "kept_percent_concrete": 92.51700680272108,
                "kept_percent_lambda": 7.482993197278912,
                "num_examples": 5,
                "num_explored_concrete": 700,
                "num_explored_lambda": 37,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 272,
                "num_kept_lambda": 22,
                "num_values_explored": 775,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 775
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73263122397475,
            "num_unique_values": 1070,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.44310666440563,
                "explored_percent_lambda": 8.088858741733084,
                "explored_percent_none": 20.468034593861287,
                "kept_percent_concrete": 84.24528301886792,
                "kept_percent_lambda": 15.754716981132075,
                "num_examples": 5,
                "num_explored_concrete": 4213,
                "num_explored_lambda": 477,
                "num_explored_none": 1207,
                "num_inputs": 2,
                "num_kept_concrete": 893,
                "num_kept_lambda": 167,
                "num_values_explored": 5897,
                "num_values_kept": 1060,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59667
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2677052919752896,
            "num_unique_values": 229,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 70.76271186440678,
                "explored_percent_lambda": 17.372881355932204,
                "explored_percent_none": 11.864406779661017,
                "kept_percent_concrete": 69.0909090909091,
                "kept_percent_lambda": 30.90909090909091,
                "num_examples": 5,
                "num_explored_concrete": 334,
                "num_explored_lambda": 82,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 152,
                "num_kept_lambda": 68,
                "num_values_explored": 472,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 472
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79539722995833,
            "num_unique_values": 1141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.57023759899958,
                "explored_percent_lambda": 19.75823259691538,
                "explored_percent_none": 11.671529804085035,
                "kept_percent_concrete": 64.63306808134395,
                "kept_percent_lambda": 35.36693191865606,
                "num_examples": 3,
                "num_explored_concrete": 3290,
                "num_explored_lambda": 948,
                "num_explored_none": 560,
                "num_inputs": 2,
                "num_kept_concrete": 731,
                "num_kept_lambda": 400,
                "num_values_explored": 4798,
                "num_values_kept": 1131,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50477
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7723575560376,
            "num_unique_values": 1095,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.8526802930968,
                "explored_percent_lambda": 17.740069417662937,
                "explored_percent_none": 8.407250289240261,
                "kept_percent_concrete": 64.7926267281106,
                "kept_percent_lambda": 35.2073732718894,
                "num_examples": 3,
                "num_explored_concrete": 3830,
                "num_explored_lambda": 920,
                "num_explored_none": 436,
                "num_inputs": 2,
                "num_kept_concrete": 703,
                "num_kept_lambda": 382,
                "num_values_explored": 5186,
                "num_values_kept": 1085,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54056
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.183112561004236,
            "num_unique_values": 517,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.98158803222094,
                "explored_percent_lambda": 30.322209436133488,
                "explored_percent_none": 5.69620253164557,
                "kept_percent_concrete": 61.53846153846154,
                "kept_percent_lambda": 38.46153846153846,
                "num_examples": 3,
                "num_explored_concrete": 1112,
                "num_explored_lambda": 527,
                "num_explored_none": 99,
                "num_inputs": 2,
                "num_kept_concrete": 312,
                "num_kept_lambda": 195,
                "num_values_explored": 1738,
                "num_values_kept": 507,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9394
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05038269492798,
            "num_unique_values": 983,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.30702389572774,
                "explored_percent_lambda": 12.038377986965967,
                "explored_percent_none": 16.6545981173063,
                "kept_percent_concrete": 72.2507708119219,
                "kept_percent_lambda": 27.749229188078107,
                "num_examples": 5,
                "num_explored_concrete": 3939,
                "num_explored_lambda": 665,
                "num_explored_none": 920,
                "num_inputs": 2,
                "num_kept_concrete": 703,
                "num_kept_lambda": 270,
                "num_values_explored": 5524,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56919
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4106140020303428,
            "num_unique_values": 329,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 67.04119850187266,
                "explored_percent_lambda": 30.21223470661673,
                "explored_percent_none": 2.746566791510612,
                "kept_percent_concrete": 64.89028213166144,
                "kept_percent_lambda": 35.10971786833856,
                "num_examples": 3,
                "num_explored_concrete": 537,
                "num_explored_lambda": 242,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 207,
                "num_kept_lambda": 112,
                "num_values_explored": 801,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 801
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92665755399503,
            "num_unique_values": 1111,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.97609168148587,
                "explored_percent_lambda": 21.122307844299545,
                "explored_percent_none": 17.901600474214582,
                "kept_percent_concrete": 59.037238873751136,
                "kept_percent_lambda": 40.962761126248864,
                "num_examples": 3,
                "num_explored_concrete": 3086,
                "num_explored_lambda": 1069,
                "num_explored_none": 906,
                "num_inputs": 2,
                "num_kept_concrete": 650,
                "num_kept_lambda": 451,
                "num_values_explored": 5061,
                "num_values_kept": 1101,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53146
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97463783691637,
            "num_unique_values": 1122,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.4088904568707,
                "explored_percent_lambda": 7.585112012700653,
                "explored_percent_none": 14.005997530428647,
                "kept_percent_concrete": 85.07194244604317,
                "kept_percent_lambda": 14.928057553956835,
                "num_examples": 5,
                "num_explored_concrete": 4445,
                "num_explored_lambda": 430,
                "num_explored_none": 794,
                "num_inputs": 2,
                "num_kept_concrete": 946,
                "num_kept_lambda": 166,
                "num_values_explored": 5669,
                "num_values_kept": 1112,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 59124
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14222153299488127,
            "num_unique_values": 140,
            "solution": "Count((lambda u1: IsEven(4)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 64.23076923076923,
                "explored_percent_lambda": 19.23076923076923,
                "explored_percent_none": 16.53846153846154,
                "kept_percent_concrete": 69.46564885496183,
                "kept_percent_lambda": 30.53435114503817,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 50,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 40,
                "num_values_explored": 260,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 260
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07626677607186,
            "num_unique_values": 987,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 39.43120676402767,
                "explored_percent_lambda": 46.93825262618498,
                "explored_percent_none": 13.630540609787342,
                "kept_percent_concrete": 42.22903885480573,
                "kept_percent_lambda": 57.77096114519427,
                "num_examples": 3,
                "num_explored_concrete": 1539,
                "num_explored_lambda": 1832,
                "num_explored_none": 532,
                "num_inputs": 1,
                "num_kept_concrete": 413,
                "num_kept_lambda": 565,
                "num_values_explored": 3903,
                "num_values_kept": 978,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43735
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71644835080951,
            "num_unique_values": 1097,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.19946862865318,
                "explored_percent_lambda": 24.136521561414266,
                "explored_percent_none": 7.664009809932557,
                "kept_percent_concrete": 58.455882352941174,
                "kept_percent_lambda": 41.544117647058826,
                "num_examples": 3,
                "num_explored_concrete": 3337,
                "num_explored_lambda": 1181,
                "num_explored_none": 375,
                "num_inputs": 1,
                "num_kept_concrete": 636,
                "num_kept_lambda": 452,
                "num_values_explored": 4893,
                "num_values_kept": 1088,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49392
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11883027199655771,
            "num_unique_values": 105,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 75.52742616033755,
                "explored_percent_lambda": 14.345991561181435,
                "explored_percent_none": 10.126582278481013,
                "kept_percent_concrete": 76.04166666666667,
                "kept_percent_lambda": 23.958333333333332,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 34,
                "num_explored_none": 24,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 23,
                "num_values_explored": 237,
                "num_values_kept": 96,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 237
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11827303911559284,
            "num_unique_values": 114,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.785714285714285,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 10.119047619047619,
                "kept_percent_concrete": 42.71844660194175,
                "kept_percent_lambda": 57.28155339805825,
                "num_examples": 3,
                "num_explored_concrete": 87,
                "num_explored_lambda": 64,
                "num_explored_none": 17,
                "num_inputs": 3,
                "num_kept_concrete": 44,
                "num_kept_lambda": 59,
                "num_values_explored": 168,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 168
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00944319204427,
            "num_unique_values": 1082,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.52910052910053,
                "explored_percent_lambda": 24.825396825396826,
                "explored_percent_none": 18.645502645502646,
                "kept_percent_concrete": 58.52749301025163,
                "kept_percent_lambda": 41.47250698974837,
                "num_examples": 3,
                "num_explored_concrete": 2671,
                "num_explored_lambda": 1173,
                "num_explored_none": 881,
                "num_inputs": 1,
                "num_kept_concrete": 628,
                "num_kept_lambda": 445,
                "num_values_explored": 4725,
                "num_values_kept": 1073,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49251
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66801784583367,
            "num_unique_values": 1058,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.62132352941177,
                "explored_percent_lambda": 13.878676470588236,
                "explored_percent_none": 12.5,
                "kept_percent_concrete": 72.99618320610686,
                "kept_percent_lambda": 27.00381679389313,
                "num_examples": 3,
                "num_explored_concrete": 4005,
                "num_explored_lambda": 755,
                "num_explored_none": 680,
                "num_inputs": 2,
                "num_kept_concrete": 765,
                "num_kept_lambda": 283,
                "num_values_explored": 5440,
                "num_values_kept": 1048,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57350
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.42436160892248,
            "num_unique_values": 745,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.60130718954248,
                "explored_percent_lambda": 15.294117647058824,
                "explored_percent_none": 24.104575163398692,
                "kept_percent_concrete": 68.25613079019074,
                "kept_percent_lambda": 31.743869209809265,
                "num_examples": 3,
                "num_explored_concrete": 2318,
                "num_explored_lambda": 585,
                "num_explored_none": 922,
                "num_inputs": 3,
                "num_kept_concrete": 501,
                "num_kept_lambda": 233,
                "num_values_explored": 3825,
                "num_values_kept": 734,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 16751
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18773375288583,
            "num_unique_values": 1001,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.206979542719615,
                "explored_percent_lambda": 34.560770156438025,
                "explored_percent_none": 17.23225030084236,
                "kept_percent_concrete": 47.278225806451616,
                "kept_percent_lambda": 52.721774193548384,
                "num_examples": 3,
                "num_explored_concrete": 2003,
                "num_explored_lambda": 1436,
                "num_explored_none": 716,
                "num_inputs": 1,
                "num_kept_concrete": 469,
                "num_kept_lambda": 523,
                "num_values_explored": 4155,
                "num_values_kept": 992,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46306
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.725616819923744,
            "num_unique_values": 549,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.019296254256524,
                "explored_percent_lambda": 40.74914869466515,
                "explored_percent_none": 16.23155505107832,
                "kept_percent_concrete": 50.0,
                "kept_percent_lambda": 50.0,
                "num_examples": 3,
                "num_explored_concrete": 758,
                "num_explored_lambda": 718,
                "num_explored_none": 286,
                "num_inputs": 1,
                "num_kept_concrete": 270,
                "num_kept_lambda": 270,
                "num_values_explored": 1762,
                "num_values_kept": 540,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3562
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22425463004038,
            "num_unique_values": 1305,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.874007734581724,
                "explored_percent_lambda": 30.348056177488296,
                "explored_percent_none": 6.777936087929982,
                "kept_percent_concrete": 47.14506172839506,
                "kept_percent_lambda": 52.85493827160494,
                "num_examples": 3,
                "num_explored_concrete": 3089,
                "num_explored_lambda": 1491,
                "num_explored_none": 333,
                "num_inputs": 1,
                "num_kept_concrete": 611,
                "num_kept_lambda": 685,
                "num_values_explored": 4913,
                "num_values_kept": 1296,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47597
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69877593684942,
            "num_unique_values": 1006,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.90373247762203,
                "explored_percent_lambda": 9.052524911332545,
                "explored_percent_none": 21.04374261104543,
                "kept_percent_concrete": 82.83132530120481,
                "kept_percent_lambda": 17.16867469879518,
                "num_examples": 5,
                "num_explored_concrete": 4139,
                "num_explored_lambda": 536,
                "num_explored_none": 1246,
                "num_inputs": 2,
                "num_kept_concrete": 825,
                "num_kept_lambda": 171,
                "num_values_explored": 5921,
                "num_values_kept": 996,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61716
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.44
}