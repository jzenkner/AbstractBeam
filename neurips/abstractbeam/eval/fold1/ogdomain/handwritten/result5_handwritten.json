{
    "num_tasks": 50,
    "num_tasks_solved": 24,
    "results": [
        {
            "elapsed_time": 101.098754103994,
            "num_unique_values": 986,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.53474544778892,
                "explored_percent_lambda": 14.009661835748792,
                "explored_percent_none": 14.45559271646228,
                "kept_percent_concrete": 72.54098360655738,
                "kept_percent_lambda": 27.459016393442624,
                "num_examples": 3,
                "num_explored_concrete": 3850,
                "num_explored_lambda": 754,
                "num_explored_none": 778,
                "num_inputs": 2,
                "num_kept_concrete": 708,
                "num_kept_lambda": 268,
                "num_values_explored": 5382,
                "num_values_kept": 976,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55448
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.958367031998932,
            "num_unique_values": 803,
            "solution": "Count((lambda u1: ((lambda v1: Less(v1, Head(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 65.25161653078437,
                "explored_percent_lambda": 21.450660669103176,
                "explored_percent_none": 13.297722800112455,
                "kept_percent_concrete": 71.15869017632242,
                "kept_percent_lambda": 28.84130982367758,
                "num_examples": 5,
                "num_explored_concrete": 2321,
                "num_explored_lambda": 763,
                "num_explored_none": 473,
                "num_inputs": 1,
                "num_kept_concrete": 565,
                "num_kept_lambda": 229,
                "num_values_explored": 3557,
                "num_values_kept": 794,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5357
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.14740381389856,
            "num_unique_values": 1097,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.0367107195301,
                "explored_percent_lambda": 10.058737151248165,
                "explored_percent_none": 14.904552129221733,
                "kept_percent_concrete": 81.50873965041399,
                "kept_percent_lambda": 18.491260349586017,
                "num_examples": 5,
                "num_explored_concrete": 4088,
                "num_explored_lambda": 548,
                "num_explored_none": 812,
                "num_inputs": 2,
                "num_kept_concrete": 886,
                "num_kept_lambda": 201,
                "num_values_explored": 5448,
                "num_values_kept": 1087,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56410
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4200077389832586,
            "num_unique_values": 349,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Less(v1, -1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.37235367372354,
                "explored_percent_lambda": 29.140722291407222,
                "explored_percent_none": 3.4869240348692405,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 541,
                "num_explored_lambda": 234,
                "num_explored_none": 28,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 130,
                "num_values_explored": 803,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 803
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.29538547387346625,
            "num_unique_values": 291,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.60268714011517,
                "explored_percent_lambda": 21.689059500959694,
                "explored_percent_none": 11.708253358925145,
                "kept_percent_concrete": 68.43971631205673,
                "kept_percent_lambda": 31.56028368794326,
                "num_examples": 5,
                "num_explored_concrete": 347,
                "num_explored_lambda": 113,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 89,
                "num_values_explored": 521,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85946601605974,
            "num_unique_values": 1168,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.775401069518715,
                "explored_percent_lambda": 22.524064171122994,
                "explored_percent_none": 15.70053475935829,
                "kept_percent_concrete": 59.84455958549223,
                "kept_percent_lambda": 40.15544041450777,
                "num_examples": 3,
                "num_explored_concrete": 2888,
                "num_explored_lambda": 1053,
                "num_explored_none": 734,
                "num_inputs": 2,
                "num_kept_concrete": 693,
                "num_kept_lambda": 465,
                "num_values_explored": 4675,
                "num_values_kept": 1158,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47953
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.222026895964518,
            "num_unique_values": 808,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(v1, a)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 57.02428527513065,
                "explored_percent_lambda": 26.683061789117737,
                "explored_percent_none": 16.292652935751615,
                "kept_percent_concrete": 56.2107904642409,
                "kept_percent_lambda": 43.7892095357591,
                "num_examples": 3,
                "num_explored_concrete": 1855,
                "num_explored_lambda": 868,
                "num_explored_none": 530,
                "num_inputs": 3,
                "num_kept_concrete": 448,
                "num_kept_lambda": 349,
                "num_values_explored": 3253,
                "num_values_kept": 797,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5353
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.66361323511228,
            "num_unique_values": 903,
            "solution": "Max(Max(Max(Sum(Take(4, x)), Add(1, 4)), Sum(x)), Sum(Drop(2, Reverse(x))))",
            "solution_weight": 17,
            "stats": {
                "explored_percent_concrete": 76.21816168327796,
                "explored_percent_lambda": 13.316722037652271,
                "explored_percent_none": 10.465116279069768,
                "kept_percent_concrete": 76.62192393736018,
                "kept_percent_lambda": 23.37807606263982,
                "num_examples": 5,
                "num_explored_concrete": 2753,
                "num_explored_lambda": 481,
                "num_explored_none": 378,
                "num_inputs": 1,
                "num_kept_concrete": 685,
                "num_kept_lambda": 209,
                "num_values_explored": 3612,
                "num_values_kept": 894,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 16923
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.8872521140147,
            "num_unique_values": 620,
            "solution": "IntDivide(Add(Last(x), Head(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 61.651196873473374,
                "explored_percent_lambda": 21.543722520762092,
                "explored_percent_none": 16.805080605764534,
                "kept_percent_concrete": 68.90343698854338,
                "kept_percent_lambda": 31.096563011456627,
                "num_examples": 5,
                "num_explored_concrete": 1262,
                "num_explored_lambda": 441,
                "num_explored_none": 344,
                "num_inputs": 1,
                "num_kept_concrete": 421,
                "num_kept_lambda": 190,
                "num_values_explored": 2047,
                "num_values_kept": 611,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3847
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.804667524062097,
            "num_unique_values": 490,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 73.46109175377468,
                "explored_percent_lambda": 12.601626016260163,
                "explored_percent_none": 13.937282229965156,
                "kept_percent_concrete": 79.79166666666667,
                "kept_percent_lambda": 20.208333333333332,
                "num_examples": 5,
                "num_explored_concrete": 1265,
                "num_explored_lambda": 217,
                "num_explored_none": 240,
                "num_inputs": 2,
                "num_kept_concrete": 383,
                "num_kept_lambda": 97,
                "num_values_explored": 1722,
                "num_values_kept": 480,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9381
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94098967709579,
            "num_unique_values": 988,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.28522082408093,
                "explored_percent_lambda": 35.529237601776465,
                "explored_percent_none": 16.18554157414261,
                "kept_percent_concrete": 45.760980592441264,
                "kept_percent_lambda": 54.239019407558736,
                "num_examples": 3,
                "num_explored_concrete": 1957,
                "num_explored_lambda": 1440,
                "num_explored_none": 656,
                "num_inputs": 1,
                "num_kept_concrete": 448,
                "num_kept_lambda": 531,
                "num_values_explored": 4053,
                "num_values_kept": 979,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46885
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.528775891987607,
            "num_unique_values": 229,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.549618320610687,
                "explored_percent_lambda": 61.221374045801525,
                "explored_percent_none": 10.229007633587786,
                "kept_percent_concrete": 39.09090909090909,
                "kept_percent_lambda": 60.90909090909091,
                "num_examples": 3,
                "num_explored_concrete": 187,
                "num_explored_lambda": 401,
                "num_explored_none": 67,
                "num_inputs": 1,
                "num_kept_concrete": 86,
                "num_kept_lambda": 134,
                "num_values_explored": 655,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 11769
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.88704982888885,
            "num_unique_values": 1022,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.155378486055774,
                "explored_percent_lambda": 23.067729083665338,
                "explored_percent_none": 15.776892430278885,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 3,
                "num_explored_concrete": 3070,
                "num_explored_lambda": 1158,
                "num_explored_none": 792,
                "num_inputs": 2,
                "num_kept_concrete": 552,
                "num_kept_lambda": 460,
                "num_values_explored": 5020,
                "num_values_kept": 1012,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52598
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.842773011885583,
            "num_unique_values": 1137,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(Last(x), v1)))(u2)), Take(-1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 61.260655002243155,
                "explored_percent_lambda": 26.82817406908928,
                "explored_percent_none": 11.911170928667564,
                "kept_percent_concrete": 59.13120567375886,
                "kept_percent_lambda": 40.86879432624114,
                "num_examples": 3,
                "num_explored_concrete": 2731,
                "num_explored_lambda": 1196,
                "num_explored_none": 531,
                "num_inputs": 1,
                "num_kept_concrete": 667,
                "num_kept_lambda": 461,
                "num_values_explored": 4458,
                "num_values_kept": 1128,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6258
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01220476906747,
            "num_unique_values": 1135,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.2185089974293,
                "explored_percent_lambda": 28.191945158526135,
                "explored_percent_none": 11.589545844044558,
                "kept_percent_concrete": 53.64120781527531,
                "kept_percent_lambda": 46.35879218472469,
                "num_examples": 3,
                "num_explored_concrete": 2811,
                "num_explored_lambda": 1316,
                "num_explored_none": 541,
                "num_inputs": 1,
                "num_kept_concrete": 604,
                "num_kept_lambda": 522,
                "num_values_explored": 4668,
                "num_values_kept": 1126,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48535
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.29871226917020977,
            "num_unique_values": 289,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.45908183632734,
                "explored_percent_lambda": 26.347305389221557,
                "explored_percent_none": 3.193612774451098,
                "kept_percent_concrete": 69.53405017921148,
                "kept_percent_lambda": 30.46594982078853,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 132,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 85,
                "num_values_explored": 501,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95225435099564,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.40609231919268,
                "explored_percent_lambda": 10.839095496168941,
                "explored_percent_none": 11.754812184638386,
                "kept_percent_concrete": 80.51372896368467,
                "kept_percent_lambda": 19.486271036315323,
                "num_examples": 5,
                "num_explored_concrete": 4142,
                "num_explored_lambda": 580,
                "num_explored_none": 629,
                "num_inputs": 1,
                "num_kept_concrete": 909,
                "num_kept_lambda": 220,
                "num_values_explored": 5351,
                "num_values_kept": 1129,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54760
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99583599111065,
            "num_unique_values": 1121,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.64826357969724,
                "explored_percent_lambda": 26.936776491540517,
                "explored_percent_none": 8.414959928762244,
                "kept_percent_concrete": 51.935193519351934,
                "kept_percent_lambda": 48.064806480648066,
                "num_examples": 3,
                "num_explored_concrete": 2904,
                "num_explored_lambda": 1210,
                "num_explored_none": 378,
                "num_inputs": 2,
                "num_kept_concrete": 577,
                "num_kept_lambda": 534,
                "num_values_explored": 4492,
                "num_values_kept": 1111,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46083
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.199987722793594,
            "num_unique_values": 162,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.9873417721519,
                "explored_percent_lambda": 15.189873417721518,
                "explored_percent_none": 15.822784810126583,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 5,
                "num_explored_concrete": 218,
                "num_explored_lambda": 48,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 39,
                "num_values_explored": 316,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 316
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77996168704703,
            "num_unique_values": 1066,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.85021213798193,
                "explored_percent_lambda": 17.672016233167312,
                "explored_percent_none": 10.477771628850766,
                "kept_percent_concrete": 65.87677725118483,
                "kept_percent_lambda": 34.12322274881517,
                "num_examples": 3,
                "num_explored_concrete": 3895,
                "num_explored_lambda": 958,
                "num_explored_none": 568,
                "num_inputs": 3,
                "num_kept_concrete": 695,
                "num_kept_lambda": 360,
                "num_values_explored": 5421,
                "num_values_kept": 1055,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53860
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.79417194495909,
            "num_unique_values": 994,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.22039095438865,
                "explored_percent_lambda": 12.955155231889613,
                "explored_percent_none": 11.824453813721732,
                "kept_percent_concrete": 77.25888324873097,
                "kept_percent_lambda": 22.741116751269036,
                "num_examples": 5,
                "num_explored_concrete": 3925,
                "num_explored_lambda": 676,
                "num_explored_none": 617,
                "num_inputs": 1,
                "num_kept_concrete": 761,
                "num_kept_lambda": 224,
                "num_values_explored": 5218,
                "num_values_kept": 985,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53235
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0425915280357,
            "num_unique_values": 1097,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.83796190039018,
                "explored_percent_lambda": 30.91576773008951,
                "explored_percent_none": 11.246270369520312,
                "kept_percent_concrete": 54.1360294117647,
                "kept_percent_lambda": 45.8639705882353,
                "num_examples": 3,
                "num_explored_concrete": 2520,
                "num_explored_lambda": 1347,
                "num_explored_none": 490,
                "num_inputs": 1,
                "num_kept_concrete": 589,
                "num_kept_lambda": 499,
                "num_values_explored": 4357,
                "num_values_kept": 1088,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45290
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.532541500870138,
            "num_unique_values": 822,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Access(i, x))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.4679029957204,
                "explored_percent_lambda": 25.991440798858772,
                "explored_percent_none": 21.540656205420827,
                "kept_percent_concrete": 58.3743842364532,
                "kept_percent_lambda": 41.6256157635468,
                "num_examples": 3,
                "num_explored_concrete": 1839,
                "num_explored_lambda": 911,
                "num_explored_none": 755,
                "num_inputs": 2,
                "num_kept_concrete": 474,
                "num_kept_lambda": 338,
                "num_values_explored": 3505,
                "num_values_kept": 812,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6205
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2786300959996879,
            "num_unique_values": 264,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 71.89409368635438,
                "explored_percent_lambda": 18.126272912423627,
                "explored_percent_none": 9.979633401221996,
                "kept_percent_concrete": 73.33333333333333,
                "kept_percent_lambda": 26.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 353,
                "num_explored_lambda": 89,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 68,
                "num_values_explored": 491,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07554416893981,
            "num_unique_values": 1286,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.666955017301035,
                "explored_percent_lambda": 29.82266435986159,
                "explored_percent_none": 10.51038062283737,
                "kept_percent_concrete": 53.719655442443226,
                "kept_percent_lambda": 46.280344557556774,
                "num_examples": 3,
                "num_explored_concrete": 2759,
                "num_explored_lambda": 1379,
                "num_explored_none": 486,
                "num_inputs": 1,
                "num_kept_concrete": 686,
                "num_kept_lambda": 591,
                "num_values_explored": 4624,
                "num_values_kept": 1277,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45947
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 70.88159462204203,
            "num_unique_values": 1085,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.59205171175485,
                "explored_percent_lambda": 30.045487191764423,
                "explored_percent_none": 18.36246109648073,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 3,
                "num_explored_concrete": 2155,
                "num_explored_lambda": 1255,
                "num_explored_none": 767,
                "num_inputs": 1,
                "num_kept_concrete": 544,
                "num_kept_lambda": 532,
                "num_values_explored": 4177,
                "num_values_kept": 1076,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 32394
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1732406378723681,
            "num_unique_values": 180,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.56275303643725,
                "explored_percent_lambda": 27.93522267206478,
                "explored_percent_none": 8.502024291497976,
                "kept_percent_concrete": 64.70588235294117,
                "kept_percent_lambda": 35.294117647058826,
                "num_examples": 3,
                "num_explored_concrete": 157,
                "num_explored_lambda": 69,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 60,
                "num_values_explored": 247,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 247
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9018717550207,
            "num_unique_values": 1216,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.42435256701499,
                "explored_percent_lambda": 26.010904134484324,
                "explored_percent_none": 7.564743298500682,
                "kept_percent_concrete": 58.326429163214584,
                "kept_percent_lambda": 41.673570836785416,
                "num_examples": 3,
                "num_explored_concrete": 2924,
                "num_explored_lambda": 1145,
                "num_explored_none": 333,
                "num_inputs": 1,
                "num_kept_concrete": 704,
                "num_kept_lambda": 503,
                "num_values_explored": 4402,
                "num_values_kept": 1207,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46391
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3577460760716349,
            "num_unique_values": 304,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 90.3225806451613,
                "explored_percent_lambda": 4.774193548387097,
                "explored_percent_none": 4.903225806451613,
                "kept_percent_concrete": 92.51700680272108,
                "kept_percent_lambda": 7.482993197278912,
                "num_examples": 5,
                "num_explored_concrete": 700,
                "num_explored_lambda": 37,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 272,
                "num_kept_lambda": 22,
                "num_values_explored": 775,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 775
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.74632281204686,
            "num_unique_values": 1011,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.40058002537612,
                "explored_percent_lambda": 8.26536160957042,
                "explored_percent_none": 21.334058365053473,
                "kept_percent_concrete": 83.81618381618381,
                "kept_percent_lambda": 16.183816183816184,
                "num_examples": 5,
                "num_explored_concrete": 3884,
                "num_explored_lambda": 456,
                "num_explored_none": 1177,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 162,
                "num_values_explored": 5517,
                "num_values_kept": 1001,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57348
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2628673040308058,
            "num_unique_values": 229,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 70.76271186440678,
                "explored_percent_lambda": 17.372881355932204,
                "explored_percent_none": 11.864406779661017,
                "kept_percent_concrete": 69.0909090909091,
                "kept_percent_lambda": 30.90909090909091,
                "num_examples": 5,
                "num_explored_concrete": 334,
                "num_explored_lambda": 82,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 152,
                "num_kept_lambda": 68,
                "num_values_explored": 472,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 472
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81775277806446,
            "num_unique_values": 1103,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.47502191060473,
                "explored_percent_lambda": 22.655565293602102,
                "explored_percent_none": 13.869412795793163,
                "kept_percent_concrete": 62.12259835315645,
                "kept_percent_lambda": 37.87740164684355,
                "num_examples": 3,
                "num_explored_concrete": 2897,
                "num_explored_lambda": 1034,
                "num_explored_none": 633,
                "num_inputs": 2,
                "num_kept_concrete": 679,
                "num_kept_lambda": 414,
                "num_values_explored": 4564,
                "num_values_kept": 1093,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48475
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9810154850129,
            "num_unique_values": 1127,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.50524308865586,
                "explored_percent_lambda": 19.79027645376549,
                "explored_percent_none": 9.704480457578647,
                "kept_percent_concrete": 63.74216651745748,
                "kept_percent_lambda": 36.25783348254252,
                "num_examples": 3,
                "num_explored_concrete": 3698,
                "num_explored_lambda": 1038,
                "num_explored_none": 509,
                "num_inputs": 2,
                "num_kept_concrete": 712,
                "num_kept_lambda": 405,
                "num_values_explored": 5245,
                "num_values_kept": 1117,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52361
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 80.71504133194685,
            "num_unique_values": 1035,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 78.06566455696202,
                "explored_percent_lambda": 15.664556962025317,
                "explored_percent_none": 6.269778481012659,
                "kept_percent_concrete": 66.53658536585365,
                "kept_percent_lambda": 33.46341463414634,
                "num_examples": 3,
                "num_explored_concrete": 3947,
                "num_explored_lambda": 792,
                "num_explored_none": 317,
                "num_inputs": 2,
                "num_kept_concrete": 682,
                "num_kept_lambda": 343,
                "num_values_explored": 5056,
                "num_values_kept": 1025,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 43859
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13965725409798,
            "num_unique_values": 990,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.14760147601476,
                "explored_percent_lambda": 12.712177121771218,
                "explored_percent_none": 17.14022140221402,
                "kept_percent_concrete": 72.44897959183673,
                "kept_percent_lambda": 27.551020408163264,
                "num_examples": 5,
                "num_explored_concrete": 3802,
                "num_explored_lambda": 689,
                "num_explored_none": 929,
                "num_inputs": 2,
                "num_kept_concrete": 710,
                "num_kept_lambda": 270,
                "num_values_explored": 5420,
                "num_values_kept": 980,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55966
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.543293901020661,
            "num_unique_values": 329,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 67.04119850187266,
                "explored_percent_lambda": 30.21223470661673,
                "explored_percent_none": 2.746566791510612,
                "kept_percent_concrete": 64.89028213166144,
                "kept_percent_lambda": 35.10971786833856,
                "num_examples": 3,
                "num_explored_concrete": 537,
                "num_explored_lambda": 242,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 207,
                "num_kept_lambda": 112,
                "num_values_explored": 801,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 801
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01323914690875,
            "num_unique_values": 1061,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.26198083067093,
                "explored_percent_lambda": 20.08785942492013,
                "explored_percent_none": 18.650159744408946,
                "kept_percent_concrete": 59.84776403425309,
                "kept_percent_lambda": 40.15223596574691,
                "num_examples": 3,
                "num_explored_concrete": 3068,
                "num_explored_lambda": 1006,
                "num_explored_none": 934,
                "num_inputs": 2,
                "num_kept_concrete": 629,
                "num_kept_lambda": 422,
                "num_values_explored": 5008,
                "num_values_kept": 1051,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51499
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.11015846417286,
            "num_unique_values": 1079,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.2328869047619,
                "explored_percent_lambda": 9.468005952380953,
                "explored_percent_none": 17.299107142857142,
                "kept_percent_concrete": 83.16183348924228,
                "kept_percent_lambda": 16.838166510757716,
                "num_examples": 5,
                "num_explored_concrete": 3937,
                "num_explored_lambda": 509,
                "num_explored_none": 930,
                "num_inputs": 2,
                "num_kept_concrete": 889,
                "num_kept_lambda": 180,
                "num_values_explored": 5376,
                "num_values_kept": 1069,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57217
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15511667705141008,
            "num_unique_values": 140,
            "solution": "Count((lambda u1: IsEven(4)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 64.23076923076923,
                "explored_percent_lambda": 19.23076923076923,
                "explored_percent_none": 16.53846153846154,
                "kept_percent_concrete": 69.46564885496183,
                "kept_percent_lambda": 30.53435114503817,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 50,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 40,
                "num_values_explored": 260,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 260
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1014819459524,
            "num_unique_values": 1083,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.27717522294529,
                "explored_percent_lambda": 37.88864786695589,
                "explored_percent_none": 11.834176910098819,
                "kept_percent_concrete": 49.906890130353815,
                "kept_percent_lambda": 50.093109869646185,
                "num_examples": 3,
                "num_explored_concrete": 2086,
                "num_explored_lambda": 1572,
                "num_explored_none": 491,
                "num_inputs": 1,
                "num_kept_concrete": 536,
                "num_kept_lambda": 538,
                "num_values_explored": 4149,
                "num_values_kept": 1074,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44106
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8357529072091,
            "num_unique_values": 1114,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.37704222363675,
                "explored_percent_lambda": 21.069382558879695,
                "explored_percent_none": 7.553575217483556,
                "kept_percent_concrete": 59.366515837104075,
                "kept_percent_lambda": 40.633484162895925,
                "num_examples": 3,
                "num_explored_concrete": 3364,
                "num_explored_lambda": 993,
                "num_explored_none": 356,
                "num_inputs": 1,
                "num_kept_concrete": 656,
                "num_kept_lambda": 449,
                "num_values_explored": 4713,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48005
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.13487931992858648,
            "num_unique_values": 105,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 75.52742616033755,
                "explored_percent_lambda": 14.345991561181435,
                "explored_percent_none": 10.126582278481013,
                "kept_percent_concrete": 76.04166666666667,
                "kept_percent_lambda": 23.958333333333332,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 34,
                "num_explored_none": 24,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 23,
                "num_values_explored": 237,
                "num_values_kept": 96,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 237
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.12148665986023843,
            "num_unique_values": 114,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.785714285714285,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 10.119047619047619,
                "kept_percent_concrete": 42.71844660194175,
                "kept_percent_lambda": 57.28155339805825,
                "num_examples": 3,
                "num_explored_concrete": 87,
                "num_explored_lambda": 64,
                "num_explored_none": 17,
                "num_inputs": 3,
                "num_kept_concrete": 44,
                "num_kept_lambda": 59,
                "num_values_explored": 168,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 168
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09045676211827,
            "num_unique_values": 1128,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.216882840739956,
                "explored_percent_lambda": 23.346799914947905,
                "explored_percent_none": 16.436317244312143,
                "kept_percent_concrete": 60.768543342269886,
                "kept_percent_lambda": 39.231456657730114,
                "num_examples": 3,
                "num_explored_concrete": 2832,
                "num_explored_lambda": 1098,
                "num_explored_none": 773,
                "num_inputs": 1,
                "num_kept_concrete": 680,
                "num_kept_lambda": 439,
                "num_values_explored": 4703,
                "num_values_kept": 1119,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49033
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.77094430290163,
            "num_unique_values": 1050,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.83561163687347,
                "explored_percent_lambda": 13.494567122327375,
                "explored_percent_none": 13.669821240799159,
                "kept_percent_concrete": 72.21153846153847,
                "kept_percent_lambda": 27.78846153846154,
                "num_examples": 3,
                "num_explored_concrete": 4156,
                "num_explored_lambda": 770,
                "num_explored_none": 780,
                "num_inputs": 2,
                "num_kept_concrete": 751,
                "num_kept_lambda": 289,
                "num_values_explored": 5706,
                "num_values_kept": 1040,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55991
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.397340714931488,
            "num_unique_values": 1010,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 68.06035266315216,
                "explored_percent_lambda": 12.906744228322124,
                "explored_percent_none": 19.032903108525723,
                "kept_percent_concrete": 70.87087087087087,
                "kept_percent_lambda": 29.12912912912913,
                "num_examples": 3,
                "num_explored_concrete": 3744,
                "num_explored_lambda": 710,
                "num_explored_none": 1047,
                "num_inputs": 3,
                "num_kept_concrete": 708,
                "num_kept_lambda": 291,
                "num_values_explored": 5501,
                "num_values_kept": 999,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 7001
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.10359307401814,
            "num_unique_values": 1040,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.28396322778345,
                "explored_percent_lambda": 39.63227783452503,
                "explored_percent_none": 17.08375893769152,
                "kept_percent_concrete": 45.683802133850634,
                "kept_percent_lambda": 54.316197866149366,
                "num_examples": 3,
                "num_explored_concrete": 1695,
                "num_explored_lambda": 1552,
                "num_explored_none": 669,
                "num_inputs": 1,
                "num_kept_concrete": 471,
                "num_kept_lambda": 560,
                "num_values_explored": 3916,
                "num_values_kept": 1031,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44267
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.01536026597023,
            "num_unique_values": 556,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 46.6030989272944,
                "explored_percent_lambda": 36.7699642431466,
                "explored_percent_none": 16.626936829559,
                "kept_percent_concrete": 50.822669104204756,
                "kept_percent_lambda": 49.177330895795244,
                "num_examples": 3,
                "num_explored_concrete": 782,
                "num_explored_lambda": 617,
                "num_explored_none": 279,
                "num_inputs": 1,
                "num_kept_concrete": 278,
                "num_kept_lambda": 269,
                "num_values_explored": 1678,
                "num_values_kept": 547,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 15881
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44962530792691,
            "num_unique_values": 1120,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.57234139662255,
                "explored_percent_lambda": 32.40529438612506,
                "explored_percent_none": 11.022364217252397,
                "kept_percent_concrete": 49.054905490549054,
                "kept_percent_lambda": 50.945094509450946,
                "num_examples": 3,
                "num_explored_concrete": 2479,
                "num_explored_lambda": 1420,
                "num_explored_none": 483,
                "num_inputs": 1,
                "num_kept_concrete": 545,
                "num_kept_lambda": 566,
                "num_values_explored": 4382,
                "num_values_kept": 1111,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46131
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7959818339441,
            "num_unique_values": 983,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.45996275605214,
                "explored_percent_lambda": 8.650753343490774,
                "explored_percent_none": 21.889283900457084,
                "kept_percent_concrete": 82.42548818088386,
                "kept_percent_lambda": 17.574511819116136,
                "num_examples": 5,
                "num_explored_concrete": 4103,
                "num_explored_lambda": 511,
                "num_explored_none": 1293,
                "num_inputs": 2,
                "num_kept_concrete": 802,
                "num_kept_lambda": 171,
                "num_values_explored": 5907,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60033
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.48
}