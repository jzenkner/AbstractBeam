{
    "num_tasks": 50,
    "num_tasks_solved": 23,
    "results": [
        {
            "elapsed_time": 101.09758699196391,
            "num_unique_values": 1043,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.0445677465545,
                "explored_percent_lambda": 13.334526579559693,
                "explored_percent_none": 13.620905673885806,
                "kept_percent_concrete": 72.60406582768636,
                "kept_percent_lambda": 27.39593417231365,
                "num_examples": 3,
                "num_explored_concrete": 4081,
                "num_explored_lambda": 745,
                "num_explored_none": 761,
                "num_inputs": 2,
                "num_kept_concrete": 750,
                "num_kept_lambda": 283,
                "num_values_explored": 5587,
                "num_values_kept": 1033,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56231
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 57.30928399297409,
            "num_unique_values": 790,
            "solution": "Count((lambda u1: ((lambda v1: Greater(Head(x), v1)))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 69.44764096662831,
                "explored_percent_lambda": 17.40506329113924,
                "explored_percent_none": 13.147295742232451,
                "kept_percent_concrete": 73.11139564660691,
                "kept_percent_lambda": 26.888604353393085,
                "num_examples": 5,
                "num_explored_concrete": 2414,
                "num_explored_lambda": 605,
                "num_explored_none": 457,
                "num_inputs": 1,
                "num_kept_concrete": 571,
                "num_kept_lambda": 210,
                "num_values_explored": 3476,
                "num_values_kept": 781,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 31613
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07924381201155,
            "num_unique_values": 1046,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.39285714285714,
                "explored_percent_lambda": 10.339285714285714,
                "explored_percent_none": 15.267857142857142,
                "kept_percent_concrete": 80.98455598455598,
                "kept_percent_lambda": 19.015444015444015,
                "num_examples": 5,
                "num_explored_concrete": 4166,
                "num_explored_lambda": 579,
                "num_explored_none": 855,
                "num_inputs": 2,
                "num_kept_concrete": 839,
                "num_kept_lambda": 197,
                "num_values_explored": 5600,
                "num_values_kept": 1036,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57270
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.43224995397031307,
            "num_unique_values": 349,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Less(v1, -1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.37235367372354,
                "explored_percent_lambda": 29.140722291407222,
                "explored_percent_none": 3.4869240348692405,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 541,
                "num_explored_lambda": 234,
                "num_explored_none": 28,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 130,
                "num_values_explored": 803,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 803
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.28357964591123164,
            "num_unique_values": 291,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.60268714011517,
                "explored_percent_lambda": 21.689059500959694,
                "explored_percent_none": 11.708253358925145,
                "kept_percent_concrete": 68.43971631205673,
                "kept_percent_lambda": 31.56028368794326,
                "num_examples": 5,
                "num_explored_concrete": 347,
                "num_explored_lambda": 113,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 89,
                "num_values_explored": 521,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.800846447004,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.360842467225446,
                "explored_percent_lambda": 25.639372447883087,
                "explored_percent_none": 16.999785084891467,
                "kept_percent_concrete": 56.478405315614616,
                "kept_percent_lambda": 43.521594684385384,
                "num_examples": 3,
                "num_explored_concrete": 2669,
                "num_explored_lambda": 1193,
                "num_explored_none": 791,
                "num_inputs": 2,
                "num_kept_concrete": 680,
                "num_kept_lambda": 524,
                "num_values_explored": 4653,
                "num_values_kept": 1204,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48596
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.2535874878522,
            "num_unique_values": 811,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 56.426735218508995,
                "explored_percent_lambda": 28.245501285347043,
                "explored_percent_none": 15.327763496143959,
                "kept_percent_concrete": 53.25,
                "kept_percent_lambda": 46.75,
                "num_examples": 3,
                "num_explored_concrete": 1756,
                "num_explored_lambda": 879,
                "num_explored_none": 477,
                "num_inputs": 3,
                "num_kept_concrete": 426,
                "num_kept_lambda": 374,
                "num_values_explored": 3112,
                "num_values_kept": 800,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14607
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23466952610761,
            "num_unique_values": 1106,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.1022685013016,
                "explored_percent_lambda": 11.881740423949424,
                "explored_percent_none": 13.015991074748976,
                "kept_percent_concrete": 77.84867821330903,
                "kept_percent_lambda": 22.151321786690975,
                "num_examples": 5,
                "num_explored_concrete": 4039,
                "num_explored_lambda": 639,
                "num_explored_none": 700,
                "num_inputs": 1,
                "num_kept_concrete": 854,
                "num_kept_lambda": 243,
                "num_values_explored": 5378,
                "num_values_kept": 1097,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56034
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.820403343997896,
            "num_unique_values": 884,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 67.48329621380846,
                "explored_percent_lambda": 18.457683741648108,
                "explored_percent_none": 14.05902004454343,
                "kept_percent_concrete": 73.48571428571428,
                "kept_percent_lambda": 26.514285714285716,
                "num_examples": 5,
                "num_explored_concrete": 2424,
                "num_explored_lambda": 663,
                "num_explored_none": 505,
                "num_inputs": 1,
                "num_kept_concrete": 643,
                "num_kept_lambda": 232,
                "num_values_explored": 3592,
                "num_values_kept": 875,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10671
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.858177507063374,
            "num_unique_values": 500,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 72.11538461538461,
                "explored_percent_lambda": 13.404977375565611,
                "explored_percent_none": 14.479638009049774,
                "kept_percent_concrete": 77.55102040816327,
                "kept_percent_lambda": 22.448979591836736,
                "num_examples": 5,
                "num_explored_concrete": 1275,
                "num_explored_lambda": 237,
                "num_explored_none": 256,
                "num_inputs": 2,
                "num_kept_concrete": 380,
                "num_kept_lambda": 110,
                "num_values_explored": 1768,
                "num_values_kept": 490,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 14585
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.94658641214482,
            "num_unique_values": 1020,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.10422724222769,
                "explored_percent_lambda": 29.61306195481995,
                "explored_percent_none": 16.28271080295236,
                "kept_percent_concrete": 49.554896142433236,
                "kept_percent_lambda": 50.445103857566764,
                "num_examples": 3,
                "num_explored_concrete": 2419,
                "num_explored_lambda": 1324,
                "num_explored_none": 728,
                "num_inputs": 1,
                "num_kept_concrete": 501,
                "num_kept_lambda": 510,
                "num_values_explored": 4471,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49119
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 42.647747243056074,
            "num_unique_values": 228,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.292397660818715,
                "explored_percent_lambda": 64.76608187134502,
                "explored_percent_none": 9.941520467836257,
                "kept_percent_concrete": 36.986301369863014,
                "kept_percent_lambda": 63.013698630136986,
                "num_examples": 3,
                "num_explored_concrete": 173,
                "num_explored_lambda": 443,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 81,
                "num_kept_lambda": 138,
                "num_values_explored": 684,
                "num_values_kept": 219,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 20888
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95051157195121,
            "num_unique_values": 1045,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.10357778217039,
                "explored_percent_lambda": 18.699347697173355,
                "explored_percent_none": 17.197074520656255,
                "kept_percent_concrete": 57.29468599033817,
                "kept_percent_lambda": 42.70531400966183,
                "num_examples": 3,
                "num_explored_concrete": 3243,
                "num_explored_lambda": 946,
                "num_explored_none": 870,
                "num_inputs": 2,
                "num_kept_concrete": 593,
                "num_kept_lambda": 442,
                "num_values_explored": 5059,
                "num_values_kept": 1035,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52754
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.68526779813692,
            "num_unique_values": 1007,
            "solution": "Take(-1, ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u1)), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.21356977640709,
                "explored_percent_lambda": 28.989976869699305,
                "explored_percent_none": 11.7964533538936,
                "kept_percent_concrete": 54.30861723446894,
                "kept_percent_lambda": 45.69138276553106,
                "num_examples": 3,
                "num_explored_concrete": 2304,
                "num_explored_lambda": 1128,
                "num_explored_none": 459,
                "num_inputs": 1,
                "num_kept_concrete": 542,
                "num_kept_lambda": 456,
                "num_values_explored": 3891,
                "num_values_kept": 998,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 19981
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01220134692267,
            "num_unique_values": 1116,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.551103843008995,
                "explored_percent_lambda": 25.286181520850366,
                "explored_percent_none": 12.162714636140638,
                "kept_percent_concrete": 54.290876242095756,
                "kept_percent_lambda": 45.709123757904244,
                "num_examples": 3,
                "num_explored_concrete": 3060,
                "num_explored_lambda": 1237,
                "num_explored_none": 595,
                "num_inputs": 1,
                "num_kept_concrete": 601,
                "num_kept_lambda": 506,
                "num_values_explored": 4892,
                "num_values_kept": 1107,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49315
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3155319660436362,
            "num_unique_values": 289,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.45908183632734,
                "explored_percent_lambda": 26.347305389221557,
                "explored_percent_none": 3.193612774451098,
                "kept_percent_concrete": 69.53405017921148,
                "kept_percent_lambda": 30.46594982078853,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 132,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 85,
                "num_values_explored": 501,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.95481153903529,
            "num_unique_values": 1088,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.32490974729242,
                "explored_percent_lambda": 10.126353790613718,
                "explored_percent_none": 14.548736462093864,
                "kept_percent_concrete": 79.33271547729379,
                "kept_percent_lambda": 20.66728452270621,
                "num_examples": 5,
                "num_explored_concrete": 4173,
                "num_explored_lambda": 561,
                "num_explored_none": 806,
                "num_inputs": 1,
                "num_kept_concrete": 856,
                "num_kept_lambda": 223,
                "num_values_explored": 5540,
                "num_values_kept": 1079,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57347
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.97257436113432,
            "num_unique_values": 1111,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.954900260190804,
                "explored_percent_lambda": 29.705117085862966,
                "explored_percent_none": 11.339982653946228,
                "kept_percent_concrete": 49.04632152588556,
                "kept_percent_lambda": 50.95367847411444,
                "num_examples": 3,
                "num_explored_concrete": 2719,
                "num_explored_lambda": 1370,
                "num_explored_none": 523,
                "num_inputs": 2,
                "num_kept_concrete": 540,
                "num_kept_lambda": 561,
                "num_values_explored": 4612,
                "num_values_kept": 1101,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47178
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19181785080581903,
            "num_unique_values": 162,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.9873417721519,
                "explored_percent_lambda": 15.189873417721518,
                "explored_percent_none": 15.822784810126583,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 5,
                "num_explored_concrete": 218,
                "num_explored_lambda": 48,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 39,
                "num_values_explored": 316,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 316
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.75908734812401,
            "num_unique_values": 1085,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.15104843199109,
                "explored_percent_lambda": 16.812024494340324,
                "explored_percent_none": 9.036927073668584,
                "kept_percent_concrete": 65.54934823091247,
                "kept_percent_lambda": 34.45065176908752,
                "num_examples": 3,
                "num_explored_concrete": 3996,
                "num_explored_lambda": 906,
                "num_explored_none": 487,
                "num_inputs": 3,
                "num_kept_concrete": 704,
                "num_kept_lambda": 370,
                "num_values_explored": 5389,
                "num_values_kept": 1074,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55534
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7590669230558,
            "num_unique_values": 1040,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.84210526315789,
                "explored_percent_lambda": 11.172668513388736,
                "explored_percent_none": 11.98522622345337,
                "kept_percent_concrete": 79.43743937924346,
                "kept_percent_lambda": 20.562560620756546,
                "num_examples": 5,
                "num_explored_concrete": 4161,
                "num_explored_lambda": 605,
                "num_explored_none": 649,
                "num_inputs": 1,
                "num_kept_concrete": 819,
                "num_kept_lambda": 212,
                "num_values_explored": 5415,
                "num_values_kept": 1031,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55654
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.00697514321655,
            "num_unique_values": 1090,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.09482178883658,
                "explored_percent_lambda": 32.5711723828738,
                "explored_percent_none": 10.334005828289621,
                "kept_percent_concrete": 53.191489361702125,
                "kept_percent_lambda": 46.808510638297875,
                "num_examples": 3,
                "num_explored_concrete": 2547,
                "num_explored_lambda": 1453,
                "num_explored_none": 461,
                "num_inputs": 1,
                "num_kept_concrete": 575,
                "num_kept_lambda": 506,
                "num_values_explored": 4461,
                "num_values_kept": 1081,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46950
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 45.363526101922616,
            "num_unique_values": 537,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Access(i, x))))(u1)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.6382252559727,
                "explored_percent_lambda": 30.960507069722087,
                "explored_percent_none": 27.401267674305217,
                "kept_percent_concrete": 55.597722960151806,
                "kept_percent_lambda": 44.402277039848194,
                "num_examples": 3,
                "num_explored_concrete": 854,
                "num_explored_lambda": 635,
                "num_explored_none": 562,
                "num_inputs": 2,
                "num_kept_concrete": 293,
                "num_kept_lambda": 234,
                "num_values_explored": 2051,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 25061
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2571634971536696,
            "num_unique_values": 264,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 71.89409368635438,
                "explored_percent_lambda": 18.126272912423627,
                "explored_percent_none": 9.979633401221996,
                "kept_percent_concrete": 73.33333333333333,
                "kept_percent_lambda": 26.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 353,
                "num_explored_lambda": 89,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 68,
                "num_values_explored": 491,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.04280842398293,
            "num_unique_values": 1287,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.57935318055258,
                "explored_percent_lambda": 31.18440779610195,
                "explored_percent_none": 13.23623902334547,
                "kept_percent_concrete": 51.87793427230047,
                "kept_percent_lambda": 48.12206572769953,
                "num_examples": 3,
                "num_explored_concrete": 2595,
                "num_explored_lambda": 1456,
                "num_explored_none": 618,
                "num_inputs": 1,
                "num_kept_concrete": 663,
                "num_kept_lambda": 615,
                "num_values_explored": 4669,
                "num_values_kept": 1278,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47072
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 67.08986082416959,
            "num_unique_values": 835,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.2298682284041,
                "explored_percent_lambda": 36.127379209370424,
                "explored_percent_none": 17.642752562225475,
                "kept_percent_concrete": 50.60532687651332,
                "kept_percent_lambda": 49.39467312348668,
                "num_examples": 3,
                "num_explored_concrete": 1263,
                "num_explored_lambda": 987,
                "num_explored_none": 482,
                "num_inputs": 1,
                "num_kept_concrete": 418,
                "num_kept_lambda": 408,
                "num_values_explored": 2732,
                "num_values_kept": 826,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 31342
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16246313508599997,
            "num_unique_values": 180,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.56275303643725,
                "explored_percent_lambda": 27.93522267206478,
                "explored_percent_none": 8.502024291497976,
                "kept_percent_concrete": 64.70588235294117,
                "kept_percent_lambda": 35.294117647058826,
                "num_examples": 3,
                "num_explored_concrete": 157,
                "num_explored_lambda": 69,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 60,
                "num_values_explored": 247,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 247
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81318307481706,
            "num_unique_values": 1183,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.31049250535332,
                "explored_percent_lambda": 24.11134903640257,
                "explored_percent_none": 10.578158458244111,
                "kept_percent_concrete": 57.66609880749574,
                "kept_percent_lambda": 42.33390119250426,
                "num_examples": 3,
                "num_explored_concrete": 3050,
                "num_explored_lambda": 1126,
                "num_explored_none": 494,
                "num_inputs": 1,
                "num_kept_concrete": 677,
                "num_kept_lambda": 497,
                "num_values_explored": 4670,
                "num_values_kept": 1174,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48301
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3375597249250859,
            "num_unique_values": 304,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 90.3225806451613,
                "explored_percent_lambda": 4.774193548387097,
                "explored_percent_none": 4.903225806451613,
                "kept_percent_concrete": 92.51700680272108,
                "kept_percent_lambda": 7.482993197278912,
                "num_examples": 5,
                "num_explored_concrete": 700,
                "num_explored_lambda": 37,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 272,
                "num_kept_lambda": 22,
                "num_values_explored": 775,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 775
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.67278809193522,
            "num_unique_values": 1080,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.42152023692005,
                "explored_percent_lambda": 7.666995722277065,
                "explored_percent_none": 20.911484040802897,
                "kept_percent_concrete": 85.42056074766356,
                "kept_percent_lambda": 14.57943925233645,
                "num_examples": 5,
                "num_explored_concrete": 4341,
                "num_explored_lambda": 466,
                "num_explored_none": 1271,
                "num_inputs": 2,
                "num_kept_concrete": 914,
                "num_kept_lambda": 156,
                "num_values_explored": 6078,
                "num_values_kept": 1070,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60911
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26976254396140575,
            "num_unique_values": 229,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 70.76271186440678,
                "explored_percent_lambda": 17.372881355932204,
                "explored_percent_none": 11.864406779661017,
                "kept_percent_concrete": 69.0909090909091,
                "kept_percent_lambda": 30.90909090909091,
                "num_examples": 5,
                "num_explored_concrete": 334,
                "num_explored_lambda": 82,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 152,
                "num_kept_lambda": 68,
                "num_values_explored": 472,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 472
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.85475563607179,
            "num_unique_values": 1160,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.02194357366771,
                "explored_percent_lambda": 20.313479623824453,
                "explored_percent_none": 12.664576802507836,
                "kept_percent_concrete": 63.73913043478261,
                "kept_percent_lambda": 36.26086956521739,
                "num_examples": 3,
                "num_explored_concrete": 3207,
                "num_explored_lambda": 972,
                "num_explored_none": 606,
                "num_inputs": 2,
                "num_kept_concrete": 733,
                "num_kept_lambda": 417,
                "num_values_explored": 4785,
                "num_values_kept": 1150,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51195
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.78259965102188,
            "num_unique_values": 1210,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.64566345441068,
                "explored_percent_lambda": 20.23721275018532,
                "explored_percent_none": 8.117123795404003,
                "kept_percent_concrete": 62.916666666666664,
                "kept_percent_lambda": 37.083333333333336,
                "num_examples": 3,
                "num_explored_concrete": 3866,
                "num_explored_lambda": 1092,
                "num_explored_none": 438,
                "num_inputs": 2,
                "num_kept_concrete": 755,
                "num_kept_lambda": 445,
                "num_values_explored": 5396,
                "num_values_kept": 1200,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54739
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.674988721963018,
            "num_unique_values": 256,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u2)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 30.581867388362653,
                "explored_percent_lambda": 58.72801082543978,
                "explored_percent_none": 10.690121786197563,
                "kept_percent_concrete": 47.5609756097561,
                "kept_percent_lambda": 52.4390243902439,
                "num_examples": 3,
                "num_explored_concrete": 226,
                "num_explored_lambda": 434,
                "num_explored_none": 79,
                "num_inputs": 2,
                "num_kept_concrete": 117,
                "num_kept_lambda": 129,
                "num_values_explored": 739,
                "num_values_kept": 246,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8431
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.01793204504065,
            "num_unique_values": 1038,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.06834532374101,
                "explored_percent_lambda": 11.744604316546763,
                "explored_percent_none": 16.18705035971223,
                "kept_percent_concrete": 72.85992217898833,
                "kept_percent_lambda": 27.140077821011673,
                "num_examples": 5,
                "num_explored_concrete": 4007,
                "num_explored_lambda": 653,
                "num_explored_none": 900,
                "num_inputs": 2,
                "num_kept_concrete": 749,
                "num_kept_lambda": 279,
                "num_values_explored": 5560,
                "num_values_kept": 1028,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57223
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.49390970380045474,
            "num_unique_values": 329,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 67.04119850187266,
                "explored_percent_lambda": 30.21223470661673,
                "explored_percent_none": 2.746566791510612,
                "kept_percent_concrete": 64.89028213166144,
                "kept_percent_lambda": 35.10971786833856,
                "num_examples": 3,
                "num_explored_concrete": 537,
                "num_explored_lambda": 242,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 207,
                "num_kept_lambda": 112,
                "num_values_explored": 801,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 801
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.90560096385889,
            "num_unique_values": 1125,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.5703125,
                "explored_percent_lambda": 22.32421875,
                "explored_percent_none": 18.10546875,
                "kept_percent_concrete": 57.04035874439462,
                "kept_percent_lambda": 42.95964125560538,
                "num_examples": 3,
                "num_explored_concrete": 3050,
                "num_explored_lambda": 1143,
                "num_explored_none": 927,
                "num_inputs": 2,
                "num_kept_concrete": 636,
                "num_kept_lambda": 479,
                "num_values_explored": 5120,
                "num_values_kept": 1115,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53359
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.9926558160223,
            "num_unique_values": 1118,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.28872610326961,
                "explored_percent_lambda": 8.915490441307844,
                "explored_percent_none": 18.795783455422548,
                "kept_percent_concrete": 83.84476534296029,
                "kept_percent_lambda": 16.15523465703971,
                "num_examples": 5,
                "num_explored_concrete": 4046,
                "num_explored_lambda": 499,
                "num_explored_none": 1052,
                "num_inputs": 2,
                "num_kept_concrete": 929,
                "num_kept_lambda": 179,
                "num_values_explored": 5597,
                "num_values_kept": 1108,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 58128
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14678777195513248,
            "num_unique_values": 140,
            "solution": "Count((lambda u1: IsEven(4)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 64.23076923076923,
                "explored_percent_lambda": 19.23076923076923,
                "explored_percent_none": 16.53846153846154,
                "kept_percent_concrete": 69.46564885496183,
                "kept_percent_lambda": 30.53435114503817,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 50,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 40,
                "num_values_explored": 260,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 260
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07426233310252,
            "num_unique_values": 1141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.60800744878957,
                "explored_percent_lambda": 33.63594040968343,
                "explored_percent_none": 12.756052141527002,
                "kept_percent_concrete": 50.35335689045937,
                "kept_percent_lambda": 49.64664310954063,
                "num_examples": 3,
                "num_explored_concrete": 2303,
                "num_explored_lambda": 1445,
                "num_explored_none": 548,
                "num_inputs": 1,
                "num_kept_concrete": 570,
                "num_kept_lambda": 562,
                "num_values_explored": 4296,
                "num_values_kept": 1132,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44026
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.73198006791063,
            "num_unique_values": 1088,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.30400498028636,
                "explored_percent_lambda": 26.540776094625443,
                "explored_percent_none": 8.155218925088192,
                "kept_percent_concrete": 57.64596848934198,
                "kept_percent_lambda": 42.35403151065802,
                "num_examples": 3,
                "num_explored_concrete": 3147,
                "num_explored_lambda": 1279,
                "num_explored_none": 393,
                "num_inputs": 1,
                "num_kept_concrete": 622,
                "num_kept_lambda": 457,
                "num_values_explored": 4819,
                "num_values_kept": 1079,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50718
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1181769180111587,
            "num_unique_values": 105,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 75.52742616033755,
                "explored_percent_lambda": 14.345991561181435,
                "explored_percent_none": 10.126582278481013,
                "kept_percent_concrete": 76.04166666666667,
                "kept_percent_lambda": 23.958333333333332,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 34,
                "num_explored_none": 24,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 23,
                "num_values_explored": 237,
                "num_values_kept": 96,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 237
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11190638714469969,
            "num_unique_values": 114,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.785714285714285,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 10.119047619047619,
                "kept_percent_concrete": 42.71844660194175,
                "kept_percent_lambda": 57.28155339805825,
                "num_examples": 3,
                "num_explored_concrete": 87,
                "num_explored_lambda": 64,
                "num_explored_none": 17,
                "num_inputs": 3,
                "num_kept_concrete": 44,
                "num_kept_lambda": 59,
                "num_values_explored": 168,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 168
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99300738889724,
            "num_unique_values": 1196,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.83777239709443,
                "explored_percent_lambda": 24.313962873284908,
                "explored_percent_none": 16.848264729620663,
                "kept_percent_concrete": 59.05644481887111,
                "kept_percent_lambda": 40.94355518112889,
                "num_examples": 3,
                "num_explored_concrete": 2916,
                "num_explored_lambda": 1205,
                "num_explored_none": 835,
                "num_inputs": 1,
                "num_kept_concrete": 701,
                "num_kept_lambda": 486,
                "num_values_explored": 4956,
                "num_values_kept": 1187,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49898
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.66283276607282,
            "num_unique_values": 1072,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.76641817536387,
                "explored_percent_lambda": 13.5427760028399,
                "explored_percent_none": 12.690805821796237,
                "kept_percent_concrete": 73.82297551789077,
                "kept_percent_lambda": 26.17702448210923,
                "num_examples": 3,
                "num_explored_concrete": 4156,
                "num_explored_lambda": 763,
                "num_explored_none": 715,
                "num_inputs": 2,
                "num_kept_concrete": 784,
                "num_kept_lambda": 278,
                "num_values_explored": 5634,
                "num_values_kept": 1062,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56712
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 37.523943027015775,
            "num_unique_values": 764,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(v1, a)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 62.325941206807634,
                "explored_percent_lambda": 15.085095410005158,
                "explored_percent_none": 22.58896338318721,
                "kept_percent_concrete": 67.99468791500664,
                "kept_percent_lambda": 32.00531208499336,
                "num_examples": 3,
                "num_explored_concrete": 2417,
                "num_explored_lambda": 585,
                "num_explored_none": 876,
                "num_inputs": 3,
                "num_kept_concrete": 512,
                "num_kept_lambda": 241,
                "num_values_explored": 3878,
                "num_values_kept": 753,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 22128
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21422436297871,
            "num_unique_values": 1149,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.648061354921175,
                "explored_percent_lambda": 27.993182786536003,
                "explored_percent_none": 14.358755858542821,
                "kept_percent_concrete": 51.92982456140351,
                "kept_percent_lambda": 48.07017543859649,
                "num_examples": 3,
                "num_explored_concrete": 2706,
                "num_explored_lambda": 1314,
                "num_explored_none": 674,
                "num_inputs": 1,
                "num_kept_concrete": 592,
                "num_kept_lambda": 548,
                "num_values_explored": 4694,
                "num_values_kept": 1140,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45890
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.492165178991854,
            "num_unique_values": 551,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 41.78657074340528,
                "explored_percent_lambda": 42.26618705035971,
                "explored_percent_none": 15.947242206235012,
                "kept_percent_concrete": 50.92250922509225,
                "kept_percent_lambda": 49.07749077490775,
                "num_examples": 3,
                "num_explored_concrete": 697,
                "num_explored_lambda": 705,
                "num_explored_none": 266,
                "num_inputs": 1,
                "num_kept_concrete": 276,
                "num_kept_lambda": 266,
                "num_values_explored": 1668,
                "num_values_kept": 542,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7941
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23906872980297,
            "num_unique_values": 1106,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.88503253796095,
                "explored_percent_lambda": 27.70065075921909,
                "explored_percent_none": 9.414316702819956,
                "kept_percent_concrete": 52.14220601640839,
                "kept_percent_lambda": 47.85779398359161,
                "num_examples": 3,
                "num_explored_concrete": 2899,
                "num_explored_lambda": 1277,
                "num_explored_none": 434,
                "num_inputs": 1,
                "num_kept_concrete": 572,
                "num_kept_lambda": 525,
                "num_values_explored": 4610,
                "num_values_kept": 1097,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46850
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.71287341997959,
            "num_unique_values": 1025,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.76669414674362,
                "explored_percent_lambda": 8.788128606760099,
                "explored_percent_none": 20.44517724649629,
                "kept_percent_concrete": 83.34975369458128,
                "kept_percent_lambda": 16.65024630541872,
                "num_examples": 5,
                "num_explored_concrete": 4292,
                "num_explored_lambda": 533,
                "num_explored_none": 1240,
                "num_inputs": 2,
                "num_kept_concrete": 846,
                "num_kept_lambda": 169,
                "num_values_explored": 6065,
                "num_values_kept": 1015,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 60943
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.46
}