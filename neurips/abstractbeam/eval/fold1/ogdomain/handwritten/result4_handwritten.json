{
    "num_tasks": 50,
    "num_tasks_solved": 21,
    "results": [
        {
            "elapsed_time": 101.13462689495645,
            "num_unique_values": 1039,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.67510785968861,
                "explored_percent_lambda": 15.100356405927593,
                "explored_percent_none": 13.224535734383792,
                "kept_percent_concrete": 71.52575315840622,
                "kept_percent_lambda": 28.47424684159378,
                "num_examples": 3,
                "num_explored_concrete": 3821,
                "num_explored_lambda": 805,
                "num_explored_none": 705,
                "num_inputs": 2,
                "num_kept_concrete": 736,
                "num_kept_lambda": 293,
                "num_values_explored": 5331,
                "num_values_kept": 1029,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55480
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.42290432797745,
            "num_unique_values": 788,
            "solution": "Count((lambda u1: ((lambda v1: Less(v1, Head(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 68.93592677345538,
                "explored_percent_lambda": 17.076659038901603,
                "explored_percent_none": 13.98741418764302,
                "kept_percent_concrete": 73.94094993581514,
                "kept_percent_lambda": 26.059050064184852,
                "num_examples": 5,
                "num_explored_concrete": 2410,
                "num_explored_lambda": 597,
                "num_explored_none": 489,
                "num_inputs": 1,
                "num_kept_concrete": 576,
                "num_kept_lambda": 203,
                "num_values_explored": 3496,
                "num_values_kept": 779,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15713
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.08959319093265,
            "num_unique_values": 1061,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.62434259954921,
                "explored_percent_lambda": 10.217881292261458,
                "explored_percent_none": 15.157776108189331,
                "kept_percent_concrete": 82.30256898192198,
                "kept_percent_lambda": 17.69743101807802,
                "num_examples": 5,
                "num_explored_concrete": 3973,
                "num_explored_lambda": 544,
                "num_explored_none": 807,
                "num_inputs": 2,
                "num_kept_concrete": 865,
                "num_kept_lambda": 186,
                "num_values_explored": 5324,
                "num_values_kept": 1051,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57152
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.44974363315850496,
            "num_unique_values": 349,
            "solution": "Reverse(Sort(Filter((lambda u1: ((lambda v1: Less(v1, -1)))(u1)), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 67.37235367372354,
                "explored_percent_lambda": 29.140722291407222,
                "explored_percent_none": 3.4869240348692405,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 541,
                "num_explored_lambda": 234,
                "num_explored_none": 28,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 130,
                "num_values_explored": 803,
                "num_values_kept": 340,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 803
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2861874201335013,
            "num_unique_values": 291,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Greater(v1, 0)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 66.60268714011517,
                "explored_percent_lambda": 21.689059500959694,
                "explored_percent_none": 11.708253358925145,
                "kept_percent_concrete": 68.43971631205673,
                "kept_percent_lambda": 31.56028368794326,
                "num_examples": 5,
                "num_explored_concrete": 347,
                "num_explored_lambda": 113,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 193,
                "num_kept_lambda": 89,
                "num_values_explored": 521,
                "num_values_kept": 282,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 521
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80742506799288,
            "num_unique_values": 1180,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.98081023454158,
                "explored_percent_lambda": 21.940298507462686,
                "explored_percent_none": 17.078891257995735,
                "kept_percent_concrete": 57.17948717948718,
                "kept_percent_lambda": 42.82051282051282,
                "num_examples": 3,
                "num_explored_concrete": 2860,
                "num_explored_lambda": 1029,
                "num_explored_none": 801,
                "num_inputs": 2,
                "num_kept_concrete": 669,
                "num_kept_lambda": 501,
                "num_values_explored": 4690,
                "num_values_kept": 1170,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48101
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18692559702322,
            "num_unique_values": 1028,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.57627118644068,
                "explored_percent_lambda": 31.231638418079097,
                "explored_percent_none": 14.192090395480227,
                "kept_percent_concrete": 49.852507374631266,
                "kept_percent_lambda": 50.147492625368734,
                "num_examples": 3,
                "num_explored_concrete": 2415,
                "num_explored_lambda": 1382,
                "num_explored_none": 628,
                "num_inputs": 3,
                "num_kept_concrete": 507,
                "num_kept_lambda": 510,
                "num_values_explored": 4425,
                "num_values_kept": 1017,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47139
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.3732898349408,
            "num_unique_values": 1155,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.13186813186813,
                "explored_percent_lambda": 11.007326007326007,
                "explored_percent_none": 10.860805860805861,
                "kept_percent_concrete": 78.97033158813264,
                "kept_percent_lambda": 21.029668411867366,
                "num_examples": 5,
                "num_explored_concrete": 4266,
                "num_explored_lambda": 601,
                "num_explored_none": 593,
                "num_inputs": 1,
                "num_kept_concrete": 905,
                "num_kept_lambda": 241,
                "num_values_explored": 5460,
                "num_values_kept": 1146,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55414
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.025180733995512,
            "num_unique_values": 603,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 55.288007554296506,
                "explored_percent_lambda": 26.581680830972616,
                "explored_percent_none": 18.13031161473088,
                "kept_percent_concrete": 69.86531986531986,
                "kept_percent_lambda": 30.134680134680135,
                "num_examples": 5,
                "num_explored_concrete": 1171,
                "num_explored_lambda": 563,
                "num_explored_none": 384,
                "num_inputs": 1,
                "num_kept_concrete": 415,
                "num_kept_lambda": 179,
                "num_values_explored": 2118,
                "num_values_kept": 594,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3918
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.0517168850638,
            "num_unique_values": 958,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 80.78354554358472,
                "explored_percent_lambda": 6.64054848188051,
                "explored_percent_none": 12.57590597453477,
                "kept_percent_concrete": 84.915611814346,
                "kept_percent_lambda": 15.084388185654008,
                "num_examples": 5,
                "num_explored_concrete": 4124,
                "num_explored_lambda": 339,
                "num_explored_none": 642,
                "num_inputs": 2,
                "num_kept_concrete": 805,
                "num_kept_lambda": 143,
                "num_values_explored": 5105,
                "num_values_kept": 948,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 23774
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.99438432999887,
            "num_unique_values": 1121,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.309264897781645,
                "explored_percent_lambda": 25.141365811222272,
                "explored_percent_none": 13.549369290996085,
                "kept_percent_concrete": 55.57553956834533,
                "kept_percent_lambda": 44.42446043165467,
                "num_examples": 3,
                "num_explored_concrete": 2819,
                "num_explored_lambda": 1156,
                "num_explored_none": 623,
                "num_inputs": 1,
                "num_kept_concrete": 618,
                "num_kept_lambda": 494,
                "num_values_explored": 4598,
                "num_values_kept": 1112,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47304
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.066168865188956,
            "num_unique_values": 223,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 27.640156453715775,
                "explored_percent_lambda": 61.14732724902216,
                "explored_percent_none": 11.21251629726206,
                "kept_percent_concrete": 38.78504672897196,
                "kept_percent_lambda": 61.21495327102804,
                "num_examples": 3,
                "num_explored_concrete": 212,
                "num_explored_lambda": 469,
                "num_explored_none": 86,
                "num_inputs": 1,
                "num_kept_concrete": 83,
                "num_kept_lambda": 131,
                "num_values_explored": 767,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 11722
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.98460356006399,
            "num_unique_values": 1027,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.52605703048181,
                "explored_percent_lambda": 19.331366764995085,
                "explored_percent_none": 15.142576204523108,
                "kept_percent_concrete": 56.932153392330385,
                "kept_percent_lambda": 43.067846607669615,
                "num_examples": 3,
                "num_explored_concrete": 3332,
                "num_explored_lambda": 983,
                "num_explored_none": 770,
                "num_inputs": 2,
                "num_kept_concrete": 579,
                "num_kept_lambda": 438,
                "num_values_explored": 5085,
                "num_values_kept": 1017,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51532
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.183201474836096,
            "num_unique_values": 1128,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u1)), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 64.36730123180291,
                "explored_percent_lambda": 25.554311310190368,
                "explored_percent_none": 10.078387458006718,
                "kept_percent_concrete": 58.62377122430742,
                "kept_percent_lambda": 41.37622877569258,
                "num_examples": 3,
                "num_explored_concrete": 2874,
                "num_explored_lambda": 1141,
                "num_explored_none": 450,
                "num_inputs": 1,
                "num_kept_concrete": 656,
                "num_kept_lambda": 463,
                "num_values_explored": 4465,
                "num_values_kept": 1119,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6265
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07613063487224,
            "num_unique_values": 1070,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.33253951071661,
                "explored_percent_lambda": 29.87659666594501,
                "explored_percent_none": 13.790863823338386,
                "kept_percent_concrete": 51.64938737040528,
                "kept_percent_lambda": 48.35061262959472,
                "num_examples": 3,
                "num_explored_concrete": 2602,
                "num_explored_lambda": 1380,
                "num_explored_none": 637,
                "num_inputs": 1,
                "num_kept_concrete": 548,
                "num_kept_lambda": 513,
                "num_values_explored": 4619,
                "num_values_kept": 1061,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47482
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2991365718189627,
            "num_unique_values": 289,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 70.45908183632734,
                "explored_percent_lambda": 26.347305389221557,
                "explored_percent_none": 3.193612774451098,
                "kept_percent_concrete": 69.53405017921148,
                "kept_percent_lambda": 30.46594982078853,
                "num_examples": 3,
                "num_explored_concrete": 353,
                "num_explored_lambda": 132,
                "num_explored_none": 16,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 85,
                "num_values_explored": 501,
                "num_values_kept": 279,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 501
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.93400241620839,
            "num_unique_values": 1142,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.60699093767339,
                "explored_percent_lambda": 11.207693730349547,
                "explored_percent_none": 14.185315331977067,
                "kept_percent_concrete": 78.90556045895852,
                "kept_percent_lambda": 21.09443954104148,
                "num_examples": 5,
                "num_explored_concrete": 4034,
                "num_explored_lambda": 606,
                "num_explored_none": 767,
                "num_inputs": 1,
                "num_kept_concrete": 894,
                "num_kept_lambda": 239,
                "num_values_explored": 5407,
                "num_values_kept": 1133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 55529
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92146198009141,
            "num_unique_values": 1131,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.526339486717696,
                "explored_percent_lambda": 27.757766771724448,
                "explored_percent_none": 10.715893741557856,
                "kept_percent_concrete": 47.1900089206066,
                "kept_percent_lambda": 52.8099910793934,
                "num_examples": 3,
                "num_explored_concrete": 2733,
                "num_explored_lambda": 1233,
                "num_explored_none": 476,
                "num_inputs": 2,
                "num_kept_concrete": 529,
                "num_kept_lambda": 592,
                "num_values_explored": 4442,
                "num_values_kept": 1121,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45788
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.18272799416445196,
            "num_unique_values": 162,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.9873417721519,
                "explored_percent_lambda": 15.189873417721518,
                "explored_percent_none": 15.822784810126583,
                "kept_percent_concrete": 74.50980392156863,
                "kept_percent_lambda": 25.49019607843137,
                "num_examples": 5,
                "num_explored_concrete": 218,
                "num_explored_lambda": 48,
                "num_explored_none": 50,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 39,
                "num_values_explored": 316,
                "num_values_kept": 153,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 316
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.8052353959065,
            "num_unique_values": 1072,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.23552123552123,
                "explored_percent_lambda": 18.61003861003861,
                "explored_percent_none": 10.154440154440154,
                "kept_percent_concrete": 64.2789820923657,
                "kept_percent_lambda": 35.721017907634305,
                "num_examples": 3,
                "num_explored_concrete": 3690,
                "num_explored_lambda": 964,
                "num_explored_none": 526,
                "num_inputs": 3,
                "num_kept_concrete": 682,
                "num_kept_lambda": 379,
                "num_values_explored": 5180,
                "num_values_kept": 1061,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53729
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.80785732297227,
            "num_unique_values": 1017,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.82586879762125,
                "explored_percent_lambda": 11.689277086043486,
                "explored_percent_none": 11.484854116335253,
                "kept_percent_concrete": 78.67063492063492,
                "kept_percent_lambda": 21.32936507936508,
                "num_examples": 5,
                "num_explored_concrete": 4134,
                "num_explored_lambda": 629,
                "num_explored_none": 618,
                "num_inputs": 1,
                "num_kept_concrete": 793,
                "num_kept_lambda": 215,
                "num_values_explored": 5381,
                "num_values_kept": 1008,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54064
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.03302554786205,
            "num_unique_values": 1047,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.85575992255566,
                "explored_percent_lambda": 35.237173281703775,
                "explored_percent_none": 11.907066795740562,
                "kept_percent_concrete": 48.94026974951831,
                "kept_percent_lambda": 51.05973025048169,
                "num_examples": 3,
                "num_explored_concrete": 2184,
                "num_explored_lambda": 1456,
                "num_explored_none": 492,
                "num_inputs": 1,
                "num_kept_concrete": 508,
                "num_kept_lambda": 530,
                "num_values_explored": 4132,
                "num_values_kept": 1038,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45605
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19831209396943,
            "num_unique_values": 1099,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.012762453684644,
                "explored_percent_lambda": 22.68423219431865,
                "explored_percent_none": 16.303005351996706,
                "kept_percent_concrete": 58.58585858585859,
                "kept_percent_lambda": 41.41414141414141,
                "num_examples": 3,
                "num_explored_concrete": 2964,
                "num_explored_lambda": 1102,
                "num_explored_none": 792,
                "num_inputs": 2,
                "num_kept_concrete": 638,
                "num_kept_lambda": 451,
                "num_values_explored": 4858,
                "num_values_kept": 1089,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52423
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2863171740900725,
            "num_unique_values": 264,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 71.89409368635438,
                "explored_percent_lambda": 18.126272912423627,
                "explored_percent_none": 9.979633401221996,
                "kept_percent_concrete": 73.33333333333333,
                "kept_percent_lambda": 26.666666666666668,
                "num_examples": 5,
                "num_explored_concrete": 353,
                "num_explored_lambda": 89,
                "num_explored_none": 49,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 68,
                "num_values_explored": 491,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 491
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.07260449696332,
            "num_unique_values": 1261,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.738589211618255,
                "explored_percent_lambda": 31.286307053941908,
                "explored_percent_none": 10.975103734439834,
                "kept_percent_concrete": 52.715654952076676,
                "kept_percent_lambda": 47.284345047923324,
                "num_examples": 3,
                "num_explored_concrete": 2783,
                "num_explored_lambda": 1508,
                "num_explored_none": 529,
                "num_inputs": 1,
                "num_kept_concrete": 660,
                "num_kept_lambda": 592,
                "num_values_explored": 4820,
                "num_values_kept": 1252,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47382
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 37.109474316006526,
            "num_unique_values": 821,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u2)), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 43.713872832369944,
                "explored_percent_lambda": 35.33236994219653,
                "explored_percent_none": 20.953757225433527,
                "kept_percent_concrete": 51.108374384236456,
                "kept_percent_lambda": 48.891625615763544,
                "num_examples": 3,
                "num_explored_concrete": 1210,
                "num_explored_lambda": 978,
                "num_explored_none": 580,
                "num_inputs": 1,
                "num_kept_concrete": 415,
                "num_kept_lambda": 397,
                "num_values_explored": 2768,
                "num_values_kept": 812,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 17767
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16595800407230854,
            "num_unique_values": 180,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 63.56275303643725,
                "explored_percent_lambda": 27.93522267206478,
                "explored_percent_none": 8.502024291497976,
                "kept_percent_concrete": 64.70588235294117,
                "kept_percent_lambda": 35.294117647058826,
                "num_examples": 3,
                "num_explored_concrete": 157,
                "num_explored_lambda": 69,
                "num_explored_none": 21,
                "num_inputs": 2,
                "num_kept_concrete": 110,
                "num_kept_lambda": 60,
                "num_values_explored": 247,
                "num_values_kept": 170,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 247
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.96975120110437,
            "num_unique_values": 1166,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.08019494904741,
                "explored_percent_lambda": 25.299069561364643,
                "explored_percent_none": 7.620735489587949,
                "kept_percent_concrete": 59.03197925669836,
                "kept_percent_lambda": 40.96802074330164,
                "num_examples": 3,
                "num_explored_concrete": 3028,
                "num_explored_lambda": 1142,
                "num_explored_none": 344,
                "num_inputs": 1,
                "num_kept_concrete": 683,
                "num_kept_lambda": 474,
                "num_values_explored": 4514,
                "num_values_kept": 1157,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47136
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4272254970856011,
            "num_unique_values": 304,
            "solution": "Access(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 90.3225806451613,
                "explored_percent_lambda": 4.774193548387097,
                "explored_percent_none": 4.903225806451613,
                "kept_percent_concrete": 92.51700680272108,
                "kept_percent_lambda": 7.482993197278912,
                "num_examples": 5,
                "num_explored_concrete": 700,
                "num_explored_lambda": 37,
                "num_explored_none": 38,
                "num_inputs": 2,
                "num_kept_concrete": 272,
                "num_kept_lambda": 22,
                "num_values_explored": 775,
                "num_values_kept": 294,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 775
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.84368750895374,
            "num_unique_values": 1008,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.60898916326168,
                "explored_percent_lambda": 8.793746669035352,
                "explored_percent_none": 22.597264167702967,
                "kept_percent_concrete": 82.86573146292585,
                "kept_percent_lambda": 17.13426853707415,
                "num_examples": 5,
                "num_explored_concrete": 3862,
                "num_explored_lambda": 495,
                "num_explored_none": 1272,
                "num_inputs": 2,
                "num_kept_concrete": 827,
                "num_kept_lambda": 171,
                "num_values_explored": 5629,
                "num_values_kept": 998,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57529
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.26931195612996817,
            "num_unique_values": 229,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 70.76271186440678,
                "explored_percent_lambda": 17.372881355932204,
                "explored_percent_none": 11.864406779661017,
                "kept_percent_concrete": 69.0909090909091,
                "kept_percent_lambda": 30.90909090909091,
                "num_examples": 5,
                "num_explored_concrete": 334,
                "num_explored_lambda": 82,
                "num_explored_none": 56,
                "num_inputs": 1,
                "num_kept_concrete": 152,
                "num_kept_lambda": 68,
                "num_values_explored": 472,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 472
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.86102568102069,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.3653603034134,
                "explored_percent_lambda": 20.480404551201012,
                "explored_percent_none": 8.154235145385588,
                "kept_percent_concrete": 65.14236410698878,
                "kept_percent_lambda": 34.857635893011214,
                "num_examples": 3,
                "num_explored_concrete": 3387,
                "num_explored_lambda": 972,
                "num_explored_none": 387,
                "num_inputs": 2,
                "num_kept_concrete": 755,
                "num_kept_lambda": 404,
                "num_values_explored": 4746,
                "num_values_kept": 1159,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49059
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.87214857595973,
            "num_unique_values": 1128,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.05211406096362,
                "explored_percent_lambda": 20.45231071779744,
                "explored_percent_none": 8.495575221238939,
                "kept_percent_concrete": 63.32737030411449,
                "kept_percent_lambda": 36.67262969588551,
                "num_examples": 3,
                "num_explored_concrete": 3613,
                "num_explored_lambda": 1040,
                "num_explored_none": 432,
                "num_inputs": 2,
                "num_kept_concrete": 708,
                "num_kept_lambda": 410,
                "num_values_explored": 5085,
                "num_values_kept": 1118,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53009
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 42.59320263611153,
            "num_unique_values": 226,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.52909336941813,
                "explored_percent_lambda": 55.7510148849797,
                "explored_percent_none": 12.719891745602165,
                "kept_percent_concrete": 43.98148148148148,
                "kept_percent_lambda": 56.01851851851852,
                "num_examples": 3,
                "num_explored_concrete": 233,
                "num_explored_lambda": 412,
                "num_explored_none": 94,
                "num_inputs": 2,
                "num_kept_concrete": 95,
                "num_kept_lambda": 121,
                "num_values_explored": 739,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 24149
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05246033798903,
            "num_unique_values": 994,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.380970011107,
                "explored_percent_lambda": 11.384672343576453,
                "explored_percent_none": 17.23435764531655,
                "kept_percent_concrete": 72.66260162601625,
                "kept_percent_lambda": 27.33739837398374,
                "num_examples": 5,
                "num_explored_concrete": 3856,
                "num_explored_lambda": 615,
                "num_explored_none": 931,
                "num_inputs": 2,
                "num_kept_concrete": 715,
                "num_kept_lambda": 269,
                "num_values_explored": 5402,
                "num_values_kept": 984,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56342
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5160463980864733,
            "num_unique_values": 329,
            "solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 67.04119850187266,
                "explored_percent_lambda": 30.21223470661673,
                "explored_percent_none": 2.746566791510612,
                "kept_percent_concrete": 64.89028213166144,
                "kept_percent_lambda": 35.10971786833856,
                "num_examples": 3,
                "num_explored_concrete": 537,
                "num_explored_lambda": 242,
                "num_explored_none": 22,
                "num_inputs": 2,
                "num_kept_concrete": 207,
                "num_kept_lambda": 112,
                "num_values_explored": 801,
                "num_values_kept": 319,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 801
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.91873378888704,
            "num_unique_values": 1059,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.28329058985993,
                "explored_percent_lambda": 22.292365358058788,
                "explored_percent_none": 21.424344052081278,
                "kept_percent_concrete": 58.341277407054335,
                "kept_percent_lambda": 41.658722592945665,
                "num_examples": 3,
                "num_explored_concrete": 2853,
                "num_explored_lambda": 1130,
                "num_explored_none": 1086,
                "num_inputs": 2,
                "num_kept_concrete": 612,
                "num_kept_lambda": 437,
                "num_values_explored": 5069,
                "num_values_kept": 1049,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51837
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.05239288811572,
            "num_unique_values": 1119,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.84004075394805,
                "explored_percent_lambda": 8.04890473764646,
                "explored_percent_none": 14.111054508405502,
                "kept_percent_concrete": 84.8512173128945,
                "kept_percent_lambda": 15.1487826871055,
                "num_examples": 5,
                "num_explored_concrete": 4584,
                "num_explored_lambda": 474,
                "num_explored_none": 831,
                "num_inputs": 2,
                "num_kept_concrete": 941,
                "num_kept_lambda": 168,
                "num_values_explored": 5889,
                "num_values_kept": 1109,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 57223
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14470759918913245,
            "num_unique_values": 140,
            "solution": "Count((lambda u1: IsEven(4)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 64.23076923076923,
                "explored_percent_lambda": 19.23076923076923,
                "explored_percent_none": 16.53846153846154,
                "kept_percent_concrete": 69.46564885496183,
                "kept_percent_lambda": 30.53435114503817,
                "num_examples": 5,
                "num_explored_concrete": 167,
                "num_explored_lambda": 50,
                "num_explored_none": 43,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 40,
                "num_values_explored": 260,
                "num_values_kept": 131,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 260
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1453897880856,
            "num_unique_values": 1101,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.603729603729604,
                "explored_percent_lambda": 37.80885780885781,
                "explored_percent_none": 12.587412587412587,
                "kept_percent_concrete": 50.091575091575095,
                "kept_percent_lambda": 49.908424908424905,
                "num_examples": 3,
                "num_explored_concrete": 2128,
                "num_explored_lambda": 1622,
                "num_explored_none": 540,
                "num_inputs": 1,
                "num_kept_concrete": 547,
                "num_kept_lambda": 545,
                "num_values_explored": 4290,
                "num_values_kept": 1092,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43068
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.81205992703326,
            "num_unique_values": 1134,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.9333468807153,
                "explored_percent_lambda": 23.999187157081895,
                "explored_percent_none": 8.067465962202805,
                "kept_percent_concrete": 59.91111111111111,
                "kept_percent_lambda": 40.08888888888889,
                "num_examples": 3,
                "num_explored_concrete": 3343,
                "num_explored_lambda": 1181,
                "num_explored_none": 397,
                "num_inputs": 1,
                "num_kept_concrete": 674,
                "num_kept_lambda": 451,
                "num_values_explored": 4921,
                "num_values_kept": 1125,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49410
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1186735590454191,
            "num_unique_values": 105,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 75.52742616033755,
                "explored_percent_lambda": 14.345991561181435,
                "explored_percent_none": 10.126582278481013,
                "kept_percent_concrete": 76.04166666666667,
                "kept_percent_lambda": 23.958333333333332,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 34,
                "num_explored_none": 24,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 23,
                "num_values_explored": 237,
                "num_values_kept": 96,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 237
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.11306192516349256,
            "num_unique_values": 114,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.785714285714285,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 10.119047619047619,
                "kept_percent_concrete": 42.71844660194175,
                "kept_percent_lambda": 57.28155339805825,
                "num_examples": 3,
                "num_explored_concrete": 87,
                "num_explored_lambda": 64,
                "num_explored_none": 17,
                "num_inputs": 3,
                "num_kept_concrete": 44,
                "num_kept_lambda": 59,
                "num_values_explored": 168,
                "num_values_kept": 103,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 168
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.20357328187674,
            "num_unique_values": 1216,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.04445835942392,
                "explored_percent_lambda": 25.589647255270297,
                "explored_percent_none": 17.365894385305783,
                "kept_percent_concrete": 59.15492957746479,
                "kept_percent_lambda": 40.84507042253521,
                "num_examples": 3,
                "num_explored_concrete": 2733,
                "num_explored_lambda": 1226,
                "num_explored_none": 832,
                "num_inputs": 1,
                "num_kept_concrete": 714,
                "num_kept_lambda": 493,
                "num_values_explored": 4791,
                "num_values_kept": 1207,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49033
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.7745954550337,
            "num_unique_values": 1021,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.74100980748274,
                "explored_percent_lambda": 15.29240828187432,
                "explored_percent_none": 13.966581910642935,
                "kept_percent_concrete": 71.11770524233432,
                "kept_percent_lambda": 28.882294757665676,
                "num_examples": 3,
                "num_explored_concrete": 3895,
                "num_explored_lambda": 842,
                "num_explored_none": 769,
                "num_inputs": 2,
                "num_kept_concrete": 719,
                "num_kept_lambda": 292,
                "num_values_explored": 5506,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56358
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.439406817080453,
            "num_unique_values": 772,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 62.61004660797514,
                "explored_percent_lambda": 14.163645779388917,
                "explored_percent_none": 23.22630761263594,
                "kept_percent_concrete": 67.93692509855454,
                "kept_percent_lambda": 32.06307490144547,
                "num_examples": 3,
                "num_explored_concrete": 2418,
                "num_explored_lambda": 547,
                "num_explored_none": 897,
                "num_inputs": 3,
                "num_kept_concrete": 517,
                "num_kept_lambda": 244,
                "num_values_explored": 3862,
                "num_values_kept": 761,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5362
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16551158484071,
            "num_unique_values": 1082,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.16602404173282,
                "explored_percent_lambda": 32.86459514629168,
                "explored_percent_none": 14.969380811975505,
                "kept_percent_concrete": 49.76700838769804,
                "kept_percent_lambda": 50.23299161230196,
                "num_examples": 3,
                "num_explored_concrete": 2300,
                "num_explored_lambda": 1449,
                "num_explored_none": 660,
                "num_inputs": 1,
                "num_kept_concrete": 534,
                "num_kept_lambda": 539,
                "num_values_explored": 4409,
                "num_values_kept": 1073,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44659
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.750132584944367,
            "num_unique_values": 813,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Subtract(v1, Minimum(x))))(u2)), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 44.776589049716804,
                "explored_percent_lambda": 38.04279421019509,
                "explored_percent_none": 17.180616740088105,
                "kept_percent_concrete": 48.38308457711443,
                "kept_percent_lambda": 51.61691542288557,
                "num_examples": 3,
                "num_explored_concrete": 1423,
                "num_explored_lambda": 1209,
                "num_explored_none": 546,
                "num_inputs": 1,
                "num_kept_concrete": 389,
                "num_kept_lambda": 415,
                "num_values_explored": 3178,
                "num_values_kept": 804,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4978
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.26001630909741,
            "num_unique_values": 1089,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.418892925838854,
                "explored_percent_lambda": 29.985039538362898,
                "explored_percent_none": 9.596067535798248,
                "kept_percent_concrete": 50.648148148148145,
                "kept_percent_lambda": 49.351851851851855,
                "num_examples": 3,
                "num_explored_concrete": 2827,
                "num_explored_lambda": 1403,
                "num_explored_none": 449,
                "num_inputs": 1,
                "num_kept_concrete": 547,
                "num_kept_lambda": 533,
                "num_values_explored": 4679,
                "num_values_kept": 1080,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47306
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.69765200698748,
            "num_unique_values": 1013,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.63453478625314,
                "explored_percent_lambda": 8.851634534786253,
                "explored_percent_none": 19.513830678960602,
                "kept_percent_concrete": 83.5493519441675,
                "kept_percent_lambda": 16.450648055832502,
                "num_examples": 5,
                "num_explored_concrete": 4273,
                "num_explored_lambda": 528,
                "num_explored_none": 1164,
                "num_inputs": 2,
                "num_kept_concrete": 838,
                "num_kept_lambda": 165,
                "num_values_explored": 5965,
                "num_values_kept": 1003,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 61311
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.42
}