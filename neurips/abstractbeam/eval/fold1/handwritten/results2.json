{
    "num_tasks": 50,
    "num_tasks_solved": 28,
    "results": [
        {
            "elapsed_time": 102.02767743496224,
            "num_unique_values": 923,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.302590171871216,
                "explored_percent_lambda": 18.78479786976519,
                "explored_percent_none": 30.91261195836359,
                "kept_percent_concrete": 60.262008733624455,
                "kept_percent_lambda": 39.737991266375545,
                "num_examples": 3,
                "num_explored_concrete": 2078,
                "num_explored_lambda": 776,
                "num_explored_none": 1277,
                "num_inputs": 2,
                "num_kept_concrete": 552,
                "num_kept_lambda": 364,
                "num_values_explored": 4131,
                "num_values_kept": 916,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44312
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2498467540135607,
            "num_unique_values": 163,
            "solution": "fn_0(Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 41.901408450704224,
                "explored_percent_none": 17.95774647887324,
                "kept_percent_concrete": 36.94267515923567,
                "kept_percent_lambda": 63.05732484076433,
                "num_examples": 5,
                "num_explored_concrete": 114,
                "num_explored_lambda": 119,
                "num_explored_none": 51,
                "num_inputs": 1,
                "num_kept_concrete": 58,
                "num_kept_lambda": 99,
                "num_values_explored": 284,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.42936166306026,
            "num_unique_values": 1210,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.27944111776447,
                "explored_percent_lambda": 15.169660678642714,
                "explored_percent_none": 24.550898203592816,
                "kept_percent_concrete": 73.31670822942644,
                "kept_percent_lambda": 26.683291770573565,
                "num_examples": 5,
                "num_explored_concrete": 3020,
                "num_explored_lambda": 760,
                "num_explored_none": 1230,
                "num_inputs": 2,
                "num_kept_concrete": 882,
                "num_kept_lambda": 321,
                "num_values_explored": 5010,
                "num_values_kept": 1203,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49778
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4861032150220126,
            "num_unique_values": 314,
            "solution": "Reverse(Take(fn_0(-1, x), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.09041591320072,
                "explored_percent_lambda": 39.42133815551537,
                "explored_percent_none": 10.488245931283906,
                "kept_percent_concrete": 46.753246753246756,
                "kept_percent_lambda": 53.246753246753244,
                "num_examples": 3,
                "num_explored_concrete": 277,
                "num_explored_lambda": 218,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 144,
                "num_kept_lambda": 164,
                "num_values_explored": 553,
                "num_values_kept": 308,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 553
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.020733979996294,
            "num_unique_values": 894,
            "solution": "Sum(Filter((lambda u1: ((lambda v1: Less(0, v1)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 55.83756345177665,
                "explored_percent_lambda": 23.82402707275804,
                "explored_percent_none": 20.338409475465312,
                "kept_percent_concrete": 66.21621621621621,
                "kept_percent_lambda": 33.78378378378378,
                "num_examples": 5,
                "num_explored_concrete": 1650,
                "num_explored_lambda": 704,
                "num_explored_none": 601,
                "num_inputs": 1,
                "num_kept_concrete": 588,
                "num_kept_lambda": 300,
                "num_values_explored": 2955,
                "num_values_kept": 888,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4705
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.31352039903868,
            "num_unique_values": 943,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.90101400289715,
                "explored_percent_lambda": 17.74505070014486,
                "explored_percent_none": 27.353935296957992,
                "kept_percent_concrete": 62.072649572649574,
                "kept_percent_lambda": 37.927350427350426,
                "num_examples": 3,
                "num_explored_concrete": 2274,
                "num_explored_lambda": 735,
                "num_explored_none": 1133,
                "num_inputs": 2,
                "num_kept_concrete": 581,
                "num_kept_lambda": 355,
                "num_values_explored": 4142,
                "num_values_kept": 936,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45863
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 85.53331821796019,
            "num_unique_values": 547,
            "solution": "Map((lambda u1: ((lambda v1: Max(a, v1)))(u1)), Map((lambda u1: ((lambda v1: Min(v1, b)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 36.74671499773448,
                "explored_percent_lambda": 34.75305845038514,
                "explored_percent_none": 28.50022655188038,
                "kept_percent_concrete": 47.12430426716141,
                "kept_percent_lambda": 52.87569573283859,
                "num_examples": 3,
                "num_explored_concrete": 811,
                "num_explored_lambda": 767,
                "num_explored_none": 629,
                "num_inputs": 3,
                "num_kept_concrete": 254,
                "num_kept_lambda": 285,
                "num_values_explored": 2207,
                "num_values_kept": 539,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 38540
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.856765807024203,
            "num_unique_values": 1056,
            "solution": "Max(fn_0(fn_3(Sum(x)), x), Sum(Take(Access(1, x), x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 62.63102725366876,
                "explored_percent_lambda": 19.5230607966457,
                "explored_percent_none": 17.845911949685533,
                "kept_percent_concrete": 71.14285714285714,
                "kept_percent_lambda": 28.857142857142858,
                "num_examples": 5,
                "num_explored_concrete": 2390,
                "num_explored_lambda": 745,
                "num_explored_none": 681,
                "num_inputs": 1,
                "num_kept_concrete": 747,
                "num_kept_lambda": 303,
                "num_values_explored": 3816,
                "num_values_kept": 1050,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15642
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.424529231968336,
            "num_unique_values": 712,
            "solution": "IntDivide(IntDivide(Add(Head(x), Last(x)), fn_3(-1)), -1)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 46.379726468222046,
                "explored_percent_lambda": 28.23813354786806,
                "explored_percent_none": 25.382139983909894,
                "kept_percent_concrete": 64.1643059490085,
                "kept_percent_lambda": 35.8356940509915,
                "num_examples": 5,
                "num_explored_concrete": 1153,
                "num_explored_lambda": 702,
                "num_explored_none": 631,
                "num_inputs": 1,
                "num_kept_concrete": 453,
                "num_kept_lambda": 253,
                "num_values_explored": 2486,
                "num_values_kept": 706,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4236
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.586549332016148,
            "num_unique_values": 1224,
            "solution": "Sum(Take(k, Take(Head(b), Sort(b))))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 66.39209225700165,
                "explored_percent_lambda": 12.479406919275123,
                "explored_percent_none": 21.12850082372323,
                "kept_percent_concrete": 76.41741988496302,
                "kept_percent_lambda": 23.582580115036976,
                "num_examples": 5,
                "num_explored_concrete": 3224,
                "num_explored_lambda": 606,
                "num_explored_none": 1026,
                "num_inputs": 2,
                "num_kept_concrete": 930,
                "num_kept_lambda": 287,
                "num_values_explored": 4856,
                "num_values_kept": 1217,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6956
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.66259149799589,
            "num_unique_values": 1139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.217194570135746,
                "explored_percent_lambda": 29.84162895927602,
                "explored_percent_none": 22.941176470588236,
                "kept_percent_concrete": 41.30626654898499,
                "kept_percent_lambda": 58.69373345101501,
                "num_examples": 3,
                "num_explored_concrete": 2087,
                "num_explored_lambda": 1319,
                "num_explored_none": 1014,
                "num_inputs": 1,
                "num_kept_concrete": 468,
                "num_kept_lambda": 665,
                "num_values_explored": 4420,
                "num_values_kept": 1133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46915
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6619829130358994,
            "num_unique_values": 219,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsOdd(v1)))(v1), 0, v1)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 19.478737997256516,
                "explored_percent_lambda": 66.11796982167353,
                "explored_percent_none": 14.40329218106996,
                "kept_percent_concrete": 34.27230046948357,
                "kept_percent_lambda": 65.72769953051643,
                "num_examples": 3,
                "num_explored_concrete": 142,
                "num_explored_lambda": 482,
                "num_explored_none": 105,
                "num_inputs": 1,
                "num_kept_concrete": 73,
                "num_kept_lambda": 140,
                "num_values_explored": 729,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2479
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.33651007595472,
            "num_unique_values": 1130,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.70182114705083,
                "explored_percent_lambda": 35.03669475400924,
                "explored_percent_none": 22.261484098939928,
                "kept_percent_concrete": 42.03027604630454,
                "kept_percent_lambda": 57.96972395369546,
                "num_examples": 3,
                "num_explored_concrete": 1571,
                "num_explored_lambda": 1289,
                "num_explored_none": 819,
                "num_inputs": 2,
                "num_kept_concrete": 472,
                "num_kept_lambda": 651,
                "num_values_explored": 3679,
                "num_values_kept": 1123,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41157
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.318320537917316,
            "num_unique_values": 558,
            "solution": "Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), Take(-1, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 35.67501527183873,
                "explored_percent_lambda": 42.51679902260232,
                "explored_percent_none": 21.808185705558948,
                "kept_percent_concrete": 46.73913043478261,
                "kept_percent_lambda": 53.26086956521739,
                "num_examples": 3,
                "num_explored_concrete": 584,
                "num_explored_lambda": 696,
                "num_explored_none": 357,
                "num_inputs": 1,
                "num_kept_concrete": 258,
                "num_kept_lambda": 294,
                "num_values_explored": 1637,
                "num_values_kept": 552,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4087
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.31389943195973,
            "num_unique_values": 1130,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.788780280492986,
                "explored_percent_lambda": 28.113047173820654,
                "explored_percent_none": 23.098172545686356,
                "kept_percent_concrete": 45.99644128113879,
                "kept_percent_lambda": 54.00355871886121,
                "num_examples": 3,
                "num_explored_concrete": 2296,
                "num_explored_lambda": 1323,
                "num_explored_none": 1087,
                "num_inputs": 1,
                "num_kept_concrete": 517,
                "num_kept_lambda": 607,
                "num_values_explored": 4706,
                "num_values_kept": 1124,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45558
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19497950398363173,
            "num_unique_values": 120,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 35.22012578616352,
                "explored_percent_lambda": 58.490566037735846,
                "explored_percent_none": 6.289308176100629,
                "kept_percent_concrete": 27.43362831858407,
                "kept_percent_lambda": 72.56637168141593,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 93,
                "num_explored_none": 10,
                "num_inputs": 2,
                "num_kept_concrete": 31,
                "num_kept_lambda": 82,
                "num_values_explored": 159,
                "num_values_kept": 113,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 159
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.13703646406066,
            "num_unique_values": 1195,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.891851575610666,
                "explored_percent_lambda": 14.7865000932314,
                "explored_percent_none": 25.321648331157935,
                "kept_percent_concrete": 71.65685449957948,
                "kept_percent_lambda": 28.343145500420523,
                "num_examples": 5,
                "num_explored_concrete": 3212,
                "num_explored_lambda": 793,
                "num_explored_none": 1358,
                "num_inputs": 1,
                "num_kept_concrete": 852,
                "num_kept_lambda": 337,
                "num_values_explored": 5363,
                "num_values_kept": 1189,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 54575
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.90452052594628,
            "num_unique_values": 982,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.19672131147541,
                "explored_percent_lambda": 29.48087431693989,
                "explored_percent_none": 22.3224043715847,
                "kept_percent_concrete": 43.17948717948718,
                "kept_percent_lambda": 56.82051282051282,
                "num_examples": 3,
                "num_explored_concrete": 1764,
                "num_explored_lambda": 1079,
                "num_explored_none": 817,
                "num_inputs": 2,
                "num_kept_concrete": 421,
                "num_kept_lambda": 554,
                "num_values_explored": 3660,
                "num_values_kept": 975,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41989
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6980137329082936,
            "num_unique_values": 340,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.98876404494382,
                "explored_percent_lambda": 25.140449438202246,
                "explored_percent_none": 15.870786516853933,
                "kept_percent_concrete": 60.17964071856287,
                "kept_percent_lambda": 39.82035928143713,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 179,
                "num_explored_none": 113,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 133,
                "num_values_explored": 712,
                "num_values_kept": 334,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 712
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.63183729595039,
            "num_unique_values": 1084,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.750402576489535,
                "explored_percent_lambda": 21.095008051529792,
                "explored_percent_none": 24.154589371980677,
                "kept_percent_concrete": 54.83271375464684,
                "kept_percent_lambda": 45.16728624535316,
                "num_examples": 3,
                "num_explored_concrete": 2720,
                "num_explored_lambda": 1048,
                "num_explored_none": 1200,
                "num_inputs": 3,
                "num_kept_concrete": 590,
                "num_kept_lambda": 486,
                "num_values_explored": 4968,
                "num_values_kept": 1076,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48646
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6167439259588718,
            "num_unique_values": 347,
            "solution": "Last(Map((lambda u1: ((lambda v1: fn_5(v1, x)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.66349583828775,
                "explored_percent_lambda": 26.397146254458978,
                "explored_percent_none": 10.93935790725327,
                "kept_percent_concrete": 59.82404692082111,
                "kept_percent_lambda": 40.17595307917889,
                "num_examples": 5,
                "num_explored_concrete": 527,
                "num_explored_lambda": 222,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 137,
                "num_values_explored": 841,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 841
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.50781501305755,
            "num_unique_values": 965,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.37270341207349,
                "explored_percent_lambda": 27.559055118110237,
                "explored_percent_none": 24.06824146981627,
                "kept_percent_concrete": 50.260688216892596,
                "kept_percent_lambda": 49.739311783107404,
                "num_examples": 3,
                "num_explored_concrete": 1843,
                "num_explored_lambda": 1050,
                "num_explored_none": 917,
                "num_inputs": 1,
                "num_kept_concrete": 482,
                "num_kept_lambda": 477,
                "num_values_explored": 3810,
                "num_values_kept": 959,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44207
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.51011633989401,
            "num_unique_values": 972,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.428072799800546,
                "explored_percent_lambda": 22.089254549987533,
                "explored_percent_none": 24.482672650211917,
                "kept_percent_concrete": 55.751295336787564,
                "kept_percent_lambda": 44.248704663212436,
                "num_examples": 3,
                "num_explored_concrete": 2143,
                "num_explored_lambda": 886,
                "num_explored_none": 982,
                "num_inputs": 2,
                "num_kept_concrete": 538,
                "num_kept_lambda": 427,
                "num_values_explored": 4011,
                "num_values_kept": 965,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46345
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.7058371630264446,
            "num_unique_values": 301,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.45286506469501,
                "explored_percent_lambda": 32.90203327171904,
                "explored_percent_none": 11.645101663585953,
                "kept_percent_concrete": 54.23728813559322,
                "kept_percent_lambda": 45.76271186440678,
                "num_examples": 5,
                "num_explored_concrete": 300,
                "num_explored_lambda": 178,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 135,
                "num_values_explored": 541,
                "num_values_kept": 295,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.1900443690829,
            "num_unique_values": 256,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 31.051752921535893,
                "explored_percent_lambda": 58.931552587646074,
                "explored_percent_none": 10.01669449081803,
                "kept_percent_concrete": 39.2,
                "kept_percent_lambda": 60.8,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 353,
                "num_explored_none": 60,
                "num_inputs": 1,
                "num_kept_concrete": 98,
                "num_kept_lambda": 152,
                "num_values_explored": 599,
                "num_values_kept": 250,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 17356
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.42323157098144,
            "num_unique_values": 927,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 42.269832078749275,
                "explored_percent_lambda": 30.39953676896352,
                "explored_percent_none": 27.330631152287204,
                "kept_percent_concrete": 48.85993485342019,
                "kept_percent_lambda": 51.14006514657981,
                "num_examples": 3,
                "num_explored_concrete": 1460,
                "num_explored_lambda": 1050,
                "num_explored_none": 944,
                "num_inputs": 1,
                "num_kept_concrete": 450,
                "num_kept_lambda": 471,
                "num_values_explored": 3454,
                "num_values_kept": 921,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 38716
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.31114564603194594,
            "num_unique_values": 162,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.732510288065846,
                "explored_percent_lambda": 34.5679012345679,
                "explored_percent_none": 10.699588477366255,
                "kept_percent_concrete": 52.903225806451616,
                "kept_percent_lambda": 47.096774193548384,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 84,
                "num_explored_none": 26,
                "num_inputs": 2,
                "num_kept_concrete": 82,
                "num_kept_lambda": 73,
                "num_values_explored": 243,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 243
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.443196709966287,
            "num_unique_values": 261,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u1, u2)), Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 32.8,
                "explored_percent_lambda": 55.52,
                "explored_percent_none": 11.68,
                "kept_percent_concrete": 41.96078431372549,
                "kept_percent_lambda": 58.03921568627451,
                "num_examples": 3,
                "num_explored_concrete": 205,
                "num_explored_lambda": 347,
                "num_explored_none": 73,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 148,
                "num_values_explored": 625,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2375
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.23399659898132,
            "num_unique_values": 750,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 58.60113421550095,
                "explored_percent_lambda": 22.258979206049148,
                "explored_percent_none": 19.139886578449904,
                "kept_percent_concrete": 70.52489905787348,
                "kept_percent_lambda": 29.475100942126513,
                "num_examples": 5,
                "num_explored_concrete": 1240,
                "num_explored_lambda": 471,
                "num_explored_none": 405,
                "num_inputs": 2,
                "num_kept_concrete": 524,
                "num_kept_lambda": 219,
                "num_values_explored": 2116,
                "num_values_kept": 743,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8406
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.17581284593325,
            "num_unique_values": 1264,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.03980857080705,
                "explored_percent_lambda": 17.46791385686317,
                "explored_percent_none": 21.49227757232978,
                "kept_percent_concrete": 68.89419252187749,
                "kept_percent_lambda": 31.105807478122514,
                "num_examples": 5,
                "num_explored_concrete": 2806,
                "num_explored_lambda": 803,
                "num_explored_none": 988,
                "num_inputs": 2,
                "num_kept_concrete": 866,
                "num_kept_lambda": 391,
                "num_values_explored": 4597,
                "num_values_kept": 1257,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49651
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4449993910966441,
            "num_unique_values": 275,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 53.44827586206897,
                "explored_percent_lambda": 35.24904214559387,
                "explored_percent_none": 11.302681992337165,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 5,
                "num_explored_concrete": 279,
                "num_explored_lambda": 184,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 133,
                "num_values_explored": 522,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 522
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16142111900263,
            "num_unique_values": 1073,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.402540302882265,
                "explored_percent_lambda": 23.302393746946752,
                "explored_percent_none": 18.295065950170983,
                "kept_percent_concrete": 57.97373358348968,
                "kept_percent_lambda": 42.02626641651032,
                "num_examples": 3,
                "num_explored_concrete": 2391,
                "num_explored_lambda": 954,
                "num_explored_none": 749,
                "num_inputs": 2,
                "num_kept_concrete": 618,
                "num_kept_lambda": 448,
                "num_values_explored": 4094,
                "num_values_kept": 1066,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46361
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.45166572497692,
            "num_unique_values": 1018,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.359621451104104,
                "explored_percent_lambda": 21.503680336487907,
                "explored_percent_none": 20.136698212407993,
                "kept_percent_concrete": 55.68743818001978,
                "kept_percent_lambda": 44.31256181998022,
                "num_examples": 3,
                "num_explored_concrete": 2220,
                "num_explored_lambda": 818,
                "num_explored_none": 766,
                "num_inputs": 2,
                "num_kept_concrete": 563,
                "num_kept_lambda": 448,
                "num_values_explored": 3804,
                "num_values_kept": 1011,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44163
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.106112573063001,
            "num_unique_values": 605,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.52366686638706,
                "explored_percent_lambda": 33.5530257639305,
                "explored_percent_none": 11.923307369682444,
                "kept_percent_concrete": 52.0066889632107,
                "kept_percent_lambda": 47.9933110367893,
                "num_examples": 3,
                "num_explored_concrete": 910,
                "num_explored_lambda": 560,
                "num_explored_none": 199,
                "num_inputs": 2,
                "num_kept_concrete": 311,
                "num_kept_lambda": 287,
                "num_values_explored": 1669,
                "num_values_kept": 598,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8111
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.38320997497067,
            "num_unique_values": 1159,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.62556000943174,
                "explored_percent_lambda": 19.594435274699364,
                "explored_percent_none": 12.780004715868898,
                "kept_percent_concrete": 66.75347222222223,
                "kept_percent_lambda": 33.24652777777778,
                "num_examples": 5,
                "num_explored_concrete": 2868,
                "num_explored_lambda": 831,
                "num_explored_none": 542,
                "num_inputs": 2,
                "num_kept_concrete": 769,
                "num_kept_lambda": 383,
                "num_values_explored": 4241,
                "num_values_kept": 1152,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41557
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5857874531066045,
            "num_unique_values": 281,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.15942028985507,
                "explored_percent_lambda": 32.608695652173914,
                "explored_percent_none": 11.231884057971014,
                "kept_percent_concrete": 53.64963503649635,
                "kept_percent_lambda": 46.35036496350365,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 180,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 147,
                "num_kept_lambda": 127,
                "num_values_explored": 552,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 552
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.93734685191885,
            "num_unique_values": 1124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.66467065868263,
                "explored_percent_lambda": 23.688622754491018,
                "explored_percent_none": 24.646706586826348,
                "kept_percent_concrete": 52.193375111906896,
                "kept_percent_lambda": 47.806624888093104,
                "num_examples": 3,
                "num_explored_concrete": 2157,
                "num_explored_lambda": 989,
                "num_explored_none": 1029,
                "num_inputs": 2,
                "num_kept_concrete": 583,
                "num_kept_lambda": 534,
                "num_values_explored": 4175,
                "num_values_kept": 1117,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42414
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.441377079929225,
            "num_unique_values": 1216,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u2, u1)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.49222797927461,
                "explored_percent_lambda": 15.155440414507773,
                "explored_percent_none": 24.352331606217618,
                "kept_percent_concrete": 71.62944582299421,
                "kept_percent_lambda": 28.37055417700579,
                "num_examples": 5,
                "num_explored_concrete": 2802,
                "num_explored_lambda": 702,
                "num_explored_none": 1128,
                "num_inputs": 2,
                "num_kept_concrete": 866,
                "num_kept_lambda": 343,
                "num_values_explored": 4632,
                "num_values_kept": 1209,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6732
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2271451411070302,
            "num_unique_values": 164,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: 1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.02788844621514,
                "explored_percent_lambda": 44.223107569721115,
                "explored_percent_none": 12.749003984063744,
                "kept_percent_concrete": 41.139240506329116,
                "kept_percent_lambda": 58.860759493670884,
                "num_examples": 5,
                "num_explored_concrete": 108,
                "num_explored_lambda": 111,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 93,
                "num_values_explored": 251,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 251
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.22892243694514,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.9010989010989,
                "explored_percent_lambda": 27.760334903192046,
                "explored_percent_none": 23.338566195709053,
                "kept_percent_concrete": 50.77559462254395,
                "kept_percent_lambda": 49.22440537745605,
                "num_examples": 3,
                "num_explored_concrete": 1869,
                "num_explored_lambda": 1061,
                "num_explored_none": 892,
                "num_inputs": 1,
                "num_kept_concrete": 491,
                "num_kept_lambda": 476,
                "num_values_explored": 3822,
                "num_values_kept": 967,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42602
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 68.44192131899763,
            "num_unique_values": 898,
            "solution": "Filter((lambda u1: ((lambda v1: Equal(v1, ((lambda v1: Access(v1, x)))(v1))))(u1)), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 49.95021573182874,
                "explored_percent_lambda": 31.530036508463326,
                "explored_percent_none": 18.519747759707933,
                "kept_percent_concrete": 48.318385650224215,
                "kept_percent_lambda": 51.681614349775785,
                "num_examples": 3,
                "num_explored_concrete": 1505,
                "num_explored_lambda": 950,
                "num_explored_none": 558,
                "num_inputs": 1,
                "num_kept_concrete": 431,
                "num_kept_lambda": 461,
                "num_values_explored": 3013,
                "num_values_kept": 892,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 30153
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22052658593747765,
            "num_unique_values": 150,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.67796610169491,
                "explored_percent_lambda": 50.0,
                "explored_percent_none": 9.322033898305085,
                "kept_percent_concrete": 31.944444444444443,
                "kept_percent_lambda": 68.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 118,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 98,
                "num_values_explored": 236,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 236
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.14666814904194325,
            "num_unique_values": 117,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.204819277108435,
                "explored_percent_lambda": 41.566265060240966,
                "explored_percent_none": 7.228915662650603,
                "kept_percent_concrete": 44.95412844036697,
                "kept_percent_lambda": 55.04587155963303,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 69,
                "num_explored_none": 12,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 60,
                "num_values_explored": 166,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 166
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.28678743506316,
            "num_unique_values": 1234,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.63958513396716,
                "explored_percent_lambda": 23.141745894554884,
                "explored_percent_none": 21.21866897147796,
                "kept_percent_concrete": 55.13029315960912,
                "kept_percent_lambda": 44.86970684039088,
                "num_examples": 3,
                "num_explored_concrete": 2575,
                "num_explored_lambda": 1071,
                "num_explored_none": 982,
                "num_inputs": 1,
                "num_kept_concrete": 677,
                "num_kept_lambda": 551,
                "num_values_explored": 4628,
                "num_values_kept": 1228,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44463
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.1417357029859,
            "num_unique_values": 1088,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.19980993110002,
                "explored_percent_lambda": 23.734853884533145,
                "explored_percent_none": 25.06533618436683,
                "kept_percent_concrete": 58.00185013876041,
                "kept_percent_lambda": 41.99814986123959,
                "num_examples": 3,
                "num_explored_concrete": 2155,
                "num_explored_lambda": 999,
                "num_explored_none": 1055,
                "num_inputs": 2,
                "num_kept_concrete": 627,
                "num_kept_lambda": 454,
                "num_values_explored": 4209,
                "num_values_kept": 1081,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 42901
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.01930220599752,
            "num_unique_values": 540,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(v1, a)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 45.204795204795204,
                "explored_percent_lambda": 25.824175824175825,
                "explored_percent_none": 28.97102897102897,
                "kept_percent_concrete": 60.526315789473685,
                "kept_percent_lambda": 39.473684210526315,
                "num_examples": 3,
                "num_explored_concrete": 905,
                "num_explored_lambda": 517,
                "num_explored_none": 580,
                "num_inputs": 3,
                "num_kept_concrete": 322,
                "num_kept_lambda": 210,
                "num_values_explored": 2002,
                "num_values_kept": 532,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13305
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.13659548899159,
            "num_unique_values": 261,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v2, v1)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 22.828507795100222,
                "explored_percent_lambda": 50.89086859688196,
                "explored_percent_none": 26.280623608017816,
                "kept_percent_concrete": 41.96078431372549,
                "kept_percent_lambda": 58.03921568627451,
                "num_examples": 3,
                "num_explored_concrete": 205,
                "num_explored_lambda": 457,
                "num_explored_none": 236,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 148,
                "num_values_explored": 898,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 16337
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.71813402499538,
            "num_unique_values": 1152,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 43.696027633851465,
                "explored_percent_lambda": 31.926967678263015,
                "explored_percent_none": 24.377004687885517,
                "kept_percent_concrete": 39.61605584642234,
                "kept_percent_lambda": 60.38394415357766,
                "num_examples": 3,
                "num_explored_concrete": 1771,
                "num_explored_lambda": 1294,
                "num_explored_none": 988,
                "num_inputs": 1,
                "num_kept_concrete": 454,
                "num_kept_lambda": 692,
                "num_values_explored": 4053,
                "num_values_kept": 1146,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43584
            },
            "success": false,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2725875349715352,
            "num_unique_values": 164,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.099616858237546,
                "explored_percent_lambda": 53.25670498084291,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 27.848101265822784,
                "kept_percent_lambda": 72.15189873417721,
                "num_examples": 3,
                "num_explored_concrete": 89,
                "num_explored_lambda": 139,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 114,
                "num_values_explored": 261,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 261
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.49662680504844,
            "num_unique_values": 1188,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.69164442619585,
                "explored_percent_lambda": 16.69061794292753,
                "explored_percent_none": 21.61773763087662,
                "kept_percent_concrete": 68.92464013547841,
                "kept_percent_lambda": 31.07535986452159,
                "num_examples": 5,
                "num_explored_concrete": 3005,
                "num_explored_lambda": 813,
                "num_explored_none": 1053,
                "num_inputs": 2,
                "num_kept_concrete": 814,
                "num_kept_lambda": 367,
                "num_values_explored": 4871,
                "num_values_kept": 1181,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46711
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.56
}