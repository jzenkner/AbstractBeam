{
    "num_tasks": 50,
    "num_tasks_solved": 28,
    "results": [
        {
            "elapsed_time": 102.11170795396902,
            "num_unique_values": 1134,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.54184659675098,
                "explored_percent_lambda": 19.16512440880115,
                "explored_percent_none": 25.293028994447873,
                "kept_percent_concrete": 56.34427684117125,
                "kept_percent_lambda": 43.65572315882875,
                "num_examples": 3,
                "num_explored_concrete": 2701,
                "num_explored_lambda": 932,
                "num_explored_none": 1230,
                "num_inputs": 2,
                "num_kept_concrete": 635,
                "num_kept_lambda": 492,
                "num_values_explored": 4863,
                "num_values_kept": 1127,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52349
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2594694140134379,
            "num_unique_values": 163,
            "solution": "fn_0(Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 41.901408450704224,
                "explored_percent_none": 17.95774647887324,
                "kept_percent_concrete": 36.94267515923567,
                "kept_percent_lambda": 63.05732484076433,
                "num_examples": 5,
                "num_explored_concrete": 114,
                "num_explored_lambda": 119,
                "num_explored_none": 51,
                "num_inputs": 1,
                "num_kept_concrete": 58,
                "num_kept_lambda": 99,
                "num_values_explored": 284,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18822240899317,
            "num_unique_values": 1258,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.65692007797271,
                "explored_percent_lambda": 14.132553606237817,
                "explored_percent_none": 24.210526315789473,
                "kept_percent_concrete": 74.98001598721024,
                "kept_percent_lambda": 25.019984012789767,
                "num_examples": 5,
                "num_explored_concrete": 3163,
                "num_explored_lambda": 725,
                "num_explored_none": 1242,
                "num_inputs": 2,
                "num_kept_concrete": 938,
                "num_kept_lambda": 313,
                "num_values_explored": 5130,
                "num_values_kept": 1251,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52715
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4463587061036378,
            "num_unique_values": 314,
            "solution": "Reverse(Take(fn_0(-1, x), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.09041591320072,
                "explored_percent_lambda": 39.42133815551537,
                "explored_percent_none": 10.488245931283906,
                "kept_percent_concrete": 46.753246753246756,
                "kept_percent_lambda": 53.246753246753244,
                "num_examples": 3,
                "num_explored_concrete": 277,
                "num_explored_lambda": 218,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 144,
                "num_kept_lambda": 164,
                "num_values_explored": 553,
                "num_values_kept": 308,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 553
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.678348737070337,
            "num_unique_values": 552,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 0)))(u2)), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.45238095238095,
                "explored_percent_lambda": 35.714285714285715,
                "explored_percent_none": 20.833333333333332,
                "kept_percent_concrete": 60.43956043956044,
                "kept_percent_lambda": 39.56043956043956,
                "num_examples": 5,
                "num_explored_concrete": 657,
                "num_explored_lambda": 540,
                "num_explored_none": 315,
                "num_inputs": 1,
                "num_kept_concrete": 330,
                "num_kept_lambda": 216,
                "num_values_explored": 1512,
                "num_values_kept": 546,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3262
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17129353701603,
            "num_unique_values": 1113,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.148329258353705,
                "explored_percent_lambda": 17.6039119804401,
                "explored_percent_none": 23.247758761206192,
                "kept_percent_concrete": 61.301989150090414,
                "kept_percent_lambda": 38.698010849909586,
                "num_examples": 3,
                "num_explored_concrete": 2903,
                "num_explored_lambda": 864,
                "num_explored_none": 1141,
                "num_inputs": 2,
                "num_kept_concrete": 678,
                "num_kept_lambda": 428,
                "num_values_explored": 4908,
                "num_values_kept": 1106,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50196
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.1876896439353,
            "num_unique_values": 558,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 35.33724340175953,
                "explored_percent_lambda": 35.63049853372434,
                "explored_percent_none": 29.032258064516128,
                "kept_percent_concrete": 45.63636363636363,
                "kept_percent_lambda": 54.36363636363637,
                "num_examples": 3,
                "num_explored_concrete": 723,
                "num_explored_lambda": 729,
                "num_explored_none": 594,
                "num_inputs": 3,
                "num_kept_concrete": 251,
                "num_kept_lambda": 299,
                "num_values_explored": 2046,
                "num_values_kept": 550,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 12884
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.59568269900046,
            "num_unique_values": 844,
            "solution": "Maximum(Map((lambda u1: ((lambda v1: Sum(((lambda v1: Take(v1, x)))(v1))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 56.74481821270812,
                "explored_percent_lambda": 24.057084607543324,
                "explored_percent_none": 19.198097179748554,
                "kept_percent_concrete": 66.22911694510739,
                "kept_percent_lambda": 33.7708830548926,
                "num_examples": 5,
                "num_explored_concrete": 1670,
                "num_explored_lambda": 708,
                "num_explored_none": 565,
                "num_inputs": 1,
                "num_kept_concrete": 555,
                "num_kept_lambda": 283,
                "num_values_explored": 2943,
                "num_values_kept": 838,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 25246
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.15335792105179,
            "num_unique_values": 1111,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.573053758643766,
                "explored_percent_lambda": 19.072049966540263,
                "explored_percent_none": 23.35489627481597,
                "kept_percent_concrete": 67.96380090497738,
                "kept_percent_lambda": 32.036199095022624,
                "num_examples": 5,
                "num_explored_concrete": 2581,
                "num_explored_lambda": 855,
                "num_explored_none": 1047,
                "num_inputs": 1,
                "num_kept_concrete": 751,
                "num_kept_lambda": 354,
                "num_values_explored": 4483,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50575
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 90.17631314496975,
            "num_unique_values": 1227,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 68.91247833622184,
                "explored_percent_lambda": 13.799826689774697,
                "explored_percent_none": 17.287694974003465,
                "kept_percent_concrete": 74.42622950819673,
                "kept_percent_lambda": 25.57377049180328,
                "num_examples": 5,
                "num_explored_concrete": 3181,
                "num_explored_lambda": 637,
                "num_explored_none": 798,
                "num_inputs": 2,
                "num_kept_concrete": 908,
                "num_kept_lambda": 312,
                "num_values_explored": 4616,
                "num_values_kept": 1220,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 45670
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.73531275393907,
            "num_unique_values": 1119,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 45.813781180538406,
                "explored_percent_lambda": 30.600148184736973,
                "explored_percent_none": 23.586070634724624,
                "kept_percent_concrete": 43.5759209344115,
                "kept_percent_lambda": 56.4240790655885,
                "num_examples": 3,
                "num_explored_concrete": 1855,
                "num_explored_lambda": 1239,
                "num_explored_none": 955,
                "num_inputs": 1,
                "num_kept_concrete": 485,
                "num_kept_lambda": 628,
                "num_values_explored": 4049,
                "num_values_kept": 1113,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44095
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6956250100629404,
            "num_unique_values": 218,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 18.989071038251367,
                "explored_percent_lambda": 65.1639344262295,
                "explored_percent_none": 15.846994535519126,
                "kept_percent_concrete": 32.075471698113205,
                "kept_percent_lambda": 67.9245283018868,
                "num_examples": 3,
                "num_explored_concrete": 139,
                "num_explored_lambda": 477,
                "num_explored_none": 116,
                "num_inputs": 1,
                "num_kept_concrete": 68,
                "num_kept_lambda": 144,
                "num_values_explored": 732,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2482
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32672586501576,
            "num_unique_values": 1100,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 38.303941908713696,
                "explored_percent_lambda": 33.11721991701245,
                "explored_percent_none": 28.57883817427386,
                "kept_percent_concrete": 41.72003659652333,
                "kept_percent_lambda": 58.27996340347667,
                "num_examples": 3,
                "num_explored_concrete": 1477,
                "num_explored_lambda": 1277,
                "num_explored_none": 1102,
                "num_inputs": 2,
                "num_kept_concrete": 456,
                "num_kept_lambda": 637,
                "num_values_explored": 3856,
                "num_values_kept": 1093,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 40853
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.852036012918688,
            "num_unique_values": 833,
            "solution": "Take(-1, Map((lambda u1: ((lambda v1: Add(v1, Last(x))))(u1)), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.803892215568865,
                "explored_percent_lambda": 35.366766467065865,
                "explored_percent_none": 22.82934131736527,
                "kept_percent_concrete": 46.67472793228537,
                "kept_percent_lambda": 53.32527206771463,
                "num_examples": 3,
                "num_explored_concrete": 1117,
                "num_explored_lambda": 945,
                "num_explored_none": 610,
                "num_inputs": 1,
                "num_kept_concrete": 386,
                "num_kept_lambda": 441,
                "num_values_explored": 2672,
                "num_values_kept": 827,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5122
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.83468357403763,
            "num_unique_values": 1097,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.39963461977621,
                "explored_percent_lambda": 28.33980360812971,
                "explored_percent_none": 21.260561772094086,
                "kept_percent_concrete": 46.562786434463796,
                "kept_percent_lambda": 53.437213565536204,
                "num_examples": 3,
                "num_explored_concrete": 2207,
                "num_explored_lambda": 1241,
                "num_explored_none": 931,
                "num_inputs": 1,
                "num_kept_concrete": 508,
                "num_kept_lambda": 583,
                "num_values_explored": 4379,
                "num_values_kept": 1091,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45118
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2029273749794811,
            "num_unique_values": 120,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 35.22012578616352,
                "explored_percent_lambda": 58.490566037735846,
                "explored_percent_none": 6.289308176100629,
                "kept_percent_concrete": 27.43362831858407,
                "kept_percent_lambda": 72.56637168141593,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 93,
                "num_explored_none": 10,
                "num_inputs": 2,
                "num_kept_concrete": 31,
                "num_kept_lambda": 82,
                "num_values_explored": 159,
                "num_values_kept": 113,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 159
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.22924131597392,
            "num_unique_values": 1144,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.22662010089251,
                "explored_percent_lambda": 15.657741559953434,
                "explored_percent_none": 26.115638339154057,
                "kept_percent_concrete": 70.82601054481546,
                "kept_percent_lambda": 29.173989455184536,
                "num_examples": 5,
                "num_explored_concrete": 3001,
                "num_explored_lambda": 807,
                "num_explored_none": 1346,
                "num_inputs": 1,
                "num_kept_concrete": 806,
                "num_kept_lambda": 332,
                "num_values_explored": 5154,
                "num_values_kept": 1138,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52377
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.50407833897043,
            "num_unique_values": 1072,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.372262773722625,
                "explored_percent_lambda": 29.48905109489051,
                "explored_percent_none": 23.138686131386862,
                "kept_percent_concrete": 43.568075117370896,
                "kept_percent_lambda": 56.431924882629104,
                "num_examples": 3,
                "num_explored_concrete": 1947,
                "num_explored_lambda": 1212,
                "num_explored_none": 951,
                "num_inputs": 2,
                "num_kept_concrete": 464,
                "num_kept_lambda": 601,
                "num_values_explored": 4110,
                "num_values_kept": 1065,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43465
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.7832647670293227,
            "num_unique_values": 340,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.98876404494382,
                "explored_percent_lambda": 25.140449438202246,
                "explored_percent_none": 15.870786516853933,
                "kept_percent_concrete": 60.17964071856287,
                "kept_percent_lambda": 39.82035928143713,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 179,
                "num_explored_none": 113,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 133,
                "num_values_explored": 712,
                "num_values_kept": 334,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 712
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40394888701849,
            "num_unique_values": 926,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.66467065868263,
                "explored_percent_lambda": 21.53293413173653,
                "explored_percent_none": 26.802395209580837,
                "kept_percent_concrete": 54.68409586056645,
                "kept_percent_lambda": 45.31590413943355,
                "num_examples": 3,
                "num_explored_concrete": 2157,
                "num_explored_lambda": 899,
                "num_explored_none": 1119,
                "num_inputs": 3,
                "num_kept_concrete": 502,
                "num_kept_lambda": 416,
                "num_values_explored": 4175,
                "num_values_kept": 918,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48321
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.906464905012399,
            "num_unique_values": 347,
            "solution": "Last(Map((lambda u1: ((lambda v1: fn_5(v1, x)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.66349583828775,
                "explored_percent_lambda": 26.397146254458978,
                "explored_percent_none": 10.93935790725327,
                "kept_percent_concrete": 59.82404692082111,
                "kept_percent_lambda": 40.17595307917889,
                "num_examples": 5,
                "num_explored_concrete": 527,
                "num_explored_lambda": 222,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 137,
                "num_values_explored": 841,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 841
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.84395661600865,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.12294182217344,
                "explored_percent_lambda": 29.813391877058177,
                "explored_percent_none": 22.063666300768386,
                "kept_percent_concrete": 47.63542562338779,
                "kept_percent_lambda": 52.36457437661221,
                "num_examples": 3,
                "num_explored_concrete": 2192,
                "num_explored_lambda": 1358,
                "num_explored_none": 1005,
                "num_inputs": 1,
                "num_kept_concrete": 554,
                "num_kept_lambda": 609,
                "num_values_explored": 4555,
                "num_values_kept": 1163,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 41778
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.38862468593288,
            "num_unique_values": 1103,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.06783369803063,
                "explored_percent_lambda": 22.450765864332602,
                "explored_percent_none": 20.48140043763676,
                "kept_percent_concrete": 55.2007299270073,
                "kept_percent_lambda": 44.7992700729927,
                "num_examples": 3,
                "num_explored_concrete": 2608,
                "num_explored_lambda": 1026,
                "num_explored_none": 936,
                "num_inputs": 2,
                "num_kept_concrete": 605,
                "num_kept_lambda": 491,
                "num_values_explored": 4570,
                "num_values_kept": 1096,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47648
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5417411900125444,
            "num_unique_values": 301,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.45286506469501,
                "explored_percent_lambda": 32.90203327171904,
                "explored_percent_none": 11.645101663585953,
                "kept_percent_concrete": 54.23728813559322,
                "kept_percent_lambda": 45.76271186440678,
                "num_examples": 5,
                "num_explored_concrete": 300,
                "num_explored_lambda": 178,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 135,
                "num_values_explored": 541,
                "num_values_kept": 295,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.332076305057853,
            "num_unique_values": 604,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 45.96231493943473,
                "explored_percent_lambda": 37.75235531628533,
                "explored_percent_none": 16.285329744279945,
                "kept_percent_concrete": 49.331103678929765,
                "kept_percent_lambda": 50.668896321070235,
                "num_examples": 3,
                "num_explored_concrete": 683,
                "num_explored_lambda": 561,
                "num_explored_none": 242,
                "num_inputs": 1,
                "num_kept_concrete": 295,
                "num_kept_lambda": 303,
                "num_values_explored": 1486,
                "num_values_kept": 598,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8440
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.133300694054924,
            "num_unique_values": 563,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 34.692671394799056,
                "explored_percent_lambda": 41.607565011820334,
                "explored_percent_none": 23.699763593380613,
                "kept_percent_concrete": 45.960502692998205,
                "kept_percent_lambda": 54.039497307001795,
                "num_examples": 3,
                "num_explored_concrete": 587,
                "num_explored_lambda": 704,
                "num_explored_none": 401,
                "num_inputs": 1,
                "num_kept_concrete": 256,
                "num_kept_lambda": 301,
                "num_values_explored": 1692,
                "num_values_kept": 557,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 25962
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25060843292158097,
            "num_unique_values": 162,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.732510288065846,
                "explored_percent_lambda": 34.5679012345679,
                "explored_percent_none": 10.699588477366255,
                "kept_percent_concrete": 52.903225806451616,
                "kept_percent_lambda": 47.096774193548384,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 84,
                "num_explored_none": 26,
                "num_inputs": 2,
                "num_kept_concrete": 82,
                "num_kept_lambda": 73,
                "num_values_explored": 243,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 243
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.59152090805583,
            "num_unique_values": 1332,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.325103779768405,
                "explored_percent_lambda": 24.644963950185712,
                "explored_percent_none": 19.029932270045883,
                "kept_percent_concrete": 51.73453996983409,
                "kept_percent_lambda": 48.26546003016591,
                "num_examples": 3,
                "num_explored_concrete": 2578,
                "num_explored_lambda": 1128,
                "num_explored_none": 871,
                "num_inputs": 1,
                "num_kept_concrete": 686,
                "num_kept_lambda": 640,
                "num_values_explored": 4577,
                "num_values_kept": 1326,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44943
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.994524015928619,
            "num_unique_values": 1091,
            "solution": "Min(Max(Access(k, x), Access(Add(1, 1), Sort(x))), Subtract(Maximum(x), k))",
            "solution_weight": 15,
            "stats": {
                "explored_percent_concrete": 68.8953488372093,
                "explored_percent_lambda": 16.540697674418606,
                "explored_percent_none": 14.563953488372093,
                "kept_percent_concrete": 73.80073800738008,
                "kept_percent_lambda": 26.199261992619927,
                "num_examples": 5,
                "num_explored_concrete": 2370,
                "num_explored_lambda": 569,
                "num_explored_none": 501,
                "num_inputs": 2,
                "num_kept_concrete": 800,
                "num_kept_lambda": 284,
                "num_values_explored": 3440,
                "num_values_kept": 1084,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5890
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.0196812429931,
            "num_unique_values": 1337,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.085559427022844,
                "explored_percent_lambda": 15.931087882307395,
                "explored_percent_none": 20.983352690669765,
                "kept_percent_concrete": 69.62406015037594,
                "kept_percent_lambda": 30.37593984962406,
                "num_examples": 5,
                "num_explored_concrete": 3259,
                "num_explored_lambda": 823,
                "num_explored_none": 1084,
                "num_inputs": 2,
                "num_kept_concrete": 926,
                "num_kept_lambda": 404,
                "num_values_explored": 5166,
                "num_values_kept": 1330,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53963
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3598756870487705,
            "num_unique_values": 275,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 53.44827586206897,
                "explored_percent_lambda": 35.24904214559387,
                "explored_percent_none": 11.302681992337165,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 5,
                "num_explored_concrete": 279,
                "num_explored_lambda": 184,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 133,
                "num_values_explored": 522,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 522
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 100.92110324895475,
            "num_unique_values": 1218,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.7597672485453,
                "explored_percent_lambda": 21.05153782211139,
                "explored_percent_none": 16.18869492934331,
                "kept_percent_concrete": 59.37241948802642,
                "kept_percent_lambda": 40.62758051197358,
                "num_examples": 3,
                "num_explored_concrete": 3020,
                "num_explored_lambda": 1013,
                "num_explored_none": 779,
                "num_inputs": 2,
                "num_kept_concrete": 719,
                "num_kept_lambda": 492,
                "num_values_explored": 4812,
                "num_values_kept": 1211,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48368
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.18968272698112,
            "num_unique_values": 1249,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.00396825396825,
                "explored_percent_lambda": 19.404761904761905,
                "explored_percent_none": 18.591269841269842,
                "kept_percent_concrete": 57.648953301127214,
                "kept_percent_lambda": 42.351046698872786,
                "num_examples": 3,
                "num_explored_concrete": 3125,
                "num_explored_lambda": 978,
                "num_explored_none": 937,
                "num_inputs": 2,
                "num_kept_concrete": 716,
                "num_kept_lambda": 526,
                "num_values_explored": 5040,
                "num_values_kept": 1242,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51205
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4134771870449185,
            "num_unique_values": 233,
            "solution": "Map((lambda u1: ((lambda v1: Access(v1, x)))(u1)), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.40619902120718,
                "explored_percent_lambda": 60.19575856443719,
                "explored_percent_none": 12.398042414355627,
                "kept_percent_concrete": 39.38053097345133,
                "kept_percent_lambda": 60.61946902654867,
                "num_examples": 3,
                "num_explored_concrete": 168,
                "num_explored_lambda": 369,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 89,
                "num_kept_lambda": 137,
                "num_values_explored": 613,
                "num_values_kept": 226,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 2363
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32271388405934,
            "num_unique_values": 1333,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.09811694747275,
                "explored_percent_lambda": 16.075322101090187,
                "explored_percent_none": 14.826560951437067,
                "kept_percent_concrete": 69.68325791855203,
                "kept_percent_lambda": 30.316742081447963,
                "num_examples": 5,
                "num_explored_concrete": 3486,
                "num_explored_lambda": 811,
                "num_explored_none": 748,
                "num_inputs": 2,
                "num_kept_concrete": 924,
                "num_kept_lambda": 402,
                "num_values_explored": 5045,
                "num_values_kept": 1326,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52121
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.47428678802680224,
            "num_unique_values": 281,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.15942028985507,
                "explored_percent_lambda": 32.608695652173914,
                "explored_percent_none": 11.231884057971014,
                "kept_percent_concrete": 53.64963503649635,
                "kept_percent_lambda": 46.35036496350365,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 180,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 147,
                "num_kept_lambda": 127,
                "num_values_explored": 552,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 552
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.60247833898757,
            "num_unique_values": 1169,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.31631269769544,
                "explored_percent_lambda": 25.10167193854496,
                "explored_percent_none": 24.582015363759602,
                "kept_percent_concrete": 49.82788296041308,
                "kept_percent_lambda": 50.17211703958692,
                "num_examples": 3,
                "num_explored_concrete": 2227,
                "num_explored_lambda": 1111,
                "num_explored_none": 1088,
                "num_inputs": 2,
                "num_kept_concrete": 579,
                "num_kept_lambda": 583,
                "num_values_explored": 4426,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47531
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.8595422829967,
            "num_unique_values": 1215,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1, v2: Multiply(v1, v2)))(u2, u1)), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 59.557387719678886,
                "explored_percent_lambda": 16.250813625515296,
                "explored_percent_none": 24.191798654805815,
                "kept_percent_concrete": 72.68211920529801,
                "kept_percent_lambda": 27.31788079470199,
                "num_examples": 5,
                "num_explored_concrete": 2745,
                "num_explored_lambda": 749,
                "num_explored_none": 1115,
                "num_inputs": 2,
                "num_kept_concrete": 878,
                "num_kept_lambda": 330,
                "num_values_explored": 4609,
                "num_values_kept": 1208,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 6709
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2392071639187634,
            "num_unique_values": 164,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: 1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.02788844621514,
                "explored_percent_lambda": 44.223107569721115,
                "explored_percent_none": 12.749003984063744,
                "kept_percent_concrete": 41.139240506329116,
                "kept_percent_lambda": 58.860759493670884,
                "num_examples": 5,
                "num_explored_concrete": 108,
                "num_explored_lambda": 111,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 93,
                "num_values_explored": 251,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 251
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.77743364998605,
            "num_unique_values": 1142,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.33417882054534,
                "explored_percent_lambda": 28.239272880997675,
                "explored_percent_none": 22.426548298456986,
                "kept_percent_concrete": 47.62323943661972,
                "kept_percent_lambda": 52.37676056338028,
                "num_examples": 3,
                "num_explored_concrete": 2334,
                "num_explored_lambda": 1336,
                "num_explored_none": 1061,
                "num_inputs": 1,
                "num_kept_concrete": 541,
                "num_kept_lambda": 595,
                "num_values_explored": 4731,
                "num_values_kept": 1136,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48542
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.770107954042032,
            "num_unique_values": 856,
            "solution": "Sort(Filter((lambda u1: ((lambda v1: Equal(v1, ((lambda v1: Access(v1, x)))(v1))))(u1)), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.217256789274664,
                "explored_percent_lambda": 32.65727053970436,
                "explored_percent_none": 15.125472671020969,
                "kept_percent_concrete": 48.0,
                "kept_percent_lambda": 52.0,
                "num_examples": 3,
                "num_explored_concrete": 1519,
                "num_explored_lambda": 950,
                "num_explored_none": 440,
                "num_inputs": 1,
                "num_kept_concrete": 408,
                "num_kept_lambda": 442,
                "num_values_explored": 2909,
                "num_values_kept": 850,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 15426
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3048439109697938,
            "num_unique_values": 150,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.67796610169491,
                "explored_percent_lambda": 50.0,
                "explored_percent_none": 9.322033898305085,
                "kept_percent_concrete": 31.944444444444443,
                "kept_percent_lambda": 68.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 118,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 98,
                "num_values_explored": 236,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 236
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.15446464298292994,
            "num_unique_values": 117,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.204819277108435,
                "explored_percent_lambda": 41.566265060240966,
                "explored_percent_none": 7.228915662650603,
                "kept_percent_concrete": 44.95412844036697,
                "kept_percent_lambda": 55.04587155963303,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 69,
                "num_explored_none": 12,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 60,
                "num_values_explored": 166,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 166
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21455888508353,
            "num_unique_values": 1251,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.5649063749211,
                "explored_percent_lambda": 22.806648432568903,
                "explored_percent_none": 21.628445192509993,
                "kept_percent_concrete": 55.18072289156626,
                "kept_percent_lambda": 44.81927710843374,
                "num_examples": 3,
                "num_explored_concrete": 2641,
                "num_explored_lambda": 1084,
                "num_explored_none": 1028,
                "num_inputs": 1,
                "num_kept_concrete": 687,
                "num_kept_lambda": 558,
                "num_values_explored": 4753,
                "num_values_kept": 1245,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47644
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.16212606104091,
            "num_unique_values": 1225,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.73020350594398,
                "explored_percent_lambda": 22.043119081200885,
                "explored_percent_none": 25.22667741285513,
                "kept_percent_concrete": 59.770114942528735,
                "kept_percent_lambda": 40.229885057471265,
                "num_examples": 3,
                "num_explored_concrete": 2617,
                "num_explored_lambda": 1094,
                "num_explored_none": 1252,
                "num_inputs": 2,
                "num_kept_concrete": 728,
                "num_kept_lambda": 490,
                "num_values_explored": 4963,
                "num_values_kept": 1218,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49087
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.546677430043928,
            "num_unique_values": 841,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.81118881118881,
                "explored_percent_lambda": 19.18881118881119,
                "explored_percent_none": 28.0,
                "kept_percent_concrete": 63.1452581032413,
                "kept_percent_lambda": 36.8547418967587,
                "num_examples": 3,
                "num_explored_concrete": 1888,
                "num_explored_lambda": 686,
                "num_explored_none": 1001,
                "num_inputs": 3,
                "num_kept_concrete": 526,
                "num_kept_lambda": 307,
                "num_values_explored": 3575,
                "num_values_kept": 833,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5325
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.492712853010744,
            "num_unique_values": 261,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u2, u1)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.196172248803826,
                "explored_percent_lambda": 48.08612440191388,
                "explored_percent_none": 25.717703349282296,
                "kept_percent_concrete": 43.13725490196079,
                "kept_percent_lambda": 56.86274509803921,
                "num_examples": 3,
                "num_explored_concrete": 219,
                "num_explored_lambda": 402,
                "num_explored_none": 215,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 145,
                "num_values_explored": 836,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 17144
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 76.01317230507266,
            "num_unique_values": 566,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 36.30017452006981,
                "explored_percent_lambda": 43.80453752181501,
                "explored_percent_none": 19.895287958115183,
                "kept_percent_concrete": 42.142857142857146,
                "kept_percent_lambda": 57.857142857142854,
                "num_examples": 3,
                "num_explored_concrete": 624,
                "num_explored_lambda": 753,
                "num_explored_none": 342,
                "num_inputs": 1,
                "num_kept_concrete": 236,
                "num_kept_lambda": 324,
                "num_values_explored": 1719,
                "num_values_kept": 560,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 35386
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2466321219690144,
            "num_unique_values": 164,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.099616858237546,
                "explored_percent_lambda": 53.25670498084291,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 27.848101265822784,
                "kept_percent_lambda": 72.15189873417721,
                "num_examples": 3,
                "num_explored_concrete": 89,
                "num_explored_lambda": 139,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 114,
                "num_values_explored": 261,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 261
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.31434990209527,
            "num_unique_values": 1282,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.650952472580336,
                "explored_percent_lambda": 15.451221858764672,
                "explored_percent_none": 22.897825668654992,
                "kept_percent_concrete": 71.29411764705883,
                "kept_percent_lambda": 28.705882352941178,
                "num_examples": 5,
                "num_explored_concrete": 3204,
                "num_explored_lambda": 803,
                "num_explored_none": 1190,
                "num_inputs": 2,
                "num_kept_concrete": 909,
                "num_kept_lambda": 366,
                "num_values_explored": 5197,
                "num_values_kept": 1275,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53215
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.56
}