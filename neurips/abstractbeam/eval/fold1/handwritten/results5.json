{
    "num_tasks": 50,
    "num_tasks_solved": 25,
    "results": [
        {
            "elapsed_time": 101.73869067896158,
            "num_unique_values": 1100,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.80667652651595,
                "explored_percent_lambda": 21.339530952884004,
                "explored_percent_none": 23.85379252060004,
                "kept_percent_concrete": 58.64592863677951,
                "kept_percent_lambda": 41.35407136322049,
                "num_examples": 3,
                "num_explored_concrete": 2594,
                "num_explored_lambda": 1010,
                "num_explored_none": 1129,
                "num_inputs": 2,
                "num_kept_concrete": 641,
                "num_kept_lambda": 452,
                "num_values_explored": 4733,
                "num_values_kept": 1093,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49475
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.3230861430056393,
            "num_unique_values": 163,
            "solution": "fn_0(Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.140845070422536,
                "explored_percent_lambda": 41.901408450704224,
                "explored_percent_none": 17.95774647887324,
                "kept_percent_concrete": 36.94267515923567,
                "kept_percent_lambda": 63.05732484076433,
                "num_examples": 5,
                "num_explored_concrete": 114,
                "num_explored_lambda": 119,
                "num_explored_none": 51,
                "num_inputs": 1,
                "num_kept_concrete": 58,
                "num_kept_lambda": 99,
                "num_values_explored": 284,
                "num_values_kept": 157,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 284
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.49984162906185,
            "num_unique_values": 1239,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.036667995217215,
                "explored_percent_lambda": 14.527700278995615,
                "explored_percent_none": 23.435631725787164,
                "kept_percent_concrete": 75.32467532467533,
                "kept_percent_lambda": 24.675324675324674,
                "num_examples": 5,
                "num_explored_concrete": 3113,
                "num_explored_lambda": 729,
                "num_explored_none": 1176,
                "num_inputs": 2,
                "num_kept_concrete": 928,
                "num_kept_lambda": 304,
                "num_values_explored": 5018,
                "num_values_kept": 1232,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47250
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4631384019739926,
            "num_unique_values": 314,
            "solution": "Reverse(Take(fn_0(-1, x), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.09041591320072,
                "explored_percent_lambda": 39.42133815551537,
                "explored_percent_none": 10.488245931283906,
                "kept_percent_concrete": 46.753246753246756,
                "kept_percent_lambda": 53.246753246753244,
                "num_examples": 3,
                "num_explored_concrete": 277,
                "num_explored_lambda": 218,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 144,
                "num_kept_lambda": 164,
                "num_values_explored": 553,
                "num_values_kept": 308,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 553
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.298111391020939,
            "num_unique_values": 547,
            "solution": "Sum(ZipWith((lambda u1, u2: ((lambda v1: Max(v1, 0)))(u1)), x, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 41.231929604022625,
                "explored_percent_lambda": 36.95788812067882,
                "explored_percent_none": 21.810182275298555,
                "kept_percent_concrete": 59.88909426987061,
                "kept_percent_lambda": 40.11090573012939,
                "num_examples": 5,
                "num_explored_concrete": 656,
                "num_explored_lambda": 588,
                "num_explored_none": 347,
                "num_inputs": 1,
                "num_kept_concrete": 324,
                "num_kept_lambda": 217,
                "num_values_explored": 1591,
                "num_values_kept": 541,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8288
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.21289382397663,
            "num_unique_values": 1093,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.852760736196316,
                "explored_percent_lambda": 18.261758691206545,
                "explored_percent_none": 23.885480572597135,
                "kept_percent_concrete": 60.68139963167587,
                "kept_percent_lambda": 39.31860036832413,
                "num_examples": 3,
                "num_explored_concrete": 2829,
                "num_explored_lambda": 893,
                "num_explored_none": 1168,
                "num_inputs": 2,
                "num_kept_concrete": 659,
                "num_kept_lambda": 427,
                "num_values_explored": 4890,
                "num_values_kept": 1086,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50502
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.486996763036586,
            "num_unique_values": 858,
            "solution": "Map((lambda u1: ((lambda v1: Min(b, ((lambda v1: Max(v1, a)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.3383516203113,
                "explored_percent_lambda": 26.180147996937993,
                "explored_percent_none": 27.481500382750703,
                "kept_percent_concrete": 49.64705882352941,
                "kept_percent_lambda": 50.35294117647059,
                "num_examples": 3,
                "num_explored_concrete": 1816,
                "num_explored_lambda": 1026,
                "num_explored_none": 1077,
                "num_inputs": 3,
                "num_kept_concrete": 422,
                "num_kept_lambda": 428,
                "num_values_explored": 3919,
                "num_values_kept": 850,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 10487
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.23352240899112,
            "num_unique_values": 1219,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.2073661998849,
                "explored_percent_lambda": 16.593132553232305,
                "explored_percent_none": 20.199501246882793,
                "kept_percent_concrete": 69.66199505358615,
                "kept_percent_lambda": 30.33800494641385,
                "num_examples": 5,
                "num_explored_concrete": 3295,
                "num_explored_lambda": 865,
                "num_explored_none": 1053,
                "num_inputs": 1,
                "num_kept_concrete": 845,
                "num_kept_lambda": 368,
                "num_values_explored": 5213,
                "num_values_kept": 1213,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53942
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.4405419640243,
            "num_unique_values": 1227,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 57.475622968580716,
                "explored_percent_lambda": 16.61249548573492,
                "explored_percent_none": 25.911881545684363,
                "kept_percent_concrete": 69.36936936936937,
                "kept_percent_lambda": 30.63063063063063,
                "num_examples": 5,
                "num_explored_concrete": 3183,
                "num_explored_lambda": 920,
                "num_explored_none": 1435,
                "num_inputs": 1,
                "num_kept_concrete": 847,
                "num_kept_lambda": 374,
                "num_values_explored": 5538,
                "num_values_kept": 1221,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 56231
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.449641176033765,
            "num_unique_values": 560,
            "solution": "Sum(Take(k, Sort(b)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.03508771929825,
                "explored_percent_lambda": 23.789473684210527,
                "explored_percent_none": 18.17543859649123,
                "kept_percent_concrete": 70.70524412296564,
                "kept_percent_lambda": 29.29475587703436,
                "num_examples": 5,
                "num_explored_concrete": 827,
                "num_explored_lambda": 339,
                "num_explored_none": 259,
                "num_inputs": 2,
                "num_kept_concrete": 391,
                "num_kept_lambda": 162,
                "num_values_explored": 1425,
                "num_values_kept": 553,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3525
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.68077990307938,
            "num_unique_values": 1171,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 46.09632724873543,
                "explored_percent_lambda": 29.62392786452606,
                "explored_percent_none": 24.27974488673851,
                "kept_percent_concrete": 42.23175965665236,
                "kept_percent_lambda": 57.76824034334764,
                "num_examples": 3,
                "num_explored_concrete": 2096,
                "num_explored_lambda": 1347,
                "num_explored_none": 1104,
                "num_inputs": 1,
                "num_kept_concrete": 492,
                "num_kept_lambda": 673,
                "num_values_explored": 4547,
                "num_values_kept": 1165,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49601
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.505475381040014,
            "num_unique_values": 572,
            "solution": "Map((lambda u1: ((lambda v1: If(((lambda v1: IsEven(v1)))(v1), v1, 0)))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 36.091127098321344,
                "explored_percent_lambda": 45.92326139088729,
                "explored_percent_none": 17.985611510791365,
                "kept_percent_concrete": 40.812720848056536,
                "kept_percent_lambda": 59.187279151943464,
                "num_examples": 3,
                "num_explored_concrete": 602,
                "num_explored_lambda": 766,
                "num_explored_none": 300,
                "num_inputs": 1,
                "num_kept_concrete": 231,
                "num_kept_lambda": 335,
                "num_values_explored": 1668,
                "num_values_kept": 566,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3418
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.39691413601395,
            "num_unique_values": 1174,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 41.59378036929057,
                "explored_percent_lambda": 32.38581146744412,
                "explored_percent_none": 26.020408163265305,
                "kept_percent_concrete": 43.61610968294773,
                "kept_percent_lambda": 56.38389031705227,
                "num_examples": 3,
                "num_explored_concrete": 1712,
                "num_explored_lambda": 1333,
                "num_explored_none": 1071,
                "num_inputs": 2,
                "num_kept_concrete": 509,
                "num_kept_lambda": 658,
                "num_values_explored": 4116,
                "num_values_kept": 1167,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45310
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.5932161080418155,
            "num_unique_values": 599,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Add(v1, Last(x))))(u1)), Take(-1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 36.85950413223141,
                "explored_percent_lambda": 39.00826446280992,
                "explored_percent_none": 24.132231404958677,
                "kept_percent_concrete": 48.06070826306914,
                "kept_percent_lambda": 51.93929173693086,
                "num_examples": 3,
                "num_explored_concrete": 669,
                "num_explored_lambda": 708,
                "num_explored_none": 438,
                "num_inputs": 1,
                "num_kept_concrete": 285,
                "num_kept_lambda": 308,
                "num_values_explored": 1815,
                "num_values_kept": 593,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4265
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.48819298599847,
            "num_unique_values": 1102,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.15028901734104,
                "explored_percent_lambda": 28.670520231213874,
                "explored_percent_none": 21.179190751445088,
                "kept_percent_concrete": 47.262773722627735,
                "kept_percent_lambda": 52.737226277372265,
                "num_examples": 3,
                "num_explored_concrete": 2169,
                "num_explored_lambda": 1240,
                "num_explored_none": 916,
                "num_inputs": 1,
                "num_kept_concrete": 518,
                "num_kept_lambda": 578,
                "num_values_explored": 4325,
                "num_values_kept": 1096,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48603
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.16162542905658484,
            "num_unique_values": 120,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 35.22012578616352,
                "explored_percent_lambda": 58.490566037735846,
                "explored_percent_none": 6.289308176100629,
                "kept_percent_concrete": 27.43362831858407,
                "kept_percent_lambda": 72.56637168141593,
                "num_examples": 3,
                "num_explored_concrete": 56,
                "num_explored_lambda": 93,
                "num_explored_none": 10,
                "num_inputs": 2,
                "num_kept_concrete": 31,
                "num_kept_lambda": 82,
                "num_values_explored": 159,
                "num_values_kept": 113,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 159
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.0496598490281,
            "num_unique_values": 1193,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.99267935578331,
                "explored_percent_lambda": 14.842606149341142,
                "explored_percent_none": 25.16471449487555,
                "kept_percent_concrete": 70.59814658803707,
                "kept_percent_lambda": 29.401853411962932,
                "num_examples": 5,
                "num_explored_concrete": 3278,
                "num_explored_lambda": 811,
                "num_explored_none": 1375,
                "num_inputs": 1,
                "num_kept_concrete": 838,
                "num_kept_lambda": 349,
                "num_values_explored": 5464,
                "num_values_kept": 1187,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 53672
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.8427702790359,
            "num_unique_values": 996,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.01797040169133,
                "explored_percent_lambda": 28.80549682875264,
                "explored_percent_none": 23.176532769556026,
                "kept_percent_concrete": 43.78159757330637,
                "kept_percent_lambda": 56.21840242669363,
                "num_examples": 3,
                "num_explored_concrete": 1817,
                "num_explored_lambda": 1090,
                "num_explored_none": 877,
                "num_inputs": 2,
                "num_kept_concrete": 433,
                "num_kept_lambda": 556,
                "num_values_explored": 3784,
                "num_values_kept": 989,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 43186
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6415684999665245,
            "num_unique_values": 340,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.98876404494382,
                "explored_percent_lambda": 25.140449438202246,
                "explored_percent_none": 15.870786516853933,
                "kept_percent_concrete": 60.17964071856287,
                "kept_percent_lambda": 39.82035928143713,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 179,
                "num_explored_none": 113,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 133,
                "num_values_explored": 712,
                "num_values_kept": 334,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 712
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.55572583898902,
            "num_unique_values": 911,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.1929662193429,
                "explored_percent_lambda": 20.66173068024063,
                "explored_percent_none": 26.145303100416474,
                "kept_percent_concrete": 57.142857142857146,
                "kept_percent_lambda": 42.857142857142854,
                "num_examples": 3,
                "num_explored_concrete": 2299,
                "num_explored_lambda": 893,
                "num_explored_none": 1130,
                "num_inputs": 3,
                "num_kept_concrete": 516,
                "num_kept_lambda": 387,
                "num_values_explored": 4322,
                "num_values_kept": 903,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 47548
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8552978009684011,
            "num_unique_values": 347,
            "solution": "Last(Map((lambda u1: ((lambda v1: fn_5(v1, x)))(u1)), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.66349583828775,
                "explored_percent_lambda": 26.397146254458978,
                "explored_percent_none": 10.93935790725327,
                "kept_percent_concrete": 59.82404692082111,
                "kept_percent_lambda": 40.17595307917889,
                "num_examples": 5,
                "num_explored_concrete": 527,
                "num_explored_lambda": 222,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 137,
                "num_values_explored": 841,
                "num_values_kept": 341,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 841
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.5280688990606,
            "num_unique_values": 1092,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 49.801262567220014,
                "explored_percent_lambda": 28.828618190320316,
                "explored_percent_none": 21.37011924245967,
                "kept_percent_concrete": 46.86924493554328,
                "kept_percent_lambda": 53.13075506445672,
                "num_examples": 3,
                "num_explored_concrete": 2130,
                "num_explored_lambda": 1233,
                "num_explored_none": 914,
                "num_inputs": 1,
                "num_kept_concrete": 509,
                "num_kept_lambda": 577,
                "num_values_explored": 4277,
                "num_values_kept": 1086,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46976
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.44667010498233,
            "num_unique_values": 1024,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.633688023545396,
                "explored_percent_lambda": 20.64749830201494,
                "explored_percent_none": 25.718813674439666,
                "kept_percent_concrete": 56.342182890855455,
                "kept_percent_lambda": 43.657817109144545,
                "num_examples": 3,
                "num_explored_concrete": 2369,
                "num_explored_lambda": 912,
                "num_explored_none": 1136,
                "num_inputs": 2,
                "num_kept_concrete": 573,
                "num_kept_lambda": 444,
                "num_values_explored": 4417,
                "num_values_kept": 1017,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46582
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4453770900145173,
            "num_unique_values": 301,
            "solution": "Maximum(Filter((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 55.45286506469501,
                "explored_percent_lambda": 32.90203327171904,
                "explored_percent_none": 11.645101663585953,
                "kept_percent_concrete": 54.23728813559322,
                "kept_percent_lambda": 45.76271186440678,
                "num_examples": 5,
                "num_explored_concrete": 300,
                "num_explored_lambda": 178,
                "num_explored_none": 63,
                "num_inputs": 1,
                "num_kept_concrete": 160,
                "num_kept_lambda": 135,
                "num_values_explored": 541,
                "num_values_kept": 295,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 541
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8255537229124457,
            "num_unique_values": 257,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Subtract(v1, v2)))(u1, u2)), Drop(1, x), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 33.2794830371567,
                "explored_percent_lambda": 57.35056542810985,
                "explored_percent_none": 9.369951534733442,
                "kept_percent_concrete": 39.44223107569721,
                "kept_percent_lambda": 60.55776892430279,
                "num_examples": 3,
                "num_explored_concrete": 206,
                "num_explored_lambda": 355,
                "num_explored_none": 58,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 152,
                "num_values_explored": 619,
                "num_values_kept": 251,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3069
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.90552435896825,
            "num_unique_values": 564,
            "solution": "Map((lambda u1: ((lambda v1: Multiply(v1, ((lambda v1: Square(v1)))(v1))))(u1)), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 32.9452852153667,
                "explored_percent_lambda": 41.967403958090806,
                "explored_percent_none": 25.087310826542492,
                "kept_percent_concrete": 45.51971326164875,
                "kept_percent_lambda": 54.48028673835125,
                "num_examples": 3,
                "num_explored_concrete": 566,
                "num_explored_lambda": 721,
                "num_explored_none": 431,
                "num_inputs": 1,
                "num_kept_concrete": 254,
                "num_kept_lambda": 304,
                "num_values_explored": 1718,
                "num_values_kept": 558,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 16498
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21688268799334764,
            "num_unique_values": 162,
            "solution": "Filter((lambda u1: ((lambda v1: Less(y, v1)))(u1)), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.732510288065846,
                "explored_percent_lambda": 34.5679012345679,
                "explored_percent_none": 10.699588477366255,
                "kept_percent_concrete": 52.903225806451616,
                "kept_percent_lambda": 47.096774193548384,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 84,
                "num_explored_none": 26,
                "num_inputs": 2,
                "num_kept_concrete": 82,
                "num_kept_lambda": 73,
                "num_values_explored": 243,
                "num_values_kept": 155,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 243
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.59184419899248,
            "num_unique_values": 1308,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.38800374882849,
                "explored_percent_lambda": 25.538894095595126,
                "explored_percent_none": 16.073102155576382,
                "kept_percent_concrete": 52.45775729646697,
                "kept_percent_lambda": 47.54224270353303,
                "num_examples": 3,
                "num_explored_concrete": 2492,
                "num_explored_lambda": 1090,
                "num_explored_none": 686,
                "num_inputs": 1,
                "num_kept_concrete": 683,
                "num_kept_lambda": 619,
                "num_values_explored": 4268,
                "num_values_kept": 1302,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44074
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.5236971359699965,
            "num_unique_values": 753,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 58.488848429676835,
                "explored_percent_lambda": 23.16795630405098,
                "explored_percent_none": 18.34319526627219,
                "kept_percent_concrete": 71.44772117962466,
                "kept_percent_lambda": 28.552278820375335,
                "num_examples": 5,
                "num_explored_concrete": 1285,
                "num_explored_lambda": 509,
                "num_explored_none": 403,
                "num_inputs": 2,
                "num_kept_concrete": 533,
                "num_kept_lambda": 213,
                "num_values_explored": 2197,
                "num_values_kept": 746,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4647
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.94357576000039,
            "num_unique_values": 1301,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.71719641401793,
                "explored_percent_lambda": 16.5240423797881,
                "explored_percent_none": 22.75876120619397,
                "kept_percent_concrete": 70.40185471406491,
                "kept_percent_lambda": 29.598145285935086,
                "num_examples": 5,
                "num_explored_concrete": 2980,
                "num_explored_lambda": 811,
                "num_explored_none": 1117,
                "num_inputs": 2,
                "num_kept_concrete": 911,
                "num_kept_lambda": 383,
                "num_values_explored": 4908,
                "num_values_kept": 1294,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52373
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.4932179970201105,
            "num_unique_values": 275,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 53.44827586206897,
                "explored_percent_lambda": 35.24904214559387,
                "explored_percent_none": 11.302681992337165,
                "kept_percent_concrete": 50.55762081784387,
                "kept_percent_lambda": 49.44237918215613,
                "num_examples": 5,
                "num_explored_concrete": 279,
                "num_explored_lambda": 184,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 136,
                "num_kept_lambda": 133,
                "num_values_explored": 522,
                "num_values_kept": 269,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 522
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.17215939902235,
            "num_unique_values": 1206,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.38099208003335,
                "explored_percent_lambda": 19.320550229262192,
                "explored_percent_none": 16.29845769070446,
                "kept_percent_concrete": 59.382819015846536,
                "kept_percent_lambda": 40.617180984153464,
                "num_examples": 3,
                "num_explored_concrete": 3089,
                "num_explored_lambda": 927,
                "num_explored_none": 782,
                "num_inputs": 2,
                "num_kept_concrete": 712,
                "num_kept_lambda": 487,
                "num_values_explored": 4798,
                "num_values_kept": 1199,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 48997
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.30074302107096,
            "num_unique_values": 1253,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.85324498148509,
                "explored_percent_lambda": 19.29448450594426,
                "explored_percent_none": 17.852270512570648,
                "kept_percent_concrete": 58.6677367576244,
                "kept_percent_lambda": 41.3322632423756,
                "num_examples": 3,
                "num_explored_concrete": 3225,
                "num_explored_lambda": 990,
                "num_explored_none": 916,
                "num_inputs": 2,
                "num_kept_concrete": 731,
                "num_kept_lambda": 515,
                "num_values_explored": 5131,
                "num_values_kept": 1246,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 51268
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.401623559067957,
            "num_unique_values": 255,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1: Access(v1, x)))(u1)), i, i)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 29.08805031446541,
                "explored_percent_lambda": 59.119496855345915,
                "explored_percent_none": 11.79245283018868,
                "kept_percent_concrete": 42.33870967741935,
                "kept_percent_lambda": 57.66129032258065,
                "num_examples": 3,
                "num_explored_concrete": 185,
                "num_explored_lambda": 376,
                "num_explored_none": 75,
                "num_inputs": 2,
                "num_kept_concrete": 105,
                "num_kept_lambda": 143,
                "num_values_explored": 636,
                "num_values_kept": 248,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7466
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.34736239595804,
            "num_unique_values": 1090,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.25359576078728,
                "explored_percent_lambda": 17.789553368660105,
                "explored_percent_none": 16.95685087055261,
                "kept_percent_concrete": 68.88273314866113,
                "kept_percent_lambda": 31.117266851338872,
                "num_examples": 5,
                "num_explored_concrete": 2586,
                "num_explored_lambda": 705,
                "num_explored_none": 672,
                "num_inputs": 2,
                "num_kept_concrete": 746,
                "num_kept_lambda": 337,
                "num_values_explored": 3963,
                "num_values_kept": 1083,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 44915
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.6364057160681114,
            "num_unique_values": 281,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 56.15942028985507,
                "explored_percent_lambda": 32.608695652173914,
                "explored_percent_none": 11.231884057971014,
                "kept_percent_concrete": 53.64963503649635,
                "kept_percent_lambda": 46.35036496350365,
                "num_examples": 3,
                "num_explored_concrete": 310,
                "num_explored_lambda": 180,
                "num_explored_none": 62,
                "num_inputs": 2,
                "num_kept_concrete": 147,
                "num_kept_lambda": 127,
                "num_values_explored": 552,
                "num_values_kept": 274,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 552
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.91763166699093,
            "num_unique_values": 1230,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 53.94038383013475,
                "explored_percent_lambda": 21.131073907717436,
                "explored_percent_none": 24.928542262147815,
                "kept_percent_concrete": 54.783319705641865,
                "kept_percent_lambda": 45.216680294358135,
                "num_examples": 3,
                "num_explored_concrete": 2642,
                "num_explored_lambda": 1035,
                "num_explored_none": 1221,
                "num_inputs": 2,
                "num_kept_concrete": 670,
                "num_kept_lambda": 553,
                "num_values_explored": 4898,
                "num_values_kept": 1223,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49314
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.40734801196959,
            "num_unique_values": 1112,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.793324775353014,
                "explored_percent_lambda": 17.509627727856227,
                "explored_percent_none": 23.697047496790756,
                "kept_percent_concrete": 71.22171945701358,
                "kept_percent_lambda": 28.778280542986426,
                "num_examples": 5,
                "num_explored_concrete": 2290,
                "num_explored_lambda": 682,
                "num_explored_none": 923,
                "num_inputs": 2,
                "num_kept_concrete": 787,
                "num_kept_lambda": 318,
                "num_values_explored": 3895,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49695
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.27960488793905824,
            "num_unique_values": 164,
            "solution": "Count((lambda u1: ((lambda v1: IsOdd(v1)))(u1)), Map((lambda u1: 1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 43.02788844621514,
                "explored_percent_lambda": 44.223107569721115,
                "explored_percent_none": 12.749003984063744,
                "kept_percent_concrete": 41.139240506329116,
                "kept_percent_lambda": 58.860759493670884,
                "num_examples": 5,
                "num_explored_concrete": 108,
                "num_explored_lambda": 111,
                "num_explored_none": 32,
                "num_inputs": 1,
                "num_kept_concrete": 65,
                "num_kept_lambda": 93,
                "num_values_explored": 251,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 251
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.02209219289944,
            "num_unique_values": 1124,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 48.07944129201222,
                "explored_percent_lambda": 28.633784373635965,
                "explored_percent_none": 23.28677433435181,
                "kept_percent_concrete": 46.86940966010734,
                "kept_percent_lambda": 53.13059033989266,
                "num_examples": 3,
                "num_explored_concrete": 2203,
                "num_explored_lambda": 1312,
                "num_explored_none": 1067,
                "num_inputs": 1,
                "num_kept_concrete": 524,
                "num_kept_lambda": 594,
                "num_values_explored": 4582,
                "num_values_kept": 1118,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 46330
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 102.07613596494775,
            "num_unique_values": 1259,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 56.17122990004346,
                "explored_percent_lambda": 26.79269882659713,
                "explored_percent_none": 17.036071273359408,
                "kept_percent_concrete": 49.16201117318436,
                "kept_percent_lambda": 50.83798882681564,
                "num_examples": 3,
                "num_explored_concrete": 2585,
                "num_explored_lambda": 1233,
                "num_explored_none": 784,
                "num_inputs": 1,
                "num_kept_concrete": 616,
                "num_kept_lambda": 637,
                "num_values_explored": 4602,
                "num_values_kept": 1253,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 50042
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22499289095867425,
            "num_unique_values": 150,
            "solution": "Map((lambda u1: Head(x)), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.67796610169491,
                "explored_percent_lambda": 50.0,
                "explored_percent_none": 9.322033898305085,
                "kept_percent_concrete": 31.944444444444443,
                "kept_percent_lambda": 68.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 96,
                "num_explored_lambda": 118,
                "num_explored_none": 22,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 98,
                "num_values_explored": 236,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 236
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1513843049760908,
            "num_unique_values": 117,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 51.204819277108435,
                "explored_percent_lambda": 41.566265060240966,
                "explored_percent_none": 7.228915662650603,
                "kept_percent_concrete": 44.95412844036697,
                "kept_percent_lambda": 55.04587155963303,
                "num_examples": 3,
                "num_explored_concrete": 85,
                "num_explored_lambda": 69,
                "num_explored_none": 12,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 60,
                "num_values_explored": 166,
                "num_values_kept": 109,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 166
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.32525537593756,
            "num_unique_values": 1234,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 55.64965455761087,
                "explored_percent_lambda": 24.024960998439937,
                "explored_percent_none": 20.325384443949186,
                "kept_percent_concrete": 54.80456026058632,
                "kept_percent_lambda": 45.19543973941368,
                "num_examples": 3,
                "num_explored_concrete": 2497,
                "num_explored_lambda": 1078,
                "num_explored_none": 912,
                "num_inputs": 1,
                "num_kept_concrete": 673,
                "num_kept_lambda": 555,
                "num_values_explored": 4487,
                "num_values_kept": 1228,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 49154
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.41455926001072,
            "num_unique_values": 1140,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.385070839500955,
                "explored_percent_lambda": 21.907379995770775,
                "explored_percent_none": 26.707549164728274,
                "kept_percent_concrete": 58.42894969108561,
                "kept_percent_lambda": 41.57105030891439,
                "num_examples": 3,
                "num_explored_concrete": 2430,
                "num_explored_lambda": 1036,
                "num_explored_none": 1263,
                "num_inputs": 2,
                "num_kept_concrete": 662,
                "num_kept_lambda": 471,
                "num_values_explored": 4729,
                "num_values_kept": 1133,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 45934
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.18509020109195,
            "num_unique_values": 838,
            "solution": "Map((lambda u1: ((lambda v1: Add(b, ((lambda v1: Multiply(a, v1)))(v1))))(u1)), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.805010893246184,
                "explored_percent_lambda": 19.526143790849673,
                "explored_percent_none": 27.66884531590414,
                "kept_percent_concrete": 62.28915662650602,
                "kept_percent_lambda": 37.71084337349398,
                "num_examples": 3,
                "num_explored_concrete": 1939,
                "num_explored_lambda": 717,
                "num_explored_none": 1016,
                "num_inputs": 3,
                "num_kept_concrete": 517,
                "num_kept_lambda": 313,
                "num_values_explored": 3672,
                "num_values_kept": 830,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 24224
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.966905880020931,
            "num_unique_values": 606,
            "solution": "Scanl1((lambda u1, u2: ((lambda v1, v2: Add(v1, v2)))(u1, u2)), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 39.925173703901656,
                "explored_percent_lambda": 34.79422768572956,
                "explored_percent_none": 25.280598610368788,
                "kept_percent_concrete": 48.5,
                "kept_percent_lambda": 51.5,
                "num_examples": 3,
                "num_explored_concrete": 747,
                "num_explored_lambda": 651,
                "num_explored_none": 473,
                "num_inputs": 1,
                "num_kept_concrete": 291,
                "num_kept_lambda": 309,
                "num_values_explored": 1871,
                "num_values_kept": 600,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8630
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 58.918232067953795,
            "num_unique_values": 908,
            "solution": "Map((lambda u1: ((lambda v1: Subtract(v1, Minimum(x))))(u1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.06562599553998,
                "explored_percent_lambda": 33.70500159286397,
                "explored_percent_none": 20.22937241159605,
                "kept_percent_concrete": 42.90465631929047,
                "kept_percent_lambda": 57.09534368070953,
                "num_examples": 3,
                "num_explored_concrete": 1446,
                "num_explored_lambda": 1058,
                "num_explored_none": 635,
                "num_inputs": 1,
                "num_kept_concrete": 387,
                "num_kept_lambda": 515,
                "num_values_explored": 3139,
                "num_values_kept": 902,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 26939
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25286297709681094,
            "num_unique_values": 164,
            "solution": "ZipWith((lambda u1, u2: ((lambda v1, v2: Min(v1, v2)))(u1, u2)), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 34.099616858237546,
                "explored_percent_lambda": 53.25670498084291,
                "explored_percent_none": 12.64367816091954,
                "kept_percent_concrete": 27.848101265822784,
                "kept_percent_lambda": 72.15189873417721,
                "num_examples": 3,
                "num_explored_concrete": 89,
                "num_explored_lambda": 139,
                "num_explored_none": 33,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 114,
                "num_values_explored": 261,
                "num_values_kept": 158,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 261
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.2072221400449,
            "num_unique_values": 1204,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.282151208106,
                "explored_percent_lambda": 15.276695245518317,
                "explored_percent_none": 23.44115354637568,
                "kept_percent_concrete": 69.92481203007519,
                "kept_percent_lambda": 30.075187969924812,
                "num_examples": 5,
                "num_explored_concrete": 3145,
                "num_explored_lambda": 784,
                "num_explored_none": 1203,
                "num_inputs": 2,
                "num_kept_concrete": 837,
                "num_kept_lambda": 360,
                "num_values_explored": 5132,
                "num_values_kept": 1197,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 52019
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.5
}