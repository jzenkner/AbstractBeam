{
    "num_operations": 28,
    "num_tasks": 50,
    "num_tasks_solved": 0,
    "results": [
        {
            "elapsed_time": 0.5992993363179266,
            "num_unique_values": 9,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 0.0,
                "explored_percent_lambda": 100.0,
                "explored_percent_none": 0.0,
                "kept_percent_concrete": -1,
                "kept_percent_lambda": -1,
                "num_examples": 3,
                "num_explored_concrete": 0,
                "num_explored_lambda": 1,
                "num_explored_none": 0,
                "num_inputs": 1,
                "num_kept_concrete": 0,
                "num_kept_lambda": 0,
                "num_values_explored": 1,
                "num_values_kept": 0,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5034936838783324,
            "num_unique_values": 46,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.003215434083602,
                "explored_percent_lambda": 35.69131832797428,
                "explored_percent_none": 55.30546623794212,
                "kept_percent_concrete": 27.77777777777778,
                "kept_percent_lambda": 72.22222222222223,
                "num_examples": 5,
                "num_explored_concrete": 28,
                "num_explored_lambda": 111,
                "num_explored_none": 172,
                "num_inputs": 2,
                "num_kept_concrete": 10,
                "num_kept_lambda": 26,
                "num_values_explored": 311,
                "num_values_kept": 36,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5071291029453278,
            "num_unique_values": 49,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.57556270096463,
                "explored_percent_lambda": 40.19292604501608,
                "explored_percent_none": 48.231511254019296,
                "kept_percent_concrete": 27.5,
                "kept_percent_lambda": 72.5,
                "num_examples": 3,
                "num_explored_concrete": 36,
                "num_explored_lambda": 125,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 29,
                "num_values_explored": 311,
                "num_values_kept": 40,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5031884494237602,
            "num_unique_values": 44,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.309278350515465,
                "explored_percent_lambda": 41.23711340206186,
                "explored_percent_none": 48.45360824742268,
                "kept_percent_concrete": 34.285714285714285,
                "kept_percent_lambda": 65.71428571428571,
                "num_examples": 3,
                "num_explored_concrete": 30,
                "num_explored_lambda": 120,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 23,
                "num_values_explored": 291,
                "num_values_kept": 35,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5124366437084973,
            "num_unique_values": 44,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 8.305647840531561,
                "explored_percent_lambda": 49.16943521594684,
                "explored_percent_none": 42.524916943521596,
                "kept_percent_concrete": 20.58823529411765,
                "kept_percent_lambda": 79.41176470588235,
                "num_examples": 3,
                "num_explored_concrete": 25,
                "num_explored_lambda": 148,
                "num_explored_none": 128,
                "num_inputs": 2,
                "num_kept_concrete": 7,
                "num_kept_lambda": 27,
                "num_values_explored": 301,
                "num_values_kept": 34,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5051954570226371,
            "num_unique_values": 41,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.621262458471762,
                "explored_percent_lambda": 30.232558139534884,
                "explored_percent_none": 56.14617940199336,
                "kept_percent_concrete": 34.375,
                "kept_percent_lambda": 65.625,
                "num_examples": 5,
                "num_explored_concrete": 41,
                "num_explored_lambda": 91,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 21,
                "num_values_explored": 301,
                "num_values_kept": 32,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5064074900001287,
            "num_unique_values": 48,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.295681063122924,
                "explored_percent_lambda": 41.86046511627907,
                "explored_percent_none": 46.84385382059801,
                "kept_percent_concrete": 23.076923076923077,
                "kept_percent_lambda": 76.92307692307692,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 126,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 30,
                "num_values_explored": 301,
                "num_values_kept": 39,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5076298476196826,
            "num_unique_values": 45,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.714776632302405,
                "explored_percent_lambda": 31.27147766323024,
                "explored_percent_none": 56.013745704467354,
                "kept_percent_concrete": 27.77777777777778,
                "kept_percent_lambda": 72.22222222222223,
                "num_examples": 5,
                "num_explored_concrete": 37,
                "num_explored_lambda": 91,
                "num_explored_none": 163,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 26,
                "num_values_explored": 291,
                "num_values_kept": 36,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5109788388945162,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.953271028037383,
                "explored_percent_lambda": 33.64485981308411,
                "explored_percent_none": 51.401869158878505,
                "kept_percent_concrete": 43.90243902439025,
                "kept_percent_lambda": 56.09756097560975,
                "num_examples": 5,
                "num_explored_concrete": 48,
                "num_explored_lambda": 108,
                "num_explored_none": 165,
                "num_inputs": 1,
                "num_kept_concrete": 18,
                "num_kept_lambda": 23,
                "num_values_explored": 321,
                "num_values_kept": 41,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5103998156264424,
            "num_unique_values": 45,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.838006230529595,
                "explored_percent_lambda": 37.69470404984423,
                "explored_percent_none": 50.467289719626166,
                "kept_percent_concrete": 30.555555555555557,
                "kept_percent_lambda": 69.44444444444444,
                "num_examples": 3,
                "num_explored_concrete": 38,
                "num_explored_lambda": 121,
                "num_explored_none": 162,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 25,
                "num_values_explored": 321,
                "num_values_kept": 36,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5031169918365777,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.990936555891238,
                "explored_percent_lambda": 39.57703927492447,
                "explored_percent_none": 47.43202416918429,
                "kept_percent_concrete": 32.432432432432435,
                "kept_percent_lambda": 67.56756756756756,
                "num_examples": 5,
                "num_explored_concrete": 43,
                "num_explored_lambda": 131,
                "num_explored_none": 157,
                "num_inputs": 2,
                "num_kept_concrete": 12,
                "num_kept_lambda": 25,
                "num_values_explored": 331,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5187770840711892,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.730205278592376,
                "explored_percent_lambda": 39.882697947214076,
                "explored_percent_none": 48.38709677419355,
                "kept_percent_concrete": 27.5,
                "kept_percent_lambda": 72.5,
                "num_examples": 3,
                "num_explored_concrete": 40,
                "num_explored_lambda": 136,
                "num_explored_none": 165,
                "num_inputs": 2,
                "num_kept_concrete": 11,
                "num_kept_lambda": 29,
                "num_values_explored": 341,
                "num_values_kept": 40,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5243666139431298,
            "num_unique_values": 49,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.18836565096953,
                "explored_percent_lambda": 44.04432132963989,
                "explored_percent_none": 43.767313019390585,
                "kept_percent_concrete": 22.5,
                "kept_percent_lambda": 77.5,
                "num_examples": 5,
                "num_explored_concrete": 44,
                "num_explored_lambda": 159,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 31,
                "num_values_explored": 361,
                "num_values_kept": 40,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5072384080849588,
            "num_unique_values": 46,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.295681063122924,
                "explored_percent_lambda": 37.541528239202655,
                "explored_percent_none": 51.16279069767442,
                "kept_percent_concrete": 35.13513513513514,
                "kept_percent_lambda": 64.86486486486487,
                "num_examples": 3,
                "num_explored_concrete": 34,
                "num_explored_lambda": 113,
                "num_explored_none": 154,
                "num_inputs": 1,
                "num_kept_concrete": 13,
                "num_kept_lambda": 24,
                "num_values_explored": 301,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5057761608622968,
            "num_unique_values": 46,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.504823151125402,
                "explored_percent_lambda": 45.337620578778136,
                "explored_percent_none": 41.157556270096464,
                "kept_percent_concrete": 25.714285714285715,
                "kept_percent_lambda": 74.28571428571429,
                "num_examples": 3,
                "num_explored_concrete": 42,
                "num_explored_lambda": 141,
                "num_explored_none": 128,
                "num_inputs": 3,
                "num_kept_concrete": 9,
                "num_kept_lambda": 26,
                "num_values_explored": 311,
                "num_values_kept": 35,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5011584158055484,
            "num_unique_values": 49,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.003215434083602,
                "explored_percent_lambda": 45.659163987138264,
                "explored_percent_none": 45.337620578778136,
                "kept_percent_concrete": 23.68421052631579,
                "kept_percent_lambda": 76.3157894736842,
                "num_examples": 3,
                "num_explored_concrete": 28,
                "num_explored_lambda": 142,
                "num_explored_none": 141,
                "num_inputs": 3,
                "num_kept_concrete": 9,
                "num_kept_lambda": 29,
                "num_values_explored": 311,
                "num_values_kept": 38,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5099742347374558,
            "num_unique_values": 45,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.631229235880399,
                "explored_percent_lambda": 46.179401993355484,
                "explored_percent_none": 43.18936877076412,
                "kept_percent_concrete": 32.35294117647059,
                "kept_percent_lambda": 67.6470588235294,
                "num_examples": 3,
                "num_explored_concrete": 32,
                "num_explored_lambda": 139,
                "num_explored_none": 130,
                "num_inputs": 3,
                "num_kept_concrete": 11,
                "num_kept_lambda": 23,
                "num_values_explored": 301,
                "num_values_kept": 34,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.508230609819293,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.624584717607974,
                "explored_percent_lambda": 40.863787375415285,
                "explored_percent_none": 46.51162790697674,
                "kept_percent_concrete": 27.027027027027028,
                "kept_percent_lambda": 72.97297297297297,
                "num_examples": 3,
                "num_explored_concrete": 38,
                "num_explored_lambda": 123,
                "num_explored_none": 140,
                "num_inputs": 2,
                "num_kept_concrete": 10,
                "num_kept_lambda": 27,
                "num_values_explored": 301,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5025720898993313,
            "num_unique_values": 57,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.803625377643504,
                "explored_percent_lambda": 40.483383685800604,
                "explored_percent_none": 44.71299093655589,
                "kept_percent_concrete": 25.53191489361702,
                "kept_percent_lambda": 74.46808510638297,
                "num_examples": 5,
                "num_explored_concrete": 49,
                "num_explored_lambda": 134,
                "num_explored_none": 148,
                "num_inputs": 2,
                "num_kept_concrete": 12,
                "num_kept_lambda": 35,
                "num_values_explored": 331,
                "num_values_kept": 47,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5135383051820099,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.299003322259136,
                "explored_percent_lambda": 44.18604651162791,
                "explored_percent_none": 45.51495016611295,
                "kept_percent_concrete": 32.5,
                "kept_percent_lambda": 67.5,
                "num_examples": 3,
                "num_explored_concrete": 31,
                "num_explored_lambda": 133,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 13,
                "num_kept_lambda": 27,
                "num_values_explored": 301,
                "num_values_kept": 40,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5148223121650517,
            "num_unique_values": 53,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.30232558139535,
                "explored_percent_lambda": 44.51827242524917,
                "explored_percent_none": 46.179401993355484,
                "kept_percent_concrete": 13.636363636363637,
                "kept_percent_lambda": 86.36363636363636,
                "num_examples": 3,
                "num_explored_concrete": 28,
                "num_explored_lambda": 134,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 6,
                "num_kept_lambda": 38,
                "num_values_explored": 301,
                "num_values_kept": 44,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5097017758525908,
            "num_unique_values": 45,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.966777408637874,
                "explored_percent_lambda": 40.863787375415285,
                "explored_percent_none": 49.16943521594684,
                "kept_percent_concrete": 25.0,
                "kept_percent_lambda": 75.0,
                "num_examples": 3,
                "num_explored_concrete": 30,
                "num_explored_lambda": 123,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 27,
                "num_values_explored": 301,
                "num_values_kept": 36,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5136084361001849,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.293051359516616,
                "explored_percent_lambda": 37.16012084592145,
                "explored_percent_none": 49.546827794561935,
                "kept_percent_concrete": 27.027027027027028,
                "kept_percent_lambda": 72.97297297297297,
                "num_examples": 5,
                "num_explored_concrete": 44,
                "num_explored_lambda": 123,
                "num_explored_none": 164,
                "num_inputs": 2,
                "num_kept_concrete": 10,
                "num_kept_lambda": 27,
                "num_values_explored": 331,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5034737172536552,
            "num_unique_values": 54,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.504823151125402,
                "explored_percent_lambda": 47.58842443729903,
                "explored_percent_none": 38.90675241157556,
                "kept_percent_concrete": 34.09090909090909,
                "kept_percent_lambda": 65.9090909090909,
                "num_examples": 3,
                "num_explored_concrete": 42,
                "num_explored_lambda": 148,
                "num_explored_none": 121,
                "num_inputs": 2,
                "num_kept_concrete": 15,
                "num_kept_lambda": 29,
                "num_values_explored": 311,
                "num_values_kept": 44,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5062368749640882,
            "num_unique_values": 61,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 8.637873754152825,
                "explored_percent_lambda": 42.19269102990033,
                "explored_percent_none": 49.16943521594684,
                "kept_percent_concrete": 20.0,
                "kept_percent_lambda": 80.0,
                "num_examples": 3,
                "num_explored_concrete": 26,
                "num_explored_lambda": 127,
                "num_explored_none": 148,
                "num_inputs": 3,
                "num_kept_concrete": 10,
                "num_kept_lambda": 40,
                "num_values_explored": 301,
                "num_values_kept": 50,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.501435759011656,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 15.168539325842696,
                "explored_percent_lambda": 40.168539325842694,
                "explored_percent_none": 44.662921348314605,
                "kept_percent_concrete": 29.26829268292683,
                "kept_percent_lambda": 70.73170731707317,
                "num_examples": 5,
                "num_explored_concrete": 54,
                "num_explored_lambda": 143,
                "num_explored_none": 159,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 29,
                "num_values_explored": 356,
                "num_values_kept": 41,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5091341640800238,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.129380053908356,
                "explored_percent_lambda": 41.23989218328841,
                "explored_percent_none": 46.63072776280323,
                "kept_percent_concrete": 29.26829268292683,
                "kept_percent_lambda": 70.73170731707317,
                "num_examples": 3,
                "num_explored_concrete": 45,
                "num_explored_lambda": 153,
                "num_explored_none": 173,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 29,
                "num_values_explored": 371,
                "num_values_kept": 41,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5058976369909942,
            "num_unique_values": 53,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.742382271468143,
                "explored_percent_lambda": 40.443213296398895,
                "explored_percent_none": 46.81440443213297,
                "kept_percent_concrete": 20.930232558139537,
                "kept_percent_lambda": 79.06976744186046,
                "num_examples": 3,
                "num_explored_concrete": 46,
                "num_explored_lambda": 146,
                "num_explored_none": 169,
                "num_inputs": 2,
                "num_kept_concrete": 9,
                "num_kept_lambda": 34,
                "num_values_explored": 361,
                "num_values_kept": 43,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5037683467380702,
            "num_unique_values": 45,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.960629921259843,
                "explored_percent_lambda": 40.15748031496063,
                "explored_percent_none": 44.881889763779526,
                "kept_percent_concrete": 19.444444444444443,
                "kept_percent_lambda": 80.55555555555556,
                "num_examples": 3,
                "num_explored_concrete": 57,
                "num_explored_lambda": 153,
                "num_explored_none": 171,
                "num_inputs": 1,
                "num_kept_concrete": 7,
                "num_kept_lambda": 29,
                "num_values_explored": 381,
                "num_values_kept": 36,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5017248876392841,
            "num_unique_values": 48,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.742382271468143,
                "explored_percent_lambda": 40.443213296398895,
                "explored_percent_none": 46.81440443213297,
                "kept_percent_concrete": 44.73684210526316,
                "kept_percent_lambda": 55.26315789473684,
                "num_examples": 3,
                "num_explored_concrete": 46,
                "num_explored_lambda": 146,
                "num_explored_none": 169,
                "num_inputs": 2,
                "num_kept_concrete": 17,
                "num_kept_lambda": 21,
                "num_values_explored": 361,
                "num_values_kept": 38,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5124266836792231,
            "num_unique_values": 49,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.469453376205788,
                "explored_percent_lambda": 38.263665594855304,
                "explored_percent_none": 47.266881028938904,
                "kept_percent_concrete": 35.8974358974359,
                "kept_percent_lambda": 64.1025641025641,
                "num_examples": 5,
                "num_explored_concrete": 45,
                "num_explored_lambda": 119,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 14,
                "num_kept_lambda": 25,
                "num_values_explored": 311,
                "num_values_kept": 39,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5071271886117756,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.676156583629894,
                "explored_percent_lambda": 45.55160142348755,
                "explored_percent_none": 43.77224199288256,
                "kept_percent_concrete": 21.05263157894737,
                "kept_percent_lambda": 78.94736842105263,
                "num_examples": 3,
                "num_explored_concrete": 30,
                "num_explored_lambda": 128,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 8,
                "num_kept_lambda": 30,
                "num_values_explored": 281,
                "num_values_kept": 38,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5050695920363069,
            "num_unique_values": 38,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.743772241992882,
                "explored_percent_lambda": 41.637010676156585,
                "explored_percent_none": 46.619217081850536,
                "kept_percent_concrete": 28.571428571428573,
                "kept_percent_lambda": 71.42857142857143,
                "num_examples": 3,
                "num_explored_concrete": 33,
                "num_explored_lambda": 117,
                "num_explored_none": 131,
                "num_inputs": 2,
                "num_kept_concrete": 8,
                "num_kept_lambda": 20,
                "num_values_explored": 281,
                "num_values_kept": 28,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5108808460645378,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.469453376205788,
                "explored_percent_lambda": 39.22829581993569,
                "explored_percent_none": 46.30225080385852,
                "kept_percent_concrete": 27.027027027027028,
                "kept_percent_lambda": 72.97297297297297,
                "num_examples": 5,
                "num_explored_concrete": 45,
                "num_explored_lambda": 122,
                "num_explored_none": 144,
                "num_inputs": 2,
                "num_kept_concrete": 10,
                "num_kept_lambda": 27,
                "num_values_explored": 311,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5031116581521928,
            "num_unique_values": 53,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.214953271028037,
                "explored_percent_lambda": 37.69470404984423,
                "explored_percent_none": 51.09034267912772,
                "kept_percent_concrete": 27.272727272727273,
                "kept_percent_lambda": 72.72727272727273,
                "num_examples": 5,
                "num_explored_concrete": 36,
                "num_explored_lambda": 121,
                "num_explored_none": 164,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 32,
                "num_values_explored": 321,
                "num_values_kept": 44,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5050706458278,
            "num_unique_values": 44,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.218649517684888,
                "explored_percent_lambda": 41.157556270096464,
                "explored_percent_none": 46.62379421221865,
                "kept_percent_concrete": 29.41176470588235,
                "kept_percent_lambda": 70.58823529411765,
                "num_examples": 5,
                "num_explored_concrete": 38,
                "num_explored_lambda": 128,
                "num_explored_none": 145,
                "num_inputs": 2,
                "num_kept_concrete": 10,
                "num_kept_lambda": 24,
                "num_values_explored": 311,
                "num_values_kept": 34,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5192562066949904,
            "num_unique_values": 46,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.956011730205278,
                "explored_percent_lambda": 39.002932551319645,
                "explored_percent_none": 46.04105571847507,
                "kept_percent_concrete": 40.54054054054054,
                "kept_percent_lambda": 59.45945945945946,
                "num_examples": 3,
                "num_explored_concrete": 51,
                "num_explored_lambda": 133,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 15,
                "num_kept_lambda": 22,
                "num_values_explored": 341,
                "num_values_kept": 37,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.502609312068671,
            "num_unique_values": 50,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 9.634551495016611,
                "explored_percent_lambda": 37.87375415282392,
                "explored_percent_none": 52.49169435215947,
                "kept_percent_concrete": 30.0,
                "kept_percent_lambda": 70.0,
                "num_examples": 5,
                "num_explored_concrete": 29,
                "num_explored_lambda": 114,
                "num_explored_none": 158,
                "num_inputs": 2,
                "num_kept_concrete": 12,
                "num_kept_lambda": 28,
                "num_values_explored": 301,
                "num_values_kept": 40,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5083727892488241,
            "num_unique_values": 59,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.676156583629894,
                "explored_percent_lambda": 46.97508896797153,
                "explored_percent_none": 42.34875444839858,
                "kept_percent_concrete": 16.0,
                "kept_percent_lambda": 84.0,
                "num_examples": 3,
                "num_explored_concrete": 30,
                "num_explored_lambda": 132,
                "num_explored_none": 119,
                "num_inputs": 1,
                "num_kept_concrete": 8,
                "num_kept_lambda": 42,
                "num_values_explored": 281,
                "num_values_kept": 50,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5041661127470434,
            "num_unique_values": 39,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.631229235880399,
                "explored_percent_lambda": 42.857142857142854,
                "explored_percent_none": 46.51162790697674,
                "kept_percent_concrete": 30.0,
                "kept_percent_lambda": 70.0,
                "num_examples": 3,
                "num_explored_concrete": 32,
                "num_explored_lambda": 129,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 9,
                "num_kept_lambda": 21,
                "num_values_explored": 301,
                "num_values_kept": 30,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5168648459948599,
            "num_unique_values": 47,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.19939577039275,
                "explored_percent_lambda": 35.34743202416919,
                "explored_percent_none": 50.453172205438065,
                "kept_percent_concrete": 36.8421052631579,
                "kept_percent_lambda": 63.1578947368421,
                "num_examples": 3,
                "num_explored_concrete": 47,
                "num_explored_lambda": 117,
                "num_explored_none": 167,
                "num_inputs": 1,
                "num_kept_concrete": 14,
                "num_kept_lambda": 24,
                "num_values_explored": 331,
                "num_values_kept": 38,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5097449710592628,
            "num_unique_values": 42,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 11.764705882352942,
                "explored_percent_lambda": 50.678733031674206,
                "explored_percent_none": 37.55656108597285,
                "kept_percent_concrete": 18.75,
                "kept_percent_lambda": 81.25,
                "num_examples": 3,
                "num_explored_concrete": 26,
                "num_explored_lambda": 112,
                "num_explored_none": 83,
                "num_inputs": 2,
                "num_kept_concrete": 6,
                "num_kept_lambda": 26,
                "num_values_explored": 221,
                "num_values_kept": 32,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.506514506880194,
            "num_unique_values": 42,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.218649517684888,
                "explored_percent_lambda": 37.942122186495176,
                "explored_percent_none": 49.839228295819936,
                "kept_percent_concrete": 33.333333333333336,
                "kept_percent_lambda": 66.66666666666667,
                "num_examples": 5,
                "num_explored_concrete": 38,
                "num_explored_lambda": 118,
                "num_explored_none": 155,
                "num_inputs": 1,
                "num_kept_concrete": 11,
                "num_kept_lambda": 22,
                "num_values_explored": 311,
                "num_values_kept": 33,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5199928130023181,
            "num_unique_values": 44,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.183279742765274,
                "explored_percent_lambda": 38.90675241157556,
                "explored_percent_none": 47.90996784565916,
                "kept_percent_concrete": 34.285714285714285,
                "kept_percent_lambda": 65.71428571428571,
                "num_examples": 3,
                "num_explored_concrete": 41,
                "num_explored_lambda": 121,
                "num_explored_none": 149,
                "num_inputs": 1,
                "num_kept_concrete": 12,
                "num_kept_lambda": 23,
                "num_values_explored": 311,
                "num_values_kept": 35,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5077666928991675,
            "num_unique_values": 48,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 10.299003322259136,
                "explored_percent_lambda": 41.86046511627907,
                "explored_percent_none": 47.840531561461795,
                "kept_percent_concrete": 25.641025641025642,
                "kept_percent_lambda": 74.35897435897436,
                "num_examples": 3,
                "num_explored_concrete": 31,
                "num_explored_lambda": 126,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 10,
                "num_kept_lambda": 29,
                "num_values_explored": 301,
                "num_values_kept": 39,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5141692198812962,
            "num_unique_values": 42,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 15.112540192926046,
                "explored_percent_lambda": 36.97749196141479,
                "explored_percent_none": 47.90996784565916,
                "kept_percent_concrete": 40.625,
                "kept_percent_lambda": 59.375,
                "num_examples": 5,
                "num_explored_concrete": 47,
                "num_explored_lambda": 115,
                "num_explored_none": 149,
                "num_inputs": 2,
                "num_kept_concrete": 13,
                "num_kept_lambda": 19,
                "num_values_explored": 311,
                "num_values_kept": 32,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5043983431532979,
            "num_unique_values": 43,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 12.371134020618557,
                "explored_percent_lambda": 42.955326460481096,
                "explored_percent_none": 44.67353951890034,
                "kept_percent_concrete": 27.272727272727273,
                "kept_percent_lambda": 72.72727272727273,
                "num_examples": 3,
                "num_explored_concrete": 36,
                "num_explored_lambda": 125,
                "num_explored_none": 130,
                "num_inputs": 2,
                "num_kept_concrete": 9,
                "num_kept_lambda": 24,
                "num_values_explored": 291,
                "num_values_kept": 33,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5027774949558079,
            "num_unique_values": 55,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.504823151125402,
                "explored_percent_lambda": 43.08681672025723,
                "explored_percent_none": 43.40836012861736,
                "kept_percent_concrete": 20.0,
                "kept_percent_lambda": 80.0,
                "num_examples": 5,
                "num_explored_concrete": 42,
                "num_explored_lambda": 134,
                "num_explored_none": 135,
                "num_inputs": 2,
                "num_kept_concrete": 9,
                "num_kept_lambda": 36,
                "num_values_explored": 311,
                "num_values_kept": 45,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.515042086597532,
            "num_unique_values": 40,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 14.953271028037383,
                "explored_percent_lambda": 34.57943925233645,
                "explored_percent_none": 50.467289719626166,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 5,
                "num_explored_concrete": 48,
                "num_explored_lambda": 111,
                "num_explored_none": 162,
                "num_inputs": 2,
                "num_kept_concrete": 12,
                "num_kept_lambda": 18,
                "num_values_explored": 321,
                "num_values_kept": 30,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5258904509246349,
            "num_unique_values": 39,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 13.745704467353951,
                "explored_percent_lambda": 41.92439862542955,
                "explored_percent_none": 44.329896907216494,
                "kept_percent_concrete": 27.586206896551722,
                "kept_percent_lambda": 72.41379310344827,
                "num_examples": 5,
                "num_explored_concrete": 40,
                "num_explored_lambda": 122,
                "num_explored_none": 129,
                "num_inputs": 2,
                "num_kept_concrete": 8,
                "num_kept_lambda": 21,
                "num_values_explored": 291,
                "num_values_kept": 29,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.0
}