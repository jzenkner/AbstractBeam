{"add-k with k=5": ["(lambda (map (lambda (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 $0)))))) $0))", 13], "append-index-k with k=1": ["(lambda (fold $0 (cons (car $0) empty) (lambda (lambda (cons $1 $0)))))", 9], "append-index-k with k=5": ["(lambda (fold $0 (cons (car (cdr (cdr (cdr (cdr $0))))) empty) (lambda (lambda (cons $1 $0)))))", 13], "append-k with k=1": ["(lambda (fold $0 (cons 1 empty) (lambda (lambda (cons $1 $0)))))", 8], "append-k with k=2": ["(lambda (fold $0 (cons (+ 1 1) empty) (lambda (lambda (cons $1 $0)))))", 10], "bool-identify-geq-k with k=5": ["(lambda (map (lambda (gt? (- $0 (+ 1 (+ 1 1))) 1)) $0))", 11], "bool-identify-is-mod-k with k=2": ["(lambda (map (lambda (gt? 1 (mod $0 (+ 1 1)))) $0))", 9], "bool-identify-is-mod-k with k=5": ["(lambda (map (lambda (gt? 1 (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1))))))) $0))", 15], "bool-identify-k with k=5": ["(lambda (map (lambda (eq? $0 (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))", 13], "caesar-cipher-k-modulo-n with k=1 and n=4": ["(lambda (map (lambda (mod (#(+ 1) $0) (#(+ 1) 1))) $0))", 9], "caesar-cipher-k-modulo-n with k=2 and n=3": ["(lambda (map (lambda (index $0 (cons (+ 1 1) (cons 0 (cons 1 empty))))) $0))", 13], "caesar-cipher-k-modulo-n with k=2 and n=4": ["(lambda (map (lambda (mod (+ 1 (+ 1 $0)) (+ 1 (+ 1 (+ 1 1))))) $0))", 15], "caesar-cipher-k-modulo-n with k=2 and n=5": ["(lambda (map (lambda (mod (+ 1 (+ 1 $0)) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))", 17], "caesar-cipher-k-modulo-n with k=3 and n=5": ["(lambda (map (lambda (mod (+ $0 (+ 1 (+ 1 1))) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))", 19], "caesar-cipher-k-modulo-n with k=4 and n=5": ["(lambda (map (lambda (mod (+ $0 (+ 1 (+ 1 (+ 1 1)))) (+ 1 (+ 1 (+ 1 (+ 1 1)))))) $0))", 19], "count-k with k=1": ["(lambda (fold $0 (length $0) (lambda (lambda (- $0 (mod 1 $1))))))", 9], "count-k with k=2": ["(lambda (fold $0 0 (lambda (lambda (if (eq? $1 (+ 1 1)) (+ 1 $0) $0)))))", 13], "count-k with k=4": ["(lambda (fold $0 0 (lambda (lambda (if (eq? $1 (+ 1 (+ 1 (+ 1 1))) (+ 1 $0) $0)))))", 17], "dup": ["(lambda (fold $0 empty (lambda (lambda (cons $1 (cons $1 $0))))))", 8], "has-k with k=1": ["(lambda (fold $0 (empty? $0) (lambda (lambda (eq? $1 (if $0 $1 1))))))", 10], "has-k with k=2": ["(lambda (is-prime (fold $0 1 (lambda (lambda (if (is-square $0) $1 (car (cdr $2))))))))", 11], "has-k with k=4": ["(lambda (eq? 0 (fold $0 1 (lambda (lambda (* $0 (- $1 (+ 1 (+ 1 (+ 1 1)))))))))", 16], "is-evens": ["(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))", 11], "is-mod-k with k=4": ["(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 (+ $0 $0))))))))", 11], "is-mod-k with k=5": ["(lambda (gt? (index (length $0) (cons 1 $0)) (* (length $0) (+ 1 (+ 1 (+ 1 1)))))", 17], "keep-mod-head": ["(lambda (fold (cdr $0) empty (lambda (lambda (if ((lambda (car (map (lambda (gt? 1 (mod $0 (car $1) (fold empty (cons $0 empty) (lambda (lambda (cons $1 $0)))))))))) $1)(cons $1 $0) $0)))))", 26], "keep-mod-k with k=2": ["(lambda (fold $0 empty (lambda (lambda (if (is-square (mod (+ $0 $0) (+ 1 (+ 1 (+ 1 1))))) $1) (cons $1 $0) $0))))", 21], "keep-mod-k with k=3": ["(lambda (fold $0 empty (lambda (lambda (if (is-square (+ 1 (mod $0 (+ 1 (+ 1) 1)))) $1) (cons $1 $0) $0))))", 19], "keep-mod-k with k=4": ["(lambda (fold $0 empty (lambda (lambda (if (eq? 0 (mod $0 (+ 1 (+ 1 (+ 1 1))))) $1) (cons $1 $0) $0))))", 20], "keep-mod-k with k=5": ["(lambda (fold $0 empty (lambda (lambda (if (eq? 0 (mod $0 (+ 1 (+ 1 (+ 1 (+ 1 1))))))) $1) (cons $1 $0) $0)))", 22], "kth-smallest with k=1": ["(lambda (fold $0 (car $0) (lambda (lambda (if (gt? $0 $1) $1 $0)))))", 10], "max": ["(lambda (fold $0 0 (lambda (lambda (if (gt? $1 $0) $1 $0)))))", 9], "min": ["(lambda (fold $0 (car $0) (lambda (lambda (if (gt? $1 $0) $0 $1)))))", 10], "mult-k with k=4": ["(lambda (map (lambda (+ $0 $0)) (map (lambda (+ $0 $0)) $0)))", 9], "pow-k with k=4": ["(lambda (map (lambda (* $0 $0)) (map (lambda (* $0 $0)) $0)))", 9], "pow-k with k=5": ["(lambda (map (lambda (* $0 (* $0 (* $0 (* $0 $0))))) $0))", 11], "prepend-k with k=4": ["(lambda (cons (+ 1 (+ 1 (+ 1 1))) $0))", 9], "prepend-k with k=5": ["(lambda (cons (+ 1 (+ 1 (+ 1 (+ 1 1)))) $0))", 11], "remove-index-k with k=3": ["(lambda (cons (car $0) (cons (car (cdr $0)) (cdr (cdr (cdr $0))))))", 11], "remove-index-k with k=5": ["(lambda (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) (cons (car (cdr (cdr (cdr $0)))) (cdr (cdr (cdr (cdr (cdr $0))))))))))", 24], "remove-mod-head": ["(lambda (fold $0 empty (lambda (lambda (if (gt? (mod $0 (car $1)) 0) $1) (cons $1 $0) $0))))", 15], "remove-mod-k with k=4": ["(lambda (fold $0 empty (lambda (lambda (if (gt? (mod $1 (+ 1 (+ 1 (+ 1 1)))) 0) (cons $1 $0) $0)))))", 19], "remove-mod-k with k=5": ["(lambda (fold $0 empty (lambda (lambda (if (gt? (mod $1 (+ 1 (+ 1 (+ 1 (+ 1 1))))) 0) (cons $1 $0) $0)))))", 21], "repeat-k with k=3": ["(lambda (fold (fold $0 $0 (lambda (lambda (cons $1 $0)))) $0 (lambda (lambda (cons $1 $0)))))", 11], "repeat-k with k=4": ["(lambda (fold $0 (fold $0 (fold $0 $0 (lambda (lambda (cons $1 $0)))) (lambda (lambda (cons $1 $0)))) (lambda (lambda (cons $1 $0)))))", 16], "repeat-k with k=5": ["(lambda (fold (fold $0 (fold $0 (fold $0 $0 (lambda (lambda (cons $1 $0)))) (lambda (lambda (cons $1 $0)))) (lambda (lambda (cons $1 $0)))) $0 (lambda (lambda (cons $1 $0)))))", 21], "replace-all-with-index-k with k=5": ["(lambda (map (lambda (index 1 (cdr (cdr (cdr $1))))) $0))", 8], "rotate-k with k=1": ["(lambda (fold (cdr $0) $0 (lambda (lambda (fold (cdr $0) (cons (car $0) empty) (lambda (lambda (cons $1 $0))))))))", 14], "slice-k-n with k=1 and n=3": ["(lambda (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) empty))))", 12], "slice-k-n with k=1 and n=5": ["(lambda (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) (cons (car (cdr (cdr (cdr $0)))) (cons (car (cdr (cdr (cdr (cdr $0))))) empty))))))", 26], "slice-k-n with k=2 and n=4": ["(lambda (fold (cdr $0) $0 (lambda (lambda (cons $0  (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) empty))))))))", 19], "slice-k-n with k=3 and n=2": ["(lambda (fold (cdr (cdr $0)) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))", 11], "slice-k-n with k=4 and n=2": ["(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))", 12], "slice-k-n with k=4 and n=4": ["(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr (cdr $0))) (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr (cdr (cdr (cdr $0))))) empty)))", 27], "slice-k-n with k=5 and n=1": ["(lambda (cons (car (cdr (cdr (cdr (cdr $0))))) empty))", 8], "slice-k-n with k=5 and n=3": ["(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 empty))))))", 17], "slice-k-n with k=5 and n=5": ["(lambda (#(lambda (#(lambda (cons (car (cdr $0)))) $0 (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) (#(lambda (cdr (cdr $0))) $0)))) (cdr (#(lambda (cdr (cdr $0))) $0))))", 32], "sum": ["(lambda (fold $0 0 (lambda (lambda (+ $0 $1)))))", 6], "take-k with k=5": ["(lambda (fold $0 $0 (lambda (lambda (cons $1 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (cons (car (cdr $0)))) (cdr $0) (#(lambda (cons (car (cdr $0)))) (cdr (cdr $0)) empty))))))))", 28], "remove empty lists": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (length $0) 0))))", 14], "keep eq 0": ["(lambda (fold $0 $0 (lambda (lambda (if (eq? $1 0) $0 (cdr (map (lambda 0) $0)))))))", 12], "keep gt 0": ["(lambda (fold $0 empty (lambda (lambda (if (eq? $1 1) $0 (cons $1 $0))))))", 11], "remove eq 1": ["(lambda (fold $0 empty (lambda (lambda (if (eq? $1 1) $0 (cons $1 $0))))))", 11], "remove gt 1": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (#(+ 1) 1) $0))))", 14], "keep eq 2": ["(lambda (fold $0 $0 (lambda (lambda (if (eq? $1 (#(+ 1) 1)) $0 (cdr (map (lambda (length $1)) $0)))))))", 15], "remove eq 2": ["(lambda (fold $0 empty (lambda (lambda (if (eq? $1 (#(+ 1) 1)) $0 (cons $1 $0))))))", 12], "keep gt 2": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 (#(+ 1) 1)))))", 14], "keep eq 3": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 #(+ 1 (#(+ 1) 1))))))", 16], "remove eq 3": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod (#(+ 1) $0) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))) 0))))", 21], "remove gt 3": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (length (cdr $1)) $0))))", 14], "add-k with k=1": ["(lambda (map (lambda (#(+ 1) $0)) $0))", 5], "add-k with k=3": ["(lambda (map (lambda (#(+ 1) (#(+ 1) (#(+ 1) $0)))) $0))", 9], "add-k with k=4": ["(lambda (map (lambda (+ #(#(+ 1) (#(+ 1) (#(+ 1) 1))) $0)) $0))", 11], "append-index-k with k=2": ["(lambda (fold $0 (cons (car (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))", 9], "append-index-k with k=3": ["(lambda (fold $0 (#(lambda (cons (car (cdr $0)))) (cdr $0) empty) (lambda (lambda (cons $1 $0)))))", 11], "append-index-k with k=4": ["(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (cons (car (cdr $0)))) (#(lambda (cdr (cdr $0))) $0) empty)))", 15], "append-k with k=0": ["(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))", 7], "append-k with k=3": ["(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons (#(+ 1) (#(+ 1) 1)) empty)))", 13], "append-k with k=4": ["(lambda (fold $0 (cons (#(+ 1) (#(+ 1) (#(+ 1) 1))) empty) (lambda (lambda (cons $1 $0)))))", 13], "append-k with k=5": ["(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1))))))", 19], "bool-identify-geq-k with k=0": ["(lambda (map (lambda (gt? (#(+ 1) $0) 0)) $0))", 7], "bool-identify-geq-k with k=1": ["(lambda (map (lambda (gt? $0 0)) $0))", 5], "bool-identify-geq-k with k=4": ["(lambda (map (lambda (gt? $0 #(+ 1 (#(+ 1) 1)))) $0))", 9], "bool-identify-is-mod-k with k=3": ["(lambda (map (lambda (gt? 1 (mod $0 (#(+ 1) (#(+ 1) 1))))) $0))", 11], "bool-identify-is-mod-k with k=4": ["(lambda (map (lambda (gt? 1 (mod $0 #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))) $0))", 13], "bool-identify-k with k=3": ["(lambda (map (lambda (eq? $0 (#(+ 1) (#(+ 1) 1)))) $0))", 9], "bool-identify-k with k=4": ["(lambda (map (lambda (eq? $0 (#(+ 1) (#(+ 1) (#(+ 1) 1))))) $0))", 11], "caesar-cipher-k-modulo-n with k=1 and n=2": ["(lambda (map (lambda (mod (+ 1 $0) (#(+ 1) 1))) $0))", 8], "caesar-cipher-k-modulo-n with k=1 and n=3": ["(lambda (map (lambda (mod (#(+ 1) $0) #(+ 1 (#(+ 1) 1)))) $0))", 11], "caesar-cipher-k-modulo-n with k=1 and n=5": ["(lambda (map (lambda (mod (#(+ 1) $0) (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))) $0))", 15], "caesar-cipher-k-modulo-n with k=3 and n=4": ["(lambda (map (lambda (mod (#(+ 1) (#(+ 1) (#(+ 1) $0))) #(#(+ 1) (#(+ 1) (#(+ 1) 1))))) $0))", 17], "caesar-cipher-k-modulo-n with k=4 and n=3": ["(lambda (map (lambda (if (is-prime $0) 0 (#(+ 1) $0))) $0))", 9], "caesar-cipher-k-modulo-n with k=5 and n=2": ["(lambda (map (lambda (mod ((#(+ 1) (#(+ 1) #(+ 1) (#(+ 1) (#(+ 1) $0))))) (#(+ 1) 1))) $0))", 19], "caesar-cipher-k-modulo-n with k=5 and n=3": ["(lambda (map (lambda (index $0 (cons (+ 1 1) (cons 0 (cons 1 empty))))) $0))", 12], "caesar-cipher-k-modulo-n with k=5 and n=4": ["(lambda (map (lambda (if (is-prime (- $0 1)) 0 (+ $0 1))) $0))", 11], "count-head-in-tail": ["(lambda (fold (cdr $0) 0 (lambda (lambda (if (eq? $1 (car $2)) (#(+ 1) $0) $0)))))", 13], "count-k with k=0": ["(lambda (#(lambda (lambda (fold $1 0 (lambda (lambda (if (eq? $1 $2) (#(+ 1) $0) $0)))))) $0 0))", 13], "count-k with k=3": ["(lambda (#(lambda (lambda (fold $1 0 (lambda (lambda (if (eq? $1 $2) (#(+ 1) $0) $0)))))) $0 #(+ 1 (#(+ 1) 1))))", 17], "count-k with k=5": ["(lambda (fold $0 0 (lambda (lambda (if (eq? $1 (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1))))) (#(+ 1) $0) $0)))))", 19], "drop-k with k=3": ["(lambda (cdr (cdr (cdr $0))))", 4], "drop-k with k=5": ["(lambda (cdr (cdr (cdr (cdr (cdr $0))))))", 6], "empty": ["(lambda (empty? $0))", 1], "evens": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (mod $0 (#(+ 1) 1)) 0))))", 17], "has-head-in-tail": ["(lambda (is-square (#(+ 1) (mod (car $0) (index (length (#(lambda (cdr (cdr $0))) $0)) $0)))))", 13], "has-k with k=0": ["(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $0 $1))))))", 8], "has-k with k=3": ["(lambda (gt? (#(lambda (lambda (fold $1 0 (lambda (lambda (if (eq? $1 $2) (#(+ 1) $0) $0)))))) $0 #(+ 1 (#(+ 1) 1))) 0))", 19], "has-k with k=5": ["(lambda (eq? (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))) (index (length $0) (cons 1 $0))))", 16], "head": ["(lambda (car $0))", 2], "index-k with k=1": ["(lambda (car $0))", 2], "index-k with k=3": ["(lambda (index 1 (cdr $0)))", 4], "index-k with k=5": ["(lambda (car (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))", 8], "is-mod-k with k=2": ["(lambda (empty? (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(#(+ 1) (#(+ 1) (#(+ 1) 1))) $0))))))", 20], "is-mod-k with k=3": ["(lambda (eq? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (map (lambda (#(lambda (mod (#(+ 1) $0) #(+ 1 (#(+ 1) 1)))) $0)) $0)) 1))", 20], "is-primes": ["(lambda (fold $0 (empty? empty) (lambda (lambda (if $0 (is-prime $1) $0)))))", 7], "kth-largest with k=1": ["(lambda (fold $0 (car $0) (lambda (lambda (if (gt? $1 $0) $1 $0)))))", 10], "last": ["(lambda (index (length (cdr $0)) $0))", 5], "len": ["(lambda (length $0))", 2], "modulo-k with k=1": ["(lambda (map (lambda 0) $0))", 3], "modulo-k with k=2": ["(lambda (map (lambda (mod $0 (#(+ 1) 1))) $0))", 7], "modulo-k with k=3": ["(lambda (map (lambda (mod $0 (+ (+ 1 1) 1))) $0))", 9], "modulo-k with k=4": ["(lambda (map (lambda (mod $0 #(#(+ 1) (#(+ 1) (#(+ 1) 1))))) $0))", 11], "modulo-k with k=5": ["(lambda (map (lambda (mod $0 (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))) $0))", 13], "mult-k with k=0": ["(lambda (map (lambda 0) $0))", 3], "mult-k with k=2": ["(lambda (map (lambda (+ $0 $0)) $0))", 5], "mult-k with k=3": ["(lambda (map (lambda (+ $0 (+ $0 $0))) $0))", 7], "mult-k with k=5": ["(lambda (map (lambda (* $0 (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))) $0))", 13], "odds": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod $0 (#(+ 1) 1)) 0))))", 17], "prepend-index-k with k=1": ["(lambda (cons (cdr $0) $0))", 4], "prepend-index-k with k=2": ["(lambda (cons  (cdr (cdr $0)) $0))  ", 5], "prepend-index-k with k=4": ["(lambda (cons (car (cdr (cdr (cdr $0))))$0))  ", 7], "prepend-k with k=0": ["(lambda (cons 0 $0))", 3], "product": ["(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))", 6], "remove-index-k with k=2": ["(lambda (cons (car $0) (cdr (cdr $0)))", 6], "remove-index-k with k=4": ["(lambda (cons (car $0) (#(lambda (cons (car (cdr $0)))) $0 (cons (car (cdr (cdr $0))) (cdr (cdr (cdr (cdr $0))))))))", 18], "remove-mod-k with k=2": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (#(lambda (lambda (mod (+ $1 $0) #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))) $0 $0)))))", 24], "remove-mod-k with k=3": ["(lambda (fold $0 empty (lambda (lambda (if (is-square (mod (#(+ 1) (#(+ 1) $1)) (#(+ 1) (#(+ 1) 1)))) (cons $1 $0) $0)))))", 19], "repeat-k with k=2": ["(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))", 6], "replace-all-with-index-k with k=1": ["(lambda (map (lambda (car $1)) $0))", 4], "replace-all-with-index-k with k=4": ["(lambda (map (lambda (car (cdr (cdr (cdr $1))))) $0))", 7], "reverse": ["(lambda (fold $0 empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons $1 empty))))))", 11], "slice-k-n with k=1 and n=1": ["(lambda (cons (car $0) empty))", 3], "slice-k-n with k=1 and n=4": ["(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr $0)) empty)))", 22], "slice-k-n with k=2 and n=2": ["(lambda (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) empty)))", 9], "slice-k-n with k=2 and n=3": ["(lambda (#(lambda (cons (car (cdr $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr $0)) empty)))", 17], "slice-k-n with k=2 and n=5": ["(lambda (#(lambda (cons (car (cdr $0)))) $0 (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) (cdr (cdr $0)))))", 31], "slice-k-n with k=3 and n=3": ["(lambda (#(lambda (cons (car (cdr $0)))) (cdr $0) (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr (cdr $0))) empty)))", 19], "slice-k-n with k=3 and n=4": ["(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr $0)) (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (cdr (cdr (cdr (cdr $0)))) empty)))", 26], "slice-k-n with k=3 and n=5": ["(lambda (fold (#(lambda (cdr (cdr $0))) $0) $0 (lambda (lambda (cons $1 (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) $0))))))", 32], "slice-k-n with k=4 and n=1": ["(lambda (#(lambda (cons (car (cdr $0)))) (cdr (cdr $0)) empty))", 7], "slice-k-n with k=4 and n=3": ["(lambda (#(lambda (cons (car (cdr $0)))) (#(lambda (cdr (cdr $0))) $0) (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) (cdr (cdr $0))) empty)))", 23], "slice-k-n with k=4 and n=5": ["(lambda (#(lambda (#(lambda (cons (car (cdr $0)))) $0 (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) (#(lambda (cdr (cdr $0))) $0)))) (#(lambda (cdr (cdr $0))) $0)))", 36], "slice-k-n with k=5 and n=2": ["(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0)) empty))", 16], "slice-k-n with k=5 and n=4": ["(lambda (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) (#(lambda (cdr (cdr $0))) (cdr (cdr $0)))))", 29], "tail": ["(lambda (cdr $0))", 2], "take-k with k=1": ["(lambda (cons (car $0) empty))", 3], "take-k with k=2": ["(lambda (cons (car $0) (#(lambda (cons (car (cdr $0)))) $0 empty)))", 8], "take-k with k=3": ["(lambda (cons (car $0) (#(lambda (cons (car (cdr $0)))) $0 (#(lambda (cons (car (cdr $0)))) (cdr $0) empty))))", 14], "take-k with k=4": ["(lambda (#(lambda (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) $0 (#(lambda (lambda (cons (car $1) (#(lambda (cons (car (cdr $0)))) $1 $0)))) (#(lambda (cdr (cdr $0))) $0) empty))) $0))", 24], "+1 maximum list": ["(lambda (#(+ 1) (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))))", 11], "keep squares": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))", 12], "keep primes": ["(lambda (fold $0 empty (lambda (lambda (if (is-prime $1) (cons $1 $0) $0)))))", 9], "remove eq 0": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 0))))", 13], "remove gt 0": ["(lambda (fold $0 $0 (lambda (lambda (if (eq? $1 0) $0 (cdr (map (lambda 0) $0)))))))", 12], "keep eq 1": ["(lambda (fold $0 $0 (lambda (lambda (if (eq? $1 1) $0 (cdr (map (lambda 1) $0)))))))", 12], "keep gt 1": ["(lambda (fold $0 empty (lambda (lambda (if (gt? $1 1) (cons $1 $0) $0)))))", 10], "remove gt 2": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? #(+ 1 (#(+ 1) 1)) $0))))", 17], "keep gt 3": ["(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 #(+ 1 (#(+ 1) 1))))))", 17], "slice-k-n with k=2 and n=1": ["(lambda (cons (car  (cdr (cdr $0))) empty))", 6], "bool-identify-is-mod-k with k=1": ["(lambda (map (lambda 0) $0))", 3], "bool-identify-is-prime": ["(lambda (map (lambda (if (is-prime $0) 1 0)) $0))", 7], "bool-identify-k with k=0": ["(lambda (map (lambda (if (eq $0 0) 1 0)) $0))", 8], "bool-identify-k with k=1": ["(lambda (map (lambda (if (eq $0 1)) 1 0)) $0))", 8], "caesar-cipher-k-modulo-n with k=3 and n=2": ["(lambda (map (lambda (mod (#(+ 1) (#(+ 1) (#(+ 1) $0))) (#(+ 1) 1))) $0))", 15], "drop-k with k=2": ["(lambda  (cdr (cdr $0)))", 3], "drop-k with k=1": ["(lambda  (cdr $0))", 2], "drop-k with k=4": ["(lambda (cdr (cdr (cdr (cdr $0)))))", 5], "index-head": ["(lambda (car $0))", 2], "index-k with k=2": ["(lambda (car (cdr (cdr $0))))", 4], "index-k with k=4": ["(lambda (car (cdr (cdr (cdr (cdr $0))))))", 6], "is-odds": ["(lambda (is-prime (fold $0 1 (lambda (lambda (- $0 (mod $1 $0)))))))", 9], "prepend-index-k with k=5": ["(lambda (cons (car (car (cdr (cdr (cdr $0))))) $0))  ", 8], "prepend-index-k with k=3": ["(lambda (cons  (cdr (cdr (cdr $0))) $0))  ", 6], "prepend-k with k=3": ["(lambda (cons (+ 1 (+ 1 1)) $0))", 7], "prepend-k with k=2": ["(lambda (cons (+ 1 1) $0))", 5], "remove-index-k with k=1": ["(lambda (cdr $0))", 2], "replace-all-with-index-k with k=2": ["(lambda (map (lambda (car (cdr $1))) $0))", 5], "replace-all-with-index-k with k=3": ["(lambda (map (lambda (car (cdr (cdr $1)))) $0))", 6], "slice-k-n with k=1 and n=2": ["(lambda (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr $0))) empty)))", 12], "slice-k-n with k=3 and n=1": ["(lambda (cons (car (cdr (cdr (cdr $0)))) empty))", 7], "add-k with k=2": ["(lambda (map (lambda (#(+ 1) (#(+ 1) $0))) $0))", 7], "bool-identify-k with k=2": ["(lambda (map (lambda (if (eq $0 (+ 1 1)) 1 0)) $0))", 10], "prepend-k with k=1": ["(lambda (cons 1 $0))", 3], "kth-largest with k=2": ["?", 30], "kth-largest with k=4": ["?", 30], "kth-largest with k=5": ["?", 30], "kth-smallest with k=2": ["?", 30], "range": ["?", 30], "repeat": ["?", 30], "rotate-k with k=2": ["(lambda (fold (cdr $0) $0 (lambda (lambda (fold (cdr $0) (cons (car $0) empty) (lambda (lambda (fold (cdr $0) (cons (car $0) empty) (lambda (lambda (cons $1 $0)))))))))))", 21], "rotate-k with k=3": ["(lambda (fold (cdr $0) $0 (lambda (lambda (fold (cdr $0) $0 (lambda (lambda (fold (cdr $0) (cons (car $0) empty) (lambda (lambda (fold (cdr $0) (cons (car $0) empty) (lambda (lambda (cons $1 $0)))))))))))))", 25], "bool-identify-geq-k with k=2": ["Map((lambda v1: If(Greater(v1, 1), 1, 0)), x1)", 9], "bool-identify-geq-k with k=3": ["Map((lambda v1: If(Greater(v1, Add(1,1)), 1, 0)), x1)", 11], "is-mod-k with k=1": ["Map((lambda u1: 1), x1)", 3], "is-squares": ["?", 30]}