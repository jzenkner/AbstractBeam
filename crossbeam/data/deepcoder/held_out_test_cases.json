[
    {
        "name": "none:deepcoder_0",
        "solution": "Sum(Take(k, Sort(b)))",
        "held_out_inputs_dict": {
            "k": [ 2, 4, 2 ],
            "b": [ [ 16, 28, 9, 19, 24 ], [ 19, 33, 24, 30, 22 ], [ 24, 25, 42, 36, 32, 39, 31, 36, 38 ] ]
        },
        "held_out_outputs": [
            25,
            95,
            49
        ]
    },
    {
        "name": "none:hailstone",
        "solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
        "held_out_inputs_dict": {
            "x": [ 20, 13, 25 ]
        },
        "held_out_outputs": [
            10,
            40,
            76
        ]
    },
    {
        "name": "none:coins",
        "solution": "Subtract(Subtract(Multiply(x, y), x), y)",
        "held_out_inputs_dict": {
            "x": [ 11, 8, 9 ],
            "y": [ 14, 14, 9 ]
        },
        "held_out_outputs": [
            129,
            90,
            63
        ]
    },
    {
        "name": "none:next_multiple",
        "solution": "Multiply(Add(IntDivide(x, k), 1), k)",
        "held_out_inputs_dict": {
            "x": [ 12, 3, 49 ],
            "k": [ 10, 7, 4 ]
        },
        "held_out_outputs": [
            20,
            7,
            52
        ]
    },
    {
        "name": "none:drop_last",
        "solution": "Take(Subtract(0, n), x)",
        "held_out_inputs_dict": {
            "x": [ [ 57, 40, 5, 69, 79, -4, 55, 76 ], [ 41, 29, 26, 33, 31, 42, 28, 30, 34 ], [ -2, -2, 27, 2, -5, 32, 49, -4 ] ],
            "n": [ 2, 3, 2 ]
        },
        "held_out_outputs": [
            [ 57, 40, 5, 69, 79, -4 ],
            [ 41, 29, 26, 33, 31, 42 ],
            [ -2, -2, 27, 2, -5, 32 ]
        ]
    },
    {
        "name": "none:decreasing_suffix",
        "solution": "Reverse(Sort(Take(n, Reverse(x))))",
        "held_out_inputs_dict": {
            "x": [ [ -15, 5, 20, -58, -6, -21 ], [ 66, 45, -17, -17, 33, -33 ], [ -57, 57, 52, 59, 2, -22, -42, 21 ] ],
            "n": [ 2, 3, 4 ]
        },
        "held_out_outputs": [
            [ -6, -21 ],
            [ 33, -17, -33 ],
            [ 21, 2, -22, -42 ]
        ]
    },
    {
        "name": "none:remove_ends",
        "solution": "Take(-1, Drop(1, x))",
        "held_out_inputs_dict": {
            "x": [ [ 35, 37, 55, 74, 47, 53, 48, 11 ], [ 83, 51, 21, 83, 87, 57, 52 ], [ 38, 54, 38, 60, 37, 50, 60 ] ]
        },
        "held_out_outputs": [
            [ 37, 55, 74, 47, 53, 48 ],
            [ 51, 21, 83, 87, 57 ],
            [ 54, 38, 60, 37, 50 ]
        ]
    },
    {
        "name": "none:slice",
        "solution": "Drop(i, Take(j, x))",
        "held_out_inputs_dict": {
            "x": [ [ 47, -14, 34, 15, 48, 58, 10, 39 ], [ -22, -17, -21, -16, -28, -15, -27, -25, -19 ], [ -11, 0, 11, 2, 40, 31, 46 ] ],
            "i": [ 2, 4, 3 ],
            "j": [ 5, 6, 8 ]
        },
        "held_out_outputs": [
            [ 34, 15, 48 ],
            [ -28, -15 ],
            [ 2, 40, 31, 46 ]
        ]
    },
    {
        "name": "none:top_k",
        "solution": "Take(k, Reverse(Sort(x)))",
        "held_out_inputs_dict": {
            "x": [ [ 35, 3, 12, 8, -33, 12 ], [ -6, -67, -26, -62, -54, -68, -49, -7 ], [ 15, -3, 4, 16, 15, 4, 13, -11, -10 ] ],
            "k": [ 4, 2, 4 ]
        },
        "held_out_outputs": [
            [ 35, 12, 12, 8 ],
            [ -6, -7 ],
            [ 16, 15, 15, 13 ]
        ]
    },
    {
        "name": "none:kth_largest",
        "solution": "Access(k, Reverse(Sort(x)))",
        "held_out_inputs_dict": {
            "x": [ [ 38, 3, 14, -2, 40, 8, 20, 15, 43, 16 ], [ 25, 20, 22, 19 ], [ 19, 67, 54, 67, 38, 37, 17, 53, 20 ] ],
            "k": [ 0, 1, 6 ]
        },
        "held_out_outputs": [
            43,
            22,
            20
        ]
    },
    {
        "name": "none:outer_average",
        "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
        "held_out_inputs_dict": {
            "x": [ [ 14, 38, 60, 48, 38, 53 ], [ -11, 62, -20, 50, 4, -4, 9, 52, -13, 41 ], [ 28, -3, -10, -5, 15, 13, -5, -3, 31 ] ]
        },
        "held_out_outputs": [
            33,
            15,
            29
        ]
    },
    {
        "name": "none:triple_median",
        "solution": "Access(1, Sort(x))",
        "held_out_inputs_dict": {
            "x": [ [ -28, -23, 2 ], [ 18, 11, 24 ], [ 8, 12, 21 ] ]
        },
        "held_out_outputs": [
            -23,
            18,
            12
        ]
    },
    {
        "name": "none:range",
        "solution": "Subtract(Maximum(x), Minimum(x))",
        "held_out_inputs_dict": {
            "x": [ [ -6, 14, -9, 9, 4, -28, -42 ], [ 11, 15, 8, 17, 3, 0, -7, 13, 7, 6 ], [ -42, -31, 5, 56, -16, -40, 24, -9, 18 ] ]
        },
        "held_out_outputs": [
            56,
            24,
            98
        ]
    },
    {
        "name": "none:range_both",
        "solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
        "held_out_inputs_dict": {
            "x": [ [ 16, -3, 9, 45, 54, 37, -1 ], [ -22, 6, -2, -8 ], [ 37, 57, -16, 16, 37, 60, 66 ] ],
            "y": [ [ -29, -31, -23 ], [ -60, -7, -11, -20, -33, -18, -51, 10 ], [ 8, 11, 27, 4, 6 ] ]
        },
        "held_out_outputs": [
            85,
            70,
            82
        ]
    },
    {
        "name": "none:slope",
        "solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
        "held_out_inputs_dict": {
            "x": [ [ 14, 9 ], [ 5, -1 ], [ 32, 22 ] ],
            "y": [ [ 67, -66 ], [ -16, -18 ], [ 2, 14 ] ]
        },
        "held_out_outputs": [
            26,
            0,
            -2
        ]
    },
    {
        "name": "map:cube",
        "solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 1 ], [ 2, 4, 1, 2, 4, 1 ], [ 0, 0, 0, -1, 0, -2, -2 ] ]
        },
        "held_out_outputs": [
            [ 1 ],
            [ 8, 64, 1, 8, 64, 1 ],
            [ 0, 0, 0, -1, 0, -8, -8 ]
        ]
    },
    {
        "name": "map:absolute_value",
        "solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -36, -23, -25, 42, -49, -48, -47, -1, -30 ], [ 12, 23, 60, 40, 55, 36 ], [ -33, -19, -34, 7, -21, -21, -19, 3 ] ]
        },
        "held_out_outputs": [
            [ 36, 23, 25, 42, 49, 48, 47, 1, 30 ],
            [ 12, 23, 60, 40, 55, 36 ],
            [ 33, 19, 34, 7, 21, 21, 19, 3 ]
        ]
    },
    {
        "name": "map:multiply_previous",
        "solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ 2, -2, 4, -2, 4, 5, -1, 2 ], [ -3, 3, 4, -2, -2, 4 ], [ 7, 3, -3, -2 ] ]
        },
        "held_out_outputs": [
            [ 2, 6, 12, 6, 12, 20, 2, 2 ],
            [ 12, 6, 12, 6, 6, 12 ],
            [ 42, 6, 12, 6 ]
        ]
    },
    {
        "name": "map:triangular",
        "solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
        "held_out_inputs_dict": {
            "x": [ [ 4, 7, 5, 5, 4, 5, 7, 4, 7 ], [ 3, 3, 2, 3 ], [ 5, 5, 3, 1 ] ]
        },
        "held_out_outputs": [
            [ 10, 28, 15, 15, 10, 15, 28, 10, 28 ],
            [ 6, 6, 3, 6 ],
            [ 15, 15, 6, 1 ]
        ]
    },
    {
        "name": "map:linear_equation",
        "solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
        "held_out_inputs_dict": {
            "x": [ [ 9, -6, 12, 9, 19, 17 ], [ 19, 12, 17, 10 ], [ -7, 6, -8, -14, -6, -10, 5 ] ],
            "a": [ 6, -3, 5 ],
            "b": [ 24, 0, 6 ]
        },
        "held_out_outputs": [
            [ 78, -12, 96, 78, 138, 126 ],
            [ -57, -36, -51, -30 ],
            [ -29, 36, -34, -64, -24, -44, 31 ]
        ]
    },
    {
        "name": "map:linear_transform",
        "solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
        "held_out_inputs_dict": {
            "x": [ [ -2, 2, -3, -8, -9, 1, -7, -9 ], [ -3, 3, -2, -2, 5, -5, 7 ], [ 6, 7, 6, 2, -1 ] ]
        },
        "held_out_outputs": [
            [ -10, 2, -13, -28, -31, -1, -25, -31 ],
            [ -13, 5, -10, -10, 11, -19, 17 ],
            [ 14, 17, 14, 2, -7 ]
        ]
    },
    {
        "name": "map:quadratic_transform",
        "solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 7, -4, -2, -6, -8 ], [ 4, -1, -4, -6, 3, 2, -2 ], [ -8, -8, -3, -3, -4, 5, -1, 2, 0 ] ]
        },
        "held_out_outputs": [
            [ 63, 8, 0, 24, 48 ],
            [ 24, -1, 8, 24, 15, 8, 0 ],
            [ 48, 48, 3, 3, 8, 35, -1, 8, 0 ]
        ]
    },
    {
        "name": "map:clip",
        "solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
        "held_out_inputs_dict": {
            "x": [ [ 19, 41, 5, 40, 18, 28, 27, 25, 44, 14 ], [ 62, 24, 4, 31, 53, 33, 84 ], [ 27, 2, 17, 31, 0, 47, 53, 9 ] ],
            "a": [ 14, 5, 17 ],
            "b": [ 28, 30, 27 ]
        },
        "held_out_outputs": [
            [ 19, 28, 14, 28, 18, 28, 27, 25, 28, 14 ],
            [ 30, 24, 5, 30, 30, 30, 30 ],
            [ 27, 17, 17, 27, 17, 27, 27, 17 ]
        ]
    },
    {
        "name": "map:square_keep_sign",
        "solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 6, 2, 0, -1 ], [ 8, 3, 2, 8, 4, 5 ], [ -1, 0, -1, -5, -5, -4, -2, -2, 1, -2 ] ]
        },
        "held_out_outputs": [
            [ 36, 4, 0, -1 ],
            [ 64, 9, 4, 64, 16, 25 ],
            [ -1, 0, -1, -25, -25, -16, -4, -4, 1, -4 ]
        ]
    },
    {
        "name": "map:sort_square",
        "solution": "Sort(Map(lambda u1: Square(u1), x))",
        "held_out_inputs_dict": {
            "x": [ [ 1, -2, -3, -3, -2 ], [ -3, -2, 5, 7 ], [ -2, -3, 0, -2, 1, 0, -2 ] ]
        },
        "held_out_outputs": [
            [ 1, 4, 4, 9, 9 ],
            [ 4, 9, 25, 49 ],
            [ 0, 0, 1, 4, 4, 4, 9 ]
        ]
    },
    {
        "name": "map:zero_min",
        "solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 1, 2, 5, 30, 30, 5 ], [ 48, 71, 57, 54, 60, 68 ], [ 53, 52, 54, 36, 43 ] ]
        },
        "held_out_outputs": [
            [ 0, 1, 4, 29, 29, 4 ],
            [ 0, 23, 9, 6, 12, 20 ],
            [ 17, 16, 18, 0, 7 ]
        ]
    },
    {
        "name": "map:zero_element",
        "solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 68, 59, 30, 34, 30, 46, 22, 61, 43, 30 ], [ 19, 28, 22, 21, 35, 10, 20, 19, 37, 13 ], [ 1, 19, 18, 13, 1, 17 ] ],
            "i": [ 2, 6, 3 ]
        },
        "held_out_outputs": [
            [ 38, 29, 0, 4, 0, 16, -8, 31, 13, 0 ],
            [ -1, 8, 2, 1, 15, -10, 0, -1, 17, -7 ],
            [ -12, 6, 5, 0, -12, 4 ]
        ]
    },
    {
        "name": "map:shift_first_to",
        "solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
        "held_out_inputs_dict": {
            "x": [ [ 0, 1, -2, 3, -1, -1, 1 ], [ -9, -10, -9, -10, -3, -7 ], [ 9, -6, 3, 9, -2, -6, -3, -6, 5 ] ],
            "t": [ -2, 8, 9 ]
        },
        "held_out_outputs": [
            [ -2, -1, -4, 1, -3, -3, -1 ],
            [ 8, 7, 8, 7, 14, 10 ],
            [ 9, -6, 3, 9, -2, -6, -3, -6, 5 ]
        ]
    },
    {
        "name": "map:gather",
        "solution": "Map(lambda u1: Access(u1, x), i)",
        "held_out_inputs_dict": {
            "x": [ [ 12, 9, 17, 19, 12, 19, 13, 20, 9 ], [ 12, 10, 11, 13, 12, 10, 11 ], [ 9, 7, -1, 6, 12 ] ],
            "i": [ [ 3, 4, 2, 4, 2 ], [ 0, 1, 1, 2, 3, 2, 0, 2 ], [ 1, 2, 0, 1, 2 ] ]
        },
        "held_out_outputs": [
            [ 19, 12, 17, 12, 17 ],
            [ 12, 10, 10, 11, 13, 11, 12, 11 ],
            [ 7, -1, 9, 7, -1 ]
        ]
    },
    {
        "name": "map:max_selected",
        "solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
        "held_out_inputs_dict": {
            "x": [ [ 35, 40, -25, 7, -34, -10 ], [ -8, 29, -22, -8, 12, -17, -36, 48, 34 ], [ 40, 4, 24, 15, 47, 44, 33, 7, 24, 38 ] ],
            "i": [ [ 4, 0, 2, 4, 5, 0, 1, 0, 5, 0 ], [ 3, 3, 6, 3, 3, 4 ], [ 6, 7, 1, 4, 6, 0, 4 ] ]
        },
        "held_out_outputs": [
            40,
            12,
            47
        ]
    },
    {
        "name": "map:zero_odds",
        "solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ 24, 26, 39, 31, 18, 21 ], [ 32, 46, 42, 29, 47, 31, 42 ], [ 1, 6, 2, 1, 0, 11, 10, 7 ] ]
        },
        "held_out_outputs": [
            [ 24, 26, 0, 0, 18, 0 ],
            [ 32, 46, 42, 0, 0, 0, 42 ],
            [ 0, 6, 2, 0, 0, 0, 10, 0 ]
        ]
    },
    {
        "name": "map:replace",
        "solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ 20, 13, 11, 11, 19, 17, 14, 18 ], [ 32, 10, 12, 30, 15, 19, 13 ], [ 6, 6, 28, 27, 14, 27, 17, 13, 22 ] ],
            "f": [ 11, 13, 14 ],
            "r": [ 57, 2, 18 ]
        },
        "held_out_outputs": [
            [ 20, 13, 57, 57, 19, 17, 14, 18 ],
            [ 32, 10, 12, 30, 15, 19, 2 ],
            [ 6, 6, 28, 27, 18, 27, 17, 13, 22 ]
        ]
    },
    {
        "name": "map:replace_negative",
        "solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ -26, -26, -43, -4, -29, 1, -49, -3, -44, -16 ], [ 48, 12, 50, 16, -58, 25 ], [ 0, 3, -30, -42, -38, 7, -27, 23, -23 ] ],
            "y": [ 56, 60, 60 ]
        },
        "held_out_outputs": [
            [ 56, 56, 56, 56, 56, 1, 56, 56, 56, 56 ],
            [ 48, 12, 50, 16, 60, 25 ],
            [ 0, 3, 60, 60, 60, 7, 60, 23, 60 ]
        ]
    },
    {
        "name": "map:spread_last",
        "solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
        "held_out_inputs_dict": {
            "x": [ [ 46, 36, 59, 17, 47, 56, 44 ], [ 41, 41, 30, 43, 55, 43, 51, 32 ], [ 32, 29, 43, 30, 45, 29, 32 ] ]
        },
        "held_out_outputs": [
            [ 90, 80, 103, 61, 91, 100 ],
            [ 73, 73, 62, 75, 87, 75, 83 ],
            [ 64, 61, 75, 62, 77, 61 ]
        ]
    },
    {
        "name": "map:fill_first",
        "solution": "Map(lambda u1: Head(x), x)",
        "held_out_inputs_dict": {
            "x": [ [ 51, 55, 42, 71, 40, 44 ], [ 48, 39, 58, 67, 66, 65, 32, 68 ], [ 64, 47, 10, 5, 30, 65, 33, -15, 25 ] ]
        },
        "held_out_outputs": [
            [ 51, 51, 51, 51, 51, 51 ],
            [ 48, 48, 48, 48, 48, 48, 48, 48 ],
            [ 64, 64, 64, 64, 64, 64, 64, 64, 64 ]
        ]
    },
    {
        "name": "map:length",
        "solution": "Sum(Map(lambda u1: 1, x))",
        "held_out_inputs_dict": {
            "x": [ [ -26, -30, -31, -29, -21, -23, -21, -24 ], [ -21, -22, -24, -21, -23, -22 ], [ 30, 19, 50, 61 ] ]
        },
        "held_out_outputs": [
            8,
            6,
            4
        ]
    },
    {
        "name": "map:median",
        "solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
        "held_out_inputs_dict": {
            "x": [ [ 50, 64, 27, 2, 40, 63, 66, 56, 48 ], [ 60, -35, 67, 66, -42 ], [ -29, -30, 25 ] ]
        },
        "held_out_outputs": [
            50,
            60,
            -29
        ]
    },
    {
        "name": "map:is_greater",
        "solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
        "held_out_inputs_dict": {
            "x": [ [ 8, 7, -1, 9, 7, 0, 1, 2, 8, -1 ], [ 10, -5, 10, 9, -4, 19, 11, 5 ], [ -2, -11, 11, -3, 2, 5, 6 ] ],
            "y": [ -5, 8, 8 ]
        },
        "held_out_outputs": [
            [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
            [ 1, 0, 1, 1, 0, 1, 1, 0 ],
            [ 0, 0, 1, 0, 0, 0, 0 ]
        ]
    },
    {
        "name": "map:divide_even",
        "solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ -22, -34, -12, -33, -20, -14, -31, -40, -11 ], [ 25, 26, 65, 28, 47, 50, 65, 56 ], [ 6, -8, 0, 6, 5, -13 ] ]
        },
        "held_out_outputs": [
            [ -11, -17, -6, -33, -10, -7, -31, -20, -11 ],
            [ 25, 13, 65, 14, 47, 25, 65, 28 ],
            [ 3, -4, 0, 3, 5, -13 ]
        ]
    },
    {
        "name": "map:multiply_odd",
        "solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
        "held_out_inputs_dict": {
            "x": [ [ 2, -5, 0, 31, 33, 6, 14, 31, 21, -1 ], [ 12, 5, 4, -2, 19, 31, 15, -7, 6, 6 ], [ 4, -3, 3, -3, 13, 33, -4, -4, -8 ] ],
            "n": [ 0, -2, -1 ]
        },
        "held_out_outputs": [
            [ 2, 0, 0, 0, 0, 6, 14, 0, 0, 0 ],
            [ 12, -10, 4, -2, -38, -62, -30, 14, 6, 6 ],
            [ 4, 3, -3, 3, -13, -33, -4, -4, -8 ]
        ]
    },
    {
        "name": "filter:greater",
        "solution": "Filter(lambda u1: Greater(u1, y), x)",
        "held_out_inputs_dict": {
            "x": [ [ 14, -20, -8, 1, -1, -14 ], [ 21, -16, -2, -22, -28 ], [ -1, 59, 57, -1 ] ],
            "y": [ -3, 1, 0 ]
        },
        "held_out_outputs": [
            [ 14, 1, -1 ],
            [ 21 ],
            [ 59, 57 ]
        ]
    },
    {
        "name": "filter:sort_even",
        "solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
        "held_out_inputs_dict": {
            "x": [ [ 28, 28, 46, 57, 55, 41, 36, 35, 30 ], [ 56, 23, 20, 45, 41, 65, 44, 43, 35 ], [ 32, 45, 1, 37, 51, -3, 10, 52, 37, 29 ] ]
        },
        "held_out_outputs": [
            [ 28, 28, 30, 36, 46 ],
            [ 20, 44, 56 ],
            [ 10, 32, 52 ]
        ]
    },
    {
        "name": "filter:max_odd",
        "solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
        "held_out_inputs_dict": {
            "x": [ [ 31, 30, 35, 29, 27, 35 ], [ -9, -4, -7, 0, 7, -8, 21 ], [ 42, 36, 39, 37, 61, 59, 58, 49 ] ]
        },
        "held_out_outputs": [
            35,
            21,
            61
        ]
    },
    {
        "name": "filter:odd_negative",
        "solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -18, -14, -4, -5, -1 ], [ -3, -14, 1, 8, -16, -15, -24, -12, 10 ], [ -31, -11, -30, -7, -14, -6 ] ]
        },
        "held_out_outputs": [
            [ -5, -1 ],
            [ -3, -15 ],
            [ -31, -11, -7 ]
        ]
    },
    {
        "name": "filter:sum_positive",
        "solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
        "held_out_inputs_dict": {
            "x": [ [ -10, -15, -19, -22, -30, -27 ], [ 20, -4, -14, 3, 24 ], [ -9, 15, 27, -13, -18, -18, 4, 30, -24 ] ]
        },
        "held_out_outputs": [
            0,
            47,
            76
        ]
    },
    {
        "name": "filter:negative_descending",
        "solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
        "held_out_inputs_dict": {
            "x": [ [ -20, 4, -12, 9, -1, -15, -10, -12, -3, -1 ], [ -30, -16, 1, 5, -2, -23, -20, 0 ], [ -47, -44, -20, -12, -35, -36 ] ]
        },
        "held_out_outputs": [
            [ -1, -1, -3, -10, -12, -12, -15, -20 ],
            [ -2, -16, -20, -23, -30 ],
            [ -12, -20, -35, -36, -44, -47 ]
        ]
    },
    {
        "name": "filter:between",
        "solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
        "held_out_inputs_dict": {
            "x": [ [ 38, 49, 69, 62, 40, 46, 36, 77 ], [ -14, 43, -3, 16, -14, 27, 4, 21, -15, 26 ], [ 10, 7, 32, 22, 31, 31, 16, 4, 33, 12 ] ],
            "a": [ 4, -6, -4 ],
            "b": [ 41, 19, 64 ]
        },
        "held_out_outputs": [
            [ 38, 40, 36 ],
            [ -3, 16, 4 ],
            [ 10, 7, 32, 22, 31, 31, 16, 4, 33, 12 ]
        ]
    },
    {
        "name": "filter:multiple",
        "solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -25, -35, -31, -19, 10, 44 ], [ 7, 29, 33, 58, -4, 67, 79, 35, 41 ], [ 76, -17, 26, 69, -22, 46, 51, 68, 84, -14 ] ],
            "n": [ 7, 3, 3 ]
        },
        "held_out_outputs": [
            [ -35 ],
            [ 33 ],
            [ 69, 51, 84 ]
        ]
    },
    {
        "name": "filter:find_factors",
        "solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 4, 3, 10, 2, 12, 5, 7, 3, 11, 4 ], [ 10, 2, 6, 14, 2, 7, 9, 10 ], [ 2, 1, 13, 1, 3, 10, 2, 7, 10, 9 ] ],
            "n": [ 36, 35, 44 ]
        },
        "held_out_outputs": [
            [ 4, 3, 2, 12, 3, 4 ],
            [ 7 ],
            [ 2, 1, 1, 2 ]
        ]
    },
    {
        "name": "filter:fixpoints",
        "solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
        "held_out_inputs_dict": {
            "x": [ [ 6, 4, 4, 6, 5, 4, 6, 6, 5 ], [ 5, 2, 7, 7, 4, 3, 6, 8, 2, 6 ], [ 1, 4, 7, 3, 4, 5, 7, 6, 3, 2 ] ]
        },
        "held_out_outputs": [
            [ 6, 6, 6, 6 ],
            [ 4, 6, 6 ],
            [ 3, 3, 4, 4, 5 ]
        ]
    },
    {
        "name": "filter:find_at",
        "solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
        "held_out_inputs_dict": {
            "x": [ [ 40, 26, 40, 39, 41, 15, 13 ], [ 44, 29, 34, 25, 36, 33, 44, 36 ], [ 11, 22, -2, 5, 10, 3, 26, 17, 22 ] ],
            "y": [ 39, 33, 22 ],
            "i": [ [ 1, 3, 3, 0, 2, 4, 0 ], [ 1, 7, 2, 3, 4, 4, 3, 5, 7 ], [ 1, 4, 5, 5, 1, 4, 7, 0, 2 ] ]
        },
        "held_out_outputs": [
            [ 3, 3 ],
            [ 5 ],
            [ 1, 1 ]
        ]
    },
    {
        "name": "count:num_match",
        "solution": "Count(lambda u1: Equal(u1, n), x)",
        "held_out_inputs_dict": {
            "x": [ [ 49, 34, 3, 28, 43, 15, 2, 46, 11 ], [ 26, 22, 22, 30, 21, 22 ], [ 13, 10, 22, 26, 22, 18 ] ],
            "n": [ 41, 22, 18 ]
        },
        "held_out_outputs": [
            0,
            3,
            1
        ]
    },
    {
        "name": "count:rank",
        "solution": "Count(lambda u1: Less(u1, q), x)",
        "held_out_inputs_dict": {
            "x": [ [ 28, 49, 55, 62, 29 ], [ 33, 3, -47, 27, 11, -9, -14, -48, -15, -24 ], [ -18, -19, -10, 1, -5, 8, -25, 0, -9 ] ],
            "q": [ 24, 15, 35 ]
        },
        "held_out_outputs": [
            0,
            8,
            9
        ]
    },
    {
        "name": "count:num_under_first",
        "solution": "Count(lambda u1: Less(u1, Head(x)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -44, 11, -17, 27, 28, -37, -6 ], [ 57, 51, 63, 61, 60, 59, 52 ], [ 60, 54, 57, 53, 51, 47, 56, 70, 42 ] ]
        },
        "held_out_outputs": [
            0,
            2,
            7
        ]
    },
    {
        "name": "count:count_negative",
        "solution": "Count(lambda u1: Less(u1, 0), x)",
        "held_out_inputs_dict": {
            "x": [ [ 16, -33, -78, -32, -8, 6, -82, 40, -77, -38 ], [ 43, 39, 21, 40, 23, 27, 31, 38, 9, 24 ], [ -45, -63, -74, -36, -31, -23, -41, -44, -50 ] ]
        },
        "held_out_outputs": [
            7,
            0,
            9
        ]
    },
    {
        "name": "count:count_last",
        "solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -41, -42, -43, -41, -41, -41, -43, -41 ], [ 30, 30, 30, 30, 30, 29, 30, 31, 30 ], [ 10, 16, 14, 30, 24, 30, 27, 33, 26, 30 ] ]
        },
        "held_out_outputs": [
            5,
            7,
            3
        ]
    },
    {
        "name": "count:count_at",
        "solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 49, 50, 50, 50, 49, 49, 50, 50, 50, 50 ], [ 51, 17, 10, 12, 33, 31, 45 ], [ -4, -52, 31, -42, 5, 23, -52, -50, -57 ] ],
            "i": [ 1, 4, -3 ]
        },
        "held_out_outputs": [
            7,
            1,
            2
        ]
    },
    {
        "name": "count:even_or_positive",
        "solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
        "held_out_inputs_dict": {
            "x": [ [ -10, -31, -31, -29, -35, -29, -19, -6, -21 ], [ -10, -12, -8, 5, 8, 5, 8, 8, 13, -10 ], [ -13, -22, -5, -19, -23, -33, -19 ] ]
        },
        "held_out_outputs": [
            2,
            10,
            1
        ]
    },
    {
        "name": "count:total_zeros",
        "solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
        "held_out_inputs_dict": {
            "x": [ [ 34, 26, 42, 19, 49, 50, 42, 30, 41, 23 ], [ 19, 5, 7, 2, 27, 26, 0, 3, 6 ], [ 27, 35, 28, 7, 0, 12, 26 ] ],
            "y": [ [ -6, -5, 1, -24 ], [ -4, 4, -9, 3, -4, -9, -15 ], [ 11, -15, 0, 12, 24, -20, -11, 22 ] ]
        },
        "held_out_outputs": [
            0,
            1,
            2
        ]
    },
    {
        "name": "count:min_costs",
        "solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
        "held_out_inputs_dict": {
            "r": [ [ -1, 1, 1, 5, -1, -5, -2, 0, -3, -1 ], [ 2, -4, -2, -5, 2, -1, -1 ], [ -2, 1, 1, -3, -3, -3, -2, -4 ] ],
            "c": [ [ 21, 20, 38, 18, 40 ], [ 37, 37, 39, 90, 28, 22, 33, 48 ], [ 33, 26, 42, 49, 31, 89, 28 ] ]
        },
        "held_out_outputs": [
            [ 18, 20, 21 ],
            [ 22, 28 ],
            [ 26, 28 ]
        ]
    },
    {
        "name": "zipwith:deepcoder_1",
        "solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
        "held_out_inputs_dict": {
            "w": [ [ 10, 11, 7, 9, 8 ], [ 11, 9, 22, 22 ], [ 10, 16, 14, 18, 19, 27, 25, 11 ] ],
            "t": [ [ 40, 28, 45, 20, 48, 31, 47, 18 ], [ 55, 52, 55 ], [ 41, 39, 22, 44, 42, 29, 23 ] ]
        },
        "held_out_outputs": [
            72,
            121,
            110
        ]
    },
    {
        "name": "zipwith:deepcoder_4",
        "solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
        "held_out_inputs_dict": {
            "x": [ [ 12, 14, 4, 10, 4, 5 ], [ 6, 6, 7 ], [ 10, 18, 3 ] ],
            "y": [ [ 12, 2, 15, 6 ], [ 8, 10, 4, 8, 15, 2, 14 ], [ 1, 5, 5 ] ]
        },
        "held_out_outputs": [
            158,
            244,
            83
        ]
    },
    {
        "name": "zipwith:deepcoder_5",
        "solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
        "held_out_inputs_dict": {
            "a": [ [ 34, 15, 26, 13, 20, 35, 35, 13, 37, 30 ], [ 51, 39, 36, 20, 52 ], [ 7, 21, 6, 19, 7, 18, 22, 17 ] ]
        },
        "held_out_outputs": [
            [ 30, 15, 13, 13, 20, 20, 13, 13, 15, 30 ],
            [ 51, 20, 36, 20, 51 ],
            [ 7, 21, 6, 7, 7, 6, 21, 7 ]
        ]
    },
    {
        "name": "zipwith:deepcoder_6",
        "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
        "held_out_inputs_dict": {
            "t": [ [ 49, 63, 57, 61 ], [ 31, 50, 26, 37 ], [ 4, 15, 7, 13, 4 ] ],
            "p": [ [ 16, 23, 9, 17 ], [ 11, 12, 9, 7 ], [ 23, 25, 10, 14, 36, 33 ] ]
        },
        "held_out_outputs": [
            63,
            33,
            15
        ]
    },
    {
        "name": "zipwith:deepcoder_8",
        "solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
        "held_out_inputs_dict": {
            "s": [ [ 47, 24, 34, 53, 37, 51, 49, 25, 47 ], [ 50, 75, 59, 36, 48, 73, 40, 77, 81, 71 ], [ 44, 16, 5, 74, 10, 22, 26, 57 ] ]
        },
        "held_out_outputs": [
            18,
            74,
            104
        ]
    },
    {
        "name": "zipwith:dot",
        "solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
        "held_out_inputs_dict": {
            "x": [ [ -3, -1, -1 ], [ -3, -2, -3, -1, 1, 0 ], [ 6, 5, 5, 5, 7, 6, 7, 8 ] ],
            "y": [ [ 0, -1, 3, 2, 4, 5, 4, 1 ], [ 0, 4, -2, -1, 3, 5 ], [ 2, 9, 5, -1, -1 ] ]
        },
        "held_out_outputs": [
            -2,
            2,
            70
        ]
    },
    {
        "name": "zipwith:average",
        "solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
        "held_out_inputs_dict": {
            "x": [ [ 5, 3 ], [ -6, 9, 2, 8, 10, 2 ], [ 1, 4, 2 ] ],
            "y": [ [ -2, -5, 4, -3, 17 ], [ 14, 11, 9, 12, 1 ], [ 6, 7, 11 ] ]
        },
        "held_out_outputs": [
            [ 1, -1 ],
            [ 4, 10, 5, 10, 5 ],
            [ 3, 5, 6 ]
        ]
    },
    {
        "name": "zipwith:three_sum",
        "solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
        "held_out_inputs_dict": {
            "a": [ [ 4, 3 ], [ 5, 6 ], [ 4, 4, 5, 1, 2 ] ],
            "b": [ [ -2, -1 ], [ -1, -1, -2, -2 ], [ -2, -1 ] ],
            "c": [ [ 4, 5 ], [ -3, -2 ], [ -1, 5, -1, 3 ] ]
        },
        "held_out_outputs": [
            [ 6, 7 ],
            [ 1, 3 ],
            [ 1, 8 ]
        ]
    },
    {
        "name": "zipwith:sort_divide",
        "solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
        "held_out_inputs_dict": {
            "m": [ [ 50, 49, 63, 71, 54, 47, 56, 54 ], [ 63, 54, 48, 68, 63, 47, 53, 64 ], [ 31, 34, 58, 50, 46, 61, 52, 27, 64 ] ],
            "n": [ [ 12, 13, 16, 16, 14, 13, 11 ], [ 9, 4, 11, 12, 8, 11 ], [ 4, 15, 14, 4 ] ]
        },
        "held_out_outputs": [
            [ 3, 3, 3, 3, 4, 4, 5 ],
            [ 4, 4, 5, 7, 7, 13 ],
            [ 2, 4, 7, 12 ]
        ]
    },
    {
        "name": "zipwith:pair_differences",
        "solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
        "held_out_inputs_dict": {
            "x": [ [ -9, 5, 0, -9 ], [ 16, -26, -18, -20 ], [ 0, -8, -12, -14, -15 ] ]
        },
        "held_out_outputs": [
            [ 14, -5, -9 ],
            [ -42, 8, -2 ],
            [ -8, -4, -2, -1 ]
        ]
    },
    {
        "name": "zipwith:sum_mask",
        "solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
        "held_out_inputs_dict": {
            "x": [ [ -1, 12, -28, -25, -13, -29 ], [ 22, 22, 24, 4, 20, 3, 10, 28, 13 ], [ 2, 19, 22, -1 ] ],
            "m": [ [ 0, 0, 1, 1, 0, 0, 1 ], [ 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1 ] ]
        },
        "held_out_outputs": [
            -53,
            0,
            42
        ]
    },
    {
        "name": "zipwith:distance",
        "solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
        "held_out_inputs_dict": {
            "x": [ [ 29, 19, 28, 21, 21, 22, 26 ], [ 60, 11, 11, 28, 23, 25, 44, 40 ], [ 13, -2, 4, 16, -3, 2 ] ],
            "y": [ [ 42, 42, 62, 26, 29 ], [ 56, 19, 43, 49, 70, 60 ], [ 21, 49, 19, 10, 42, 17, 26, 65 ] ]
        },
        "held_out_outputs": [
            [ 13, 23, 34, 5, 8 ],
            [ 4, 8, 32, 21, 47, 35 ],
            [ 8, 51, 15, 6, 45, 15 ]
        ]
    },
    {
        "name": "zipwith:squared_distance",
        "solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
        "held_out_inputs_dict": {
            "x": [ [ 24 ], [ 14, 20, 13 ], [ 7 ] ],
            "y": [ [ 22 ], [ 13, 8, 12 ], [ 10, 12, 4, 4, 10 ] ]
        },
        "held_out_outputs": [
            4,
            146,
            9
        ]
    },
    {
        "name": "zipwith:is_equal",
        "solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
        "held_out_inputs_dict": {
            "x": [ [ 2, -2, 5, 7, 7, 6, 6 ], [ 6, 0, 4, 1, -1 ], [ 3, -4, -1, 3, 7, 0, -4, 5 ] ],
            "y": [ [ 3, 2, 1, 3, 2 ], [ 1, 6, 4, 5, 1, 5, 4 ], [ 7, -3, 1, 3, 3 ] ]
        },
        "held_out_outputs": [
            [ 0, 0, 0, 0, 0 ],
            [ 0, 0, 1, 0, 0 ],
            [ 0, 0, 0, 1, 0 ]
        ]
    },
    {
        "name": "zipwith:sorted_min",
        "solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
        "held_out_inputs_dict": {
            "x": [ [ 16, 7, 9, 22, 22, 20, 22, 14 ], [ 15, 5, 8, 3, 5, 4, 2, 6 ], [ 3, 2, 0, 2, 2 ] ],
            "y": [ [ 13, 11, 6, 14, 6, 12, 2, 4 ], [ 24, 28, 7, 27 ], [ 1, 2, 4, -7, 6, 9, 0, 7, 15 ] ]
        },
        "held_out_outputs": [
            [ 2, 4, 6, 6, 11, 12, 13, 14 ],
            [ 2, 3, 4, 5 ],
            [ -7, 0, 1, 2, 3 ]
        ]
    },
    {
        "name": "zipwith:add_outer_triples",
        "solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
        "held_out_inputs_dict": {
            "x": [ [ -5, 4, 5, 5, -8, -8, -3, 6 ], [ 4, -1, 1, 5, 3, 2, 1, 1, -1 ], [ -4, -1, -3, 3, 3 ] ]
        },
        "held_out_outputs": [
            [ -13, 1, 11 ],
            [ 5, 0, 0 ],
            [ -7, 2, 0 ]
        ]
    },
    {
        "name": "zipwith:max_mirror_product",
        "solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
        "held_out_inputs_dict": {
            "x": [ [ -1, -3, -3, -1, -2, -1, 0, -3 ], [ 2, 2, 0, -2, -2, -1, -2 ], [ -4, 0, -1, 1, -4 ] ]
        },
        "held_out_outputs": [
            3,
            4,
            16
        ]
    },
    {
        "name": "zipwith:double_or_nothing",
        "solution": "ZipWith(lambda u1, u2: If(Greater(u2, 0), Multiply(2, u1), 0), p, w)",
        "held_out_inputs_dict": {
            "p": [ [ 40, 49, 50, 32, 38 ], [ 23, 32, 35, 21, 36, 38, 37, 36, 26, 32 ], [ 32, 32, 28, 35, 23, 19, 31, 36, 23, 20 ] ],
            "w": [ [ -1, -1, 1, 1, -1, 1, -1, 1, -1 ], [ -1, -1, -1, -1, -1 ], [ 1, 1, 1, 1, 1 ] ]
        },
        "held_out_outputs": [
            [ 0, 0, 100, 64, 0 ],
            [ 0, 0, 0, 0, 0 ],
            [ 64, 64, 56, 70, 46 ]
        ]
    },
    {
        "name": "scanl1:deepcoder_3",
        "solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
        "held_out_inputs_dict": {
            "h": [ [ 8, 6, 8, 7, 5, 5, 8, 6, 6 ], [ 3, 3, 8, 3, 5, 5 ], [ 3, 4, 5, 2, 2, 7, 2, 6, 9, 5 ] ]
        },
        "held_out_outputs": [
            8,
            9,
            22
        ]
    },
    {
        "name": "scanl1:running_max",
        "solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
        "held_out_inputs_dict": {
            "x": [ [ 6, 9, 8, 0, 10, 6, 10, 3, 2, 4 ], [ 16, 10, 5, 0 ], [ 16, 17, 14, 15, 15, 14, 18, 16, 20, 14 ] ]
        },
        "held_out_outputs": [
            [ 6, 9, 9, 9, 10, 10, 10, 10, 10, 10 ],
            [ 16, 16, 16, 16 ],
            [ 16, 17, 17, 17, 17, 17, 18, 18, 20, 20 ]
        ]
    },
    {
        "name": "scanl1:max_running_sum",
        "solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
        "held_out_inputs_dict": {
            "x": [ [ 1, -2, -3, -2, 2, 1 ], [ 16, 15, 15, 17, 14 ], [ 3, 6, 3, 4, 2, 1 ] ]
        },
        "held_out_outputs": [
            1,
            77,
            19
        ]
    },
    {
        "name": "scanl1:running_sum_reverse",
        "solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
        "held_out_inputs_dict": {
            "x": [ [ 1, 0, 0, 0, -8, -7 ], [ 4, 1, -1 ], [ -2, 5, -2, 10, 10, 6 ] ]
        },
        "held_out_outputs": [
            [ -7, -15, -15, -15, -15, -14 ],
            [ -1, 0, 4 ],
            [ 6, 16, 26, 24, 29, 27 ]
        ]
    },
    {
        "name": "scanl1:running_sum_restart",
        "solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
        "held_out_inputs_dict": {
            "x": [ [ 1, 0, 4, -4, 0 ], [ 6, 2, 5, 4, 8, 4, 1 ], [ 7, 8, 6, 7, 7, 6 ] ]
        },
        "held_out_outputs": [
            [ 1, 0, 4, 0, 0 ],
            [ 6, 8, 13, 17, 25, 29, 30 ],
            [ 7, 15, 21, 28, 35, 41 ]
        ]
    },
    {
        "name": "scanl1:running_sum_extra",
        "solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
        "held_out_inputs_dict": {
            "x": [ [ 12, -11, 7, 4, -2, -13, -6, -12 ], [ -14, -19, -14, -19, -17, -8, -5, -13 ], [ -12, -10, 2, -4, 12, -6, -17 ] ],
            "n": [ -2, -2, 3 ]
        },
        "held_out_outputs": [
            [ 12, -1, 4, 6, 2, -13, -21, -35 ],
            [ -14, -35, -51, -72, -91, -101, -108, -123 ],
            [ -12, -19, -14, -15, 0, -3, -17 ]
        ]
    },
    {
        "name": "scanl1:decay",
        "solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
        "held_out_inputs_dict": {
            "x": [ [ 30, 32, 32, 28, 32, 29 ], [ 20, 27, 24, 20, 13, 24, 20, 16, 22 ], [ 13, 23, 11, 10, 15, 12, 15 ] ]
        },
        "held_out_outputs": [
            [ 30, 47, 55, 55, 59, 58 ],
            [ 20, 37, 42, 41, 33, 40, 40, 36, 40 ],
            [ 13, 29, 25, 22, 26, 25, 27 ]
        ]
    },
    {
        "name": "scanl1:prefix_running_product",
        "solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
        "held_out_inputs_dict": {
            "x": [ [ 2, -2, 2, 1, -1, 0, 3 ], [ 5, 4, 0, 3, 5, 4, 4, 1, 1, 1 ], [ 1, 2, 0, 0, -1, 2, 1, -2, 1 ] ],
            "n": [ 8, 5, 6 ]
        },
        "held_out_outputs": [
            [ 2, -4, -8, -8, 8, 0, 0 ],
            [ 5, 20, 0, 0, 0 ],
            [ 1, 2, 0, 0, 0, 0 ]
        ]
    },
    {
        "name": "scanl1:product",
        "solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
        "held_out_inputs_dict": {
            "x": [ [ -3, -3, -2, -3, 0 ], [ 1, 2, 2 ], [ 1, 1, 1, -2, -1, -3, -3, -1 ] ]
        },
        "held_out_outputs": [
            0,
            4,
            -18
        ]
    },
    {
        "name": "scanl1:running_min_no_ends",
        "solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
        "held_out_inputs_dict": {
            "x": [ [ -18, -10, -8, -6, -11, -16, -14, -17, -11 ], [ -19, -18, 18, 43, 37, 7, 12, 8 ], [ -8, -7, 6, 7, -1, 31, -6, 26 ] ]
        },
        "held_out_outputs": [
            [ -10, -10, -10, -11, -16, -16, -17 ],
            [ -18, -18, -18, -18, -18, -18 ],
            [ -7, -7, -7, -7, -7, -7 ]
        ]
    },
    {
        "name": "scanl1:alternate_signs",
        "solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
        "held_out_inputs_dict": {
            "x": [ [ 26, 31, 31, 49, -7, 48 ], [ 21, 72, 80, 68, 54, 36, 39, 64, -7, -1 ], [ 79, 84, 85, 83, 74, 71 ] ]
        },
        "held_out_outputs": [
            [ 26, -31, 31, -49, 7, -48 ],
            [ 21, -72, 80, -68, 54, -36, 39, -64, 7, -1 ],
            [ 79, -84, 85, -83, 74, -71 ]
        ]
    },
    {
        "name": "scanl1:follow_cycle",
        "solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
        "held_out_inputs_dict": {
            "x": [ [ 7, 1, 7, 3, 5, 1, 7, 8, 5 ], [ 4, 1, 2, 6, 6, 4, 4, 1, 4 ], [ 2, 1, 3, 4, 4, 0 ] ]
        },
        "held_out_outputs": [
            [ 7, 8, 5, 1, 1, 1, 1, 1, 1 ],
            [ 4, 6, 4, 6, 4, 6, 4, 6, 4 ],
            [ 2, 3, 4, 4, 4, 4 ]
        ]
    },
    {
        "name": "scanl1:make_strictly_increasing",
        "solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
        "held_out_inputs_dict": {
            "x": [ [ -13, 3, -41, 9, -28, -33, -9, -34, 1, -2 ], [ 9, -22, 15, -23, -9, -20, -22, -9, 6 ], [ -31, -23, -9, -30, -37, -17, -11, -8 ] ]
        },
        "held_out_outputs": [
            [ -13, 3, 4, 9, 10, 11, 12, 13, 14, 15 ],
            [ 9, 10, 15, 16, 17, 18, 19, 20, 21 ],
            [ -31, -23, -9, -8, -7, -6, -5, -4 ]
        ]
    },
    {
        "name": "scanl1:closest_to_zero",
        "solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
        "held_out_inputs_dict": {
            "x": [ [ -15, 7, -37, 34, 22, -8, -42, 42, 10 ], [ 45, 47, 18, 31, 46, 48, 24 ], [ -53, -14, 23, 4, -17, -49, 29 ] ]
        },
        "held_out_outputs": [
            [ -15, 7, 7, 7, 7, 7, 7, 7, 7 ],
            [ 45, 45, 18, 18, 18, 18, 18 ],
            [ -53, -14, -14, 4, 4, 4, 4 ]
        ]
    },
    {
        "name": "multi:deepcoder_2",
        "solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
        "held_out_inputs_dict": {
            "a": [ [ 59, 45, 53, 44, 50, 58, 47, 51, 48 ], [ 25, 28, 41, 46, 54, 33, 55, 34, 26, 55 ], [ 5, 25, 34, 41, 31, 28, 17, 23 ] ],
            "b": [ [ 42, 28, 41, 27, 41, 37, 38, 43, 31, 43 ], [ 48, 30, 42, 45, 50 ], [ 59, 52, 36, 57, 39 ] ]
        },
        "held_out_outputs": [
            9,
            2,
            0
        ]
    },
    {
        "name": "multi:deepcoder_7",
        "solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
        "held_out_inputs_dict": {
            "s": [ [ 4, 6, 4, 5, 6, 5, 4 ], [ 2, 3, 2, 2, 2, 3, 2, 2 ], [ 3, 2, 3, 5, 5 ] ],
            "p": [ [ 3, 4, 4, 3, 3 ], [ 3, 3, 2, 3, 3, 3, 2, 3, 2 ], [ 1, 1, 2, 1, 2, 3, 2, 2, 3 ] ]
        },
        "held_out_outputs": [
            270,
            223,
            79
        ]
    },
    {
        "name": "multi:range_like",
        "solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
        "held_out_inputs_dict": {
            "x": [ [ 0, -1, -2, -3 ], [ 3, -1, -2, 6, 6, -3, 6, 0 ], [ -1, -1, -2, 1, 1 ] ]
        },
        "held_out_outputs": [
            [ 0, 1, 2, 3 ],
            [ 0, 1, 2, 3, 4, 5, 6, 7 ],
            [ 0, 1, 2, 3, 4 ]
        ]
    },
    {
        "name": "multi:find_odd_products",
        "solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
        "held_out_inputs_dict": {
            "x": [ [ -1, 7, -4, 2, -6, -4, -4, 7, 8 ], [ -7, 6, 7, 4, 9, -5 ], [ 5, -2, 2, 9, 0, -1, 3 ] ]
        },
        "held_out_outputs": [
            [ -7 ],
            [ -45 ],
            [ -3 ]
        ]
    },
    {
        "name": "multi:multiply_odds",
        "solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
        "held_out_inputs_dict": {
            "x": [ [ -1, -2, 2, 3, 0, 2, -1, 2, 0 ], [ 2, 1, 0, 2, 2, 1, 2, 0, 2, 2 ], [ 7, 8, -1, 0, -3, 9, -1 ] ]
        },
        "held_out_outputs": [
            [ -1, -3, 3 ],
            [ 1, 1 ],
            [ 7, -7, 21, 189, -189 ]
        ]
    },
    {
        "name": "multi:running_total",
        "solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
        "held_out_inputs_dict": {
            "x": [ [ -40, -26, -27, -21 ], [ -23, -36, -33, -32, -15, -18 ], [ -33, -72, -43, -69, -23, -67, -79, -73, -55, -38 ] ],
            "y": [ [ -17, -17, -14, -17 ], [ 51, 8, -3, 31 ], [ -7, 3, -45, -32, 24 ] ]
        },
        "held_out_outputs": [
            [ -57, -100, -141, -179 ],
            [ 28, 0, -36, -37 ],
            [ -40, -109, -197, -298, -297 ]
        ]
    },
    {
        "name": "multi:add_from_index",
        "solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
        "held_out_inputs_dict": {
            "x": [ [ 8, 0, 6, 15 ], [ 4, 0, -3, 6, -3, -5, 2, -3 ], [ 7, 8, -3, 5 ] ],
            "y": [ [ -8, -6, -6, -10, -7 ], [ 3, -2, -19, 8, -15, 14 ], [ 10, 12, 9, 4 ] ],
            "i": [ [ 2, 2, 2, 4, 3 ], [ 2, 2, 0 ], [ 3, 2, 0, 2, 3, 3, 0, 3, 3 ] ]
        },
        "held_out_outputs": [
            [ 2, -6, 0, 8 ],
            [ -15, -19, 0 ],
            [ 11, 17, 7, 14 ]
        ]
    },
    {
        "name": "multi:positive_differences",
        "solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
        "held_out_inputs_dict": {
            "x": [ [ 29, 47, 37, 35, 54 ], [ 42, 64, 59, 44, 59, 45, 42 ], [ 41, 47, 48, 46, 35, 38, 53, 64, 53 ] ],
            "y": [ [ 60, 31, 31, 43, 48, 36 ], [ 32, 41, 45, 82, 74, 82, 66, 63, 78, 15 ], [ 69, 39, 77, 44, 46, 84, 35 ] ]
        },
        "held_out_outputs": [
            [ 16, 6, 6 ],
            [ 10, 23, 14 ],
            [ 8, 2, 18 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_0",
        "solution": "Map(lambda u1: 1, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 73, 156, 114, 84 ], [ 93, -9, -14, 4, 43 ], [ -15, -101, -2, -87, -49, -33, 36, -54 ] ]
        },
        "held_out_outputs": [
            [ 1, 1, 1, 1 ],
            [ 1, 1, 1, 1, 1 ],
            [ 1, 1, 1, 1, 1, 1, 1, 1 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_1",
        "solution": "Scanl1(lambda u1, u2: x2, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 5, 5, 2, 6 ], [ 6, 7, 7, 7 ], [ 3, 6, 2, 1 ] ],
            "x2": [ 7, 4, 2 ]
        },
        "held_out_outputs": [
            [ 5, 7, 7, 7 ],
            [ 6, 4, 4, 4 ],
            [ 3, 2, 2, 2 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_2",
        "solution": "Access(2, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -23, -30, -23, -36, -28 ], [ -34, -9, -7, -24, -30 ], [ -14, -30, -10, -24, -13, -36, -14 ] ]
        },
        "held_out_outputs": [
            -23,
            -7,
            -10
        ]
    },
    {
        "name": "synthetic:weight_3_function_3",
        "solution": "Drop(4, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 16, -65, -141, -141, -124, -137 ], [ 38, -77, 15, 50, -193, 82, -227, -15 ], [ -105, 113, -109, -187, -121, 23, -51, 132, 76, 34 ] ]
        },
        "held_out_outputs": [
            [ -124, -137 ],
            [ -193, 82, -227, -15 ],
            [ -121, 23, -51, 132, 76, 34 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_4",
        "solution": "Take(x2, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -115, 32 ], [ -4, -183 ], [ -98 ] ],
            "x2": [ 106, 81, 174 ]
        },
        "held_out_outputs": [
            [ -115, 32 ],
            [ -4, -183 ],
            [ -98 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_5",
        "solution": "Drop(x1, x2)",
        "held_out_inputs_dict": {
            "x1": [ 1, 1, 1 ],
            "x2": [ [ 49, 65, 69, 35, 33 ], [ 35, 41 ], [ 69, 78, 71, 87, 60 ] ]
        },
        "held_out_outputs": [
            [ 65, 69, 35, 33 ],
            [ 41 ],
            [ 78, 71, 87, 60 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_6",
        "solution": "Drop(1, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 2, 2 ], [ 1, 1, 0, 0 ], [ 0, 0, 0, 1 ] ]
        },
        "held_out_outputs": [
            [ 2 ],
            [ 1, 0, 0 ],
            [ 0, 0, 1 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_7",
        "solution": "Drop(2, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 0, 0, -1, 4 ], [ 1, 0, 3, -1 ], [ 2, 3, 3, 0 ] ]
        },
        "held_out_outputs": [
            [ -1, 4 ],
            [ 3, -1 ],
            [ 3, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_8",
        "solution": "Scanl1(lambda u1, u2: 3, x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 0, 1 ], [ 5, 6 ], [ 7, 8 ] ]
        },
        "held_out_outputs": [
            [ 0, 3 ],
            [ 5, 3 ],
            [ 7, 3 ]
        ]
    },
    {
        "name": "synthetic:weight_3_function_9",
        "solution": "Access(x1, x2)",
        "held_out_inputs_dict": {
            "x1": [ 0, 1, 2 ],
            "x2": [ [ 204, 202, 174, 183, 194, 155, 184, 198, 125 ], [ 210, 181, 205, 212, 211, 185, 213, 220, 217, 220 ], [ 140, 190, 134, 121, 172 ] ]
        },
        "held_out_outputs": [
            204,
            181,
            134
        ]
    },
    {
        "name": "synthetic:weight_4_function_0",
        "solution": "IntDivide(Head(x2), x1)",
        "held_out_inputs_dict": {
            "x1": [ -32, 10, -15 ],
            "x2": [ [ -37, -12 ], [ -21, -26 ], [ -31, -27 ] ]
        },
        "held_out_outputs": [
            1,
            -3,
            2
        ]
    },
    {
        "name": "synthetic:weight_4_function_1",
        "solution": "Max(x1, Square(4))",
        "held_out_inputs_dict": {
            "x1": [ 28, 33, 17 ]
        },
        "held_out_outputs": [
            28,
            33,
            17
        ]
    },
    {
        "name": "synthetic:weight_4_function_2",
        "solution": "Multiply(4, Minimum(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 6, 7, 8, 8, 6 ], [ 9, 7, 8, 6, 5, 6, 7 ], [ 4, 7, 7, 5, 6 ] ]
        },
        "held_out_outputs": [
            24,
            20,
            16
        ]
    },
    {
        "name": "synthetic:weight_4_function_3",
        "solution": "IntDivide(4, Sum(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 2, 2 ], [ 1, 1 ], [ 3, 10 ] ]
        },
        "held_out_outputs": [
            1,
            2,
            0
        ]
    },
    {
        "name": "synthetic:weight_4_function_4",
        "solution": "Scanl1(lambda u1, u2: Minimum(x1), x2)",
        "held_out_inputs_dict": {
            "x1": [ [ 9, 8, 9, 7, 8 ], [ 6, 7, 7, 5, 6 ], [ 8, 9, 8, 9, 8 ] ],
            "x2": [ [ 173, 183 ], [ 164, 141 ], [ 90, 173 ] ]
        },
        "held_out_outputs": [
            [ 173, 7 ],
            [ 164, 5 ],
            [ 90, 8 ]
        ]
    },
    {
        "name": "synthetic:weight_4_function_5",
        "solution": "Subtract(2, Sum(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ -146, -63 ], [ -17, -148 ], [ -136, -133 ] ]
        },
        "held_out_outputs": [
            211,
            167,
            271
        ]
    },
    {
        "name": "synthetic:weight_4_function_6",
        "solution": "Scanl1(lambda u1, u2: Sum(x2), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -29, -2, -39, -35, 0, -45 ], [ -49, -41, -44, -50, -41 ], [ 71, 1 ] ],
            "x2": [ [ -33, -17, -28 ], [ -55, -58, -53 ], [ -45, -58, -45 ] ]
        },
        "held_out_outputs": [
            [ -29, -78, -78, -78, -78, -78 ],
            [ -49, -166, -166, -166, -166 ],
            [ 71, -148 ]
        ]
    },
    {
        "name": "synthetic:weight_4_function_7",
        "solution": "Take(-1, Sort(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 149, 146, 186 ], [ 186, 189, 158 ], [ 158, 91, 172 ] ]
        },
        "held_out_outputs": [
            [ 146, 149 ],
            [ 158, 186 ],
            [ 91, 158 ]
        ]
    },
    {
        "name": "synthetic:weight_4_function_8",
        "solution": "Sum(Drop(x1, x2))",
        "held_out_inputs_dict": {
            "x1": [ -16, -106, -101 ],
            "x2": [ [ 3, 2, 2, 3, 2 ], [ 3, 3, 3, 4, 2 ], [ 0, 1, 0, 1 ] ]
        },
        "held_out_outputs": [
            12,
            15,
            2
        ]
    },
    {
        "name": "synthetic:weight_4_function_9",
        "solution": "Take(Sum(x1), x2)",
        "held_out_inputs_dict": {
            "x1": [ [ 0, 1, 0 ], [ 1, 0, 1, 0 ], [ 0, 1, 1, 1 ] ],
            "x2": [ [ 1, 1, 1 ], [ 1, 0, 0 ], [ 0, 0, 0, 0 ] ]
        },
        "held_out_outputs": [
            [ 1 ],
            [ 1, 0 ],
            [ 0, 0, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_0",
        "solution": "Take(Head(x1), Reverse(x2))",
        "held_out_inputs_dict": {
            "x1": [ [ 9 ], [ 82, 71, 79 ], [ 79, 74, 10 ] ],
            "x2": [ [ -65, -88 ], [ -85, -59 ], [ -61, -63 ] ]
        },
        "held_out_outputs": [
            [ -88, -65 ],
            [ -59, -85 ],
            [ -63, -61 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_1",
        "solution": "IntDivide(Sum(x1), Head(x2))",
        "held_out_inputs_dict": {
            "x1": [ [ 11, 29, 26, 33 ], [ 15, 33, 24, 9 ], [ 14, 20, 27, 36 ] ],
            "x2": [ [ 12, 8, 11, 8 ], [ 19, 24, 30, 19 ], [ 16, 11, 14, 13 ] ]
        },
        "held_out_outputs": [
            8,
            4,
            6
        ]
    },
    {
        "name": "synthetic:weight_5_function_2",
        "solution": "IntDivide(Square(4), Head(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ -2, -3, -9, -6, -8, -7, -7 ], [ -3, -3, -3, -3, -3, -3 ], [ -1, -7, -5, -4, -2, -7, -2, -2 ] ]
        },
        "held_out_outputs": [
            -8,
            -6,
            -16
        ]
    },
    {
        "name": "synthetic:weight_5_function_3",
        "solution": "Scanl1(lambda u1, u2: Square(Minimum(x1)), x2)",
        "held_out_inputs_dict": {
            "x1": [ [ -4, -5, -3, -1, -1, -3, -1 ], [ -1, -6, -9, -7, -8, -5, -5, -6 ], [ -5, -4, -7, -7, -8, -4, -7 ] ],
            "x2": [ [ -4, -8, -9, -6, -8, -8, -8 ], [ -6, -6, -6, -7, -6, -6, -8, -5, -4 ], [ -6, -5, -4, -5, -5, -4, -4, -5, -3 ] ]
        },
        "held_out_outputs": [
            [ -4, 25, 25, 25, 25, 25, 25 ],
            [ -6, 81, 81, 81, 81, 81, 81, 81, 81 ],
            [ -6, 64, 64, 64, 64, 64, 64, 64, 64 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_4",
        "solution": "Scanl1(lambda u1, u2: IntDivide(2, x1), x2)",
        "held_out_inputs_dict": {
            "x1": [ 4, 2, 4 ],
            "x2": [ [ 1, 0, 1, 0 ], [ 1, 1, 3, 3 ], [ 4, 5, 5, 5 ] ]
        },
        "held_out_outputs": [
            [ 1, 0, 0, 0 ],
            [ 1, 1, 1, 1 ],
            [ 4, 0, 0, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_5",
        "solution": "Drop(IntDivide(x1, x3), x2)",
        "held_out_inputs_dict": {
            "x1": [ 17, 23, -28 ],
            "x2": [ [ 72, 134 ], [ -12, -1 ], [ 147, 153 ] ],
            "x3": [ -10, -44, -18 ]
        },
        "held_out_outputs": [
            [ 72, 134 ],
            [ -1 ],
            [ 153 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_6",
        "solution": "Subtract(Last(x2), Last(x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 29, 1, -19, -9 ], [ -16, -41 ], [ -34, 0, 29 ] ],
            "x2": [ [ -42, -18 ], [ -22 ], [ -32 ] ]
        },
        "held_out_outputs": [
            -9,
            19,
            -61
        ]
    },
    {
        "name": "synthetic:weight_5_function_7",
        "solution": "Subtract(4, IntDivide(x1, 4))",
        "held_out_inputs_dict": {
            "x1": [ -45, 16, 23 ]
        },
        "held_out_outputs": [
            16,
            0,
            -1
        ]
    },
    {
        "name": "synthetic:weight_5_function_8",
        "solution": "Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 8, -16, -3, -16 ], [ -33, -41, -41, -13 ], [ -18, -25, -4, -28 ] ]
        },
        "held_out_outputs": [
            [ -3 ],
            [ -33, -41, -41, -13 ],
            [ -25 ]
        ]
    },
    {
        "name": "synthetic:weight_5_function_9",
        "solution": "Subtract(Last(x2), Square(x1))",
        "held_out_inputs_dict": {
            "x1": [ 9, 8, 9 ],
            "x2": [ [ 18, 21, 21, 36, 15, 28, -3, 12, 2, 36 ], [ 20, 37, 26, 36, 32, 39, 38 ], [ -8, -10, -7, -9, -12, -6, -4, -3, -7, -3 ] ]
        },
        "held_out_outputs": [
            -45,
            -26,
            -84
        ]
    },
    {
        "name": "synthetic:weight_6_function_0",
        "solution": "Scanl1(lambda u1, u2: Subtract(0, Last(x1)), x2)",
        "held_out_inputs_dict": {
            "x1": [ [ 3, 3, 4, 7, 4, 4, 8, 4, 7 ], [ 1, 0, 1, 0 ], [ 6, 4, 6, 5 ] ],
            "x2": [ [ 13, 30, 34, 11, 34, 32, 24, 5, 14, -14 ], [ 25, 9, 34, 16, 74, 50, 59, 36, 52, -11 ], [ -21, -5, -60, -17, -4, -54, -53, -35, -37, -22 ] ]
        },
        "held_out_outputs": [
            [ 13, -7, -7, -7, -7, -7, -7, -7, -7, -7 ],
            [ 25, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
            [ -21, -5, -5, -5, -5, -5, -5, -5, -5, -5 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_1",
        "solution": "Multiply(Square(4), Add(x1, 3))",
        "held_out_inputs_dict": {
            "x1": [ -1, 1, 3 ]
        },
        "held_out_outputs": [
            32,
            64,
            96
        ]
    },
    {
        "name": "synthetic:weight_6_function_2",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, x2))(u2), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 1, 0, 0, 0, 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 0, 0, 1, 1, 0, 0 ] ],
            "x2": [ 0, 1, 0 ]
        },
        "held_out_outputs": [
            [ 1, 0, 0, 0, 0, 0, 0, 0, 1 ],
            [ 0, -1, -1, -1, -1, -1, -1, -1 ],
            [ 1, 0, 0, 1, 1, 0, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_3",
        "solution": "Square(Min(Head(x1), Last(x2)))",
        "held_out_inputs_dict": {
            "x1": [ [ -8, -3, -2, -7 ], [ -7, -5, -9, -6 ], [ -6, -8, -8, -5 ] ],
            "x2": [ [ -4, -8, -7, -4 ], [ -7, -4, -7, -3 ], [ -3, -3, -4, -4 ] ]
        },
        "held_out_outputs": [
            64,
            49,
            36
        ]
    },
    {
        "name": "synthetic:weight_6_function_4",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: IntDivide(v1, 3))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 7, 9, 8, 6, 6 ], [ 2, 5, 2, 7 ], [ 3, 6, 4, 2 ] ]
        },
        "held_out_outputs": [
            [ 7, 2, 0, 0, 0 ],
            [ 2, 0, 0, 0 ],
            [ 3, 1, 0, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_5",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(-1, v1))(u2), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 0, 0, 0, 0 ], [ 1, 1, 1, 1 ], [ 1, 1, 0, 1 ] ]
        },
        "held_out_outputs": [
            [ 0, -1, -1, -1 ],
            [ 1, -2, -2, -2 ],
            [ 1, -2, -1, -2 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_6",
        "solution": "Scanl1(lambda u1, u2: Min(x2, Sum(x1)), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 8, 6, 8, 6, 6, 7 ], [ 3, 4, 7, 3, 2, 4, 3 ], [ 4, 5, 5, 5, 6, 4, 4, 4, 6, 6 ] ],
            "x2": [ 39, 92, 25 ]
        },
        "held_out_outputs": [
            [ 8, 39, 39, 39, 39, 39 ],
            [ 3, 26, 26, 26, 26, 26, 26 ],
            [ 4, 25, 25, 25, 25, 25, 25, 25, 25, 25 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_7",
        "solution": "Subtract(Min(x1, x3), Sum(x2))",
        "held_out_inputs_dict": {
            "x1": [ -45, -49, 40 ],
            "x2": [ [ 99, 140 ], [ 94, 136 ], [ 61, 77 ] ],
            "x3": [ -40, -17, -39 ]
        },
        "held_out_outputs": [
            -284,
            -279,
            -177
        ]
    },
    {
        "name": "synthetic:weight_6_function_8",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: IntDivide(v1, 2))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -3, 3, -2 ], [ 3, 4, -1 ], [ -4, -2, 1 ] ]
        },
        "held_out_outputs": [
            [ -3, -2, -1 ],
            [ 3, 1, 0 ],
            [ -4, -2, -1 ]
        ]
    },
    {
        "name": "synthetic:weight_6_function_9",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(4, v1))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 31, 89, 51, 62, 151 ], [ -73, -45, -97, 17, -131 ], [ -54, -119, -141, -138, 21 ] ]
        },
        "held_out_outputs": [
            [ 31, -27, 31, -27, 31 ],
            [ -73, 77, -73, 77, -73 ],
            [ -54, 58, -54, 58, -54 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_0",
        "solution": "Subtract(x1, Min(x2, Multiply(x2, 3)))",
        "held_out_inputs_dict": {
            "x1": [ -41, -45, -47 ],
            "x2": [ -1, 15, 9 ]
        },
        "held_out_outputs": [
            -38,
            -60,
            -56
        ]
    },
    {
        "name": "synthetic:weight_7_function_1",
        "solution": "Map(lambda u1: IntDivide(Subtract(x2, 3), 4), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -2 ], [ -48 ], [ -54 ] ],
            "x2": [ 23, 21, 41 ]
        },
        "held_out_outputs": [
            [ 5 ],
            [ 4 ],
            [ 9 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_2",
        "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(-1, v1))(u1), x1, x2)",
        "held_out_inputs_dict": {
            "x1": [ [ 10, -30, -3, -29 ], [ 1, -7, -4, -1, -2, -10 ], [ 9, 12, 3, -8, 18, 27 ] ],
            "x2": [ [ 153, 183 ], [ 191, 180 ], [ 226, 185 ] ]
        },
        "held_out_outputs": [
            [ 9, -31 ],
            [ 0, -8 ],
            [ 8, 11 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_3",
        "solution": "Multiply(2, Add(Square(4), Head(x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 5 ], [ 9 ], [ 10, 8, 8, 6, 8 ] ]
        },
        "held_out_outputs": [
            42,
            50,
            52
        ]
    },
    {
        "name": "synthetic:weight_7_function_4",
        "solution": "If(IsEven(x1), 0, Add(x1, 3))",
        "held_out_inputs_dict": {
            "x1": [ 61, 45, 65 ]
        },
        "held_out_outputs": [
            64,
            48,
            68
        ]
    },
    {
        "name": "synthetic:weight_7_function_5",
        "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(x1, v1))(u1), x2, x3)",
        "held_out_inputs_dict": {
            "x1": [ 54, 31, 45 ],
            "x2": [ [ 80, 59, 87, 52, 58, 53, 72 ], [ 16, 61, 49, 24, 54, 31, 38 ], [ 31, 48, 50, 42, 33, 36, 36 ] ],
            "x3": [ [ 1, 1 ], [ 1, 1 ], [ 1, 0 ] ]
        },
        "held_out_outputs": [
            [ 134, 113 ],
            [ 47, 92 ],
            [ 76, 93 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_6",
        "solution": "Add(x1, Add(3, Max(x2, -1)))",
        "held_out_inputs_dict": {
            "x1": [ -40, -45, -40 ],
            "x2": [ 5, 11, 23 ]
        },
        "held_out_outputs": [
            -32,
            -31,
            -14
        ]
    },
    {
        "name": "synthetic:weight_7_function_7",
        "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(x1, v1))(u2), x2, x3)",
        "held_out_inputs_dict": {
            "x1": [ 18, 50, 57 ],
            "x2": [ [ -1, -1, -1, -1, -1, -1 ], [ -1, -1, -1, -1, -1 ], [ -1, -1, -1, -1, -1 ] ],
            "x3": [ [ 6, 2, 6, 8, 3 ], [ 4, 4, 7, 8 ], [ 3, 7, 9, 6 ] ]
        },
        "held_out_outputs": [
            [ 24, 20, 24, 26, 21 ],
            [ 54, 54, 57, 58 ],
            [ 60, 64, 66, 63 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_8",
        "solution": "Map(lambda u1: IntDivide(Last(x2), Minimum(x1)), x3)",
        "held_out_inputs_dict": {
            "x1": [ [ 84, 91, 81, 89 ], [ 75, 74, 91, 79, 79, 84, 94, 66, 68 ], [ 41, 15, 21, 50, 26 ] ],
            "x2": [ [ 82, 84, 70, 90 ], [ 19, 12, 50, 65, 27, 17, 43, 22 ], [ 73, 68, 74, 69, 75 ] ],
            "x3": [ [ -1 ], [ -1, -1, -1, -1, -1, -1 ], [ -1, -1, -1, -1, -1, -1, -1 ] ]
        },
        "held_out_outputs": [
            [ 1 ],
            [ 0, 0, 0, 0, 0, 0 ],
            [ 5, 5, 5, 5, 5, 5, 5 ]
        ]
    },
    {
        "name": "synthetic:weight_7_function_9",
        "solution": "Add(x1, IntDivide(Add(x1, 2), x2))",
        "held_out_inputs_dict": {
            "x1": [ 9, 6, 8 ],
            "x2": [ 4, 9, 7 ]
        },
        "held_out_outputs": [
            11,
            6,
            9
        ]
    },
    {
        "name": "synthetic:weight_8_function_0",
        "solution": "Take(3, Scanl1(lambda u1, u2: (lambda v1: IntDivide(4, v1))(u1), x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 4, 9, 4, 4, 8, 4, 6, 3 ], [ 3, 4, 5, 2, 2, 5, 5, 5, 3 ], [ -2, 8, 1, 8, 7, 0, -1 ] ]
        },
        "held_out_outputs": [
            [ 4, 1, 4 ],
            [ 3, 1, 4 ],
            [ -2, -2, -2 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_1",
        "solution": "Scanl1(lambda u1, u2: x3, Filter(lambda u1: (lambda v1: Greater(v1, x2))(u1), x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 12, 19, 23, 19, 22, 17, 33, 28 ], [ 30, 25, 24, 18, 28, 32, 32, 34, 21, 29 ], [ 23, 28, 43, 8, 22, 22, 38, 7 ] ],
            "x2": [ 10, 20, 35 ],
            "x3": [ 238, 191, 222 ]
        },
        "held_out_outputs": [
            [ 12, 238, 238, 238, 238, 238, 238, 238 ],
            [ 30, 191, 191, 191, 191, 191, 191, 191, 191 ],
            [ 43, 222 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_2",
        "solution": "Map(lambda u1: (lambda v1: IntDivide(v1, Add(3, 4)))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 32, -39, -15, 48 ], [ 118, 122, -9, 40 ], [ 79 ] ]
        },
        "held_out_outputs": [
            [ 4, -6, -3, 6 ],
            [ 16, 17, -2, 5 ],
            [ 11 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_3",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(Add(x1, 1), v1))(u2), x2)",
        "held_out_inputs_dict": {
            "x1": [ 227, 187, 201 ],
            "x2": [ [ 4, 4, 6, 5 ], [ 3, 2, 4, 3, 3, 4 ], [ 4, 6, 7, 2, 4 ] ]
        },
        "held_out_outputs": [
            [ 4, 224, 222, 223 ],
            [ 3, 186, 184, 185, 185, 184 ],
            [ 4, 196, 195, 200, 198 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_4",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: Min(v1, Access(x2, x3)))(u2), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 3, 1, -1 ], [ 2, 4, 2 ], [ 3, 4, 4, 4 ] ],
            "x2": [ 0, 1, 2 ],
            "x3": [ [ -1, 1, -1, -1 ], [ 1, 2, 1, 1, -1 ], [ 4, 2, 3, 2, 2 ] ]
        },
        "held_out_outputs": [
            [ 3, -1, -1 ],
            [ 2, 2, 2 ],
            [ 3, 3, 3, 3 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_5",
        "solution": "Map(lambda u1: Sum(x1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x2))",
        "held_out_inputs_dict": {
            "x1": [ [ 0, -1, 0, -1, 0, 0, -1, -1, 0 ], [ 0, 1, 1, 1, 1, 0, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 1, 0, 1 ] ],
            "x2": [ [ -1, 0, -1, 0, -1, 0, -1, 0, 0, 0 ], [ 0, 0, 1, 1, 1, 0, 0 ], [ 0, 1, 1, 0, -1, 0, 1, -1, -1, -1 ] ]
        },
        "held_out_outputs": [
            [ -4, -4, -4, -4 ],
            [ 5, 5, 5 ],
            [ 2, 2, 2, 2, 2, 2, 2 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_6",
        "solution": "Subtract(x1, Max(3, Subtract(Head(x2), 2)))",
        "held_out_inputs_dict": {
            "x1": [ 6, 8, 6 ],
            "x2": [ [ 8 ], [ 6 ], [ 7 ] ]
        },
        "held_out_outputs": [
            0,
            4,
            1
        ]
    },
    {
        "name": "synthetic:weight_8_function_7",
        "solution": "Map(lambda u1: (lambda v1: IntDivide(v1, Multiply(x1, 4)))(u1), x2)",
        "held_out_inputs_dict": {
            "x1": [ 39, 40, 16 ],
            "x2": [ [ 156, 139 ], [ 104, 84 ], [ 80, 99 ] ]
        },
        "held_out_outputs": [
            [ 1, 0 ],
            [ 0, 0 ],
            [ 1, 1 ]
        ]
    },
    {
        "name": "synthetic:weight_8_function_8",
        "solution": "Subtract(x1, Add(Square(3), Square(Square(3))))",
        "held_out_inputs_dict": {
            "x1": [ 43, 42, 47 ]
        },
        "held_out_outputs": [
            -47,
            -48,
            -43
        ]
    },
    {
        "name": "synthetic:weight_8_function_9",
        "solution": "Map(lambda u1: (lambda v1: If(IsEven(x2), 3, v1))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 7, 7, 10, 7, 8, 8, 9, 8, 8 ], [ 10, 6, 9, 5, 6, 7, 6 ], [ 6, 7 ] ],
            "x2": [ 150, 165, 125 ]
        },
        "held_out_outputs": [
            [ 3, 3, 3, 3, 3, 3, 3, 3, 3 ],
            [ 10, 6, 9, 5, 6, 7, 6 ],
            [ 6, 7 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_0",
        "solution": "Subtract(3, Square(IntDivide(Access(2, Reverse(x1)), 4)))",
        "held_out_inputs_dict": {
            "x1": [ [ 15, 13, 14 ], [ 31, 46, 26, 36 ], [ 25, 33, 26 ] ]
        },
        "held_out_outputs": [
            -6,
            -118,
            -33
        ]
    },
    {
        "name": "synthetic:weight_9_function_1",
        "solution": "Reverse(Map(lambda u1: (lambda v1: Add(-1, v1))(u1), Scanl1(lambda u1, u2: x1, x2)))",
        "held_out_inputs_dict": {
            "x1": [ 41, 41, 44 ],
            "x2": [ [ 14, 41 ], [ 32, 31 ], [ 26, 14 ] ]
        },
        "held_out_outputs": [
            [ 40, 13 ],
            [ 40, 31 ],
            [ 43, 25 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_2",
        "solution": "Subtract(IntDivide(x1, 3), Add(3, IntDivide(x1, 2)))",
        "held_out_inputs_dict": {
            "x1": [ 66, 97, 159 ]
        },
        "held_out_outputs": [
            -14,
            -19,
            -29
        ]
    },
    {
        "name": "synthetic:weight_9_function_3",
        "solution": "Scanl1(lambda u1, u2: Subtract(IntDivide(Last(x1), Head(x2)), 2), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -35, -34, -33, -32, -32 ], [ -14, -13, -4, 1, 3 ], [ -22, -32, -18, -27, -24 ] ],
            "x2": [ [ 7, 6, 6 ], [ 6, 8, 7, 9, 5 ], [ 5, 5 ] ]
        },
        "held_out_outputs": [
            [ -35, -7, -7, -7, -7 ],
            [ -14, -2, -2, -2, -2 ],
            [ -22, -7, -7, -7, -7 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_4",
        "solution": "Sum(Take(Minimum(x1), Scanl1(lambda u1, u2: Subtract(x2, 3), x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 18 ], [ 17, 24, 1, 14, 19 ], [ 10 ] ],
            "x2": [ 38, 17, 26 ]
        },
        "held_out_outputs": [
            18,
            17,
            10
        ]
    },
    {
        "name": "synthetic:weight_9_function_5",
        "solution": "Map(lambda u1: (lambda v1: Subtract(v1, 4))(u1), Scanl1(lambda u1, u2: 1, Sort(x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 53, 62, 63, 82, 49, 83 ], [ 52, 82, 66, 27, 31, 40 ], [ 85, 52, 83, 53, 74, 55 ] ]
        },
        "held_out_outputs": [
            [ 45, -3, -3, -3, -3, -3 ],
            [ 23, -3, -3, -3, -3, -3 ],
            [ 48, -3, -3, -3, -3, -3 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_6",
        "solution": "Map(lambda u1: Multiply(2, Max(3, Access(1, x2))), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 6, 3, 2 ], [ 2, 0, 4 ], [ 6, 2 ] ],
            "x2": [ [ -37, -24, -18, -29, -40, -22, -19, -30, -34, -43 ], [ -7, 16, 17, -3, 2, 9, 9, -3, 12 ], [ 2, 4, -3, 18, 5, 1, 13, 50, 30, -2 ] ]
        },
        "held_out_outputs": [
            [ 6, 6, 6 ],
            [ 32, 32, 32 ],
            [ 8, 8 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_7",
        "solution": "Map(lambda u1: (lambda v1: Min(4, (lambda v1: Max(0, v1))(v1)))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 7, 1, 4, 0, 1, 2, 5 ], [ 2, 5, 4, 3, 6, 1, 4, 1 ], [ 5, 5, 1, 1 ] ]
        },
        "held_out_outputs": [
            [ 4, 1, 4, 0, 1, 2, 4 ],
            [ 2, 4, 4, 3, 4, 1, 4, 1 ],
            [ 4, 4, 1, 1 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_8",
        "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(v1, Add(x3, 3)))(u2), x1, x2)",
        "held_out_inputs_dict": {
            "x1": [ [ 6, 8, 4, 8, 6 ], [ 6, 3, 2 ], [ 4 ] ],
            "x2": [ [ -68, -9 ], [ -113, -158 ], [ -92, -101 ] ],
            "x3": [ -158, 16, -176 ]
        },
        "held_out_outputs": [
            [ -68, -9 ],
            [ 19, 19 ],
            [ -92 ]
        ]
    },
    {
        "name": "synthetic:weight_9_function_9",
        "solution": "Map(lambda u1: (lambda v1: IntDivide((lambda v1: Multiply(3, v1))(v1), 4))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 41 ], [ 29 ], [ 27 ] ]
        },
        "held_out_outputs": [
            [ 30 ],
            [ 21 ],
            [ 20 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_0",
        "solution": "IntDivide(Add(Last(x2), Max(x1, Access(1, x3))), 3)",
        "held_out_inputs_dict": {
            "x1": [ 66, 168, 68 ],
            "x2": [ [ 35, 6, 18 ], [ 17, -15, -11, 8, 14 ], [ 5, -3 ] ],
            "x3": [ [ 159, 34, 16, 95, 138, 48 ], [ 220, 205, 186, 218 ], [ 92, 163, 88, 125, 178 ] ]
        },
        "held_out_outputs": [
            28,
            73,
            53
        ]
    },
    {
        "name": "synthetic:weight_10_function_1",
        "solution": "Sort(Scanl1(lambda u1, u2: (lambda v1: IntDivide(4, (lambda v1: Max(2, v1))(v1)))(u2), x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 6, 5, 6 ], [ 9, 6, 3 ], [ 2, -1, 1 ] ]
        },
        "held_out_outputs": [
            [ 0, 0, 6 ],
            [ 0, 1, 9 ],
            [ 2, 2, 2 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_2",
        "solution": "Subtract(IntDivide(x1, Subtract(x1, Multiply(3, Square(4)))), 2)",
        "held_out_inputs_dict": {
            "x1": [ 62, 70, 39 ]
        },
        "held_out_outputs": [
            2,
            1,
            -7
        ]
    },
    {
        "name": "synthetic:weight_10_function_3",
        "solution": "Map(lambda u1: (lambda v1: Square(v1))(u1), Scanl1(lambda u1, u2: Sum(Scanl1(lambda u1, u2: 4, x1)), x1))",
        "held_out_inputs_dict": {
            "x1": [ [ 5, 7, 7 ], [ -7, -7, -7 ], [ 6, 3, 3 ] ]
        },
        "held_out_outputs": [
            [ 25, 169, 169 ],
            [ 49, 1, 1 ],
            [ 36, 196, 196 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_4",
        "solution": "Map(lambda u1: Square(Count(lambda u1: (lambda v1: Equal(v1, Last(x1)))(u1), x2)), x3)",
        "held_out_inputs_dict": {
            "x1": [ [ 1, 1, 1, 0, 1 ], [ 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1 ] ],
            "x2": [ [ 1, 1, 0, 0, 0, 1, 1 ], [ 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1 ] ],
            "x3": [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ]
        },
        "held_out_outputs": [
            [ 16, 16 ],
            [ 25, 25 ],
            [ 49, 49 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_5",
        "solution": "Take(3, Scanl1(lambda u1, u2: Last(x2), Map(lambda u1: Add(-1, -1), x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 2, 2, 3, 3 ], [ 7, 7, 6 ], [ 9, 8, 9 ] ],
            "x2": [ [ 6, 4, 4, 6 ], [ 4, 10, 5, 4 ], [ 5, 6, 10 ] ]
        },
        "held_out_outputs": [
            [ -2, 6, 6 ],
            [ -2, 4, 4 ],
            [ -2, 10, 10 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_6",
        "solution": "Map(lambda u1: (lambda v1: Subtract(2, (lambda v1: Square((lambda v1: Square(v1))(v1)))(v1)))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ -3 ], [ 0 ], [ -2 ] ]
        },
        "held_out_outputs": [
            [ -79 ],
            [ 2 ],
            [ -14 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_7",
        "solution": "Add(x2, Sum(Map(lambda u1: (lambda v1: IntDivide(v1, Head(x1)))(u1), x3)))",
        "held_out_inputs_dict": {
            "x1": [ [ 2, 2, 1, 1, 1 ], [ 3, 1, 1, 4 ], [ 3, 4, 4, 4 ] ],
            "x2": [ 3, 3, 3 ],
            "x3": [ [ 1, 4, 2, 3 ], [ 2, 4, 1, 4 ], [ 2, 1, 0 ] ]
        },
        "held_out_outputs": [
            7,
            5,
            3
        ]
    },
    {
        "name": "synthetic:weight_10_function_8",
        "solution": "Scanl1(lambda u1, u2: (lambda v1: IntDivide(v1, Head(x3)))(u2), Sort(Scanl1(lambda u1, u2: x1, x2)))",
        "held_out_inputs_dict": {
            "x1": [ -82, 70, -32 ],
            "x2": [ [ 1, 1 ], [ 1, 1 ], [ 1, 1 ] ],
            "x3": [ [ -97, -127, -73, -90, -104, -130, -111 ], [ -40, -53, -73, -67 ], [ -51, -45, -38, -113, -62, -18, -44, -46 ] ]
        },
        "held_out_outputs": [
            [ -82, -1 ],
            [ 1, -2 ],
            [ -32, -1 ]
        ]
    },
    {
        "name": "synthetic:weight_10_function_9",
        "solution": "Map(lambda u1: (lambda v1: Subtract(4, v1))(u1), Scanl1(lambda u1, u2: 4, Drop(1, x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ -10, -10, -9, -10, -10, -9 ], [ 6, 2, 2, 6, 1, 5 ], [ -1, -3, -1, -3, -3, -2 ] ]
        },
        "held_out_outputs": [
            [ 14, 0, 0, 0, 0 ],
            [ 2, 0, 0, 0, 0 ],
            [ 7, 0, 0, 0, 0 ]
        ]
    },
    {
        "name": "synthetic:weight_11_function_0",
        "solution": "Add(3, IntDivide(Sum(Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, x1))(u1), x2)), 2))",
        "held_out_inputs_dict": {
            "x1": [ 4, 3, 3 ],
            "x2": [ [ 1, 7, 7, 4, 1, 1, 6, 5, 3, 6 ], [ 5, 4, 8, 2, 3, 3, 5, 4, 4 ], [ 5, 1, 2, 5, 5, 1, 1, 3, 4, 3 ] ]
        },
        "held_out_outputs": [
            -82,
            -29,
            -40
        ]
    },
    {
        "name": "synthetic:weight_11_function_1",
        "solution": "If(IsEven(x2), 1, Subtract(x1, Multiply(4, IntDivide(x2, 3))))",
        "held_out_inputs_dict": {
            "x1": [ 14, 12, 8 ],
            "x2": [ 35, 37, 37 ]
        },
        "held_out_outputs": [
            -30,
            -36,
            -40
        ]
    },
    {
        "name": "synthetic:weight_11_function_2",
        "solution": "Min(2, Sum(Drop(4, Scanl1(lambda u1, u2: (lambda v1: Add(v1, v1))(u1), x1))))",
        "held_out_inputs_dict": {
            "x1": [ [ -1, -1, -1, -1, -1, -1, -1, -1 ], [ -1, -1, 0, 0, 0, 0, 0 ], [ 9, 0, 7, 4, 3, 0, 1, 8 ] ]
        },
        "held_out_outputs": [
            -240,
            -112,
            2
        ]
    },
    {
        "name": "synthetic:weight_11_function_3",
        "solution": "Subtract(0, Square(Add(x2, Square(Count(lambda u1: (lambda v1: IsOdd(v1))(u1), x1)))))",
        "held_out_inputs_dict": {
            "x1": [ [ 1, 0 ], [ 1, 1 ], [ 1, 1 ] ],
            "x2": [ 1, 0, 1 ]
        },
        "held_out_outputs": [
            -4,
            -16,
            -25
        ]
    },
    {
        "name": "synthetic:weight_11_function_4",
        "solution": "Multiply(4, Subtract(4, Multiply(Square(3), IntDivide(Square(x1), 3))))",
        "held_out_inputs_dict": {
            "x1": [ 3, 5, -3 ]
        },
        "held_out_outputs": [
            -92,
            -272,
            -92
        ]
    },
    {
        "name": "synthetic:weight_11_function_5",
        "solution": "Drop(3, ZipWith(lambda u1, u2: Add(2, Square(Add(3, 4))), x1, x2))",
        "held_out_inputs_dict": {
            "x1": [ [ 221, 209, 236, 203, 232 ], [ 223, 144, 218, 214, 163, 210, 159, 176, 229, 174 ], [ 189, 200, 164, 187, 175, 205, 179, 154 ] ],
            "x2": [ [ -3, -4, -1, -4, -1, -1, -3, -2, -4 ], [ -3, 3, 1, 1, 1, -2 ], [ -2, -4, -3, 4, 2 ] ]
        },
        "held_out_outputs": [
            [ 51, 51 ],
            [ 51, 51, 51 ],
            [ 51, 51 ]
        ]
    },
    {
        "name": "synthetic:weight_11_function_6",
        "solution": "Reverse(Filter(lambda u1: IsEven(Last(x1)), Scanl1(lambda u1, u2: (lambda v1: IntDivide(v1, 2))(u1), x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ -146, -168, -150, -172 ], [ -105, -100, -112 ], [ -150, -145, -100 ] ]
        },
        "held_out_outputs": [
            [ -19, -37, -73, -146 ],
            [ -27, -53, -105 ],
            [ -38, -75, -150 ]
        ]
    },
    {
        "name": "synthetic:weight_11_function_7",
        "solution": "Multiply(3, IntDivide(Max(-1, Max(Last(x1), Sum(x1))), 3))",
        "held_out_inputs_dict": {
            "x1": [ [ 2, 23 ], [ 69, 49 ], [ -13, 7 ] ]
        },
        "held_out_outputs": [
            24,
            117,
            6
        ]
    },
    {
        "name": "synthetic:weight_11_function_8",
        "solution": "IntDivide(Square(Subtract(Square(4), Last(x1))), Subtract(3, Last(x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 7 ], [ 4 ], [ 1 ] ]
        },
        "held_out_outputs": [
            -21,
            -144,
            112
        ]
    },
    {
        "name": "synthetic:weight_11_function_9",
        "solution": "Take(2, Scanl1(lambda u1, u2: Add(3, Max(Square(4), Head(x1))), x1))",
        "held_out_inputs_dict": {
            "x1": [ [ -35, -54, 4, -127, -7, -96 ], [ 95, 63, 117 ], [ 222, 241, -53, 236 ] ]
        },
        "held_out_outputs": [
            [ -35, 19 ],
            [ 95, 98 ],
            [ 222, 225 ]
        ]
    },
    {
        "name": "synthetic:weight_12_function_0",
        "solution": "Map(lambda u1: (lambda v1: IntDivide((lambda v1: Square(v1))(v1), Square(Subtract(2, Square(4)))))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 114 ], [ 153 ], [ 103 ] ]
        },
        "held_out_outputs": [
            [ 66 ],
            [ 119 ],
            [ 54 ]
        ]
    },
    {
        "name": "synthetic:weight_12_function_1",
        "solution": "Reverse(Scanl1(lambda u1, u2: (lambda v1: IntDivide(v1, 2))(u1), Map(lambda u1: Square(Multiply(3, 4)), x1)))",
        "held_out_inputs_dict": {
            "x1": [ [ 8, 11 ], [ 4, 6, -6, -6, 3 ], [ -4, -4, -4, -4, -4, -4 ] ]
        },
        "held_out_outputs": [
            [ 72, 144 ],
            [ 9, 18, 36, 72, 144 ],
            [ 4, 9, 18, 36, 72, 144 ]
        ]
    },
    {
        "name": "synthetic:weight_12_function_2",
        "solution": "Multiply(Add(x1, 2), Add(1, Subtract(4, Multiply(4, Square(4)))))",
        "held_out_inputs_dict": {
            "x1": [ 3, 2, -3 ]
        },
        "held_out_outputs": [
            -295,
            -236,
            59
        ]
    },
    {
        "name": "synthetic:weight_12_function_3",
        "solution": "Subtract(If(IsOdd(x1), Add(x1, x1), Subtract(0, Square(3))), 2)",
        "held_out_inputs_dict": {
            "x1": [ 87, 81, 89 ]
        },
        "held_out_outputs": [
            172,
            160,
            176
        ]
    },
    {
        "name": "synthetic:weight_12_function_4",
        "solution": "Subtract(If(IsEven(IntDivide(x1, 3)), x2, Add(x1, Square(3))), 4)",
        "held_out_inputs_dict": {
            "x1": [ 177, 161, 184 ],
            "x2": [ 0, 0, 0 ]
        },
        "held_out_outputs": [
            182,
            166,
            189
        ]
    },
    {
        "name": "synthetic:weight_12_function_5",
        "solution": "Subtract(x2, Square(Add(Square(4), IntDivide(x1, Subtract(3, Square(3))))))",
        "held_out_inputs_dict": {
            "x1": [ 141, 136, 126 ],
            "x2": [ 0, 0, 0 ]
        },
        "held_out_outputs": [
            -64,
            -49,
            -25
        ]
    },
    {
        "name": "synthetic:weight_12_function_6",
        "solution": "Subtract(Square(4), If(IsEven(IntDivide(x1, 3)), x2, Add(x1, 2)))",
        "held_out_inputs_dict": {
            "x1": [ 214, 203, 184 ],
            "x2": [ 0, 0, 0 ]
        },
        "held_out_outputs": [
            -200,
            -189,
            -170
        ]
    },
    {
        "name": "synthetic:weight_12_function_7",
        "solution": "Subtract(x2, Add(x1, IntDivide(x1, Subtract(IntDivide(x1, Square(4)), 2))))",
        "held_out_inputs_dict": {
            "x1": [ 135, 120, 164 ],
            "x2": [ 0, 0, 0 ]
        },
        "held_out_outputs": [
            -157,
            -144,
            -184
        ]
    },
    {
        "name": "synthetic:weight_12_function_8",
        "solution": "Map(lambda u1: (lambda v1: Subtract(0, (lambda v1: Square((lambda v1: Subtract(v1, Square(4)))(v1)))(v1)))(u1), x1)",
        "held_out_inputs_dict": {
            "x1": [ [ 11 ], [ 3 ], [ 10 ] ]
        },
        "held_out_outputs": [
            [ -25 ],
            [ -169 ],
            [ -36 ]
        ]
    },
    {
        "name": "synthetic:weight_12_function_9",
        "solution": "Add(3, Multiply(2, Max(x1, Multiply(4, Subtract(Square(4), 2)))))",
        "held_out_inputs_dict": {
            "x1": [ 95, 88, 76 ]
        },
        "held_out_outputs": [
            193,
            179,
            155
        ]
    }
]
