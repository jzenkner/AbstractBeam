{
    "num_operations": 28,
    "num_tasks": 100,
    "num_tasks_solved": 0,
    "results": [
        {
            "elapsed_time": 0.6040103621780872,
            "num_unique_values": 10,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": -1,
                "explored_percent_lambda": -1,
                "explored_percent_none": -1,
                "kept_percent_concrete": -1,
                "kept_percent_lambda": -1,
                "num_examples": 5,
                "num_explored_concrete": 0,
                "num_explored_lambda": 0,
                "num_explored_none": 0,
                "num_inputs": 2,
                "num_kept_concrete": 0,
                "num_kept_lambda": 0,
                "num_values_explored": 0,
                "num_values_kept": 0,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.5044272625818849,
            "num_unique_values": 64,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 34.85477178423236,
                "explored_percent_lambda": 26.970954356846473,
                "explored_percent_none": 38.17427385892116,
                "kept_percent_concrete": 36.36363636363637,
                "kept_percent_lambda": 63.63636363636363,
                "num_examples": 5,
                "num_explored_concrete": 84,
                "num_explored_lambda": 65,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 20,
                "num_kept_lambda": 35,
                "num_values_explored": 241,
                "num_values_kept": 55,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22912539914250374,
            "num_unique_values": 88,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.714285714285715,
                "explored_percent_lambda": 27.38095238095238,
                "explored_percent_none": 41.904761904761905,
                "kept_percent_concrete": 43.58974358974359,
                "kept_percent_lambda": 56.41025641025641,
                "num_examples": 5,
                "num_explored_concrete": 258,
                "num_explored_lambda": 230,
                "num_explored_none": 352,
                "num_inputs": 2,
                "num_kept_concrete": 34,
                "num_kept_lambda": 44,
                "num_values_explored": 840,
                "num_values_kept": 78,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.22743739653378725,
            "num_unique_values": 83,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 30.714285714285715,
                "explored_percent_lambda": 24.642857142857142,
                "explored_percent_none": 44.642857142857146,
                "kept_percent_concrete": 39.726027397260275,
                "kept_percent_lambda": 60.273972602739725,
                "num_examples": 5,
                "num_explored_concrete": 258,
                "num_explored_lambda": 207,
                "num_explored_none": 375,
                "num_inputs": 2,
                "num_kept_concrete": 29,
                "num_kept_lambda": 44,
                "num_values_explored": 840,
                "num_values_kept": 73,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20228901877999306,
            "num_unique_values": 85,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 70.66666666666667,
                "kept_percent_lambda": 29.333333333333332,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 99,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 53,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 75,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20757587160915136,
            "num_unique_values": 91,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.738095238095237,
                "kept_percent_concrete": 72.8395061728395,
                "kept_percent_lambda": 27.160493827160494,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 97,
                "num_explored_none": 149,
                "num_inputs": 2,
                "num_kept_concrete": 59,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 81,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1998076904565096,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 69.56521739130434,
                "kept_percent_lambda": 30.434782608695652,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20287495478987694,
            "num_unique_values": 89,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.66666666666667,
                "explored_percent_lambda": 11.428571428571429,
                "explored_percent_none": 16.904761904761905,
                "kept_percent_concrete": 71.7948717948718,
                "kept_percent_lambda": 28.205128205128204,
                "num_examples": 3,
                "num_explored_concrete": 602,
                "num_explored_lambda": 96,
                "num_explored_none": 142,
                "num_inputs": 3,
                "num_kept_concrete": 56,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 78,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2013669079169631,
            "num_unique_values": 88,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 71.7948717948718,
                "kept_percent_lambda": 28.205128205128204,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 99,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 56,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 78,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2137529170140624,
            "num_unique_values": 98,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23809523809524,
                "explored_percent_lambda": 9.880952380952381,
                "explored_percent_none": 19.88095238095238,
                "kept_percent_concrete": 77.27272727272727,
                "kept_percent_lambda": 22.727272727272727,
                "num_examples": 5,
                "num_explored_concrete": 590,
                "num_explored_lambda": 83,
                "num_explored_none": 167,
                "num_inputs": 2,
                "num_kept_concrete": 68,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 88,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2073330944404006,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.85714285714286,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.785714285714285,
                "kept_percent_concrete": 70.14925373134328,
                "kept_percent_lambda": 29.850746268656717,
                "num_examples": 5,
                "num_explored_concrete": 612,
                "num_explored_lambda": 87,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 47,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 67,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2665416793897748,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.33928571428571,
                "explored_percent_lambda": 10.625,
                "explored_percent_none": 18.035714285714285,
                "kept_percent_concrete": 70.0,
                "kept_percent_lambda": 30.0,
                "num_examples": 5,
                "num_explored_concrete": 799,
                "num_explored_lambda": 119,
                "num_explored_none": 202,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 21,
                "num_values_explored": 1120,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21033185813575983,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.97619047619048,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 71.01449275362319,
                "kept_percent_lambda": 28.985507246376812,
                "num_examples": 5,
                "num_explored_concrete": 613,
                "num_explored_lambda": 87,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20807146653532982,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.30952380952381,
                "explored_percent_lambda": 8.69047619047619,
                "explored_percent_none": 15.0,
                "kept_percent_concrete": 63.768115942028984,
                "kept_percent_lambda": 36.231884057971016,
                "num_examples": 5,
                "num_explored_concrete": 641,
                "num_explored_lambda": 73,
                "num_explored_none": 126,
                "num_inputs": 2,
                "num_kept_concrete": 44,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21198709309101105,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.57142857142857,
                "explored_percent_lambda": 9.880952380952381,
                "explored_percent_none": 16.547619047619047,
                "kept_percent_concrete": 47.82608695652174,
                "kept_percent_lambda": 52.17391304347826,
                "num_examples": 5,
                "num_explored_concrete": 618,
                "num_explored_lambda": 83,
                "num_explored_none": 139,
                "num_inputs": 2,
                "num_kept_concrete": 33,
                "num_kept_lambda": 36,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20991385076195002,
            "num_unique_values": 75,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 13.333333333333334,
                "explored_percent_none": 16.19047619047619,
                "kept_percent_concrete": 66.66666666666667,
                "kept_percent_lambda": 33.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 112,
                "num_explored_none": 136,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 66,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map((lambda u1: Multiply(u1, Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20820141769945621,
            "num_unique_values": 75,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.07142857142857,
                "explored_percent_lambda": 12.380952380952381,
                "explored_percent_none": 16.547619047619047,
                "kept_percent_concrete": 68.18181818181819,
                "kept_percent_lambda": 31.818181818181817,
                "num_examples": 3,
                "num_explored_concrete": 597,
                "num_explored_lambda": 104,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 45,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 66,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map((lambda u1: Max(u1, Subtract(0, u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Max(u1, Subtract(0, u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19950930401682854,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 70.4225352112676,
                "kept_percent_lambda": 29.577464788732396,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map((lambda u1: Subtract(Square(u1), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Square(u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.201298538595438,
            "num_unique_values": 83,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23809523809524,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 70.27027027027027,
                "kept_percent_lambda": 29.72972972972973,
                "num_examples": 3,
                "num_explored_concrete": 590,
                "num_explored_lambda": 99,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 52,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 74,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)'\n)",
            "task_solution": "Map((lambda u1: IntDivide(Add(Square(u1), u1), 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20326939970254898,
            "num_unique_values": 87,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.30952380952381,
                "explored_percent_lambda": 11.30952380952381,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 72.36842105263158,
                "kept_percent_lambda": 27.63157894736842,
                "num_examples": 3,
                "num_explored_concrete": 599,
                "num_explored_lambda": 95,
                "num_explored_none": 146,
                "num_inputs": 3,
                "num_kept_concrete": 55,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 76,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map((lambda u1: Add(Multiply(a, u1), b)), x)'\n)",
            "task_solution": "Map((lambda u1: Add(Multiply(a, u1), b)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1988653689622879,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23809523809524,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 69.01408450704226,
                "kept_percent_lambda": 30.985915492957748,
                "num_examples": 3,
                "num_explored_concrete": 590,
                "num_explored_lambda": 99,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(Multiply(u1, 3), 4)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20070143323391676,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 70.83333333333333,
                "kept_percent_lambda": 29.166666666666668,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 51,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map((lambda u1: Multiply(u1, Add(u1, 2))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(u1, Add(u1, 2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19964827131479979,
            "num_unique_values": 82,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.07142857142857,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 69.01408450704226,
                "kept_percent_lambda": 30.985915492957748,
                "num_examples": 3,
                "num_explored_concrete": 597,
                "num_explored_lambda": 97,
                "num_explored_none": 146,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map((lambda u1: Max(Min(u1, b), a)), x)'\n)",
            "task_solution": "Map((lambda u1: Max(Min(u1, b), a)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2005208134651184,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23809523809524,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 69.44444444444444,
                "kept_percent_lambda": 30.555555555555557,
                "num_examples": 3,
                "num_explored_concrete": 590,
                "num_explored_lambda": 99,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)'\n)",
            "task_solution": "Map((lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1997884502634406,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.11904761904762,
                "explored_percent_lambda": 11.904761904761905,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 70.4225352112676,
                "kept_percent_lambda": 29.577464788732396,
                "num_examples": 3,
                "num_explored_concrete": 589,
                "num_explored_lambda": 100,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map((lambda u1: Square(u1)), x))'\n)",
            "task_solution": "Sort(Map((lambda u1: Square(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2017279639840126,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 69.56521739130434,
                "kept_percent_lambda": 30.434782608695652,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map((lambda u1: Subtract(u1, Minimum(x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Minimum(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.1995597630739212,
            "num_unique_values": 84,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.19047619047619,
                "explored_percent_lambda": 11.428571428571429,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 70.27027027027027,
                "kept_percent_lambda": 29.72972972972973,
                "num_examples": 3,
                "num_explored_concrete": 598,
                "num_explored_lambda": 96,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 52,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 74,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map((lambda u1: Subtract(u1, Access(i, x))), x)'\n)",
            "task_solution": "Map((lambda u1: Subtract(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20440421998500824,
            "num_unique_values": 94,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 73.80952380952381,
                "kept_percent_lambda": 26.19047619047619,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 99,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 62,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 84,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)'\n)",
            "task_solution": "Map((lambda u1: Add(u1, Subtract(t, Head(x)))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2564988490194082,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.73214285714286,
                "explored_percent_lambda": 10.535714285714286,
                "explored_percent_none": 14.732142857142858,
                "kept_percent_concrete": 57.142857142857146,
                "kept_percent_lambda": 42.857142857142854,
                "num_examples": 3,
                "num_explored_concrete": 837,
                "num_explored_lambda": 118,
                "num_explored_none": 165,
                "num_inputs": 2,
                "num_kept_concrete": 40,
                "num_kept_lambda": 30,
                "num_values_explored": 1120,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map((lambda u1: Access(u1, x)), i)'\n)",
            "task_solution": "Map((lambda u1: Access(u1, x)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21024820767343044,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.30952380952381,
                "explored_percent_lambda": 8.69047619047619,
                "explored_percent_none": 15.0,
                "kept_percent_concrete": 63.23529411764706,
                "kept_percent_lambda": 36.76470588235294,
                "num_examples": 5,
                "num_explored_concrete": 641,
                "num_explored_lambda": 73,
                "num_explored_none": 126,
                "num_inputs": 2,
                "num_kept_concrete": 43,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map((lambda u1: Access(u1, x)), i))'\n)",
            "task_solution": "Maximum(Map((lambda u1: Access(u1, x)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19995312951505184,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 11.904761904761905,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 69.44444444444444,
                "kept_percent_lambda": 30.555555555555557,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 100,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map((lambda u1: If(IsOdd(u1), 0, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), 0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20096934959292412,
            "num_unique_values": 84,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.30952380952381,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.142857142857142,
                "kept_percent_concrete": 69.86301369863014,
                "kept_percent_lambda": 30.136986301369863,
                "num_examples": 3,
                "num_explored_concrete": 599,
                "num_explored_lambda": 97,
                "num_explored_none": 144,
                "num_inputs": 3,
                "num_kept_concrete": 51,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 73,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map((lambda u1: If(Equal(u1, f), r, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Equal(u1, f), r, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2746264189481735,
            "num_unique_values": 87,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.95238095238095,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 71.42857142857143,
                "kept_percent_lambda": 28.571428571428573,
                "num_examples": 3,
                "num_explored_concrete": 596,
                "num_explored_lambda": 97,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 55,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 77,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map((lambda u1: If(Less(u1, 0), y, u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Less(u1, 0), y, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2012031888589263,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 69.44444444444444,
                "kept_percent_lambda": 30.555555555555557,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 99,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map((lambda u1: Add(u1, Last(x))), x))'\n)",
            "task_solution": "Take(-1, Map((lambda u1: Add(u1, Last(x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20638619363307953,
            "num_unique_values": 73,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.83333333333333,
                "explored_percent_lambda": 12.619047619047619,
                "explored_percent_none": 16.547619047619047,
                "kept_percent_concrete": 67.1875,
                "kept_percent_lambda": 32.8125,
                "num_examples": 3,
                "num_explored_concrete": 595,
                "num_explored_lambda": 106,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 43,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map((lambda u1: Head(x)), x)'\n)",
            "task_solution": "Map((lambda u1: Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21499664708971977,
            "num_unique_values": 73,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.78571428571429,
                "explored_percent_lambda": 11.071428571428571,
                "explored_percent_none": 17.142857142857142,
                "kept_percent_concrete": 68.75,
                "kept_percent_lambda": 31.25,
                "num_examples": 5,
                "num_explored_concrete": 603,
                "num_explored_lambda": 93,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map((lambda u1: 1), x))'\n)",
            "task_solution": "Sum(Map((lambda u1: 1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20744481403380632,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.14285714285714,
                "explored_percent_lambda": 10.714285714285714,
                "explored_percent_none": 17.142857142857142,
                "kept_percent_concrete": 71.64179104477611,
                "kept_percent_lambda": 28.35820895522388,
                "num_examples": 5,
                "num_explored_concrete": 606,
                "num_explored_lambda": 90,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 19,
                "num_values_explored": 840,
                "num_values_kept": 67,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map((lambda u1: 1), x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21000135131180286,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.66666666666667,
                "explored_percent_lambda": 12.261904761904763,
                "explored_percent_none": 16.071428571428573,
                "kept_percent_concrete": 70.58823529411765,
                "kept_percent_lambda": 29.41176470588235,
                "num_examples": 3,
                "num_explored_concrete": 602,
                "num_explored_lambda": 103,
                "num_explored_none": 135,
                "num_inputs": 2,
                "num_kept_concrete": 48,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map((lambda u1: If(Greater(u1, y), 1, 0)), x)'\n)",
            "task_solution": "Map((lambda u1: If(Greater(u1, y), 1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19911513663828373,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.904761904761905,
                "explored_percent_none": 17.738095238095237,
                "kept_percent_concrete": 69.44444444444444,
                "kept_percent_lambda": 30.555555555555557,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 100,
                "num_explored_none": 149,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20388342533260584,
            "num_unique_values": 92,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.83333333333333,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 73.17073170731707,
                "kept_percent_lambda": 26.829268292682926,
                "num_examples": 3,
                "num_explored_concrete": 595,
                "num_explored_lambda": 99,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 60,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 82,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)'\n)",
            "task_solution": "Map((lambda u1: If(IsOdd(u1), Multiply(u1, n), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20383578445762396,
            "num_unique_values": 90,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 12.023809523809524,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 72.5,
                "kept_percent_lambda": 27.5,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 101,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 58,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 80,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter((lambda u1: Greater(u1, y)), x)'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, y)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2000852581113577,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 68.1159420289855,
                "kept_percent_lambda": 31.884057971014492,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 99,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 47,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter((lambda u1: IsEven(u1)), Sort(x))'\n)",
            "task_solution": "Filter((lambda u1: IsEven(u1)), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20555057004094124,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.73809523809524,
                "explored_percent_lambda": 10.595238095238095,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 72.22222222222223,
                "kept_percent_lambda": 27.77777777777778,
                "num_examples": 5,
                "num_explored_concrete": 611,
                "num_explored_lambda": 89,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 52,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Maximum(Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2070063566789031,
            "num_unique_values": 73,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.19047619047619,
                "explored_percent_lambda": 12.380952380952381,
                "explored_percent_none": 16.428571428571427,
                "kept_percent_concrete": 68.75,
                "kept_percent_lambda": 31.25,
                "num_examples": 3,
                "num_explored_concrete": 598,
                "num_explored_lambda": 104,
                "num_explored_none": 138,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter((lambda u1: IsOdd(Min(u1, 0))), x)'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20698123704642057,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.85714285714286,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.785714285714285,
                "kept_percent_concrete": 71.42857142857143,
                "kept_percent_lambda": 28.571428571428573,
                "num_examples": 5,
                "num_explored_concrete": 612,
                "num_explored_lambda": 87,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter((lambda u1: Greater(u1, 0)), x))'\n)",
            "task_solution": "Sum(Filter((lambda u1: Greater(u1, 0)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.203025221824646,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 69.44444444444444,
                "kept_percent_lambda": 30.555555555555557,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 99,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, 0)), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20211881026625633,
            "num_unique_values": 82,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.07142857142857,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.142857142857142,
                "kept_percent_concrete": 69.01408450704226,
                "kept_percent_lambda": 30.985915492957748,
                "num_examples": 3,
                "num_explored_concrete": 597,
                "num_explored_lambda": 99,
                "num_explored_none": 144,
                "num_inputs": 3,
                "num_kept_concrete": 49,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))'\n)",
            "task_solution": "Filter((lambda u1: Less(u1, b)), Filter((lambda u1: Greater(u1, a)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20393040403723717,
            "num_unique_values": 90,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.83333333333333,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 72.5,
                "kept_percent_lambda": 27.5,
                "num_examples": 3,
                "num_explored_concrete": 595,
                "num_explored_lambda": 99,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 58,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 80,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20155483484268188,
            "num_unique_values": 85,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.95238095238095,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.5,
                "kept_percent_concrete": 70.66666666666667,
                "kept_percent_lambda": 29.333333333333332,
                "num_examples": 3,
                "num_explored_concrete": 596,
                "num_explored_lambda": 97,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 53,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 75,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)'\n)",
            "task_solution": "Filter((lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20029963552951813,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 69.56521739130434,
                "kept_percent_lambda": 30.434782608695652,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 98,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))'\n)",
            "task_solution": "Sort(Filter((lambda u1: Equal(u1, Access(u1, x))), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2538093738257885,
            "num_unique_values": 77,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.69642857142857,
                "explored_percent_lambda": 8.928571428571429,
                "explored_percent_none": 14.375,
                "kept_percent_concrete": 62.121212121212125,
                "kept_percent_lambda": 37.878787878787875,
                "num_examples": 3,
                "num_explored_concrete": 859,
                "num_explored_lambda": 100,
                "num_explored_none": 161,
                "num_inputs": 3,
                "num_kept_concrete": 41,
                "num_kept_lambda": 25,
                "num_values_explored": 1120,
                "num_values_kept": 66,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter((lambda u1: Equal(Access(u1, x), y)), i)'\n)",
            "task_solution": "Filter((lambda u1: Equal(Access(u1, x), y)), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21108675096184015,
            "num_unique_values": 84,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.5,
                "explored_percent_lambda": 10.714285714285714,
                "explored_percent_none": 16.785714285714285,
                "kept_percent_concrete": 72.97297297297297,
                "kept_percent_lambda": 27.027027027027028,
                "num_examples": 5,
                "num_explored_concrete": 609,
                "num_explored_lambda": 90,
                "num_explored_none": 141,
                "num_inputs": 2,
                "num_kept_concrete": 54,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 74,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count((lambda u1: Equal(u1, n)), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21533601358532906,
            "num_unique_values": 103,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.85714285714286,
                "explored_percent_lambda": 10.238095238095237,
                "explored_percent_none": 16.904761904761905,
                "kept_percent_concrete": 78.49462365591398,
                "kept_percent_lambda": 21.50537634408602,
                "num_examples": 5,
                "num_explored_concrete": 612,
                "num_explored_lambda": 86,
                "num_explored_none": 142,
                "num_inputs": 2,
                "num_kept_concrete": 73,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 93,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count((lambda u1: Less(u1, q)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, q)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20806373748928308,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.97619047619048,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 70.14925373134328,
                "kept_percent_lambda": 29.850746268656717,
                "num_examples": 5,
                "num_explored_concrete": 613,
                "num_explored_lambda": 87,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 47,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 67,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count((lambda u1: Less(u1, Head(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20752382185310125,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.21428571428571,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.428571428571427,
                "kept_percent_concrete": 71.64179104477611,
                "kept_percent_lambda": 28.35820895522388,
                "num_examples": 5,
                "num_explored_concrete": 615,
                "num_explored_lambda": 87,
                "num_explored_none": 138,
                "num_inputs": 1,
                "num_kept_concrete": 48,
                "num_kept_lambda": 19,
                "num_values_explored": 840,
                "num_values_kept": 67,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count((lambda u1: Less(u1, 0)), x)'\n)",
            "task_solution": "Count((lambda u1: Less(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20769522059708834,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.0952380952381,
                "explored_percent_lambda": 9.880952380952381,
                "explored_percent_none": 17.023809523809526,
                "kept_percent_concrete": 71.01449275362319,
                "kept_percent_lambda": 28.985507246376812,
                "num_examples": 5,
                "num_explored_concrete": 614,
                "num_explored_lambda": 83,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Last(x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Last(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21693562995642424,
            "num_unique_values": 101,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.61904761904762,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 17.023809523809526,
                "kept_percent_concrete": 78.02197802197803,
                "kept_percent_lambda": 21.978021978021978,
                "num_examples": 5,
                "num_explored_concrete": 610,
                "num_explored_lambda": 87,
                "num_explored_none": 143,
                "num_inputs": 2,
                "num_kept_concrete": 71,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 91,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count((lambda u1: Equal(u1, Access(i, x))), x)'\n)",
            "task_solution": "Count((lambda u1: Equal(u1, Access(i, x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2171961273998022,
            "num_unique_values": 74,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.73809523809524,
                "explored_percent_lambda": 11.428571428571429,
                "explored_percent_none": 15.833333333333334,
                "kept_percent_concrete": 70.76923076923077,
                "kept_percent_lambda": 29.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 611,
                "num_explored_lambda": 96,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 19,
                "num_values_explored": 840,
                "num_values_kept": 65,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count((lambda u1: IsEven(Min(u1, 0))), x)'\n)",
            "task_solution": "Count((lambda u1: IsEven(Min(u1, 0))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20541254058480263,
            "num_unique_values": 75,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.47619047619048,
                "explored_percent_lambda": 8.214285714285714,
                "explored_percent_none": 16.30952380952381,
                "kept_percent_concrete": 64.61538461538461,
                "kept_percent_lambda": 35.38461538461539,
                "num_examples": 5,
                "num_explored_concrete": 634,
                "num_explored_lambda": 69,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 23,
                "num_values_explored": 840,
                "num_values_kept": 65,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))'\n)",
            "task_solution": "Add(Count((lambda u1: Equal(u1, 0)), x), Count((lambda u1: Equal(u1, 0)), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2563948491588235,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.71428571428571,
                "explored_percent_lambda": 9.553571428571429,
                "explored_percent_none": 14.732142857142858,
                "kept_percent_concrete": 60.869565217391305,
                "kept_percent_lambda": 39.130434782608695,
                "num_examples": 3,
                "num_explored_concrete": 848,
                "num_explored_lambda": 107,
                "num_explored_none": 165,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 27,
                "num_values_explored": 1120,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))'\n)",
            "task_solution": "Take(Count((lambda u1: Greater(u1, 0)), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2073596641421318,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.95238095238095,
                "explored_percent_lambda": 8.69047619047619,
                "explored_percent_none": 15.357142857142858,
                "kept_percent_concrete": 63.23529411764706,
                "kept_percent_lambda": 36.76470588235294,
                "num_examples": 5,
                "num_explored_concrete": 638,
                "num_explored_lambda": 73,
                "num_explored_none": 129,
                "num_inputs": 2,
                "num_kept_concrete": 43,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Add(Multiply(u1, 3), u2)), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2145529007539153,
            "num_unique_values": 66,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.78571428571429,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 14.761904761904763,
                "kept_percent_concrete": 58.92857142857143,
                "kept_percent_lambda": 41.07142857142857,
                "num_examples": 5,
                "num_explored_concrete": 645,
                "num_explored_lambda": 71,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 33,
                "num_kept_lambda": 23,
                "num_values_explored": 840,
                "num_values_kept": 56,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2024704273790121,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.738095238095237,
                "kept_percent_concrete": 68.65671641791045,
                "kept_percent_lambda": 31.34328358208955,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 98,
                "num_explored_none": 149,
                "num_inputs": 1,
                "num_kept_concrete": 46,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 67,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.21606768760830164,
            "num_unique_values": 66,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.47619047619048,
                "explored_percent_lambda": 8.214285714285714,
                "explored_percent_none": 16.30952380952381,
                "kept_percent_concrete": 53.57142857142857,
                "kept_percent_lambda": 46.42857142857143,
                "num_examples": 5,
                "num_explored_concrete": 634,
                "num_explored_lambda": 69,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 30,
                "num_kept_lambda": 26,
                "num_values_explored": 840,
                "num_values_kept": 56,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith((lambda u1, u2: Add(u1, u2)), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2726043062284589,
            "num_unique_values": 71,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.76785714285714,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 15.446428571428571,
                "kept_percent_concrete": 69.35483870967742,
                "kept_percent_lambda": 30.64516129032258,
                "num_examples": 5,
                "num_explored_concrete": 815,
                "num_explored_lambda": 132,
                "num_explored_none": 173,
                "num_inputs": 1,
                "num_kept_concrete": 43,
                "num_kept_lambda": 19,
                "num_values_explored": 1120,
                "num_values_kept": 62,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Max(Subtract(u1, u2), 0)), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2746135191991925,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.30952380952381,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 15.238095238095237,
                "kept_percent_concrete": 63.23529411764706,
                "kept_percent_lambda": 36.76470588235294,
                "num_examples": 5,
                "num_explored_concrete": 641,
                "num_explored_lambda": 71,
                "num_explored_none": 128,
                "num_inputs": 2,
                "num_kept_concrete": 43,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2642212212085724,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.08928571428571,
                "explored_percent_lambda": 10.892857142857142,
                "explored_percent_none": 14.017857142857142,
                "kept_percent_concrete": 60.869565217391305,
                "kept_percent_lambda": 39.130434782608695,
                "num_examples": 3,
                "num_explored_concrete": 841,
                "num_explored_lambda": 122,
                "num_explored_none": 157,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 27,
                "num_values_explored": 1120,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: IntDivide(Add(u1, u2), 2)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.24879996571689844,
            "num_unique_values": 69,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.71428571428571,
                "explored_percent_lambda": 7.321428571428571,
                "explored_percent_none": 11.964285714285714,
                "kept_percent_concrete": 67.24137931034483,
                "kept_percent_lambda": 32.758620689655174,
                "num_examples": 3,
                "num_explored_concrete": 904,
                "num_explored_lambda": 82,
                "num_explored_none": 134,
                "num_inputs": 3,
                "num_kept_concrete": 39,
                "num_kept_lambda": 19,
                "num_values_explored": 1120,
                "num_values_kept": 58,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), a, ZipWith((lambda u1, u2: Add(u1, u2)), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2552282912656665,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.91071428571429,
                "explored_percent_lambda": 9.464285714285714,
                "explored_percent_none": 15.625,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 839,
                "num_explored_lambda": 106,
                "num_explored_none": 175,
                "num_inputs": 2,
                "num_kept_concrete": 42,
                "num_kept_lambda": 26,
                "num_values_explored": 1120,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))'\n)",
            "task_solution": "Sort(ZipWith((lambda u1, u2: IntDivide(u1, u2)), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20041111577302217,
            "num_unique_values": 82,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 71.23287671232876,
                "kept_percent_lambda": 28.767123287671232,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 52,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 73,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Subtract(u2, u1)), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20623060408979654,
            "num_unique_values": 74,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.23809523809524,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 16.30952380952381,
                "kept_percent_concrete": 60.9375,
                "kept_percent_lambda": 39.0625,
                "num_examples": 5,
                "num_explored_concrete": 632,
                "num_explored_lambda": 71,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 39,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19921027589589357,
            "num_unique_values": 71,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.88095238095238,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 59.01639344262295,
                "kept_percent_lambda": 40.98360655737705,
                "num_examples": 3,
                "num_explored_concrete": 629,
                "num_explored_lambda": 71,
                "num_explored_none": 140,
                "num_inputs": 2,
                "num_kept_concrete": 36,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 61,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1))), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20719163492321968,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.30952380952381,
                "explored_percent_lambda": 8.69047619047619,
                "explored_percent_none": 15.0,
                "kept_percent_concrete": 64.28571428571429,
                "kept_percent_lambda": 35.714285714285715,
                "num_examples": 5,
                "num_explored_concrete": 641,
                "num_explored_lambda": 73,
                "num_explored_none": 126,
                "num_inputs": 2,
                "num_kept_concrete": 45,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Square(Subtract(u1, u2))), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2631033696234226,
            "num_unique_values": 66,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.80357142857143,
                "explored_percent_lambda": 9.821428571428571,
                "explored_percent_none": 14.375,
                "kept_percent_concrete": 53.57142857142857,
                "kept_percent_lambda": 46.42857142857143,
                "num_examples": 3,
                "num_explored_concrete": 849,
                "num_explored_lambda": 110,
                "num_explored_none": 161,
                "num_inputs": 2,
                "num_kept_concrete": 30,
                "num_kept_lambda": 26,
                "num_values_explored": 1120,
                "num_values_kept": 56,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: If(Equal(u1, u2), 1, 0)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25505176186561584,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.73214285714286,
                "explored_percent_lambda": 9.642857142857142,
                "explored_percent_none": 15.625,
                "kept_percent_concrete": 55.714285714285715,
                "kept_percent_lambda": 44.285714285714285,
                "num_examples": 3,
                "num_explored_concrete": 837,
                "num_explored_lambda": 108,
                "num_explored_none": 175,
                "num_inputs": 2,
                "num_kept_concrete": 39,
                "num_kept_lambda": 31,
                "num_values_explored": 1120,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Min(u1, u2)), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2009650506079197,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 70.0,
                "kept_percent_lambda": 30.0,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 98,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20773319993168116,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.97619047619048,
                "explored_percent_lambda": 10.357142857142858,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 71.83098591549296,
                "kept_percent_lambda": 28.169014084507044,
                "num_examples": 5,
                "num_explored_concrete": 613,
                "num_explored_lambda": 87,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 51,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith((lambda u1, u2: Multiply(u1, u2)), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2555879568681121,
            "num_unique_values": 76,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.10714285714286,
                "explored_percent_lambda": 10.0,
                "explored_percent_none": 15.892857142857142,
                "kept_percent_concrete": 53.03030303030303,
                "kept_percent_lambda": 46.96969696969697,
                "num_examples": 3,
                "num_explored_concrete": 830,
                "num_explored_lambda": 112,
                "num_explored_none": 178,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 31,
                "num_values_explored": 1120,
                "num_values_kept": 66,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Multiply(u1, Add(1, u2))), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20735353510826826,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.9047619047619,
                "explored_percent_lambda": 10.714285714285714,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 71.42857142857143,
                "kept_percent_lambda": 28.571428571428573,
                "num_examples": 5,
                "num_explored_concrete": 604,
                "num_explored_lambda": 90,
                "num_explored_none": 146,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1((lambda u1, u2: Min(u1, u2)), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2001514472067356,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23809523809524,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 18.095238095238095,
                "kept_percent_concrete": 70.0,
                "kept_percent_lambda": 30.0,
                "num_examples": 3,
                "num_explored_concrete": 590,
                "num_explored_lambda": 98,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1((lambda u1, u2: Max(u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20814491715282202,
            "num_unique_values": 83,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.02380952380952,
                "explored_percent_lambda": 10.952380952380953,
                "explored_percent_none": 17.023809523809526,
                "kept_percent_concrete": 72.97297297297297,
                "kept_percent_lambda": 27.027027027027028,
                "num_examples": 5,
                "num_explored_concrete": 605,
                "num_explored_lambda": 92,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 54,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 74,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))'\n)",
            "task_solution": "Maximum(Scanl1((lambda u1, u2: Add(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2018888434395194,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.35714285714286,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.976190476190474,
                "kept_percent_concrete": 70.0,
                "kept_percent_lambda": 30.0,
                "num_examples": 3,
                "num_explored_concrete": 591,
                "num_explored_lambda": 98,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20211030915379524,
            "num_unique_values": 78,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 11.904761904761905,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 68.1159420289855,
                "kept_percent_lambda": 31.884057971014492,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 100,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 47,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 69,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.208619792945683,
            "num_unique_values": 91,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.785714285714286,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 72.8395061728395,
                "kept_percent_lambda": 27.160493827160494,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 99,
                "num_explored_none": 148,
                "num_inputs": 2,
                "num_kept_concrete": 59,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 81,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(Add(u1, u2), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20144086703658104,
            "num_unique_values": 82,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 71.23287671232876,
                "kept_percent_lambda": 28.767123287671232,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 98,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 52,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 73,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(IntDivide(u1, 2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20156957488507032,
            "num_unique_values": 86,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.07142857142857,
                "explored_percent_lambda": 11.547619047619047,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 71.05263157894737,
                "kept_percent_lambda": 28.94736842105263,
                "num_examples": 3,
                "num_explored_concrete": 597,
                "num_explored_lambda": 97,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 54,
                "num_kept_lambda": 22,
                "num_values_explored": 840,
                "num_values_kept": 76,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20642173197120428,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.45238095238095,
                "explored_percent_lambda": 9.880952380952381,
                "explored_percent_none": 16.666666666666668,
                "kept_percent_concrete": 71.83098591549296,
                "kept_percent_lambda": 28.169014084507044,
                "num_examples": 5,
                "num_explored_concrete": 617,
                "num_explored_lambda": 83,
                "num_explored_none": 140,
                "num_inputs": 1,
                "num_kept_concrete": 51,
                "num_kept_lambda": 20,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))'\n)",
            "task_solution": "Last(Scanl1((lambda u1, u2: Multiply(u1, u2)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19969463162124157,
            "num_unique_values": 79,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 11.904761904761905,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 70.0,
                "kept_percent_lambda": 30.0,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 100,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 49,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 70,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Min(u1, u2)), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2071352656930685,
            "num_unique_values": 75,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.83333333333333,
                "explored_percent_lambda": 12.380952380952381,
                "explored_percent_none": 16.785714285714285,
                "kept_percent_concrete": 68.18181818181819,
                "kept_percent_lambda": 31.818181818181817,
                "num_examples": 3,
                "num_explored_concrete": 595,
                "num_explored_lambda": 104,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 45,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 66,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19953860435634851,
            "num_unique_values": 77,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 69.11764705882354,
                "kept_percent_lambda": 30.88235294117647,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 98,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 47,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 68,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1((lambda u1, u2: Access(u1, x)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Access(u1, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20678887888789177,
            "num_unique_values": 73,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.47619047619048,
                "explored_percent_lambda": 12.142857142857142,
                "explored_percent_none": 17.38095238095238,
                "kept_percent_concrete": 67.1875,
                "kept_percent_lambda": 32.8125,
                "num_examples": 3,
                "num_explored_concrete": 592,
                "num_explored_lambda": 102,
                "num_explored_none": 146,
                "num_inputs": 1,
                "num_kept_concrete": 43,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Max(Add(u1, 1), u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2184783648699522,
            "num_unique_values": 68,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.27532777115614,
                "explored_percent_lambda": 13.825983313468415,
                "explored_percent_none": 14.898688915375446,
                "kept_percent_concrete": 66.10169491525424,
                "kept_percent_lambda": 33.898305084745765,
                "num_examples": 3,
                "num_explored_concrete": 598,
                "num_explored_lambda": 116,
                "num_explored_none": 125,
                "num_inputs": 1,
                "num_kept_concrete": 39,
                "num_kept_lambda": 20,
                "num_values_explored": 839,
                "num_values_kept": 59,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)'\n)",
            "task_solution": "Scanl1((lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2068934077396989,
            "num_unique_values": 69,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.19047619047619,
                "explored_percent_lambda": 8.214285714285714,
                "explored_percent_none": 15.595238095238095,
                "kept_percent_concrete": 61.016949152542374,
                "kept_percent_lambda": 38.983050847457626,
                "num_examples": 5,
                "num_explored_concrete": 640,
                "num_explored_lambda": 69,
                "num_explored_none": 131,
                "num_inputs": 2,
                "num_kept_concrete": 36,
                "num_kept_lambda": 23,
                "num_values_explored": 840,
                "num_values_kept": 59,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))'\n)",
            "task_solution": "Count((lambda u1: Greater(u1, 0)), ZipWith((lambda u1, u2: Subtract(u1, u2)), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20714508555829525,
            "num_unique_values": 72,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.30952380952381,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 15.238095238095237,
                "kept_percent_concrete": 59.67741935483871,
                "kept_percent_lambda": 40.32258064516129,
                "num_examples": 5,
                "num_explored_concrete": 641,
                "num_explored_lambda": 71,
                "num_explored_none": 128,
                "num_inputs": 2,
                "num_kept_concrete": 37,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 62,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))'\n)",
            "task_solution": "Sum(ZipWith((lambda u1, u2: Multiply(u1, u2)), s, Scanl1((lambda u1, u2: Add(u1, u2)), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.25322204921394587,
            "num_unique_values": 74,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.53571428571429,
                "explored_percent_lambda": 11.607142857142858,
                "explored_percent_none": 17.857142857142858,
                "kept_percent_concrete": 67.6923076923077,
                "kept_percent_lambda": 32.30769230769231,
                "num_examples": 3,
                "num_explored_concrete": 790,
                "num_explored_lambda": 130,
                "num_explored_none": 200,
                "num_inputs": 1,
                "num_kept_concrete": 44,
                "num_kept_lambda": 21,
                "num_values_explored": 1120,
                "num_values_kept": 65,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, 1)), Map((lambda u1: 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20120681915432215,
            "num_unique_values": 80,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.5952380952381,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.738095238095237,
                "kept_percent_concrete": 70.4225352112676,
                "kept_percent_lambda": 29.577464788732396,
                "num_examples": 3,
                "num_explored_concrete": 593,
                "num_explored_lambda": 98,
                "num_explored_none": 149,
                "num_inputs": 1,
                "num_kept_concrete": 50,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 71,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))'\n)",
            "task_solution": "Filter((lambda u1: IsOdd(u1)), ZipWith((lambda u1, u2: Multiply(u2, u1)), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.20071468316018581,
            "num_unique_values": 81,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71428571428571,
                "explored_percent_lambda": 11.666666666666666,
                "explored_percent_none": 17.61904761904762,
                "kept_percent_concrete": 70.83333333333333,
                "kept_percent_lambda": 29.166666666666668,
                "num_examples": 3,
                "num_explored_concrete": 594,
                "num_explored_lambda": 98,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 51,
                "num_kept_lambda": 21,
                "num_values_explored": 840,
                "num_values_kept": 72,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Multiply(u1, u2)), Filter((lambda u1: IsOdd(u1)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19985633995383978,
            "num_unique_values": 74,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.28571428571429,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 17.261904761904763,
                "kept_percent_concrete": 60.9375,
                "kept_percent_lambda": 39.0625,
                "num_examples": 3,
                "num_explored_concrete": 624,
                "num_explored_lambda": 71,
                "num_explored_none": 145,
                "num_inputs": 2,
                "num_kept_concrete": 39,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 64,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))'\n)",
            "task_solution": "Scanl1((lambda u1, u2: Add(u1, u2)), ZipWith((lambda u1, u2: Add(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.19379159342497587,
            "num_unique_values": 67,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.0,
                "explored_percent_lambda": 7.619047619047619,
                "explored_percent_none": 12.380952380952381,
                "kept_percent_concrete": 66.07142857142857,
                "kept_percent_lambda": 33.92857142857143,
                "num_examples": 3,
                "num_explored_concrete": 672,
                "num_explored_lambda": 64,
                "num_explored_none": 104,
                "num_inputs": 3,
                "num_kept_concrete": 37,
                "num_kept_lambda": 19,
                "num_values_explored": 840,
                "num_values_kept": 56,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))'\n)",
            "task_solution": "ZipWith((lambda u1, u2: Add(u1, u2)), x, Map((lambda u1: Access(u1, y)), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.2662738813087344,
            "num_unique_values": 70,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.28571428571429,
                "explored_percent_lambda": 8.452380952380953,
                "explored_percent_none": 17.261904761904763,
                "kept_percent_concrete": 58.333333333333336,
                "kept_percent_lambda": 41.666666666666664,
                "num_examples": 3,
                "num_explored_concrete": 624,
                "num_explored_lambda": 71,
                "num_explored_none": 145,
                "num_inputs": 2,
                "num_kept_concrete": 35,
                "num_kept_lambda": 25,
                "num_values_explored": 840,
                "num_values_kept": 60,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Filter((lambda u1: Greater(u1, -1)), ZipWith((lambda u1, u2: Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.0
}